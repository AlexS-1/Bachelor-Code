[
    {
        "code_lines": {
            "130": "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL",
            "131": "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
            "132": "    save_to_json(commits_data, \"Data/commits_data.json\")",
            "133": "    print(\"Commit data has been saved to commits_data.json\")"
        },
        "comment_lines": {
            "130": {
                "comment": "# Example repository URL",
                "type": [
                    "normal",
                    "inline",
                    "commented-out"
                ],
                "edit": "modified"
            }
        },
        "metadata": {
            "file": "build/XESConversion.py",
            "commit": "1277d634d38557e2d5981481fd55f1753da2314b",
            "creation_timestamp": "2024-11-16T19:39:45+01:00",
            "code_last_modified": "2024-11-16T20:51:56+01:00",
            "comment_last_modified": "2024-11-17T16:33:10+01:00"
        }
    },
    {
        "code_lines": {
            "12": "    # Analysis range",
            "13": "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)",
            "14": "    dt2 = datetime(2022, 10, 8, 17, 59, 0)",
            "15": ""
        },
        "comment_lines": {
            "12": {
                "comment": "# Analysis range",
                "type": [
                    "block"
                ]
            },
            "13": {
                "comment": "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                "type": [
                    "block",
                    "commented-out"
                ],
                "edit": "modified"
            }
        },
        "metadata": {
            "file": "build/XESConversion.py",
            "commit": "3bffee0480ea6e1007c2b96cafa58305afd4a9f2",
            "creation_timestamp": "2024-11-16T19:39:45+01:00",
            "code_last_modified": "2024-11-18T10:51:21+01:00",
            "comment_last_modified": "2024-11-18T15:19:19+01:00"
        }
    },
    {
        "code_lines": {
            "12": "    # Analysis range",
            "13": "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)",
            "14": "    dt2 = datetime(2010, 10, 8, 17, 59, 0)",
            "15": ""
        },
        "comment_lines": {
            "12": {
                "comment": "# Analysis range",
                "type": [
                    "block"
                ]
            },
            "13": {
                "comment": "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                "type": [
                    "block",
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "build/XESConversion.py",
            "commit": "e226da877d3d9f98cab4990bb1fbaa02e6adbb7b",
            "creation_timestamp": "2024-11-16T19:39:45+01:00",
            "code_last_modified": "2024-11-18T10:51:21+01:00",
            "comment_last_modified": "2024-11-18T15:19:19+01:00"
        }
    },
    {
        "code_lines": {
            "77": "    # Determine basic keywords based on the commit message",
            "78": "    keywords = []",
            "79": "    if \"performance\" in commit_message.lower():",
            "80": "        keywords.append(\"performance\")",
            "81": "    if \"security\" in commit_message.lower():",
            "82": "        keywords.append(\"security\")",
            "83": "    if modified_file.added_lines > modified_file.deleted_lines:",
            "84": "        keywords.append(\"expansion\")",
            "85": "    else:",
            "86": "        keywords.append(\"optimization\")",
            "87": "    return keywords",
            "88": "",
            "89": "def extract_activity(commit_message):"
        },
        "comment_lines": {
            "77": {
                "comment": "# Determine basic keywords based on the commit message",
                "type": [
                    "normal"
                ],
                "edit": "modified"
            }
        },
        "metadata": {
            "file": "build/XESConversion.py",
            "commit": "bdfb1cc02e0a08cad8109e142080e326cd09f189",
            "creation_timestamp": "2024-11-16T19:39:45+01:00",
            "code_last_modified": "2024-11-19T17:09:41+01:00",
            "comment_last_modified": "2024-11-19T17:28:53+01:00"
        }
    },
    {
        "code_lines": {
            "77": "    # Determine basic keywords based on the commit message",
            "78": "    keywords = []",
            "79": "    if \"performance\" in commit_message.lower():",
            "80": "        keywords.append(\"performance\")",
            "81": "    if \"security\" in commit_message.lower():",
            "82": "        keywords.append(\"security\")",
            "83": "    if modified_file.added_lines > modified_file.deleted_lines:",
            "84": "        keywords.append(\"expansion\")",
            "85": "    else:",
            "86": "        keywords.append(\"optimization\")",
            "87": "    return keywords",
            "88": "",
            "89": "def extract_activity(commit_message):"
        },
        "comment_lines": {
            "77": {
                "comment": "# Determine basic keywords based on the commit message",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "build/XESConversion.py",
            "commit": "2bfdaaeca6f4bc1b69403beb494198e8364ba925",
            "creation_timestamp": "2024-11-16T19:39:45+01:00",
            "code_last_modified": "2024-11-19T17:09:41+01:00",
            "comment_last_modified": "2024-11-19T17:28:53+01:00"
        }
    },
    {
        "code_lines": {
            "78": "    # Determine basic keywords based on the commit message",
            "79": "    keywords = []",
            "80": "    if \"performance\" in commit_message.lower():",
            "81": "        keywords.append(\"performance\")",
            "82": "    if \"security\" in commit_message.lower():",
            "83": "        keywords.append(\"security\")",
            "84": "    if modified_file.added_lines > modified_file.deleted_lines:",
            "85": "        keywords.append(\"expansion\")",
            "86": "    else:",
            "87": "        keywords.append(\"optimization\")",
            "88": "    return keywords",
            "89": "",
            "90": "def extract_activity(commit_message):"
        },
        "comment_lines": {
            "78": {
                "comment": "# Determine basic keywords based on the commit message",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "build/XESConversion.py",
            "commit": "96c6276dc1ea0aad50b96cf844406a8641fa1d37",
            "creation_timestamp": "2024-11-16T19:39:45+01:00",
            "code_last_modified": "2024-11-19T17:09:41+01:00",
            "comment_last_modified": "2024-11-19T17:28:53+01:00"
        }
    },
    {
        "code_lines": {
            "15": "    # Convert repo URL to path by cloning repo",
            "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\"",
            "17": "",
            "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "20": "    clone_path = os.path.join(temp_dir, repo_name)",
            "21": "",
            "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "23": ""
        },
        "comment_lines": {
            "15": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ],
                "edit": "added"
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "5c23ad83451ad8bade1900f2f5ca41afdd3b4c71",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "24": "    # # Paths",
            "25": "    repo_path = clone_path",
            "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "27": "    "
        },
        "comment_lines": {
            "24": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ],
                "edit": "added"
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "5c23ad83451ad8bade1900f2f5ca41afdd3b4c71",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "15": "    # Convert repo URL to path by cloning repo",
            "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\"",
            "17": "",
            "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "20": "    clone_path = os.path.join(temp_dir, repo_name)",
            "21": "",
            "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "23": ""
        },
        "comment_lines": {
            "15": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "b10794953bf2b307859821a8354d3429d710e31b",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "24": "    # # Paths",
            "25": "    repo_path = clone_path",
            "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "27": "    "
        },
        "comment_lines": {
            "24": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "b10794953bf2b307859821a8354d3429d710e31b",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "15": "    # Convert repo URL to path by cloning repo",
            "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\"",
            "17": "",
            "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "20": "    clone_path = os.path.join(temp_dir, repo_name)",
            "21": "",
            "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "23": ""
        },
        "comment_lines": {
            "15": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "e20d03792161ba1b90725e6912b40275f06bf2da",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "24": "    # # Paths",
            "25": "    repo_path = clone_path",
            "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "27": "    "
        },
        "comment_lines": {
            "24": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "e20d03792161ba1b90725e6912b40275f06bf2da",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "15": "    # Convert repo URL to path by cloning repo",
            "16": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
            "17": "",
            "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "20": "    clone_path = os.path.join(temp_dir, repo_name)",
            "21": "",
            "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "23": ""
        },
        "comment_lines": {
            "15": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "6f599e9f229a41cfe89bc628bb60c7565944a0ad",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "24": "    # # Paths",
            "25": "    repo_path = clone_path",
            "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "27": "    "
        },
        "comment_lines": {
            "24": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "6f599e9f229a41cfe89bc628bb60c7565944a0ad",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "15": "    # Convert repo URL to path by cloning repo",
            "16": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
            "17": "",
            "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "20": "    clone_path = os.path.join(temp_dir, repo_name)",
            "21": "",
            "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "23": ""
        },
        "comment_lines": {
            "15": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "ca64e3c56b1e147cafb1af0d143d4f60f04cfbe2",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "24": "    # # Paths",
            "25": "    repo_path = clone_path",
            "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "27": "    "
        },
        "comment_lines": {
            "24": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "ca64e3c56b1e147cafb1af0d143d4f60f04cfbe2",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "16": "    # Convert repo URL to path by cloning repo",
            "17": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
            "18": "",
            "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "21": "    clone_path = os.path.join(temp_dir, repo_name)",
            "22": "",
            "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "24": ""
        },
        "comment_lines": {
            "16": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "39a855de8da8bde2a00bb031978e8a5bda2178ac",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "25": "    # # Paths",
            "26": "    repo_path = clone_path",
            "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "28": "    "
        },
        "comment_lines": {
            "25": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "39a855de8da8bde2a00bb031978e8a5bda2178ac",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "16": "    # Convert repo URL to path by cloning repo",
            "17": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
            "18": "",
            "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
            "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
            "21": "    clone_path = os.path.join(temp_dir, repo_name)",
            "22": "",
            "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
            "24": ""
        },
        "comment_lines": {
            "16": {
                "comment": "# Convert repo URL to path by cloning repo",
                "type": [
                    "normal"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "b47cc911aa41b4d19ef8edb2623063f5a615a0b1",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    },
    {
        "code_lines": {
            "25": "    # # Paths",
            "26": "    repo_path = clone_path",
            "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
            "28": "    "
        },
        "comment_lines": {
            "25": {
                "comment": "# # Paths",
                "type": [
                    "commented-out"
                ]
            }
        },
        "metadata": {
            "file": "main.py",
            "commit": "b47cc911aa41b4d19ef8edb2623063f5a615a0b1",
            "creation_timestamp": "2024-11-22T16:53:22+01:00",
            "code_last_modified": "2024-11-22T16:53:22+01:00",
            "comment_last_modified": "2024-11-23T21:32:59+01:00"
        }
    }
]