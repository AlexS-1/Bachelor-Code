[
    {
        "file": "build/analysis.py",
        "line": "19",
        "content": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-24 18:37:49+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "84",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "89",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "19",
        "content": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "84",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "89",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "98",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "99",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "19",
        "content": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "84",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "89",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "98",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "99",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "90",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "95",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "102",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "103",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "6",
        "content": "    \"\"\" some test docstring \"\"\"",
        "comment": "\"\"\" some test docstring \"\"\"",
        "type": [
            "docstring"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "90",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "95",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "99",
        "content": "                # TODO investigate why line is null",
        "comment": "# TODO investigate why line is null",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "102",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "103",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "136",
        "content": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
        "comment": "# Cheeky inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "168",
        "content": "        # Tokenize the input code",
        "comment": "# Tokenize the input code",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "175",
        "content": "                # Check if inline",
        "comment": "# Check if inline",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "178",
        "content": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
        "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "187",
        "content": "                # Check for docstring: string token at module, function, or class start",
        "comment": "# Check for docstring: string token at module, function, or class start",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "6",
        "content": "    \"\"\" some test docstring \"\"\"",
        "comment": "\"\"\" some test docstring \"\"\"",
        "type": [
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "90",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "95",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "99",
        "content": "                # TODO investigate why line is null",
        "comment": "# TODO investigate why line is null",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "102",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "103",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "138",
        "content": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
        "comment": "# Cheeky inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-25 11:26:40+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "139",
        "content": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
        "comment": "# Cheeky 2 inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-28 10:16:59+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "7",
        "content": "    \"\"\" some test docstring \"\"\"",
        "comment": "\"\"\" some test docstring \"\"\"",
        "type": [
            "docstring"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "9",
        "content": "        for commit in commits: #inline-test-comment",
        "comment": "#inline-test-comment",
        "type": [
            "commented-out",
            "inline"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "23",
        "content": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "88",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "91",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "93",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "96",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "100",
        "content": "                # TODO investigate why line is null",
        "comment": "# TODO investigate why line is null",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "103",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "104",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "139",
        "content": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
        "comment": "# Cheeky inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-11-28 10:16:59+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "140",
        "content": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
        "comment": "# Cheeky 2 inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "171",
        "content": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
        "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "174",
        "content": "        # Check for block comments (multi-line consecutive)",
        "comment": "# Check for block comments (multi-line consecutive)",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "177",
        "content": "        # Check if text has docstring format with \"\"\"\" somewhere",
        "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
        "type": [
            "docstring"
        ],
        "comment_time": "2024-12-05 00:04:47+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "87",
        "content": "        # Store last modified timestamps for each line",
        "comment": "# Store last modified timestamps for each line",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "90",
        "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "92",
        "content": "            # Track modified lines",
        "comment": "# Track modified lines",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "95",
        "content": "            # Compare with comments",
        "comment": "# Compare with comments",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "99",
        "content": "                # TODO investigate why line is null",
        "comment": "# TODO investigate why line is null",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "102",
        "content": "                        # Where there are comment changes and no source code changes in block",
        "comment": "# Where there are comment changes and no source code changes in block",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "103",
        "content": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
        "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-25 02:54:47+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "138",
        "content": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
        "comment": "# Cheeky inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-25 11:26:40+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "139",
        "content": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
        "comment": "# Cheeky 2 inline comment",
        "type": [
            "block",
            "inline"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-11-28 10:16:59+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "170",
        "content": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
        "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "173",
        "content": "        # Check for block comments (multi-line consecutive)",
        "comment": "# Check for block comments (multi-line consecutive)",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "build/analysis.py",
        "line": "176",
        "content": "        # Check if text has docstring format with \"\"\"\" somewhere",
        "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
        "type": [
            "docstring"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 23:01:11+01:00"
    },
    {
        "file": "main.py",
        "line": "15",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-24 18:37:49+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "24",
        "content": "    # # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-24 18:37:49+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "28",
        "content": "    # # Setting different timeperiod",
        "comment": "# # Setting different timeperiod",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-24 18:37:49+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "56",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-24 18:37:49+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "15",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "24",
        "content": "    # # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "28",
        "content": "    # # Setting different timeperiod",
        "comment": "# # Setting different timeperiod",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "56",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 02:54:47+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "15",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "24",
        "content": "    # # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "28",
        "content": "    # # Setting different timeperiod",
        "comment": "# # Setting different timeperiod",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "56",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-25 11:26:40+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "15",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "24",
        "content": "    # # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "28",
        "content": "    # # Setting different timeperiod",
        "comment": "# # Setting different timeperiod",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "56",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-11-28 10:16:59+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "16",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-03 15:33:45+01:00",
        "last_code_change_time": "2024-11-25 11:26:40+01:00"
    },
    {
        "file": "main.py",
        "line": "51",
        "content": "            # Filter comments by time",
        "comment": "# Filter comments by time",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-03 15:33:45+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "main.py",
        "line": "57",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-03 15:33:45+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "16",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-03 15:46:08+01:00",
        "last_code_change_time": "2024-11-25 11:26:40+01:00"
    },
    {
        "file": "main.py",
        "line": "51",
        "content": "            # Filter comments by time",
        "comment": "# Filter comments by time",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-03 15:46:08+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "main.py",
        "line": "57",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-03 15:46:08+01:00",
        "last_code_change_time": "2024-11-23 21:32:59+01:00"
    },
    {
        "file": "main.py",
        "line": "64",
        "content": "    # analyse_diff_comments(data)",
        "comment": "# analyse_diff_comments(data)",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 00:55:39+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "main.py",
        "line": "16",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "25",
        "content": "    # # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "29",
        "content": "    # # Setting different timeperiod",
        "comment": "# # Setting different timeperiod",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "45",
        "content": "            # Parse output as JSON",
        "comment": "# Parse output as JSON",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "51",
        "content": "            # Filter comments by time",
        "comment": "# Filter comments by time",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "59",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "64",
        "content": "    # analyse_diff_comments(data)",
        "comment": "# analyse_diff_comments(data)",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "main.py",
        "line": "16",
        "content": "    # Convert repo URL to path by cloning repo",
        "comment": "# Convert repo URL to path by cloning repo",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "25",
        "content": "    # # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "29",
        "content": "    # # Setting different timeperiod",
        "comment": "# # Setting different timeperiod",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "45",
        "content": "            # Parse output as JSON",
        "comment": "# Parse output as JSON",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "51",
        "content": "            # Filter comments by time",
        "comment": "# Filter comments by time",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "main.py",
        "line": "59",
        "content": "    # Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-05 23:05:58+01:00",
        "last_code_change_time": "2024-12-04 00:55:39+01:00"
    },
    {
        "file": "build/comment_lister.py",
        "line": "32",
        "content": "                    # print(\"Have to split comments:\", split_comment_lines)",
        "comment": "# print(\"Have to split comments:\", split_comment_lines)",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/comment_lister.py",
        "line": "37",
        "content": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
        "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 00:35:22+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/comment_lister.py",
        "line": "34",
        "content": "                    # print(\"Have to split comments:\", split_comment_lines)",
        "comment": "# print(\"Have to split comments:\", split_comment_lines)",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "build/comment_lister.py",
        "line": "39",
        "content": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
        "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-11-24 18:37:49+01:00"
    },
    {
        "file": "test.py",
        "line": "14",
        "content": "    \"\"\"",
        "comment": "\"\"\"",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 14:36:49+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "16",
        "content": "",
        "comment": "",
        "type": [
            "block",
            "docstring",
            "commented-out"
        ],
        "comment_time": "2024-12-04 14:36:49+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "17",
        "content": "    :param repo_path: Path to the local Git repository.",
        "comment": "    :param repo_path: Path to the local Git repository.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 14:36:49+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "18",
        "content": "    :param tag_name: The name of the tag to fetch.",
        "comment": "    :param tag_name: The name of the tag to fetch.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 14:36:49+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "19",
        "content": "    :return: A dictionary containing file paths and their contents at the given commit.",
        "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 14:36:49+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "21",
        "content": "    \"\"\"",
        "comment": "    \"\"\"",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 14:36:49+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "14",
        "content": "    \"\"\"",
        "comment": "\"\"\"",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "15",
        "content": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
        "comment": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "16",
        "content": "",
        "comment": "",
        "type": [
            "block",
            "docstring",
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "17",
        "content": "    :param repo_path: Path to the local Git repository.",
        "comment": "    :param repo_path: Path to the local Git repository.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "18",
        "content": "    :param tag_name: The name of the tag to fetch.",
        "comment": "    :param tag_name: The name of the tag to fetch.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "19",
        "content": "    :return: A dictionary containing file paths and their contents at the given commit.",
        "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "20",
        "content": "    END DOCSTRING",
        "comment": "    END DOCSTRING",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "21",
        "content": "    \"\"\"",
        "comment": "    \"\"\"",
        "type": [
            "block",
            "docstring"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 00:35:22+01:00"
    },
    {
        "file": "test.py",
        "line": "27",
        "content": "            # NORMAL Save the file path and its source code",
        "comment": "# NORMAL Save the file path and its source code",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "29",
        "content": "                # BLOCK: Multiple lines",
        "comment": "# BLOCK: Multiple lines",
        "type": [
            "block"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "30",
        "content": "                # of comment",
        "comment": "# of comment",
        "type": [
            "block"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "33",
        "content": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data",
        "comment": "#INLINE: identify each block of data",
        "type": [
            "normal",
            "inline"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "36",
        "content": "                    # print(commit) #COMMENTED-OUT",
        "comment": "# print(commit) #COMMENTED-OUT",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "50",
        "content": "# # Paths",
        "comment": "# # Paths",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "64",
        "content": "        # Parse output as JSON",
        "comment": "# Parse output as JSON",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "70",
        "content": "        # Filter comments by time",
        "comment": "# Filter comments by time",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "78",
        "content": "# Save filtered comments on your system",
        "comment": "# Save filtered comments on your system",
        "type": [
            "normal"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    },
    {
        "file": "test.py",
        "line": "83",
        "content": "# analyse_diff_comments(data)",
        "comment": "# analyse_diff_comments(data)",
        "type": [
            "commented-out"
        ],
        "comment_time": "2024-12-04 23:01:11+01:00",
        "last_code_change_time": "2024-12-04 14:36:49+01:00"
    }
]