[
    {
        "file": "buffer.js",
        "line": 30,
        "comment": "    \"homepage\": \"https://github.com/substack/example\",",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 31,
        "comment": "    \"keywords\": [",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 33,
        "comment": "      \"function\",",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 34,
        "comment": "      \"waiting\",",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 36,
        "comment": "    ],",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 37,
        "comment": "    \"author\": {",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 40,
        "comment": "      \"url\": \"http://substack.net\"",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 41,
        "comment": "    },",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 42,
        "comment": "    \"license\": \"MIT\",",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 46,
        "comment": "  }",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 47,
        "comment": "",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 48,
        "comment": "  var c = spawn(node, [example], { customFds: [-1,-1,-1] })",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 52,
        "comment": "    respond()",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 53,
        "comment": "  })",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 55,
        "comment": "  var actual = ''",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 56,
        "comment": "  c.stderr.on('data', function (d) {",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 57,
        "comment": "    actual += d",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 59,
        "comment": "",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 60,
        "comment": "  function respond () {",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 61,
        "comment": "    if (output.match(/description: $/)) {",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 62,
        "comment": "      c.stdin.write('testing description\\n')",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 64,
        "comment": "    }",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 65,
        "comment": "    if (output.match(/entry point: \\(index\\.js\\) $/)) {",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 66,
        "comment": "      c.stdin.write('test-entry.js\\n')",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 67,
        "comment": "      return",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 68,
        "comment": "    }",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 71,
        "comment": "      // \"read\" module is weird on node >= 0.10 when not a TTY",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 72,
        "comment": "      // requires explicit ending for reasons.",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 74,
        "comment": "      c.stdin.end()",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 76,
        "comment": "    }",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 77,
        "comment": "  }",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 78,
        "comment": "",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 79,
        "comment": "  c.on('close', function () {",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 80,
        "comment": "    actual = JSON.parse(actual)",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 81,
        "comment": "    t.deepEqual(actual, expect)",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 82,
        "comment": "    t.end()",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 83,
        "comment": "  })",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "buffer.js",
        "line": 84,
        "comment": "})",
        "comment_time": "2015-04-10 14:22:47-07:00",
        "last_code_change_time": "2015-03-05 19:44:50+01:00"
    },
    {
        "file": "child_process.js",
        "line": 65,
        "comment": "function normalizeExecArgs(command /*, options, callback */) {",
        "comment_time": "2015-07-12 01:16:31+02:00",
        "last_code_change_time": "2015-05-28 09:38:29-05:00"
    },
    {
        "file": "child_process.js",
        "line": 101,
        "comment": "exports.exec = function(command /*, options, callback */) {",
        "comment_time": "2015-07-12 01:16:31+02:00",
        "last_code_change_time": "2015-05-28 09:38:29-05:00"
    },
    {
        "file": "child_process.js",
        "line": 110,
        "comment": "exports.execFile = function(file /* args, options, callback */) {",
        "comment_time": "2015-07-12 01:16:31+02:00",
        "last_code_change_time": "2015-05-28 09:38:29-05:00"
    },
    {
        "file": "child_process.js",
        "line": 446,
        "comment": "function execFileSync(/*command, options*/) {",
        "comment_time": "2015-07-12 01:16:31+02:00",
        "last_code_change_time": "2015-05-28 09:38:29-05:00"
    },
    {
        "file": "child_process.js",
        "line": 465,
        "comment": "function execSync(/*comand, options*/) {",
        "comment_time": "2015-07-12 01:16:31+02:00",
        "last_code_change_time": "2015-05-28 09:38:29-05:00"
    },
    {
        "file": "util.js",
        "line": 31,
        "comment": "        // falls through",
        "comment_time": "2015-05-09 12:10:02+09:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "common.js",
        "line": 39,
        "comment": "      // Jailed network interfaces are a bit special - since we need to jump",
        "comment_time": "2015-03-19 09:11:50+11:00",
        "last_code_change_time": "2015-02-10 01:24:02+09:00"
    },
    {
        "file": "common.js",
        "line": 41,
        "comment": "      // user will provide this instead.",
        "comment_time": "2015-03-19 09:11:50+11:00",
        "last_code_change_time": "2015-02-10 01:24:02+09:00"
    },
    {
        "file": "common.js",
        "line": 187,
        "comment": "    return 6 * ms;  // ARMv6",
        "comment_time": "2015-04-09 15:10:34+02:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "common.js",
        "line": 189,
        "comment": "  return 2 * ms;  // ARMv7 and up.",
        "comment_time": "2015-04-09 15:10:34+02:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "common.js",
        "line": 187,
        "comment": "    return 7 * ms;  // ARMv6",
        "comment_time": "2015-04-29 19:28:11+10:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "index.js",
        "line": 26,
        "comment": "/**package",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 27,
        "comment": "{ \"name\": \"jju\",",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 28,
        "comment": "  \"version\": \"0.0.0\",",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 29,
        "comment": "  \"dependencies\": {\"js-yaml\": \"*\"},",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 30,
        "comment": "  \"scripts\": {\"postinstall\": \"js-yaml package.yaml > package.json ; npm install\"}",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 31,
        "comment": "}",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 32,
        "comment": "**/",
        "comment_time": "2015-03-15 21:41:52-04:00",
        "last_code_change_time": "2015-02-06 18:38:36+01:00"
    },
    {
        "file": "index.js",
        "line": 8,
        "comment": "\t// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-03 17:09:21-07:00"
    },
    {
        "file": "index.js",
        "line": 14,
        "comment": "\t// UNC paths are always absolute",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-10 14:22:47-07:00"
    },
    {
        "file": "index.js",
        "line": 75,
        "comment": "  // necessary for round-tripping gists",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-10 14:22:47-07:00"
    },
    {
        "file": "index.js",
        "line": 100,
        "comment": "    href: 'git+ssh://' + matched[1] + '@' + matched[2] +",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-10 14:22:47-07:00"
    },
    {
        "file": "index.js",
        "line": 15,
        "comment": "    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-10 14:22:47-07:00"
    },
    {
        "file": "index.js",
        "line": 21,
        "comment": "// is-my-json-valid does not provide meaningful error messages for external schemas",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-10 14:22:47-07:00"
    },
    {
        "file": "index.js",
        "line": 22,
        "comment": "// this is a workaround",
        "comment_time": "2015-04-17 13:26:30-07:00",
        "last_code_change_time": "2015-04-10 14:22:47-07:00"
    },
    {
        "file": "browser.js",
        "line": 13,
        "comment": "// any single thing other than /",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 14,
        "comment": "// don't need to escape / when using new RegExp()",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 17,
        "comment": "// * => any number of characters",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 20,
        "comment": "// ** when dots are allowed.  Anything goes, except .. and .",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 21,
        "comment": "// not (^ or / followed by one or two dots followed by $ or /),",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 22,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 25,
        "comment": "// not a ^ or / followed by a dot,",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 26,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 29,
        "comment": "// characters that need to be escaped in RegExp.",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 274,
        "comment": "  // ? => one single character",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 283,
        "comment": "  var patternStart = pattern.charAt(0) === '.' ? '' // anything",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 284,
        "comment": "  // not (start or / followed by . or .. followed by / or end)",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 404,
        "comment": "          case '@': break // the default anyway",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 13,
        "comment": "// any single thing other than /",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 14,
        "comment": "// don't need to escape / when using new RegExp()",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 17,
        "comment": "// * => any number of characters",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 20,
        "comment": "// ** when dots are allowed.  Anything goes, except .. and .",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 21,
        "comment": "// not (^ or / followed by one or two dots followed by $ or /),",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 22,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 25,
        "comment": "// not a ^ or / followed by a dot,",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 26,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 29,
        "comment": "// characters that need to be escaped in RegExp.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "browser.js",
        "line": 274,
        "comment": "  // ? => one single character",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 283,
        "comment": "  var patternStart = pattern.charAt(0) === '.' ? '' // anything",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 284,
        "comment": "  // not (start or / followed by . or .. followed by / or end)",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "browser.js",
        "line": 404,
        "comment": "          case '@': break // the default anyway",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "test-url.js",
        "line": 1565,
        "comment": "// https://github.com/nodejs/io.js/pull/1036",
        "comment_time": "2015-05-18 08:13:09+02:00",
        "last_code_change_time": "2015-03-04 22:04:14+01:00"
    },
    {
        "file": "glob.js",
        "line": 638,
        "comment": "  // If it doesn't exist, then just mark the lack of results",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 639,
        "comment": "  if (!exists)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 640,
        "comment": "    return cb()",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 641,
        "comment": "",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 642,
        "comment": "  if (prefix && isAbsolute(prefix) && !this.nomount) {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 643,
        "comment": "    var trail = /[\\/\\\\]$/.test(prefix)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 644,
        "comment": "    if (prefix.charAt(0) === '/') {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 645,
        "comment": "      prefix = path.join(this.root, prefix)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 646,
        "comment": "    } else {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 638,
        "comment": "  // If it doesn't exist, then just mark the lack of results",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 639,
        "comment": "  if (!exists)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 640,
        "comment": "    return cb()",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 641,
        "comment": "",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 642,
        "comment": "  if (prefix && isAbsolute(prefix) && !this.nomount) {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 643,
        "comment": "    var trail = /[\\/\\\\]$/.test(prefix)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 644,
        "comment": "    if (prefix.charAt(0) === '/') {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 645,
        "comment": "      prefix = path.join(this.root, prefix)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 646,
        "comment": "    } else {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 638,
        "comment": "  // If it doesn't exist, then just mark the lack of results",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 639,
        "comment": "  if (!exists)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 640,
        "comment": "    return cb()",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 641,
        "comment": "",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 642,
        "comment": "  if (prefix && isAbsolute(prefix) && !this.nomount) {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 643,
        "comment": "    var trail = /[\\/\\\\]$/.test(prefix)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 644,
        "comment": "    if (prefix.charAt(0) === '/') {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 645,
        "comment": "      prefix = path.join(this.root, prefix)",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 646,
        "comment": "    } else {",
        "comment_time": "2015-03-30 14:34:39-07:00",
        "last_code_change_time": "2015-03-15 21:41:52-04:00"
    },
    {
        "file": "glob.js",
        "line": 570,
        "comment": "        // If the error is handled, then we abort",
        "comment_time": "2015-05-30 08:15:11-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "glob.js",
        "line": 571,
        "comment": "        // if not, we threw out of here",
        "comment_time": "2015-05-30 08:15:11-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 13,
        "comment": "// don't need to escape / when using new RegExp()",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 16,
        "comment": "// * => any number of characters",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 21,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 25,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 28,
        "comment": "// characters that need to be escaped in RegExp.",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 273,
        "comment": "  // ? => one single character",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 282,
        "comment": "  var patternStart = pattern.charAt(0) === '.' ? '' // anything",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 283,
        "comment": "  // not (start or / followed by . or .. followed by / or end)",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 403,
        "comment": "          case '@': break // the default anyway",
        "comment_time": "2015-05-23 19:48:00-04:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 13,
        "comment": "// don't need to escape / when using new RegExp()",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 16,
        "comment": "// * => any number of characters",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 21,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 25,
        "comment": "// followed by anything, any number of times.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 28,
        "comment": "// characters that need to be escaped in RegExp.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 273,
        "comment": "  // ? => one single character",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 282,
        "comment": "  var patternStart = pattern.charAt(0) === '.' ? '' // anything",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 283,
        "comment": "  // not (start or / followed by . or .. followed by / or end)",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "minimatch.js",
        "line": 403,
        "comment": "          case '@': break // the default anyway",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-03-30 14:34:39-07:00"
    },
    {
        "file": "test-debugger-remote.js",
        "line": 12,
        "comment": "  assert(0); // `--debug-brk script.js` should not quit",
        "comment_time": "2015-06-03 16:53:05+02:00",
        "last_code_change_time": "2015-03-27 17:28:48+01:00"
    },
    {
        "file": "test-debugger-remote.js",
        "line": 40,
        "comment": "// allow time to start up the debugger",
        "comment_time": "2015-06-03 16:53:05+02:00",
        "last_code_change_time": "2015-03-27 17:28:48+01:00"
    },
    {
        "file": "store.js",
        "line": 9,
        "comment": " * this list of conditions and the following disclaimer.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 10,
        "comment": " *",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 11,
        "comment": " * 2. Redistributions in binary form must reproduce the above copyright notice,",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 12,
        "comment": " * this list of conditions and the following disclaimer in the documentation",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 13,
        "comment": " * and/or other materials provided with the distribution.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 14,
        "comment": " *",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 16,
        "comment": " * be used to endorse or promote products derived from this software without",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 17,
        "comment": " * specific prior written permission.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 18,
        "comment": " *",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 24,
        "comment": " * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 25,
        "comment": " * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 26,
        "comment": " * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 27,
        "comment": " * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 28,
        "comment": " * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 29,
        "comment": " * POSSIBILITY OF SUCH DAMAGE.",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "store.js",
        "line": 30,
        "comment": " */",
        "comment_time": "2015-06-10 09:05:54-07:00",
        "last_code_change_time": "2015-05-09 12:09:52+09:00"
    },
    {
        "file": "cookie_to_json_test.js",
        "line": 127,
        "comment": "          assert.match(str, /(?!\"maxAge\":null)/); // NB: negative RegExp",
        "comment_time": "2015-07-06 10:28:20-07:00",
        "last_code_change_time": "2015-06-10 09:05:54-07:00"
    }
]