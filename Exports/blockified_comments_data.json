{
    "main.py": [
        {
            "commit": "16a01cf914066656381d461f822ba3cccc2a3171",
            "timestamp": "2024-10-22T15:10:44+02:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        1,
                        ""
                    ],
                    [
                        2,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        3,
                        "# from pydriller import Repository"
                    ],
                    [
                        4,
                        "# import numpy as np"
                    ],
                    [
                        5,
                        "# import requests"
                    ],
                    [
                        6,
                        "# import json"
                    ],
                    [
                        7,
                        "# from flask import Response"
                    ],
                    [
                        8,
                        "#"
                    ],
                    [
                        9,
                        "# commits_monthly = list()"
                    ],
                    [
                        10,
                        "# curr_month = 0"
                    ],
                    [
                        11,
                        "# curr_year = 0"
                    ],
                    [
                        12,
                        "# i = 0"
                    ],
                    [
                        13,
                        "# month_del = 0"
                    ],
                    [
                        14,
                        "# month_add = 0"
                    ],
                    [
                        15,
                        "# month_commits = 0"
                    ],
                    [
                        16,
                        "# filecounter = 0"
                    ],
                    [
                        17,
                        "#"
                    ],
                    [
                        18,
                        "#"
                    ],
                    [
                        19,
                        "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():"
                    ],
                    [
                        20,
                        "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():"
                    ],
                    [
                        21,
                        "#     if (commit.committer_date.month != curr_month):"
                    ],
                    [
                        22,
                        "#         label = str(curr_month) + \"-\" + str(curr_year)"
                    ],
                    [
                        23,
                        "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])"
                    ],
                    [
                        24,
                        "#         curr_month = commit.committer_date.month"
                    ],
                    [
                        25,
                        "#         curr_year = commit.committer_date.year"
                    ],
                    [
                        26,
                        "#         i += 1"
                    ],
                    [
                        27,
                        "#         filecounter = 0"
                    ],
                    [
                        28,
                        "#         month_del = 0"
                    ],
                    [
                        29,
                        "#         month_add = 0"
                    ],
                    [
                        30,
                        "#         month_commits = 0"
                    ],
                    [
                        31,
                        "#"
                    ],
                    [
                        32,
                        "#     month_commits += 1"
                    ],
                    [
                        33,
                        "#     for file in commit.modified_files:"
                    ],
                    [
                        34,
                        "#         month_add += file.added_lines"
                    ],
                    [
                        35,
                        "#         month_del += file.deleted_lines"
                    ],
                    [
                        36,
                        "#         filecounter += 1"
                    ],
                    [
                        37,
                        "#"
                    ],
                    [
                        38,
                        "# commits = []"
                    ],
                    [
                        39,
                        "# additions = []"
                    ],
                    [
                        40,
                        "# deletions = []"
                    ],
                    [
                        41,
                        "# files = []"
                    ],
                    [
                        42,
                        "# loc = []"
                    ],
                    [
                        43,
                        "# issues = []"
                    ],
                    [
                        44,
                        "#"
                    ],
                    [
                        45,
                        "# for i in range(0, len(commits_monthly)):"
                    ],
                    [
                        46,
                        "#     commits.append(commits_monthly[i][1])"
                    ],
                    [
                        47,
                        "#     files.append(commits_monthly[i][2])"
                    ],
                    [
                        48,
                        "#     additions.append(commits_monthly[i][3])"
                    ],
                    [
                        49,
                        "#     deletions.append(commits_monthly[i][4])"
                    ],
                    [
                        50,
                        "#     if (i == 0):"
                    ],
                    [
                        51,
                        "#         loc.append(additions[i] - deletions[i])"
                    ],
                    [
                        52,
                        "#     else:"
                    ],
                    [
                        53,
                        "#         loc.append(loc[i-1] + additions[i] - deletions[i])"
                    ],
                    [
                        54,
                        "#"
                    ],
                    [
                        55,
                        "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\""
                    ],
                    [
                        56,
                        "# for i in range (1, 50):"
                    ],
                    [
                        57,
                        "#     params = {"
                    ],
                    [
                        58,
                        "#         \"state\": \"all\","
                    ],
                    [
                        59,
                        "#         \"direction\": \"asc\","
                    ],
                    [
                        60,
                        "#         \"per_page\": 100,"
                    ],
                    [
                        61,
                        "#         \"page\" : i"
                    ],
                    [
                        62,
                        "#     }"
                    ],
                    [
                        63,
                        "#     response = requests.get(api_url, params=params)"
                    ],
                    [
                        64,
                        "#     issues_response = response.json()"
                    ],
                    [
                        65,
                        "#     for issue in issues_response:"
                    ],
                    [
                        66,
                        "#         issue_data = []"
                    ],
                    [
                        67,
                        "#         issue_data.append(issue['number'])"
                    ],
                    [
                        68,
                        "#         issue_data.append(issue['created_at'])"
                    ],
                    [
                        69,
                        "#         issue_data.append(issue['closed_at'])"
                    ],
                    [
                        70,
                        "#         issues.append(issue_data)"
                    ],
                    [
                        71,
                        "#"
                    ],
                    [
                        72,
                        "# m = 0"
                    ],
                    [
                        73,
                        "# issues_monthly = [0]"
                    ],
                    [
                        74,
                        "# for i in range(len(issues)):"
                    ],
                    [
                        75,
                        "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):"
                    ],
                    [
                        76,
                        "#         m += 1"
                    ],
                    [
                        77,
                        "#         issues_monthly.append(0)"
                    ],
                    [
                        78,
                        "#     issues_monthly[m] += 1"
                    ],
                    [
                        79,
                        "#"
                    ],
                    [
                        80,
                        "# fig, ax1 = plt.subplots()"
                    ],
                    [
                        81,
                        "# ax1.plot(additions, color='g', label='Additions')"
                    ],
                    [
                        82,
                        "# ax1.plot(deletions, color='r', label='Deletions')"
                    ],
                    [
                        83,
                        "# ax1.plot(loc, color='0', label='LOC')"
                    ],
                    [
                        84,
                        "# ax1.tick_params(axis='y', labelcolor='0.5')"
                    ],
                    [
                        85,
                        "#"
                    ],
                    [
                        86,
                        "# ax2 = ax1.twinx()"
                    ],
                    [
                        87,
                        "# ax2.plot(commits, color='y', label='Commits')"
                    ],
                    [
                        88,
                        "# ax2.plot(files, color='b', label='Files')"
                    ],
                    [
                        89,
                        "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')"
                    ],
                    [
                        90,
                        "# ax2.tick_params(axis='y', labelcolor='0.8')"
                    ],
                    [
                        91,
                        "#"
                    ],
                    [
                        92,
                        "# fig.tight_layout()"
                    ],
                    [
                        93,
                        "# ax1.legend()"
                    ],
                    [
                        94,
                        "# ax2.legend()"
                    ],
                    [
                        95,
                        "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        96,
                        "# plt.show()"
                    ],
                    [
                        97,
                        "#"
                    ],
                    [
                        98,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        99,
                        "from pydriller import Repository"
                    ],
                    [
                        100,
                        "import requests"
                    ],
                    [
                        101,
                        ""
                    ],
                    [
                        102,
                        "def analyze_commit_data(repo_url):"
                    ],
                    [
                        103,
                        "    # Initialize tracking variables"
                    ],
                    [
                        104,
                        "    monthly_commit_data = []"
                    ],
                    [
                        105,
                        "    current_month = 0"
                    ],
                    [
                        106,
                        "    current_year = 0"
                    ],
                    [
                        107,
                        "    monthly_additions = 0"
                    ],
                    [
                        108,
                        "    monthly_deletions = 0"
                    ],
                    [
                        109,
                        "    monthly_commit_count = 0"
                    ],
                    [
                        110,
                        "    modified_file_count = 0"
                    ],
                    [
                        111,
                        ""
                    ],
                    [
                        112,
                        "    # Traverse through all commits in the repository"
                    ],
                    [
                        113,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        114,
                        "        # If we encounter a new month, save the previous month's data"
                    ],
                    [
                        115,
                        "        if commit.committer_date.month != current_month:"
                    ],
                    [
                        116,
                        "            label = f\"{current_month}-{current_year}\""
                    ],
                    [
                        117,
                        "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])"
                    ],
                    [
                        118,
                        "            # Reset counters for the new month"
                    ],
                    [
                        119,
                        "            current_month = commit.committer_date.month"
                    ],
                    [
                        120,
                        "            current_year = commit.committer_date.year"
                    ],
                    [
                        121,
                        "            monthly_additions = 0"
                    ],
                    [
                        122,
                        "            monthly_deletions = 0"
                    ],
                    [
                        123,
                        "            monthly_commit_count = 0"
                    ],
                    [
                        124,
                        "            modified_file_count = 0"
                    ],
                    [
                        125,
                        ""
                    ],
                    [
                        126,
                        "        # Update current month's data"
                    ],
                    [
                        127,
                        "        monthly_commit_count += 1"
                    ],
                    [
                        128,
                        "        for file in commit.modified_files:"
                    ],
                    [
                        129,
                        "            monthly_additions += file.added_lines"
                    ],
                    [
                        130,
                        "            monthly_deletions += file.deleted_lines"
                    ],
                    [
                        131,
                        "            modified_file_count += 1"
                    ],
                    [
                        132,
                        ""
                    ],
                    [
                        133,
                        "    return monthly_commit_data"
                    ],
                    [
                        134,
                        ""
                    ],
                    [
                        135,
                        "def analyze_issues_data(repo_url, max_pages):"
                    ],
                    [
                        136,
                        "    issues_data = []"
                    ],
                    [
                        137,
                        "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\""
                    ],
                    [
                        138,
                        ""
                    ],
                    [
                        139,
                        "    # Fetch issues data from GitHub using pagination"
                    ],
                    [
                        140,
                        "    for page in range(1, max_pages + 1):"
                    ],
                    [
                        141,
                        "        params = {"
                    ],
                    [
                        142,
                        "            \"state\": \"all\","
                    ],
                    [
                        143,
                        "            \"direction\": \"asc\","
                    ],
                    [
                        144,
                        "            \"per_page\": 100,"
                    ],
                    [
                        145,
                        "            \"page\": page"
                    ],
                    [
                        146,
                        "        }"
                    ],
                    [
                        147,
                        "        response = requests.get(api_url, params=params)"
                    ],
                    [
                        148,
                        "        if response.status_code != 200:"
                    ],
                    [
                        149,
                        "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")"
                    ],
                    [
                        150,
                        "            break"
                    ],
                    [
                        151,
                        ""
                    ],
                    [
                        152,
                        "        issues_response = response.json()"
                    ],
                    [
                        153,
                        "        # Stop if no more issues are returned"
                    ],
                    [
                        154,
                        "        if not issues_response:"
                    ],
                    [
                        155,
                        "            break"
                    ],
                    [
                        156,
                        ""
                    ],
                    [
                        157,
                        "        # Extract necessary issue data"
                    ],
                    [
                        158,
                        "        for issue in issues_response:"
                    ],
                    [
                        159,
                        "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])"
                    ],
                    [
                        160,
                        ""
                    ],
                    [
                        161,
                        "    return issues_data"
                    ],
                    [
                        162,
                        ""
                    ],
                    [
                        163,
                        "def count_issues_monthly(issues_data):"
                    ],
                    [
                        164,
                        "    issues_per_month = [0,0,0,0]"
                    ],
                    [
                        165,
                        "    current_month = issues_data[0][1][5:7] if issues_data else None"
                    ],
                    [
                        166,
                        "    monthly_issue_count = 0"
                    ],
                    [
                        167,
                        ""
                    ],
                    [
                        168,
                        "    # Count issues per month"
                    ],
                    [
                        169,
                        "    for i in range(len(issues_data) - 1):"
                    ],
                    [
                        170,
                        "        issue_month = issues_data[i][1][5:7]"
                    ],
                    [
                        171,
                        "        next_issue_month = issues_data[i + 1][1][5:7]"
                    ],
                    [
                        172,
                        "        if issue_month != next_issue_month:"
                    ],
                    [
                        173,
                        "            issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        174,
                        "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])"
                    ],
                    [
                        175,
                        "            monthly_issue_count = 0"
                    ],
                    [
                        176,
                        "            current_month = next_issue_month"
                    ],
                    [
                        177,
                        "        monthly_issue_count += 1"
                    ],
                    [
                        178,
                        ""
                    ],
                    [
                        179,
                        "    # Add the last month's count"
                    ],
                    [
                        180,
                        "    issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        181,
                        "    return issues_per_month"
                    ],
                    [
                        182,
                        ""
                    ],
                    [
                        183,
                        "def calculate_loc(monthly_commit_data):"
                    ],
                    [
                        184,
                        "    # Calculate lines of code (LOC) changes over time"
                    ],
                    [
                        185,
                        "    loc_over_time = []"
                    ],
                    [
                        186,
                        "    total_loc = 0"
                    ],
                    [
                        187,
                        ""
                    ],
                    [
                        188,
                        "    for month_data in monthly_commit_data:"
                    ],
                    [
                        189,
                        "        additions = month_data[3]"
                    ],
                    [
                        190,
                        "        deletions = month_data[4]"
                    ],
                    [
                        191,
                        "        total_loc += additions - deletions"
                    ],
                    [
                        192,
                        "        loc_over_time.append(total_loc)"
                    ],
                    [
                        193,
                        ""
                    ],
                    [
                        194,
                        "    return loc_over_time"
                    ],
                    [
                        195,
                        ""
                    ],
                    [
                        196,
                        "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):"
                    ],
                    [
                        197,
                        "    # Extract data for plotting"
                    ],
                    [
                        198,
                        "    monthly_labels = [data[0] for data in monthly_commit_data]"
                    ],
                    [
                        199,
                        "    monthly_commits = [data[1] for data in monthly_commit_data]"
                    ],
                    [
                        200,
                        "    modified_files = [data[2] for data in monthly_commit_data]"
                    ],
                    [
                        201,
                        "    monthly_additions = [data[3] for data in monthly_commit_data]"
                    ],
                    [
                        202,
                        "    monthly_deletions = [data[4] for data in monthly_commit_data]"
                    ],
                    [
                        203,
                        ""
                    ],
                    [
                        204,
                        "    for i in range(len(monthly_labels)):"
                    ],
                    [
                        205,
                        "        label = monthly_labels[i].split('-')"
                    ],
                    [
                        206,
                        "        if (len(label[0]) == 1):"
                    ],
                    [
                        207,
                        "            label[0] = \"0\" + label[0]"
                    ],
                    [
                        208,
                        "        label[1] = label[1][2:]"
                    ],
                    [
                        209,
                        "        monthly_labels[i] = label[1] + \"-\" + label[0]"
                    ],
                    [
                        210,
                        ""
                    ],
                    [
                        211,
                        "    # Plotting"
                    ],
                    [
                        212,
                        "    fig, ax1 = plt.subplots()"
                    ],
                    [
                        213,
                        ""
                    ],
                    [
                        214,
                        "    # Plot lines for additions, deletions, and LOC"
                    ],
                    [
                        215,
                        "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')"
                    ],
                    [
                        216,
                        "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')"
                    ],
                    [
                        217,
                        "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')"
                    ],
                    [
                        218,
                        "    ax1.tick_params(axis='y', labelcolor='black')"
                    ],
                    [
                        219,
                        ""
                    ],
                    [
                        220,
                        "    # Secondary Y-axis for commits, modified files, and issues"
                    ],
                    [
                        221,
                        "    ax2 = ax1.twinx()"
                    ],
                    [
                        222,
                        "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')"
                    ],
                    [
                        223,
                        "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')"
                    ],
                    [
                        224,
                        "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')"
                    ],
                    [
                        225,
                        "    ax2.tick_params(axis='y', labelcolor='grey')"
                    ],
                    [
                        226,
                        ""
                    ],
                    [
                        227,
                        "    # Finalize and show the plot"
                    ],
                    [
                        228,
                        "    fig.tight_layout()"
                    ],
                    [
                        229,
                        "    ax1.legend(loc='upper left')"
                    ],
                    [
                        230,
                        "    ax2.legend(loc='upper right')"
                    ],
                    [
                        231,
                        "    plt.xticks(rotation=45)"
                    ],
                    [
                        232,
                        "    plt.title(\"Repository Analysis\")"
                    ],
                    [
                        233,
                        "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        234,
                        "    plt.show()"
                    ],
                    [
                        235,
                        ""
                    ],
                    [
                        236,
                        "def main():"
                    ],
                    [
                        237,
                        "    repo_url = 'dani-garcia/vaultwarden'"
                    ],
                    [
                        238,
                        "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')"
                    ],
                    [
                        239,
                        "    issues_data = analyze_issues_data(repo_url, 50)"
                    ],
                    [
                        240,
                        "    issues_per_month = count_issues_monthly(issues_data)"
                    ],
                    [
                        241,
                        "    loc_over_time = calculate_loc(monthly_commit_data)"
                    ],
                    [
                        242,
                        "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)"
                    ],
                    [
                        243,
                        ""
                    ],
                    [
                        244,
                        "if __name__ == \"__main__\":"
                    ],
                    [
                        245,
                        "    main()"
                    ]
                ],
                "deleted": [],
                "block_diff": [
                    {
                        "lines": [
                            1,
                            2
                        ],
                        "contents": [
                            "",
                            "import matplotlib.pyplot as plt"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            19,
                            20,
                            21,
                            22,
                            23,
                            24,
                            25,
                            26,
                            27,
                            28,
                            29,
                            30,
                            31,
                            32,
                            33,
                            34,
                            35,
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70,
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84,
                            85,
                            86,
                            87,
                            88,
                            89,
                            90,
                            91,
                            92,
                            93,
                            94,
                            95,
                            96,
                            97,
                            98,
                            99,
                            100,
                            101,
                            102
                        ],
                        "contents": [
                            "# from pydriller import Repository",
                            "# import numpy as np",
                            "# import requests",
                            "# import json",
                            "# from flask import Response",
                            "#",
                            "# commits_monthly = list()",
                            "# curr_month = 0",
                            "# curr_year = 0",
                            "# i = 0",
                            "# month_del = 0",
                            "# month_add = 0",
                            "# month_commits = 0",
                            "# filecounter = 0",
                            "#",
                            "#",
                            "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                            "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                            "#     if (commit.committer_date.month != curr_month):",
                            "#         label = str(curr_month) + \"-\" + str(curr_year)",
                            "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                            "#         curr_month = commit.committer_date.month",
                            "#         curr_year = commit.committer_date.year",
                            "#         i += 1",
                            "#         filecounter = 0",
                            "#         month_del = 0",
                            "#         month_add = 0",
                            "#         month_commits = 0",
                            "#",
                            "#     month_commits += 1",
                            "#     for file in commit.modified_files:",
                            "#         month_add += file.added_lines",
                            "#         month_del += file.deleted_lines",
                            "#         filecounter += 1",
                            "#",
                            "# commits = []",
                            "# additions = []",
                            "# deletions = []",
                            "# files = []",
                            "# loc = []",
                            "# issues = []",
                            "#",
                            "# for i in range(0, len(commits_monthly)):",
                            "#     commits.append(commits_monthly[i][1])",
                            "#     files.append(commits_monthly[i][2])",
                            "#     additions.append(commits_monthly[i][3])",
                            "#     deletions.append(commits_monthly[i][4])",
                            "#     if (i == 0):",
                            "#         loc.append(additions[i] - deletions[i])",
                            "#     else:",
                            "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                            "#",
                            "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                            "# for i in range (1, 50):",
                            "#     params = {",
                            "#         \"state\": \"all\",",
                            "#         \"direction\": \"asc\",",
                            "#         \"per_page\": 100,",
                            "#         \"page\" : i",
                            "#     }",
                            "#     response = requests.get(api_url, params=params)",
                            "#     issues_response = response.json()",
                            "#     for issue in issues_response:",
                            "#         issue_data = []",
                            "#         issue_data.append(issue['number'])",
                            "#         issue_data.append(issue['created_at'])",
                            "#         issue_data.append(issue['closed_at'])",
                            "#         issues.append(issue_data)",
                            "#",
                            "# m = 0",
                            "# issues_monthly = [0]",
                            "# for i in range(len(issues)):",
                            "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                            "#         m += 1",
                            "#         issues_monthly.append(0)",
                            "#     issues_monthly[m] += 1",
                            "#",
                            "# fig, ax1 = plt.subplots()",
                            "# ax1.plot(additions, color='g', label='Additions')",
                            "# ax1.plot(deletions, color='r', label='Deletions')",
                            "# ax1.plot(loc, color='0', label='LOC')",
                            "# ax1.tick_params(axis='y', labelcolor='0.5')",
                            "#",
                            "# ax2 = ax1.twinx()",
                            "# ax2.plot(commits, color='y', label='Commits')",
                            "# ax2.plot(files, color='b', label='Files')",
                            "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                            "# ax2.tick_params(axis='y', labelcolor='0.8')",
                            "#",
                            "# fig.tight_layout()",
                            "# ax1.legend()",
                            "# ax2.legend()",
                            "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                            "# plt.show()",
                            "#",
                            "import matplotlib.pyplot as plt",
                            "from pydriller import Repository",
                            "import requests",
                            "",
                            "def analyze_commit_data(repo_url):"
                        ],
                        "comments": [
                            "# from pydriller import Repository",
                            "# import numpy as np",
                            "# import requests",
                            "# import json",
                            "# from flask import Response",
                            "# ",
                            "# commits_monthly = list()",
                            "# curr_month = 0",
                            "# curr_year = 0",
                            "# i = 0",
                            "# month_del = 0",
                            "# month_add = 0",
                            "# month_commits = 0",
                            "# filecounter = 0",
                            "# ",
                            "# ",
                            "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                            "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                            "#     if (commit.committer_date.month != curr_month):",
                            "#         label = str(curr_month) + \"-\" + str(curr_year)",
                            "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                            "#         curr_month = commit.committer_date.month",
                            "#         curr_year = commit.committer_date.year",
                            "#         i += 1",
                            "#         filecounter = 0",
                            "#         month_del = 0",
                            "#         month_add = 0",
                            "#         month_commits = 0",
                            "# ",
                            "#     month_commits += 1",
                            "#     for file in commit.modified_files:",
                            "#         month_add += file.added_lines",
                            "#         month_del += file.deleted_lines",
                            "#         filecounter += 1",
                            "#     ",
                            "# commits = []",
                            "# additions = []",
                            "# deletions = []",
                            "# files = []",
                            "# loc = []",
                            "# issues = []",
                            "# ",
                            "# for i in range(0, len(commits_monthly)):",
                            "#     commits.append(commits_monthly[i][1])",
                            "#     files.append(commits_monthly[i][2])",
                            "#     additions.append(commits_monthly[i][3])",
                            "#     deletions.append(commits_monthly[i][4])",
                            "#     if (i == 0):",
                            "#         loc.append(additions[i] - deletions[i])",
                            "#     else: ",
                            "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                            "# ",
                            "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                            "# for i in range (1, 50):",
                            "#     params = {",
                            "#         \"state\": \"all\",",
                            "#         \"direction\": \"asc\",",
                            "#         \"per_page\": 100,",
                            "#         \"page\" : i",
                            "#     }",
                            "#     response = requests.get(api_url, params=params)",
                            "#     issues_response = response.json()",
                            "#     for issue in issues_response:",
                            "#         issue_data = []",
                            "#         issue_data.append(issue['number'])",
                            "#         issue_data.append(issue['created_at'])",
                            "#         issue_data.append(issue['closed_at'])",
                            "#         issues.append(issue_data)",
                            "# ",
                            "# m = 0",
                            "# issues_monthly = [0]",
                            "# for i in range(len(issues)):",
                            "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                            "#         m += 1",
                            "#         issues_monthly.append(0)",
                            "#     issues_monthly[m] += 1",
                            "# ",
                            "# fig, ax1 = plt.subplots()",
                            "# ax1.plot(additions, color='g', label='Additions')",
                            "# ax1.plot(deletions, color='r', label='Deletions')",
                            "# ax1.plot(loc, color='0', label='LOC')",
                            "# ax1.tick_params(axis='y', labelcolor='0.5')",
                            "# ",
                            "# ax2 = ax1.twinx()",
                            "# ax2.plot(commits, color='y', label='Commits')",
                            "# ax2.plot(files, color='b', label='Files')",
                            "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                            "# ax2.tick_params(axis='y', labelcolor='0.8')",
                            "# ",
                            "# fig.tight_layout()",
                            "# ax1.legend()",
                            "# ax2.legend()",
                            "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                            "# plt.show()",
                            "# ",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            103,
                            104,
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111
                        ],
                        "contents": [
                            "    # Initialize tracking variables",
                            "    monthly_commit_data = []",
                            "    current_month = 0",
                            "    current_year = 0",
                            "    monthly_additions = 0",
                            "    monthly_deletions = 0",
                            "    monthly_commit_count = 0",
                            "    modified_file_count = 0",
                            ""
                        ],
                        "comments": [
                            "# Initialize tracking variables",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            112,
                            113
                        ],
                        "contents": [
                            "    # Traverse through all commits in the repository",
                            "    for commit in Repository(repo_url).traverse_commits():"
                        ],
                        "comments": [
                            "# Traverse through all commits in the repository",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            114,
                            115,
                            116,
                            117
                        ],
                        "contents": [
                            "        # If we encounter a new month, save the previous month's data",
                            "        if commit.committer_date.month != current_month:",
                            "            label = f\"{current_month}-{current_year}\"",
                            "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])"
                        ],
                        "comments": [
                            "# If we encounter a new month, save the previous month's data",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            118,
                            119,
                            120,
                            121,
                            122,
                            123,
                            124,
                            125
                        ],
                        "contents": [
                            "            # Reset counters for the new month",
                            "            current_month = commit.committer_date.month",
                            "            current_year = commit.committer_date.year",
                            "            monthly_additions = 0",
                            "            monthly_deletions = 0",
                            "            monthly_commit_count = 0",
                            "            modified_file_count = 0",
                            ""
                        ],
                        "comments": [
                            "# Reset counters for the new month",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            126,
                            127,
                            128,
                            129,
                            130,
                            131,
                            132,
                            133,
                            134,
                            135,
                            136,
                            137,
                            138
                        ],
                        "contents": [
                            "        # Update current month's data",
                            "        monthly_commit_count += 1",
                            "        for file in commit.modified_files:",
                            "            monthly_additions += file.added_lines",
                            "            monthly_deletions += file.deleted_lines",
                            "            modified_file_count += 1",
                            "",
                            "    return monthly_commit_data",
                            "",
                            "def analyze_issues_data(repo_url, max_pages):",
                            "    issues_data = []",
                            "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\"",
                            ""
                        ],
                        "comments": [
                            "# Update current month's data",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            139,
                            140,
                            141,
                            142,
                            143,
                            144,
                            145,
                            146,
                            147,
                            148,
                            149,
                            150,
                            151,
                            152
                        ],
                        "contents": [
                            "    # Fetch issues data from GitHub using pagination",
                            "    for page in range(1, max_pages + 1):",
                            "        params = {",
                            "            \"state\": \"all\",",
                            "            \"direction\": \"asc\",",
                            "            \"per_page\": 100,",
                            "            \"page\": page",
                            "        }",
                            "        response = requests.get(api_url, params=params)",
                            "        if response.status_code != 200:",
                            "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")",
                            "            break",
                            "",
                            "        issues_response = response.json()"
                        ],
                        "comments": [
                            "# Fetch issues data from GitHub using pagination",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            153,
                            154,
                            155,
                            156
                        ],
                        "contents": [
                            "        # Stop if no more issues are returned",
                            "        if not issues_response:",
                            "            break",
                            ""
                        ],
                        "comments": [
                            "# Stop if no more issues are returned",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            157,
                            158,
                            159,
                            160,
                            161,
                            162,
                            163,
                            164,
                            165,
                            166,
                            167
                        ],
                        "contents": [
                            "        # Extract necessary issue data",
                            "        for issue in issues_response:",
                            "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])",
                            "",
                            "    return issues_data",
                            "",
                            "def count_issues_monthly(issues_data):",
                            "    issues_per_month = [0,0,0,0]",
                            "    current_month = issues_data[0][1][5:7] if issues_data else None",
                            "    monthly_issue_count = 0",
                            ""
                        ],
                        "comments": [
                            "# Extract necessary issue data",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            168,
                            169,
                            170,
                            171,
                            172,
                            173,
                            174,
                            175,
                            176,
                            177,
                            178
                        ],
                        "contents": [
                            "    # Count issues per month",
                            "    for i in range(len(issues_data) - 1):",
                            "        issue_month = issues_data[i][1][5:7]",
                            "        next_issue_month = issues_data[i + 1][1][5:7]",
                            "        if issue_month != next_issue_month:",
                            "            issues_per_month.append(monthly_issue_count)",
                            "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])",
                            "            monthly_issue_count = 0",
                            "            current_month = next_issue_month",
                            "        monthly_issue_count += 1",
                            ""
                        ],
                        "comments": [
                            "# Count issues per month",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            179,
                            180,
                            181,
                            182,
                            183
                        ],
                        "contents": [
                            "    # Add the last month's count",
                            "    issues_per_month.append(monthly_issue_count)",
                            "    return issues_per_month",
                            "",
                            "def calculate_loc(monthly_commit_data):"
                        ],
                        "comments": [
                            "# Add the last month's count",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            184,
                            185,
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192,
                            193,
                            194,
                            195,
                            196
                        ],
                        "contents": [
                            "    # Calculate lines of code (LOC) changes over time",
                            "    loc_over_time = []",
                            "    total_loc = 0",
                            "",
                            "    for month_data in monthly_commit_data:",
                            "        additions = month_data[3]",
                            "        deletions = month_data[4]",
                            "        total_loc += additions - deletions",
                            "        loc_over_time.append(total_loc)",
                            "",
                            "    return loc_over_time",
                            "",
                            "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):"
                        ],
                        "comments": [
                            "# Calculate lines of code (LOC) changes over time",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            197,
                            198,
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208,
                            209,
                            210
                        ],
                        "contents": [
                            "    # Extract data for plotting",
                            "    monthly_labels = [data[0] for data in monthly_commit_data]",
                            "    monthly_commits = [data[1] for data in monthly_commit_data]",
                            "    modified_files = [data[2] for data in monthly_commit_data]",
                            "    monthly_additions = [data[3] for data in monthly_commit_data]",
                            "    monthly_deletions = [data[4] for data in monthly_commit_data]",
                            "",
                            "    for i in range(len(monthly_labels)):",
                            "        label = monthly_labels[i].split('-')",
                            "        if (len(label[0]) == 1):",
                            "            label[0] = \"0\" + label[0]",
                            "        label[1] = label[1][2:]",
                            "        monthly_labels[i] = label[1] + \"-\" + label[0]",
                            ""
                        ],
                        "comments": [
                            "# Extract data for plotting",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            211,
                            212,
                            213
                        ],
                        "contents": [
                            "    # Plotting",
                            "    fig, ax1 = plt.subplots()",
                            ""
                        ],
                        "comments": [
                            "# Plotting",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            214,
                            215,
                            216,
                            217,
                            218,
                            219
                        ],
                        "contents": [
                            "    # Plot lines for additions, deletions, and LOC",
                            "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')",
                            "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')",
                            "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')",
                            "    ax1.tick_params(axis='y', labelcolor='black')",
                            ""
                        ],
                        "comments": [
                            "# Plot lines for additions, deletions, and LOC",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            220,
                            221,
                            222,
                            223,
                            224,
                            225,
                            226
                        ],
                        "contents": [
                            "    # Secondary Y-axis for commits, modified files, and issues",
                            "    ax2 = ax1.twinx()",
                            "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')",
                            "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')",
                            "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')",
                            "    ax2.tick_params(axis='y', labelcolor='grey')",
                            ""
                        ],
                        "comments": [
                            "# Secondary Y-axis for commits, modified files, and issues",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236,
                            237,
                            238,
                            239,
                            240,
                            241,
                            242,
                            243,
                            244,
                            245
                        ],
                        "contents": [
                            "    # Finalize and show the plot",
                            "    fig.tight_layout()",
                            "    ax1.legend(loc='upper left')",
                            "    ax2.legend(loc='upper right')",
                            "    plt.xticks(rotation=45)",
                            "    plt.title(\"Repository Analysis\")",
                            "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                            "    plt.show()",
                            "",
                            "def main():",
                            "    repo_url = 'dani-garcia/vaultwarden'",
                            "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')",
                            "    issues_data = analyze_issues_data(repo_url, 50)",
                            "    issues_per_month = count_issues_monthly(issues_data)",
                            "    loc_over_time = calculate_loc(monthly_commit_data)",
                            "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)",
                            "",
                            "if __name__ == \"__main__\":",
                            "    main()"
                        ],
                        "comments": [
                            "# Finalize and show the plot",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 3,
                    "comment": "# from pydriller import Repository",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 4,
                    "comment": "# import numpy as np",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 5,
                    "comment": "# import requests",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 6,
                    "comment": "# import json",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 7,
                    "comment": "# from flask import Response",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 8,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 9,
                    "comment": "# commits_monthly = list()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 10,
                    "comment": "# curr_month = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 11,
                    "comment": "# curr_year = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 12,
                    "comment": "# i = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 13,
                    "comment": "# month_del = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 14,
                    "comment": "# month_add = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 15,
                    "comment": "# month_commits = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 16,
                    "comment": "# filecounter = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 17,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 18,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 19,
                    "comment": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 20,
                    "comment": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 21,
                    "comment": "#     if (commit.committer_date.month != curr_month):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 22,
                    "comment": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 23,
                    "comment": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 24,
                    "comment": "#         curr_month = commit.committer_date.month",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 25,
                    "comment": "#         curr_year = commit.committer_date.year",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 26,
                    "comment": "#         i += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 27,
                    "comment": "#         filecounter = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 28,
                    "comment": "#         month_del = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 29,
                    "comment": "#         month_add = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 30,
                    "comment": "#         month_commits = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 31,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 32,
                    "comment": "#     month_commits += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 33,
                    "comment": "#     for file in commit.modified_files:",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 34,
                    "comment": "#         month_add += file.added_lines",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 35,
                    "comment": "#         month_del += file.deleted_lines",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 36,
                    "comment": "#         filecounter += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 37,
                    "comment": "#     ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 38,
                    "comment": "# commits = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 39,
                    "comment": "# additions = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 40,
                    "comment": "# deletions = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 41,
                    "comment": "# files = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 42,
                    "comment": "# loc = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 43,
                    "comment": "# issues = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 44,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 45,
                    "comment": "# for i in range(0, len(commits_monthly)):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 46,
                    "comment": "#     commits.append(commits_monthly[i][1])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 47,
                    "comment": "#     files.append(commits_monthly[i][2])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 48,
                    "comment": "#     additions.append(commits_monthly[i][3])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 49,
                    "comment": "#     deletions.append(commits_monthly[i][4])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 50,
                    "comment": "#     if (i == 0):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 51,
                    "comment": "#         loc.append(additions[i] - deletions[i])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 52,
                    "comment": "#     else: ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 53,
                    "comment": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 54,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 55,
                    "comment": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 56,
                    "comment": "# for i in range (1, 50):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 57,
                    "comment": "#     params = {",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 58,
                    "comment": "#         \"state\": \"all\",",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 59,
                    "comment": "#         \"direction\": \"asc\",",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 60,
                    "comment": "#         \"per_page\": 100,",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 61,
                    "comment": "#         \"page\" : i",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 62,
                    "comment": "#     }",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 63,
                    "comment": "#     response = requests.get(api_url, params=params)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 64,
                    "comment": "#     issues_response = response.json()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 65,
                    "comment": "#     for issue in issues_response:",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 66,
                    "comment": "#         issue_data = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 67,
                    "comment": "#         issue_data.append(issue['number'])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 68,
                    "comment": "#         issue_data.append(issue['created_at'])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 69,
                    "comment": "#         issue_data.append(issue['closed_at'])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 70,
                    "comment": "#         issues.append(issue_data)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 71,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 72,
                    "comment": "# m = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 73,
                    "comment": "# issues_monthly = [0]",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 74,
                    "comment": "# for i in range(len(issues)):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 75,
                    "comment": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 76,
                    "comment": "#         m += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 77,
                    "comment": "#         issues_monthly.append(0)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 78,
                    "comment": "#     issues_monthly[m] += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 79,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 80,
                    "comment": "# fig, ax1 = plt.subplots()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 81,
                    "comment": "# ax1.plot(additions, color='g', label='Additions')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 82,
                    "comment": "# ax1.plot(deletions, color='r', label='Deletions')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 83,
                    "comment": "# ax1.plot(loc, color='0', label='LOC')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 84,
                    "comment": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 85,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 86,
                    "comment": "# ax2 = ax1.twinx()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 87,
                    "comment": "# ax2.plot(commits, color='y', label='Commits')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 88,
                    "comment": "# ax2.plot(files, color='b', label='Files')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 89,
                    "comment": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 90,
                    "comment": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 91,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 92,
                    "comment": "# fig.tight_layout()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 93,
                    "comment": "# ax1.legend()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 94,
                    "comment": "# ax2.legend()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 95,
                    "comment": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 96,
                    "comment": "# plt.show()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 97,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 103,
                    "comment": "# Initialize tracking variables",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 112,
                    "comment": "# Traverse through all commits in the repository",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 114,
                    "comment": "# If we encounter a new month, save the previous month's data",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 118,
                    "comment": "# Reset counters for the new month",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 126,
                    "comment": "# Update current month's data",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 139,
                    "comment": "# Fetch issues data from GitHub using pagination",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 153,
                    "comment": "# Stop if no more issues are returned",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 157,
                    "comment": "# Extract necessary issue data",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 168,
                    "comment": "# Count issues per month",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 179,
                    "comment": "# Add the last month's count",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 184,
                    "comment": "# Calculate lines of code (LOC) changes over time",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 197,
                    "comment": "# Extract data for plotting",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 211,
                    "comment": "# Plotting",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 214,
                    "comment": "# Plot lines for additions, deletions, and LOC",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 220,
                    "comment": "# Secondary Y-axis for commits, modified files, and issues",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 227,
                    "comment": "# Finalize and show the plot",
                    "char_position_in_line": 4,
                    "edit": "added"
                }
            ]
        },
        {
            "commit": "1061293a43b0788f9db921ae6fc61734ccdf1b8d",
            "timestamp": "2024-11-16T19:39:45+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [],
                "deleted": [
                    [
                        1,
                        ""
                    ],
                    [
                        2,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        3,
                        "# from pydriller import Repository"
                    ],
                    [
                        4,
                        "# import numpy as np"
                    ],
                    [
                        5,
                        "# import requests"
                    ],
                    [
                        6,
                        "# import json"
                    ],
                    [
                        7,
                        "# from flask import Response"
                    ],
                    [
                        8,
                        "#"
                    ],
                    [
                        9,
                        "# commits_monthly = list()"
                    ],
                    [
                        10,
                        "# curr_month = 0"
                    ],
                    [
                        11,
                        "# curr_year = 0"
                    ],
                    [
                        12,
                        "# i = 0"
                    ],
                    [
                        13,
                        "# month_del = 0"
                    ],
                    [
                        14,
                        "# month_add = 0"
                    ],
                    [
                        15,
                        "# month_commits = 0"
                    ],
                    [
                        16,
                        "# filecounter = 0"
                    ],
                    [
                        17,
                        "#"
                    ],
                    [
                        18,
                        "#"
                    ],
                    [
                        19,
                        "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():"
                    ],
                    [
                        20,
                        "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():"
                    ],
                    [
                        21,
                        "#     if (commit.committer_date.month != curr_month):"
                    ],
                    [
                        22,
                        "#         label = str(curr_month) + \"-\" + str(curr_year)"
                    ],
                    [
                        23,
                        "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])"
                    ],
                    [
                        24,
                        "#         curr_month = commit.committer_date.month"
                    ],
                    [
                        25,
                        "#         curr_year = commit.committer_date.year"
                    ],
                    [
                        26,
                        "#         i += 1"
                    ],
                    [
                        27,
                        "#         filecounter = 0"
                    ],
                    [
                        28,
                        "#         month_del = 0"
                    ],
                    [
                        29,
                        "#         month_add = 0"
                    ],
                    [
                        30,
                        "#         month_commits = 0"
                    ],
                    [
                        31,
                        "#"
                    ],
                    [
                        32,
                        "#     month_commits += 1"
                    ],
                    [
                        33,
                        "#     for file in commit.modified_files:"
                    ],
                    [
                        34,
                        "#         month_add += file.added_lines"
                    ],
                    [
                        35,
                        "#         month_del += file.deleted_lines"
                    ],
                    [
                        36,
                        "#         filecounter += 1"
                    ],
                    [
                        37,
                        "#"
                    ],
                    [
                        38,
                        "# commits = []"
                    ],
                    [
                        39,
                        "# additions = []"
                    ],
                    [
                        40,
                        "# deletions = []"
                    ],
                    [
                        41,
                        "# files = []"
                    ],
                    [
                        42,
                        "# loc = []"
                    ],
                    [
                        43,
                        "# issues = []"
                    ],
                    [
                        44,
                        "#"
                    ],
                    [
                        45,
                        "# for i in range(0, len(commits_monthly)):"
                    ],
                    [
                        46,
                        "#     commits.append(commits_monthly[i][1])"
                    ],
                    [
                        47,
                        "#     files.append(commits_monthly[i][2])"
                    ],
                    [
                        48,
                        "#     additions.append(commits_monthly[i][3])"
                    ],
                    [
                        49,
                        "#     deletions.append(commits_monthly[i][4])"
                    ],
                    [
                        50,
                        "#     if (i == 0):"
                    ],
                    [
                        51,
                        "#         loc.append(additions[i] - deletions[i])"
                    ],
                    [
                        52,
                        "#     else:"
                    ],
                    [
                        53,
                        "#         loc.append(loc[i-1] + additions[i] - deletions[i])"
                    ],
                    [
                        54,
                        "#"
                    ],
                    [
                        55,
                        "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\""
                    ],
                    [
                        56,
                        "# for i in range (1, 50):"
                    ],
                    [
                        57,
                        "#     params = {"
                    ],
                    [
                        58,
                        "#         \"state\": \"all\","
                    ],
                    [
                        59,
                        "#         \"direction\": \"asc\","
                    ],
                    [
                        60,
                        "#         \"per_page\": 100,"
                    ],
                    [
                        61,
                        "#         \"page\" : i"
                    ],
                    [
                        62,
                        "#     }"
                    ],
                    [
                        63,
                        "#     response = requests.get(api_url, params=params)"
                    ],
                    [
                        64,
                        "#     issues_response = response.json()"
                    ],
                    [
                        65,
                        "#     for issue in issues_response:"
                    ],
                    [
                        66,
                        "#         issue_data = []"
                    ],
                    [
                        67,
                        "#         issue_data.append(issue['number'])"
                    ],
                    [
                        68,
                        "#         issue_data.append(issue['created_at'])"
                    ],
                    [
                        69,
                        "#         issue_data.append(issue['closed_at'])"
                    ],
                    [
                        70,
                        "#         issues.append(issue_data)"
                    ],
                    [
                        71,
                        "#"
                    ],
                    [
                        72,
                        "# m = 0"
                    ],
                    [
                        73,
                        "# issues_monthly = [0]"
                    ],
                    [
                        74,
                        "# for i in range(len(issues)):"
                    ],
                    [
                        75,
                        "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):"
                    ],
                    [
                        76,
                        "#         m += 1"
                    ],
                    [
                        77,
                        "#         issues_monthly.append(0)"
                    ],
                    [
                        78,
                        "#     issues_monthly[m] += 1"
                    ],
                    [
                        79,
                        "#"
                    ],
                    [
                        80,
                        "# fig, ax1 = plt.subplots()"
                    ],
                    [
                        81,
                        "# ax1.plot(additions, color='g', label='Additions')"
                    ],
                    [
                        82,
                        "# ax1.plot(deletions, color='r', label='Deletions')"
                    ],
                    [
                        83,
                        "# ax1.plot(loc, color='0', label='LOC')"
                    ],
                    [
                        84,
                        "# ax1.tick_params(axis='y', labelcolor='0.5')"
                    ],
                    [
                        85,
                        "#"
                    ],
                    [
                        86,
                        "# ax2 = ax1.twinx()"
                    ],
                    [
                        87,
                        "# ax2.plot(commits, color='y', label='Commits')"
                    ],
                    [
                        88,
                        "# ax2.plot(files, color='b', label='Files')"
                    ],
                    [
                        89,
                        "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')"
                    ],
                    [
                        90,
                        "# ax2.tick_params(axis='y', labelcolor='0.8')"
                    ],
                    [
                        91,
                        "#"
                    ],
                    [
                        92,
                        "# fig.tight_layout()"
                    ],
                    [
                        93,
                        "# ax1.legend()"
                    ],
                    [
                        94,
                        "# ax2.legend()"
                    ],
                    [
                        95,
                        "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        96,
                        "# plt.show()"
                    ],
                    [
                        97,
                        "#"
                    ],
                    [
                        98,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        99,
                        "from pydriller import Repository"
                    ],
                    [
                        100,
                        "import requests"
                    ],
                    [
                        101,
                        ""
                    ],
                    [
                        102,
                        "def analyze_commit_data(repo_url):"
                    ],
                    [
                        103,
                        "    # Initialize tracking variables"
                    ],
                    [
                        104,
                        "    monthly_commit_data = []"
                    ],
                    [
                        105,
                        "    current_month = 0"
                    ],
                    [
                        106,
                        "    current_year = 0"
                    ],
                    [
                        107,
                        "    monthly_additions = 0"
                    ],
                    [
                        108,
                        "    monthly_deletions = 0"
                    ],
                    [
                        109,
                        "    monthly_commit_count = 0"
                    ],
                    [
                        110,
                        "    modified_file_count = 0"
                    ],
                    [
                        111,
                        ""
                    ],
                    [
                        112,
                        "    # Traverse through all commits in the repository"
                    ],
                    [
                        113,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        114,
                        "        # If we encounter a new month, save the previous month's data"
                    ],
                    [
                        115,
                        "        if commit.committer_date.month != current_month:"
                    ],
                    [
                        116,
                        "            label = f\"{current_month}-{current_year}\""
                    ],
                    [
                        117,
                        "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])"
                    ],
                    [
                        118,
                        "            # Reset counters for the new month"
                    ],
                    [
                        119,
                        "            current_month = commit.committer_date.month"
                    ],
                    [
                        120,
                        "            current_year = commit.committer_date.year"
                    ],
                    [
                        121,
                        "            monthly_additions = 0"
                    ],
                    [
                        122,
                        "            monthly_deletions = 0"
                    ],
                    [
                        123,
                        "            monthly_commit_count = 0"
                    ],
                    [
                        124,
                        "            modified_file_count = 0"
                    ],
                    [
                        125,
                        ""
                    ],
                    [
                        126,
                        "        # Update current month's data"
                    ],
                    [
                        127,
                        "        monthly_commit_count += 1"
                    ],
                    [
                        128,
                        "        for file in commit.modified_files:"
                    ],
                    [
                        129,
                        "            monthly_additions += file.added_lines"
                    ],
                    [
                        130,
                        "            monthly_deletions += file.deleted_lines"
                    ],
                    [
                        131,
                        "            modified_file_count += 1"
                    ],
                    [
                        132,
                        ""
                    ],
                    [
                        133,
                        "    return monthly_commit_data"
                    ],
                    [
                        134,
                        ""
                    ],
                    [
                        135,
                        "def analyze_issues_data(repo_url, max_pages):"
                    ],
                    [
                        136,
                        "    issues_data = []"
                    ],
                    [
                        137,
                        "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\""
                    ],
                    [
                        138,
                        ""
                    ],
                    [
                        139,
                        "    # Fetch issues data from GitHub using pagination"
                    ],
                    [
                        140,
                        "    for page in range(1, max_pages + 1):"
                    ],
                    [
                        141,
                        "        params = {"
                    ],
                    [
                        142,
                        "            \"state\": \"all\","
                    ],
                    [
                        143,
                        "            \"direction\": \"asc\","
                    ],
                    [
                        144,
                        "            \"per_page\": 100,"
                    ],
                    [
                        145,
                        "            \"page\": page"
                    ],
                    [
                        146,
                        "        }"
                    ],
                    [
                        147,
                        "        response = requests.get(api_url, params=params)"
                    ],
                    [
                        148,
                        "        if response.status_code != 200:"
                    ],
                    [
                        149,
                        "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")"
                    ],
                    [
                        150,
                        "            break"
                    ],
                    [
                        151,
                        ""
                    ],
                    [
                        152,
                        "        issues_response = response.json()"
                    ],
                    [
                        153,
                        "        # Stop if no more issues are returned"
                    ],
                    [
                        154,
                        "        if not issues_response:"
                    ],
                    [
                        155,
                        "            break"
                    ],
                    [
                        156,
                        ""
                    ],
                    [
                        157,
                        "        # Extract necessary issue data"
                    ],
                    [
                        158,
                        "        for issue in issues_response:"
                    ],
                    [
                        159,
                        "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])"
                    ],
                    [
                        160,
                        ""
                    ],
                    [
                        161,
                        "    return issues_data"
                    ],
                    [
                        162,
                        ""
                    ],
                    [
                        163,
                        "def count_issues_monthly(issues_data):"
                    ],
                    [
                        164,
                        "    issues_per_month = [0,0,0,0]"
                    ],
                    [
                        165,
                        "    current_month = issues_data[0][1][5:7] if issues_data else None"
                    ],
                    [
                        166,
                        "    monthly_issue_count = 0"
                    ],
                    [
                        167,
                        ""
                    ],
                    [
                        168,
                        "    # Count issues per month"
                    ],
                    [
                        169,
                        "    for i in range(len(issues_data) - 1):"
                    ],
                    [
                        170,
                        "        issue_month = issues_data[i][1][5:7]"
                    ],
                    [
                        171,
                        "        next_issue_month = issues_data[i + 1][1][5:7]"
                    ],
                    [
                        172,
                        "        if issue_month != next_issue_month:"
                    ],
                    [
                        173,
                        "            issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        174,
                        "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])"
                    ],
                    [
                        175,
                        "            monthly_issue_count = 0"
                    ],
                    [
                        176,
                        "            current_month = next_issue_month"
                    ],
                    [
                        177,
                        "        monthly_issue_count += 1"
                    ],
                    [
                        178,
                        ""
                    ],
                    [
                        179,
                        "    # Add the last month's count"
                    ],
                    [
                        180,
                        "    issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        181,
                        "    return issues_per_month"
                    ],
                    [
                        182,
                        ""
                    ],
                    [
                        183,
                        "def calculate_loc(monthly_commit_data):"
                    ],
                    [
                        184,
                        "    # Calculate lines of code (LOC) changes over time"
                    ],
                    [
                        185,
                        "    loc_over_time = []"
                    ],
                    [
                        186,
                        "    total_loc = 0"
                    ],
                    [
                        187,
                        ""
                    ],
                    [
                        188,
                        "    for month_data in monthly_commit_data:"
                    ],
                    [
                        189,
                        "        additions = month_data[3]"
                    ],
                    [
                        190,
                        "        deletions = month_data[4]"
                    ],
                    [
                        191,
                        "        total_loc += additions - deletions"
                    ],
                    [
                        192,
                        "        loc_over_time.append(total_loc)"
                    ],
                    [
                        193,
                        ""
                    ],
                    [
                        194,
                        "    return loc_over_time"
                    ],
                    [
                        195,
                        ""
                    ],
                    [
                        196,
                        "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):"
                    ],
                    [
                        197,
                        "    # Extract data for plotting"
                    ],
                    [
                        198,
                        "    monthly_labels = [data[0] for data in monthly_commit_data]"
                    ],
                    [
                        199,
                        "    monthly_commits = [data[1] for data in monthly_commit_data]"
                    ],
                    [
                        200,
                        "    modified_files = [data[2] for data in monthly_commit_data]"
                    ],
                    [
                        201,
                        "    monthly_additions = [data[3] for data in monthly_commit_data]"
                    ],
                    [
                        202,
                        "    monthly_deletions = [data[4] for data in monthly_commit_data]"
                    ],
                    [
                        203,
                        ""
                    ],
                    [
                        204,
                        "    for i in range(len(monthly_labels)):"
                    ],
                    [
                        205,
                        "        label = monthly_labels[i].split('-')"
                    ],
                    [
                        206,
                        "        if (len(label[0]) == 1):"
                    ],
                    [
                        207,
                        "            label[0] = \"0\" + label[0]"
                    ],
                    [
                        208,
                        "        label[1] = label[1][2:]"
                    ],
                    [
                        209,
                        "        monthly_labels[i] = label[1] + \"-\" + label[0]"
                    ],
                    [
                        210,
                        ""
                    ],
                    [
                        211,
                        "    # Plotting"
                    ],
                    [
                        212,
                        "    fig, ax1 = plt.subplots()"
                    ],
                    [
                        213,
                        ""
                    ],
                    [
                        214,
                        "    # Plot lines for additions, deletions, and LOC"
                    ],
                    [
                        215,
                        "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')"
                    ],
                    [
                        216,
                        "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')"
                    ],
                    [
                        217,
                        "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')"
                    ],
                    [
                        218,
                        "    ax1.tick_params(axis='y', labelcolor='black')"
                    ],
                    [
                        219,
                        ""
                    ],
                    [
                        220,
                        "    # Secondary Y-axis for commits, modified files, and issues"
                    ],
                    [
                        221,
                        "    ax2 = ax1.twinx()"
                    ],
                    [
                        222,
                        "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')"
                    ],
                    [
                        223,
                        "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')"
                    ],
                    [
                        224,
                        "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')"
                    ],
                    [
                        225,
                        "    ax2.tick_params(axis='y', labelcolor='grey')"
                    ],
                    [
                        226,
                        ""
                    ],
                    [
                        227,
                        "    # Finalize and show the plot"
                    ],
                    [
                        228,
                        "    fig.tight_layout()"
                    ],
                    [
                        229,
                        "    ax1.legend(loc='upper left')"
                    ],
                    [
                        230,
                        "    ax2.legend(loc='upper right')"
                    ],
                    [
                        231,
                        "    plt.xticks(rotation=45)"
                    ],
                    [
                        232,
                        "    plt.title(\"Repository Analysis\")"
                    ],
                    [
                        233,
                        "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        234,
                        "    plt.show()"
                    ],
                    [
                        235,
                        ""
                    ],
                    [
                        236,
                        "def main():"
                    ],
                    [
                        237,
                        "    repo_url = 'dani-garcia/vaultwarden'"
                    ],
                    [
                        238,
                        "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')"
                    ],
                    [
                        239,
                        "    issues_data = analyze_issues_data(repo_url, 50)"
                    ],
                    [
                        240,
                        "    issues_per_month = count_issues_monthly(issues_data)"
                    ],
                    [
                        241,
                        "    loc_over_time = calculate_loc(monthly_commit_data)"
                    ],
                    [
                        242,
                        "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)"
                    ],
                    [
                        243,
                        ""
                    ],
                    [
                        244,
                        "if __name__ == \"__main__\":"
                    ],
                    [
                        245,
                        "    main()"
                    ]
                ],
                "block_diff": []
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# For each file affected in the commit, create a trace",
                    "char_position_in_line": 8
                },
                {
                    "line": 100,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "char_position_in_line": 12
                },
                {
                    "line": 109,
                    "comment": "# Create an event for the current commit affecting this file",
                    "char_position_in_line": 12
                },
                {
                    "line": 115,
                    "comment": "# Add custom attributes for the event",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "#event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "char_position_in_line": 12
                },
                {
                    "line": 123,
                    "comment": "# Append the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 129,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 133,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 134,
                    "comment": "# commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 135,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 136,
                    "comment": "# print(\"Commit data has been saved to commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 137,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 144,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        }
    ],
    "XESConversion.py": [
        {
            "commit": "a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e",
            "timestamp": "2024-10-24T15:08:06+02:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        1,
                        "from pydriller import Repository"
                    ],
                    [
                        2,
                        "import json"
                    ],
                    [
                        3,
                        "import pm4py"
                    ],
                    [
                        4,
                        "from pm4py.objects.log.obj import EventLog, Trace, Event"
                    ],
                    [
                        5,
                        "from pm4py.objects.log.exporter.xes import exporter as xes_exporter"
                    ],
                    [
                        6,
                        ""
                    ],
                    [
                        7,
                        "def analyze_commits(repo_url):"
                    ],
                    [
                        8,
                        "    # This will hold the data for each file and its changes across commits"
                    ],
                    [
                        9,
                        "    commits_data = []"
                    ],
                    [
                        10,
                        ""
                    ],
                    [
                        11,
                        "    # Traverse through the commits in the repository"
                    ],
                    [
                        12,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        13,
                        "        commit_data = {"
                    ],
                    [
                        14,
                        "            \"timestamp\": commit.committer_date.isoformat(),"
                    ],
                    [
                        15,
                        "            \"author\": commit.author.name,"
                    ],
                    [
                        16,
                        "            \"files\": []"
                    ],
                    [
                        17,
                        "        }"
                    ],
                    [
                        18,
                        ""
                    ],
                    [
                        19,
                        "        # Analyze each file modified in the commit"
                    ],
                    [
                        20,
                        "        for modified_file in commit.modified_files:"
                    ],
                    [
                        21,
                        "            file_data = {"
                    ],
                    [
                        22,
                        "                \"filename\": modified_file.filename,"
                    ],
                    [
                        23,
                        "                \"additions\": modified_file.added_lines,"
                    ],
                    [
                        24,
                        "                \"deletions\": modified_file.deleted_lines,"
                    ],
                    [
                        25,
                        "                \"change_type\": modified_file.change_type.name,"
                    ],
                    [
                        26,
                        "                \"commit_message\": commit.msg"
                    ],
                    [
                        27,
                        "            }"
                    ],
                    [
                        28,
                        ""
                    ],
                    [
                        29,
                        "            # Use commit message keywords to determine activity type"
                    ],
                    [
                        30,
                        "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():"
                    ],
                    [
                        31,
                        "                file_data[\"activity\"] = \"Bug Fix\""
                    ],
                    [
                        32,
                        "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():"
                    ],
                    [
                        33,
                        "                file_data[\"activity\"] = \"Feature Development\""
                    ],
                    [
                        34,
                        "            elif \"refactor\" in commit.msg.lower():"
                    ],
                    [
                        35,
                        "                file_data[\"activity\"] = \"Refactoring\""
                    ],
                    [
                        36,
                        "            else:"
                    ],
                    [
                        37,
                        "                file_data[\"activity\"] = \"Other\""
                    ],
                    [
                        38,
                        ""
                    ],
                    [
                        39,
                        "            # Generate effect/meaning keywords based on the commit message and type of changes"
                    ],
                    [
                        40,
                        "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)"
                    ],
                    [
                        41,
                        ""
                    ],
                    [
                        42,
                        "            commit_data[\"files\"].append(file_data)"
                    ],
                    [
                        43,
                        ""
                    ],
                    [
                        44,
                        "        # Store the processed commit data"
                    ],
                    [
                        45,
                        "        commits_data.append(commit_data)"
                    ],
                    [
                        46,
                        ""
                    ],
                    [
                        47,
                        "    return commits_data"
                    ],
                    [
                        48,
                        ""
                    ],
                    [
                        49,
                        "def extract_keywords(commit_message, modified_file):"
                    ],
                    [
                        50,
                        "    # This function can use NLP techniques or simple keyword extraction"
                    ],
                    [
                        51,
                        "    # Here, a simplified approach is used: basic keywords based on the commit message"
                    ],
                    [
                        52,
                        "    keywords = []"
                    ],
                    [
                        53,
                        "    if \"performance\" in commit_message.lower():"
                    ],
                    [
                        54,
                        "        keywords.append(\"performance\")"
                    ],
                    [
                        55,
                        "    if \"security\" in commit_message.lower():"
                    ],
                    [
                        56,
                        "        keywords.append(\"security\")"
                    ],
                    [
                        57,
                        "    if modified_file.added_lines > modified_file.deleted_lines:"
                    ],
                    [
                        58,
                        "        keywords.append(\"expansion\")"
                    ],
                    [
                        59,
                        "    else:"
                    ],
                    [
                        60,
                        "        keywords.append(\"optimization\")"
                    ],
                    [
                        61,
                        ""
                    ],
                    [
                        62,
                        "    return keywords"
                    ],
                    [
                        63,
                        ""
                    ],
                    [
                        64,
                        "def save_to_json(commits_data, filename):"
                    ],
                    [
                        65,
                        "    # Save the processed commit data to a JSON file"
                    ],
                    [
                        66,
                        "    with open(filename, 'w') as json_file:"
                    ],
                    [
                        67,
                        "        json.dump(commits_data, json_file, indent=4)"
                    ],
                    [
                        68,
                        ""
                    ],
                    [
                        69,
                        ""
                    ],
                    [
                        70,
                        ""
                    ],
                    [
                        71,
                        "def create_xes_log(commits_data):"
                    ],
                    [
                        72,
                        "    # Create a new EventLog object"
                    ],
                    [
                        73,
                        "    log = EventLog()"
                    ],
                    [
                        74,
                        ""
                    ],
                    [
                        75,
                        "    # Iterate over each commit entry in the data"
                    ],
                    [
                        76,
                        "    for commit_data in commits_data:"
                    ],
                    [
                        77,
                        "        # For each file affected in the commit, create a trace"
                    ],
                    [
                        78,
                        "        for file_data in commit_data['files']:"
                    ],
                    [
                        79,
                        "            # Check if a trace for this file already exists, if not, create one"
                    ],
                    [
                        80,
                        "            trace_name = file_data['filename']"
                    ],
                    [
                        81,
                        "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)"
                    ],
                    [
                        82,
                        ""
                    ],
                    [
                        83,
                        "            if trace is None:"
                    ],
                    [
                        84,
                        "                trace = Trace()"
                    ],
                    [
                        85,
                        "                trace.attributes[\"concept:name\"] = trace_name"
                    ],
                    [
                        86,
                        "                log.append(trace)"
                    ],
                    [
                        87,
                        ""
                    ],
                    [
                        88,
                        "            # Create an event for the current commit affecting this file"
                    ],
                    [
                        89,
                        "            event = Event()"
                    ],
                    [
                        90,
                        "            event[\"concept:name\"] = file_data['activity']"
                    ],
                    [
                        91,
                        "            event[\"time:timestamp\"] = commit_data['timestamp']"
                    ],
                    [
                        92,
                        "            event[\"org:resource\"] = commit_data['author']"
                    ],
                    [
                        93,
                        ""
                    ],
                    [
                        94,
                        "            # Add custom attributes for the event"
                    ],
                    [
                        95,
                        "            event[\"additions\"] = file_data['additions']"
                    ],
                    [
                        96,
                        "            event[\"deletions\"] = file_data['deletions']"
                    ],
                    [
                        97,
                        "            event[\"change_type\"] = file_data['change_type']"
                    ],
                    [
                        98,
                        "            event[\"commit_message\"] = file_data['commit_message']"
                    ],
                    [
                        99,
                        "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        100,
                        ""
                    ],
                    [
                        101,
                        "            # Append the event to the trace"
                    ],
                    [
                        102,
                        "            trace.append(event)"
                    ],
                    [
                        103,
                        ""
                    ],
                    [
                        104,
                        "    return log"
                    ],
                    [
                        105,
                        ""
                    ],
                    [
                        106,
                        "def save_xes_log(log, filename):"
                    ],
                    [
                        107,
                        "    # Export the log to an XES file"
                    ],
                    [
                        108,
                        "    xes_exporter.apply(log, filename)"
                    ],
                    [
                        109,
                        ""
                    ],
                    [
                        110,
                        "if __name__ == \"__main__\":"
                    ],
                    [
                        111,
                        "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL"
                    ],
                    [
                        112,
                        "    commits_data = analyze_commits(repo_url)"
                    ],
                    [
                        113,
                        "    save_to_json(commits_data, \"commits_data.json\")"
                    ],
                    [
                        114,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        115,
                        "     # Load the previously saved commit data JSON file"
                    ],
                    [
                        116,
                        "    with open(\"commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        117,
                        "        commits_data = json.load(json_file)"
                    ],
                    [
                        118,
                        ""
                    ],
                    [
                        119,
                        "    # Create the XES log from the commit data"
                    ],
                    [
                        120,
                        "    xes_log = create_xes_log(commits_data)"
                    ],
                    [
                        121,
                        ""
                    ],
                    [
                        122,
                        "    # Save the XES log to a file"
                    ],
                    [
                        123,
                        "    save_xes_log(xes_log, \"commits_data.xes\")"
                    ],
                    [
                        124,
                        ""
                    ],
                    [
                        125,
                        "    print(\"XES log has been saved to commits_data.xes\")"
                    ]
                ],
                "deleted": [],
                "block_diff": [
                    {
                        "lines": [
                            1,
                            2
                        ],
                        "contents": [
                            "from pydriller import Repository",
                            "import json"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            19,
                            20,
                            21,
                            22,
                            23,
                            24,
                            25,
                            26,
                            27,
                            28,
                            29,
                            30,
                            31,
                            32,
                            33,
                            34,
                            35,
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70,
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84,
                            85,
                            86,
                            87,
                            88,
                            89,
                            90,
                            91,
                            92,
                            93,
                            94,
                            95,
                            96,
                            97,
                            98,
                            99,
                            100
                        ],
                        "contents": [
                            "import pm4py",
                            "from pm4py.objects.log.obj import EventLog, Trace, Event",
                            "from pm4py.objects.log.exporter.xes import exporter as xes_exporter",
                            "",
                            "def analyze_commits(repo_url):",
                            "    # This will hold the data for each file and its changes across commits",
                            "    commits_data = []",
                            "",
                            "    # Traverse through the commits in the repository",
                            "    for commit in Repository(repo_url).traverse_commits():",
                            "        commit_data = {",
                            "            \"timestamp\": commit.committer_date.isoformat(),",
                            "            \"author\": commit.author.name,",
                            "            \"files\": []",
                            "        }",
                            "",
                            "        # Analyze each file modified in the commit",
                            "        for modified_file in commit.modified_files:",
                            "            file_data = {",
                            "                \"filename\": modified_file.filename,",
                            "                \"additions\": modified_file.added_lines,",
                            "                \"deletions\": modified_file.deleted_lines,",
                            "                \"change_type\": modified_file.change_type.name,",
                            "                \"commit_message\": commit.msg",
                            "            }",
                            "",
                            "            # Use commit message keywords to determine activity type",
                            "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                            "                file_data[\"activity\"] = \"Bug Fix\"",
                            "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                            "                file_data[\"activity\"] = \"Feature Development\"",
                            "            elif \"refactor\" in commit.msg.lower():",
                            "                file_data[\"activity\"] = \"Refactoring\"",
                            "            else:",
                            "                file_data[\"activity\"] = \"Other\"",
                            "",
                            "            # Generate effect/meaning keywords based on the commit message and type of changes",
                            "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)",
                            "",
                            "            commit_data[\"files\"].append(file_data)",
                            "",
                            "        # Store the processed commit data",
                            "        commits_data.append(commit_data)",
                            "",
                            "    return commits_data",
                            "",
                            "def extract_keywords(commit_message, modified_file):",
                            "    # This function can use NLP techniques or simple keyword extraction",
                            "    # Here, a simplified approach is used: basic keywords based on the commit message",
                            "    keywords = []",
                            "    if \"performance\" in commit_message.lower():",
                            "        keywords.append(\"performance\")",
                            "    if \"security\" in commit_message.lower():",
                            "        keywords.append(\"security\")",
                            "    if modified_file.added_lines > modified_file.deleted_lines:",
                            "        keywords.append(\"expansion\")",
                            "    else:",
                            "        keywords.append(\"optimization\")",
                            "",
                            "    return keywords",
                            "",
                            "def save_to_json(commits_data, filename):",
                            "    # Save the processed commit data to a JSON file",
                            "    with open(filename, 'w') as json_file:",
                            "        json.dump(commits_data, json_file, indent=4)",
                            "",
                            "",
                            "",
                            "def create_xes_log(commits_data):",
                            "    # Create a new EventLog object",
                            "    log = EventLog()",
                            "",
                            "    # Iterate over each commit entry in the data",
                            "    for commit_data in commits_data:",
                            "        # For each file affected in the commit, create a trace",
                            "        for file_data in commit_data['files']:",
                            "            # Check if a trace for this file already exists, if not, create one",
                            "            trace_name = file_data['filename']",
                            "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)",
                            "",
                            "            if trace is None:",
                            "                trace = Trace()",
                            "                trace.attributes[\"concept:name\"] = trace_name",
                            "                log.append(trace)",
                            "",
                            "            # Create an event for the current commit affecting this file",
                            "            event = Event()",
                            "            event[\"concept:name\"] = file_data['activity']",
                            "            event[\"time:timestamp\"] = commit_data['timestamp']",
                            "            event[\"org:resource\"] = commit_data['author']",
                            "",
                            "            # Add custom attributes for the event",
                            "            event[\"additions\"] = file_data['additions']",
                            "            event[\"deletions\"] = file_data['deletions']",
                            "            event[\"change_type\"] = file_data['change_type']",
                            "            event[\"commit_message\"] = file_data['commit_message']",
                            "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                            ""
                        ],
                        "comments": [
                            "# from pydriller import Repository",
                            "# import numpy as np",
                            "# import requests",
                            "# import json",
                            "# from flask import Response",
                            "# ",
                            "# commits_monthly = list()",
                            "# curr_month = 0",
                            "# curr_year = 0",
                            "# i = 0",
                            "# month_del = 0",
                            "# month_add = 0",
                            "# month_commits = 0",
                            "# filecounter = 0",
                            "# ",
                            "# ",
                            "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                            "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                            "#     if (commit.committer_date.month != curr_month):",
                            "#         label = str(curr_month) + \"-\" + str(curr_year)",
                            "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                            "#         curr_month = commit.committer_date.month",
                            "#         curr_year = commit.committer_date.year",
                            "#         i += 1",
                            "#         filecounter = 0",
                            "#         month_del = 0",
                            "#         month_add = 0",
                            "#         month_commits = 0",
                            "# ",
                            "#     month_commits += 1",
                            "#     for file in commit.modified_files:",
                            "#         month_add += file.added_lines",
                            "#         month_del += file.deleted_lines",
                            "#         filecounter += 1",
                            "#     ",
                            "# commits = []",
                            "# additions = []",
                            "# deletions = []",
                            "# files = []",
                            "# loc = []",
                            "# issues = []",
                            "# ",
                            "# for i in range(0, len(commits_monthly)):",
                            "#     commits.append(commits_monthly[i][1])",
                            "#     files.append(commits_monthly[i][2])",
                            "#     additions.append(commits_monthly[i][3])",
                            "#     deletions.append(commits_monthly[i][4])",
                            "#     if (i == 0):",
                            "#         loc.append(additions[i] - deletions[i])",
                            "#     else: ",
                            "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                            "# ",
                            "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                            "# for i in range (1, 50):",
                            "#     params = {",
                            "#         \"state\": \"all\",",
                            "#         \"direction\": \"asc\",",
                            "#         \"per_page\": 100,",
                            "#         \"page\" : i",
                            "#     }",
                            "#     response = requests.get(api_url, params=params)",
                            "#     issues_response = response.json()",
                            "#     for issue in issues_response:",
                            "#         issue_data = []",
                            "#         issue_data.append(issue['number'])",
                            "#         issue_data.append(issue['created_at'])",
                            "#         issue_data.append(issue['closed_at'])",
                            "#         issues.append(issue_data)",
                            "# ",
                            "# m = 0",
                            "# issues_monthly = [0]",
                            "# for i in range(len(issues)):",
                            "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                            "#         m += 1",
                            "#         issues_monthly.append(0)",
                            "#     issues_monthly[m] += 1",
                            "# ",
                            "# fig, ax1 = plt.subplots()",
                            "# ax1.plot(additions, color='g', label='Additions')",
                            "# ax1.plot(deletions, color='r', label='Deletions')",
                            "# ax1.plot(loc, color='0', label='LOC')",
                            "# ax1.tick_params(axis='y', labelcolor='0.5')",
                            "# ",
                            "# ax2 = ax1.twinx()",
                            "# ax2.plot(commits, color='y', label='Commits')",
                            "# ax2.plot(files, color='b', label='Files')",
                            "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                            "# ax2.tick_params(axis='y', labelcolor='0.8')",
                            "# ",
                            "# fig.tight_layout()",
                            "# ax1.legend()",
                            "# ax2.legend()",
                            "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                            "# plt.show()",
                            "# ",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            101,
                            102
                        ],
                        "contents": [
                            "            # Append the event to the trace",
                            "            trace.append(event)"
                        ],
                        "comments": [
                            "# Append the event to the trace",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            103,
                            104,
                            105,
                            106
                        ],
                        "contents": [
                            "",
                            "    return log",
                            "",
                            "def save_xes_log(log, filename):"
                        ],
                        "comments": [
                            "# Initialize tracking variables",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            107,
                            108,
                            109,
                            110
                        ],
                        "contents": [
                            "    # Export the log to an XES file",
                            "    xes_exporter.apply(log, filename)",
                            "",
                            "if __name__ == \"__main__\":"
                        ],
                        "comments": [
                            "# Export the log to an XES file",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            111,
                            112,
                            113
                        ],
                        "contents": [
                            "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL",
                            "    commits_data = analyze_commits(repo_url)",
                            "    save_to_json(commits_data, \"commits_data.json\")"
                        ],
                        "comments": [
                            "# Example repository URL",
                            "# Traverse through all commits in the repository",
                            ""
                        ],
                        "comment_positions": [
                            61,
                            4,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            114,
                            115,
                            116,
                            117
                        ],
                        "contents": [
                            "    print(\"Commit data has been saved to commits_data.json\")",
                            "     # Load the previously saved commit data JSON file",
                            "    with open(\"commits_data.json\", \"r\") as json_file:",
                            "        commits_data = json.load(json_file)"
                        ],
                        "comments": [
                            "# If we encounter a new month, save the previous month's data",
                            "# Load the previously saved commit data JSON file",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            5,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            118,
                            119,
                            120,
                            121
                        ],
                        "contents": [
                            "",
                            "    # Create the XES log from the commit data",
                            "    xes_log = create_xes_log(commits_data)",
                            ""
                        ],
                        "comments": [
                            "# Reset counters for the new month",
                            "# Create the XES log from the commit data",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            4,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            122,
                            123,
                            124,
                            125
                        ],
                        "contents": [
                            "    # Save the XES log to a file",
                            "    save_xes_log(xes_log, \"commits_data.xes\")",
                            "",
                            "    print(\"XES log has been saved to commits_data.xes\")"
                        ],
                        "comments": [
                            "# Save the XES log to a file",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 8,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 11,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 19,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 29,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 39,
                    "comment": "# Generate effect/meaning keywords based on the commit message and type of changes",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 44,
                    "comment": "# Store the processed commit data",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 50,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 51,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 65,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 72,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 75,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 77,
                    "comment": "# For each file affected in the commit, create a trace",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 79,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 88,
                    "comment": "# Create an event for the current commit affecting this file",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 94,
                    "comment": "# Add custom attributes for the event",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 101,
                    "comment": "# Append the event to the trace",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 107,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 111,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61,
                    "edit": "added"
                },
                {
                    "line": 115,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 5,
                    "edit": "added"
                },
                {
                    "line": 119,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 122,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 3,
                    "comment": "# from pydriller import Repository",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 4,
                    "comment": "# import numpy as np",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 5,
                    "comment": "# import requests",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 6,
                    "comment": "# import json",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 7,
                    "comment": "# from flask import Response",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 8,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 9,
                    "comment": "# commits_monthly = list()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 10,
                    "comment": "# curr_month = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 11,
                    "comment": "# curr_year = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 12,
                    "comment": "# i = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 13,
                    "comment": "# month_del = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 14,
                    "comment": "# month_add = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 15,
                    "comment": "# month_commits = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 16,
                    "comment": "# filecounter = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 17,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 18,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 19,
                    "comment": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 20,
                    "comment": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 21,
                    "comment": "#     if (commit.committer_date.month != curr_month):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 22,
                    "comment": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 23,
                    "comment": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 24,
                    "comment": "#         curr_month = commit.committer_date.month",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 25,
                    "comment": "#         curr_year = commit.committer_date.year",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 26,
                    "comment": "#         i += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 27,
                    "comment": "#         filecounter = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 28,
                    "comment": "#         month_del = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 29,
                    "comment": "#         month_add = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 30,
                    "comment": "#         month_commits = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 31,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 32,
                    "comment": "#     month_commits += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 33,
                    "comment": "#     for file in commit.modified_files:",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 34,
                    "comment": "#         month_add += file.added_lines",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 35,
                    "comment": "#         month_del += file.deleted_lines",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 36,
                    "comment": "#         filecounter += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 37,
                    "comment": "#     ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 38,
                    "comment": "# commits = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 39,
                    "comment": "# additions = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 40,
                    "comment": "# deletions = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 41,
                    "comment": "# files = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 42,
                    "comment": "# loc = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 43,
                    "comment": "# issues = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 44,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 45,
                    "comment": "# for i in range(0, len(commits_monthly)):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 46,
                    "comment": "#     commits.append(commits_monthly[i][1])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 47,
                    "comment": "#     files.append(commits_monthly[i][2])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 48,
                    "comment": "#     additions.append(commits_monthly[i][3])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 49,
                    "comment": "#     deletions.append(commits_monthly[i][4])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 50,
                    "comment": "#     if (i == 0):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 51,
                    "comment": "#         loc.append(additions[i] - deletions[i])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 52,
                    "comment": "#     else: ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 53,
                    "comment": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 54,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 55,
                    "comment": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 56,
                    "comment": "# for i in range (1, 50):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 57,
                    "comment": "#     params = {",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 58,
                    "comment": "#         \"state\": \"all\",",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 59,
                    "comment": "#         \"direction\": \"asc\",",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 60,
                    "comment": "#         \"per_page\": 100,",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 61,
                    "comment": "#         \"page\" : i",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 62,
                    "comment": "#     }",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 63,
                    "comment": "#     response = requests.get(api_url, params=params)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 64,
                    "comment": "#     issues_response = response.json()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 65,
                    "comment": "#     for issue in issues_response:",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 66,
                    "comment": "#         issue_data = []",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 67,
                    "comment": "#         issue_data.append(issue['number'])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 68,
                    "comment": "#         issue_data.append(issue['created_at'])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 69,
                    "comment": "#         issue_data.append(issue['closed_at'])",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 70,
                    "comment": "#         issues.append(issue_data)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 71,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 72,
                    "comment": "# m = 0",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 73,
                    "comment": "# issues_monthly = [0]",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 74,
                    "comment": "# for i in range(len(issues)):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 75,
                    "comment": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 76,
                    "comment": "#         m += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 77,
                    "comment": "#         issues_monthly.append(0)",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 78,
                    "comment": "#     issues_monthly[m] += 1",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 79,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 80,
                    "comment": "# fig, ax1 = plt.subplots()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 81,
                    "comment": "# ax1.plot(additions, color='g', label='Additions')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 82,
                    "comment": "# ax1.plot(deletions, color='r', label='Deletions')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 83,
                    "comment": "# ax1.plot(loc, color='0', label='LOC')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 84,
                    "comment": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 85,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 86,
                    "comment": "# ax2 = ax1.twinx()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 87,
                    "comment": "# ax2.plot(commits, color='y', label='Commits')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 88,
                    "comment": "# ax2.plot(files, color='b', label='Files')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 89,
                    "comment": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 90,
                    "comment": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 91,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 92,
                    "comment": "# fig.tight_layout()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 93,
                    "comment": "# ax1.legend()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 94,
                    "comment": "# ax2.legend()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 95,
                    "comment": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 96,
                    "comment": "# plt.show()",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 97,
                    "comment": "# ",
                    "char_position_in_line": 0,
                    "edit": "added"
                },
                {
                    "line": 103,
                    "comment": "# Initialize tracking variables",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 112,
                    "comment": "# Traverse through all commits in the repository",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 114,
                    "comment": "# If we encounter a new month, save the previous month's data",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 118,
                    "comment": "# Reset counters for the new month",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 126,
                    "comment": "# Update current month's data",
                    "char_position_in_line": 8
                },
                {
                    "line": 139,
                    "comment": "# Fetch issues data from GitHub using pagination",
                    "char_position_in_line": 4
                },
                {
                    "line": 153,
                    "comment": "# Stop if no more issues are returned",
                    "char_position_in_line": 8
                },
                {
                    "line": 157,
                    "comment": "# Extract necessary issue data",
                    "char_position_in_line": 8
                },
                {
                    "line": 168,
                    "comment": "# Count issues per month",
                    "char_position_in_line": 4
                },
                {
                    "line": 179,
                    "comment": "# Add the last month's count",
                    "char_position_in_line": 4
                },
                {
                    "line": 184,
                    "comment": "# Calculate lines of code (LOC) changes over time",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Extract data for plotting",
                    "char_position_in_line": 4
                },
                {
                    "line": 211,
                    "comment": "# Plotting",
                    "char_position_in_line": 4
                },
                {
                    "line": 214,
                    "comment": "# Plot lines for additions, deletions, and LOC",
                    "char_position_in_line": 4
                },
                {
                    "line": 220,
                    "comment": "# Secondary Y-axis for commits, modified files, and issues",
                    "char_position_in_line": 4
                },
                {
                    "line": 227,
                    "comment": "# Finalize and show the plot",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "1061293a43b0788f9db921ae6fc61734ccdf1b8d",
            "timestamp": "2024-11-16T19:39:45+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        4,
                        "import datetime"
                    ],
                    [
                        8,
                        "def analyze_commits(repo_url, comment_symbol, language_file_extension):"
                    ],
                    [
                        10,
                        "    files_data = {}"
                    ],
                    [
                        12,
                        "    # Analysis range"
                    ],
                    [
                        13,
                        "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)"
                    ],
                    [
                        16,
                        "    # Traverse through the commits in the repository"
                    ],
                    [
                        17,
                        "    # Only save commits, that contain at least one file of the format {language_file_extension}"
                    ],
                    [
                        18,
                        "    for commit in Repository(repo_url,"
                    ],
                    [
                        19,
                        "    only_modifications_with_file_types=[f\".{language_file_extension}\"],"
                    ],
                    [
                        20,
                        "    since=dt1,"
                    ],
                    [
                        21,
                        "    to=dt2).traverse_commits():"
                    ],
                    [
                        24,
                        "            # only store file data for Rust files"
                    ],
                    [
                        25,
                        "            if modified_file.filename not in files_data:"
                    ],
                    [
                        26,
                        "                files_data[modified_file.filename] = []"
                    ],
                    [
                        27,
                        "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:"
                    ],
                    [
                        28,
                        "                file_data = {"
                    ],
                    [
                        29,
                        "                    \"commit\": commit.hash,"
                    ],
                    [
                        30,
                        "                    \"timestamp\": commit.committer_date.isoformat(),"
                    ],
                    [
                        31,
                        "                    \"author\": commit.author.name,"
                    ],
                    [
                        32,
                        "                    \"commit_message\": commit.msg,"
                    ],
                    [
                        33,
                        "                    \"additions\": modified_file.added_lines,"
                    ],
                    [
                        34,
                        "                    \"deletions\": modified_file.deleted_lines,"
                    ],
                    [
                        35,
                        "                    \"change_type\": modified_file.change_type.name,"
                    ],
                    [
                        36,
                        "                    \"diff\": modified_file.diff"
                    ],
                    [
                        37,
                        "                }"
                    ],
                    [
                        38,
                        "                diff_added = {}"
                    ],
                    [
                        39,
                        "                diff_deleted = {}"
                    ],
                    [
                        40,
                        "                diff_modified = {}"
                    ],
                    [
                        41,
                        "                for line in modified_file.diff_parsed[\"added\"]:"
                    ],
                    [
                        42,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        43,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        44,
                        "                file_data[\"comment_added_diff\"] = diff_added"
                    ],
                    [
                        45,
                        "                for line in modified_file.diff_parsed[\"deleted\"]:"
                    ],
                    [
                        46,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        47,
                        "                        diff_deleted[line[0]] = line[1]"
                    ],
                    [
                        48,
                        "                    if line[0] in diff_added.keys():"
                    ],
                    [
                        49,
                        "                        diff_modified[line[0]] = line[1]"
                    ],
                    [
                        50,
                        "                file_data[\"comment_deleted_diff\"] = diff_deleted"
                    ],
                    [
                        51,
                        "                file_data[\"comment_modified_diff\"] = diff_modified"
                    ],
                    [
                        52,
                        "                # Generate keywords based on the commit message and type of changes"
                    ],
                    [
                        53,
                        "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)"
                    ],
                    [
                        54,
                        "                # Extract type of commit from commit message"
                    ],
                    [
                        55,
                        "                # file_data[\"activity\"] = extract_activity(commit.msg)"
                    ],
                    [
                        56,
                        "                if len(diff_added) + len(diff_deleted) != 0:"
                    ],
                    [
                        57,
                        "                    files_data[modified_file.filename].append(file_data)"
                    ],
                    [
                        58,
                        "    return files_data"
                    ],
                    [
                        74,
                        "def extract_activity(commit_message):"
                    ],
                    [
                        75,
                        "    # Use commit message keywords to determine activity type"
                    ],
                    [
                        76,
                        "    activity = \"\""
                    ],
                    [
                        77,
                        "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():"
                    ],
                    [
                        78,
                        "        activity = \"Bug Fix\""
                    ],
                    [
                        79,
                        "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():"
                    ],
                    [
                        80,
                        "        activity = \"Feature Development\""
                    ],
                    [
                        81,
                        "    elif \"refactor\" in commit.msg.lower():"
                    ],
                    [
                        82,
                        "        activity = \"Refactoring\""
                    ],
                    [
                        83,
                        "    else:"
                    ],
                    [
                        84,
                        "        activity = \"Other\""
                    ],
                    [
                        85,
                        "    return activity"
                    ],
                    [
                        86,
                        ""
                    ],
                    [
                        92,
                        "def create_xes_log(data):"
                    ],
                    [
                        97,
                        "    for file in data:"
                    ],
                    [
                        120,
                        "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        121,
                        "            event[\"diff\"] = file_data[\"diff\"]"
                    ],
                    [
                        133,
                        "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL"
                    ],
                    [
                        134,
                        "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ],
                    [
                        135,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        136,
                        "    # print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        137,
                        "    # Load the previously saved commit data JSON file"
                    ],
                    [
                        138,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        139,
                        "       commits_data = json.load(json_file)"
                    ],
                    [
                        145,
                        "    save_xes_log(xes_log, \"Data/commits_data.xes\")"
                    ]
                ],
                "deleted": [
                    [
                        7,
                        "def analyze_commits(repo_url):"
                    ],
                    [
                        9,
                        "    commits_data = []"
                    ],
                    [
                        11,
                        "    # Traverse through the commits in the repository"
                    ],
                    [
                        12,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        13,
                        "        commit_data = {"
                    ],
                    [
                        14,
                        "            \"timestamp\": commit.committer_date.isoformat(),"
                    ],
                    [
                        15,
                        "            \"author\": commit.author.name,"
                    ],
                    [
                        16,
                        "            \"files\": []"
                    ],
                    [
                        17,
                        "        }"
                    ],
                    [
                        21,
                        "            file_data = {"
                    ],
                    [
                        22,
                        "                \"filename\": modified_file.filename,"
                    ],
                    [
                        23,
                        "                \"additions\": modified_file.added_lines,"
                    ],
                    [
                        24,
                        "                \"deletions\": modified_file.deleted_lines,"
                    ],
                    [
                        25,
                        "                \"change_type\": modified_file.change_type.name,"
                    ],
                    [
                        26,
                        "                \"commit_message\": commit.msg"
                    ],
                    [
                        27,
                        "            }"
                    ],
                    [
                        28,
                        ""
                    ],
                    [
                        29,
                        "            # Use commit message keywords to determine activity type"
                    ],
                    [
                        30,
                        "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():"
                    ],
                    [
                        31,
                        "                file_data[\"activity\"] = \"Bug Fix\""
                    ],
                    [
                        32,
                        "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():"
                    ],
                    [
                        33,
                        "                file_data[\"activity\"] = \"Feature Development\""
                    ],
                    [
                        34,
                        "            elif \"refactor\" in commit.msg.lower():"
                    ],
                    [
                        35,
                        "                file_data[\"activity\"] = \"Refactoring\""
                    ],
                    [
                        36,
                        "            else:"
                    ],
                    [
                        37,
                        "                file_data[\"activity\"] = \"Other\""
                    ],
                    [
                        38,
                        ""
                    ],
                    [
                        39,
                        "            # Generate effect/meaning keywords based on the commit message and type of changes"
                    ],
                    [
                        40,
                        "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)"
                    ],
                    [
                        41,
                        ""
                    ],
                    [
                        42,
                        "            commit_data[\"files\"].append(file_data)"
                    ],
                    [
                        43,
                        ""
                    ],
                    [
                        44,
                        "        # Store the processed commit data"
                    ],
                    [
                        45,
                        "        commits_data.append(commit_data)"
                    ],
                    [
                        46,
                        ""
                    ],
                    [
                        47,
                        "    return commits_data"
                    ],
                    [
                        61,
                        ""
                    ],
                    [
                        69,
                        ""
                    ],
                    [
                        70,
                        ""
                    ],
                    [
                        71,
                        "def create_xes_log(commits_data):"
                    ],
                    [
                        76,
                        "    for commit_data in commits_data:"
                    ],
                    [
                        99,
                        "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        111,
                        "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL"
                    ],
                    [
                        112,
                        "    commits_data = analyze_commits(repo_url)"
                    ],
                    [
                        113,
                        "    save_to_json(commits_data, \"commits_data.json\")"
                    ],
                    [
                        114,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        115,
                        "     # Load the previously saved commit data JSON file"
                    ],
                    [
                        116,
                        "    with open(\"commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        117,
                        "        commits_data = json.load(json_file)"
                    ],
                    [
                        123,
                        "    save_xes_log(xes_log, \"commits_data.xes\")"
                    ],
                    [
                        124,
                        ""
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            4
                        ],
                        "contents": [
                            "import datetime"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            8
                        ],
                        "contents": [
                            "def analyze_commits(repo_url, comment_symbol, language_file_extension):"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            10
                        ],
                        "contents": [
                            "    files_data = {}"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            12,
                            13,
                            14
                        ],
                        "contents": [
                            "    # Analysis range",
                            "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                            "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)"
                        ],
                        "comments": [
                            "# Analysis range",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            16,
                            17,
                            18,
                            19,
                            20,
                            21
                        ],
                        "contents": [
                            "    # Traverse through the commits in the repository",
                            "    # Only save commits, that contain at least one file of the format {language_file_extension}",
                            "    for commit in Repository(repo_url,",
                            "    only_modifications_with_file_types=[f\".{language_file_extension}\"],",
                            "    since=dt1,",
                            "    to=dt2).traverse_commits():"
                        ],
                        "comments": [
                            "# Traverse through the commits in the repository",
                            "# Only save commits, that contain at least one file of the format {language_file_extension}",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            4,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            24,
                            25,
                            26,
                            27,
                            28,
                            29,
                            30,
                            31,
                            32,
                            33,
                            34,
                            35,
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51
                        ],
                        "contents": [
                            "            # only store file data for Rust files",
                            "            if modified_file.filename not in files_data:",
                            "                files_data[modified_file.filename] = []",
                            "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:",
                            "                file_data = {",
                            "                    \"commit\": commit.hash,",
                            "                    \"timestamp\": commit.committer_date.isoformat(),",
                            "                    \"author\": commit.author.name,",
                            "                    \"commit_message\": commit.msg,",
                            "                    \"additions\": modified_file.added_lines,",
                            "                    \"deletions\": modified_file.deleted_lines,",
                            "                    \"change_type\": modified_file.change_type.name,",
                            "                    \"diff\": modified_file.diff",
                            "                }",
                            "                diff_added = {}",
                            "                diff_deleted = {}",
                            "                diff_modified = {}",
                            "                for line in modified_file.diff_parsed[\"added\"]:",
                            "                    if line[1].find(comment_symbol) != -1:",
                            "                        diff_added[line[0]] = line[1]",
                            "                file_data[\"comment_added_diff\"] = diff_added",
                            "                for line in modified_file.diff_parsed[\"deleted\"]:",
                            "                    if line[1].find(comment_symbol) != -1:",
                            "                        diff_deleted[line[0]] = line[1]",
                            "                    if line[0] in diff_added.keys():",
                            "                        diff_modified[line[0]] = line[1]",
                            "                file_data[\"comment_deleted_diff\"] = diff_deleted",
                            "                file_data[\"comment_modified_diff\"] = diff_modified"
                        ],
                        "comments": [
                            "# only store file data for Rust files",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58
                        ],
                        "contents": [
                            "                # Generate keywords based on the commit message and type of changes",
                            "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                            "                # Extract type of commit from commit message",
                            "                # file_data[\"activity\"] = extract_activity(commit.msg)",
                            "                if len(diff_added) + len(diff_deleted) != 0:",
                            "                    files_data[modified_file.filename].append(file_data)",
                            "    return files_data"
                        ],
                        "comments": [
                            "# Generate keywords based on the commit message and type of changes",
                            "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                            "# Extract type of commit from commit message",
                            "# file_data[\"activity\"] = extract_activity(commit.msg)",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            16,
                            16,
                            16,
                            16,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added",
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            74
                        ],
                        "contents": [
                            "def extract_activity(commit_message):"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84,
                            85,
                            86
                        ],
                        "contents": [
                            "    # Use commit message keywords to determine activity type",
                            "    activity = \"\"",
                            "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                            "        activity = \"Bug Fix\"",
                            "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                            "        activity = \"Feature Development\"",
                            "    elif \"refactor\" in commit.msg.lower():",
                            "        activity = \"Refactoring\"",
                            "    else:",
                            "        activity = \"Other\"",
                            "    return activity",
                            ""
                        ],
                        "comments": [
                            "# Use commit message keywords to determine activity type",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            92
                        ],
                        "contents": [
                            "def create_xes_log(data):"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            97
                        ],
                        "contents": [
                            "    for file in data:"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            120,
                            121
                        ],
                        "contents": [
                            "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                            "            event[\"diff\"] = file_data[\"diff\"]"
                        ],
                        "comments": [
                            "#event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            133,
                            134,
                            135,
                            136,
                            137,
                            138,
                            139
                        ],
                        "contents": [
                            "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL",
                            "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                            "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                            "    # print(\"Commit data has been saved to commits_data.json\")",
                            "    # Load the previously saved commit data JSON file",
                            "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "       commits_data = json.load(json_file)"
                        ],
                        "comments": [
                            "# Example repository URL",
                            "# commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                            "# save_to_json(commits_data, \"Data/commits_data.json\")",
                            "# print(\"Commit data has been saved to commits_data.json\")",
                            "# Load the previously saved commit data JSON file",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            49,
                            4,
                            4,
                            4,
                            4,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            145
                        ],
                        "contents": [
                            "    save_xes_log(xes_log, \"Data/commits_data.xes\")"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# For each file affected in the commit, create a trace",
                    "char_position_in_line": 8
                },
                {
                    "line": 100,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "char_position_in_line": 12
                },
                {
                    "line": 109,
                    "comment": "# Create an event for the current commit affecting this file",
                    "char_position_in_line": 12
                },
                {
                    "line": 115,
                    "comment": "# Add custom attributes for the event",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "#event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 123,
                    "comment": "# Append the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 129,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 133,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49,
                    "edit": "added"
                },
                {
                    "line": 134,
                    "comment": "# commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 135,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 136,
                    "comment": "# print(\"Commit data has been saved to commits_data.json\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 137,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 141,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 144,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "f73512c4aa778287e31d18e9d218502acf7479ee",
            "timestamp": "2024-11-16T20:51:56+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        97,
                        "    for file, commits in data.items():"
                    ],
                    [
                        98,
                        "        # Create a trace for the file"
                    ],
                    [
                        99,
                        "        trace = Trace()"
                    ],
                    [
                        100,
                        "        trace.attributes[\"file\"] = file"
                    ],
                    [
                        101,
                        ""
                    ],
                    [
                        102,
                        "        for commit in commits:"
                    ],
                    [
                        103,
                        "            # Extract event attributes"
                    ],
                    [
                        105,
                        "            event[\"timestamp\"] = commit.get(\"timestamp\")"
                    ],
                    [
                        106,
                        "            event[\"author\"] = commit.get(\"author\")"
                    ],
                    [
                        107,
                        "            event[\"change_type\"] = commit.get(\"change_type\")"
                    ],
                    [
                        108,
                        "            event[\"commit_message\"] = commit.get(\"commit_message\")"
                    ],
                    [
                        109,
                        "            event[\"additions\"] = commit.get(\"additions\")"
                    ],
                    [
                        110,
                        "            event[\"deletions\"] = commit.get(\"deletions\")"
                    ],
                    [
                        111,
                        "            event[\"diff\"] = commit.get(\"diff\")"
                    ],
                    [
                        112,
                        "            if commit.get(\"comment_added_diff\"):"
                    ],
                    [
                        113,
                        "                event[\"comment_change\"] = \"True\""
                    ],
                    [
                        114,
                        "            else:"
                    ],
                    [
                        115,
                        "                event[\"comment_change\"] = \"False\""
                    ],
                    [
                        116,
                        ""
                    ],
                    [
                        117,
                        "            # Add the event to the trace"
                    ],
                    [
                        120,
                        "        # Add the trace to the log"
                    ],
                    [
                        121,
                        "        log.append(trace)"
                    ],
                    [
                        122,
                        ""
                    ],
                    [
                        131,
                        "    commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ],
                    [
                        132,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        133,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ]
                ],
                "deleted": [
                    [
                        97,
                        "    for file in data:"
                    ],
                    [
                        98,
                        "        # For each file affected in the commit, create a trace"
                    ],
                    [
                        99,
                        "        for file_data in commit_data['files']:"
                    ],
                    [
                        100,
                        "            # Check if a trace for this file already exists, if not, create one"
                    ],
                    [
                        101,
                        "            trace_name = file_data['filename']"
                    ],
                    [
                        102,
                        "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)"
                    ],
                    [
                        103,
                        ""
                    ],
                    [
                        104,
                        "            if trace is None:"
                    ],
                    [
                        105,
                        "                trace = Trace()"
                    ],
                    [
                        106,
                        "                trace.attributes[\"concept:name\"] = trace_name"
                    ],
                    [
                        107,
                        "                log.append(trace)"
                    ],
                    [
                        108,
                        ""
                    ],
                    [
                        109,
                        "            # Create an event for the current commit affecting this file"
                    ],
                    [
                        111,
                        "            event[\"concept:name\"] = file_data['activity']"
                    ],
                    [
                        112,
                        "            event[\"time:timestamp\"] = commit_data['timestamp']"
                    ],
                    [
                        113,
                        "            event[\"org:resource\"] = commit_data['author']"
                    ],
                    [
                        114,
                        ""
                    ],
                    [
                        115,
                        "            # Add custom attributes for the event"
                    ],
                    [
                        116,
                        "            event[\"additions\"] = file_data['additions']"
                    ],
                    [
                        117,
                        "            event[\"deletions\"] = file_data['deletions']"
                    ],
                    [
                        118,
                        "            event[\"change_type\"] = file_data['change_type']"
                    ],
                    [
                        119,
                        "            event[\"commit_message\"] = file_data['commit_message']"
                    ],
                    [
                        120,
                        "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        121,
                        "            event[\"diff\"] = file_data[\"diff\"]"
                    ],
                    [
                        122,
                        ""
                    ],
                    [
                        123,
                        "            # Append the event to the trace"
                    ],
                    [
                        134,
                        "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ],
                    [
                        135,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        136,
                        "    # print(\"Commit data has been saved to commits_data.json\")"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            97
                        ],
                        "contents": [
                            "    for file, commits in data.items():"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            98,
                            99,
                            100,
                            101,
                            102
                        ],
                        "contents": [
                            "        # Create a trace for the file",
                            "        trace = Trace()",
                            "        trace.attributes[\"file\"] = file",
                            "",
                            "        for commit in commits:"
                        ],
                        "comments": [
                            "# Create a trace for the file",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            103
                        ],
                        "contents": [
                            "            # Extract event attributes"
                        ],
                        "comments": [
                            "# Extract event attributes"
                        ],
                        "comment_positions": [
                            12
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112,
                            113,
                            114,
                            115,
                            116
                        ],
                        "contents": [
                            "            event[\"timestamp\"] = commit.get(\"timestamp\")",
                            "            event[\"author\"] = commit.get(\"author\")",
                            "            event[\"change_type\"] = commit.get(\"change_type\")",
                            "            event[\"commit_message\"] = commit.get(\"commit_message\")",
                            "            event[\"additions\"] = commit.get(\"additions\")",
                            "            event[\"deletions\"] = commit.get(\"deletions\")",
                            "            event[\"diff\"] = commit.get(\"diff\")",
                            "            if commit.get(\"comment_added_diff\"):",
                            "                event[\"comment_change\"] = \"True\"",
                            "            else:",
                            "                event[\"comment_change\"] = \"False\"",
                            ""
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            117
                        ],
                        "contents": [
                            "            # Add the event to the trace"
                        ],
                        "comments": [
                            "# Add the event to the trace"
                        ],
                        "comment_positions": [
                            12
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            120,
                            121,
                            122
                        ],
                        "contents": [
                            "        # Add the trace to the log",
                            "        log.append(trace)",
                            ""
                        ],
                        "comments": [
                            "# Add the trace to the log",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            131,
                            132,
                            133
                        ],
                        "contents": [
                            "    commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                            "    save_to_json(commits_data, \"Data/commits_data.json\")",
                            "    print(\"Commit data has been saved to commits_data.json\")"
                        ],
                        "comments": [
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 103,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 117,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 120,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 126,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 130,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 134,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 138,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "1277d634d38557e2d5981481fd55f1753da2314b",
            "timestamp": "2024-11-17T16:33:10+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        48,
                        "                        if line[0] in diff_added.keys():"
                    ],
                    [
                        49,
                        "                            diff_modified[line[0]] = line[1]"
                    ],
                    [
                        130,
                        "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL"
                    ],
                    [
                        131,
                        "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ]
                ],
                "deleted": [
                    [
                        48,
                        "                    if line[0] in diff_added.keys():"
                    ],
                    [
                        49,
                        "                        diff_modified[line[0]] = line[1]"
                    ],
                    [
                        130,
                        "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL"
                    ],
                    [
                        131,
                        "    commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            48,
                            49
                        ],
                        "contents": [
                            "                        if line[0] in diff_added.keys():",
                            "                            diff_modified[line[0]] = line[1]"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            130,
                            131
                        ],
                        "contents": [
                            "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL",
                            "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                        ],
                        "comments": [
                            "# Example repository URL",
                            ""
                        ],
                        "comment_positions": [
                            61,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 103,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 117,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 126,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 130,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61,
                    "edit": "added"
                },
                {
                    "line": 134,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 138,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "a8af330e0eb1c2574ba424b69e0958c938502a67",
            "timestamp": "2024-11-18T10:51:21+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        13,
                        "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)"
                    ],
                    [
                        20,
                        "    # since=dt1,"
                    ],
                    [
                        36,
                        "                    \"diff\": modified_file.diff_parsed"
                    ],
                    [
                        43,
                        "                        print(int(line[0]))"
                    ],
                    [
                        88,
                        "def analyze_diff(commits_data, type):"
                    ],
                    [
                        89,
                        "    for file, commits in commits_data.items():"
                    ],
                    [
                        90,
                        "        if len(file) > 0:"
                    ],
                    [
                        91,
                        "            for commit in commits:"
                    ],
                    [
                        92,
                        "                diff_edited = []"
                    ],
                    [
                        93,
                        "                for i in range(len(commit[\"diff\"][type])):"
                    ],
                    [
                        94,
                        "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:"
                    ],
                    [
                        95,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        96,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        97,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        98,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        99,
                        "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        100,
                        "                            else:"
                    ],
                    [
                        101,
                        "                                # or create new one"
                    ],
                    [
                        102,
                        "                                diff_edited.append({"
                    ],
                    [
                        103,
                        "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        104,
                        "                                    \"comments\": [],"
                    ],
                    [
                        105,
                        "                                    \"lines\": [commit[\"diff\"][type][i][1]]})"
                    ],
                    [
                        106,
                        "                    else:"
                    ],
                    [
                        107,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        108,
                        "                            # In case of comment add them to existing dict if they directly follow"
                    ],
                    [
                        109,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        110,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        111,
                        "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        112,
                        "                        else:"
                    ],
                    [
                        113,
                        "                            # or create new one"
                    ],
                    [
                        114,
                        "                            diff_edited.append({"
                    ],
                    [
                        115,
                        "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        116,
                        "                                \"comments\": [commit[\"diff\"][type][i][1]],"
                    ],
                    [
                        117,
                        "                                \"lines\": []})"
                    ],
                    [
                        118,
                        "                commit[\"diff\"][type] = diff_edited"
                    ],
                    [
                        119,
                        "    return commits_data"
                    ],
                    [
                        120,
                        ""
                    ],
                    [
                        121,
                        "def save_to_json(commits_data, path):"
                    ],
                    [
                        123,
                        "    with open(path, 'w') as json_file:"
                    ],
                    [
                        125,
                        "    print(\"Commit data has been saved to \", path)"
                    ],
                    [
                        164,
                        "def save_to_xes(log, path):"
                    ],
                    [
                        165,
                        "    # Create the XES log from the commit data"
                    ],
                    [
                        166,
                        "    xes_log = create_xes_log(log)"
                    ],
                    [
                        167,
                        ""
                    ],
                    [
                        168,
                        "    # Save the XES log to a file"
                    ],
                    [
                        169,
                        "    save_xes_log(xes_log, path)"
                    ],
                    [
                        170,
                        "    print(\"XES log has been saved to \", path)"
                    ],
                    [
                        171,
                        ""
                    ],
                    [
                        176,
                        "    # save_to_xes(commits_data, \"Data/commits_data.xes\")"
                    ],
                    [
                        179,
                        "    analyzed_data = analyze_diff(commits_data, \"added\")"
                    ],
                    [
                        180,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        181,
                        "    analyzed_data = analyze_diff(commits_data, \"deleted\")"
                    ],
                    [
                        182,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ]
                ],
                "deleted": [
                    [
                        13,
                        "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)"
                    ],
                    [
                        20,
                        "    since=dt1,"
                    ],
                    [
                        36,
                        "                    \"diff\": modified_file.diff"
                    ],
                    [
                        87,
                        "def save_to_json(commits_data, filename):"
                    ],
                    [
                        89,
                        "    with open(filename, 'w') as json_file:"
                    ],
                    [
                        133,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        134,
                        "    # Load the previously saved commit data JSON file"
                    ],
                    [
                        138,
                        "    # Create the XES log from the commit data"
                    ],
                    [
                        139,
                        "    xes_log = create_xes_log(commits_data)"
                    ],
                    [
                        141,
                        "    # Save the XES log to a file"
                    ],
                    [
                        142,
                        "    save_xes_log(xes_log, \"Data/commits_data.xes\")"
                    ],
                    [
                        143,
                        "    print(\"XES log has been saved to commits_data.xes\")"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            13,
                            14
                        ],
                        "contents": [
                            "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                            "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)"
                        ],
                        "comments": [
                            "# dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            20
                        ],
                        "contents": [
                            "    # since=dt1,"
                        ],
                        "comments": [
                            "# since=dt1,"
                        ],
                        "comment_positions": [
                            4
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            36
                        ],
                        "contents": [
                            "                    \"diff\": modified_file.diff_parsed"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            43
                        ],
                        "contents": [
                            "                        print(int(line[0]))"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            88,
                            89,
                            90,
                            91,
                            92,
                            93,
                            94,
                            95
                        ],
                        "contents": [
                            "def analyze_diff(commits_data, type):",
                            "    for file, commits in commits_data.items():",
                            "        if len(file) > 0:",
                            "            for commit in commits:",
                            "                diff_edited = []",
                            "                for i in range(len(commit[\"diff\"][type])):",
                            "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:",
                            "                        if len(diff_edited) > 0:"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            96,
                            97,
                            98,
                            99,
                            100
                        ],
                        "contents": [
                            "                            # In case of no comment add lines to existing dict if line number directly follows",
                            "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                            "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])",
                            "                            else:"
                        ],
                        "comments": [
                            "# In case of no comment add lines to existing dict if line number directly follows",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            28,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            101,
                            102,
                            103,
                            104,
                            105,
                            106,
                            107
                        ],
                        "contents": [
                            "                                # or create new one",
                            "                                diff_edited.append({",
                            "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                            "                                    \"comments\": [],",
                            "                                    \"lines\": [commit[\"diff\"][type][i][1]]})",
                            "                    else:",
                            "                        if len(diff_edited) > 0:"
                        ],
                        "comments": [
                            "# or create new one",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            32,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            108,
                            109,
                            110,
                            111,
                            112
                        ],
                        "contents": [
                            "                            # In case of comment add them to existing dict if they directly follow",
                            "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                            "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])",
                            "                        else:"
                        ],
                        "comments": [
                            "# In case of comment add them to existing dict if they directly follow",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            28,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            113,
                            114,
                            115,
                            116,
                            117,
                            118,
                            119,
                            120,
                            121
                        ],
                        "contents": [
                            "                            # or create new one",
                            "                            diff_edited.append({",
                            "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                            "                                \"comments\": [commit[\"diff\"][type][i][1]],",
                            "                                \"lines\": []})",
                            "                commit[\"diff\"][type] = diff_edited",
                            "    return commits_data",
                            "",
                            "def save_to_json(commits_data, path):"
                        ],
                        "comments": [
                            "# or create new one",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            28,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            123
                        ],
                        "contents": [
                            "    with open(path, 'w') as json_file:"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            125
                        ],
                        "contents": [
                            "    print(\"Commit data has been saved to \", path)"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            164
                        ],
                        "contents": [
                            "def save_to_xes(log, path):"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            165,
                            166,
                            167
                        ],
                        "contents": [
                            "    # Create the XES log from the commit data",
                            "    xes_log = create_xes_log(log)",
                            ""
                        ],
                        "comments": [
                            "# Create the XES log from the commit data",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            168,
                            169,
                            170,
                            171
                        ],
                        "contents": [
                            "    # Save the XES log to a file",
                            "    save_xes_log(xes_log, path)",
                            "    print(\"XES log has been saved to \", path)",
                            ""
                        ],
                        "comments": [
                            "# Save the XES log to a file",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            176
                        ],
                        "contents": [
                            "    # save_to_xes(commits_data, \"Data/commits_data.xes\")"
                        ],
                        "comments": [
                            "# save_to_xes(commits_data, \"Data/commits_data.xes\")"
                        ],
                        "comment_positions": [
                            4
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            179,
                            180,
                            181,
                            182
                        ],
                        "contents": [
                            "    analyzed_data = analyze_diff(commits_data, \"added\")",
                            "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "    analyzed_data = analyze_diff(commits_data, \"deleted\")",
                            "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 53,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 56,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 62,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 63,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 76,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 101,
                    "comment": "# or create new one",
                    "char_position_in_line": 32,
                    "edit": "added"
                },
                {
                    "line": 108,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 113,
                    "comment": "# or create new one",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 122,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 128,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 131,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 133,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 138,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 152,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 155,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 161,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 165,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 168,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 173,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61
                },
                {
                    "line": 176,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                }
            ]
        },
        {
            "commit": "3bffee0480ea6e1007c2b96cafa58305afd4a9f2",
            "timestamp": "2024-11-18T15:19:19+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        4,
                        "from datetime import datetime"
                    ],
                    [
                        13,
                        "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime(2022, 10, 8, 17, 59, 0)"
                    ],
                    [
                        87,
                        "def pretty_diff(commits_data, type):"
                    ],
                    [
                        120,
                        "def analyze_diffs(data):"
                    ],
                    [
                        121,
                        "    analysis_results = []"
                    ],
                    [
                        122,
                        ""
                    ],
                    [
                        123,
                        "    for file, commits in data.items():"
                    ],
                    [
                        124,
                        "        # Store last modified timestamps for each line"
                    ],
                    [
                        125,
                        "        last_modified = {}"
                    ],
                    [
                        126,
                        ""
                    ],
                    [
                        127,
                        "        for commit in commits:"
                    ],
                    [
                        128,
                        "            print(\"Starting to analyse commit: \", commit[\"commit\"])"
                    ],
                    [
                        129,
                        "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    ],
                    [
                        130,
                        ""
                    ],
                    [
                        131,
                        "            # Track modified lines"
                    ],
                    [
                        132,
                        "            for block in commit[\"diff\"][\"added\"]:"
                    ],
                    [
                        133,
                        "                for line in block[\"line_numbers\"]:"
                    ],
                    [
                        134,
                        "                    line_number = line"
                    ],
                    [
                        135,
                        "                    last_modified[line_number] = commit_time"
                    ],
                    [
                        136,
                        ""
                    ],
                    [
                        137,
                        "            print(last_modified)"
                    ],
                    [
                        138,
                        ""
                    ],
                    [
                        139,
                        "            # Compare with comments"
                    ],
                    [
                        140,
                        "            for line in commit[\"comment_added_diff\"]:"
                    ],
                    [
                        141,
                        "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    ],
                    [
                        142,
                        "                last_modified_lines = list(last_modified.keys())"
                    ],
                    [
                        143,
                        "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)"
                    ],
                    [
                        144,
                        "                if int(line) in last_modified_lines:"
                    ],
                    [
                        145,
                        "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])"
                    ],
                    [
                        146,
                        "                    if(comment_time > last_modified[int(line)]):"
                    ],
                    [
                        147,
                        "                        analysis_results.append({"
                    ],
                    [
                        148,
                        "                            \"file\": file,"
                    ],
                    [
                        149,
                        "                            \"line\": int(line),"
                    ],
                    [
                        150,
                        "                            \"comment\": commit[\"comment_added_diff\"][line],"
                    ],
                    [
                        151,
                        "                            \"comment_time\": str(comment_time),"
                    ],
                    [
                        152,
                        "                            \"last_code_change_time\": str(last_modified[int(line)])"
                    ],
                    [
                        153,
                        "                        })"
                    ],
                    [
                        154,
                        "            # print(\"Finsihed with commit\")"
                    ],
                    [
                        155,
                        "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")"
                    ],
                    [
                        156,
                        ""
                    ],
                    [
                        157,
                        "    return analysis_results"
                    ],
                    [
                        158,
                        ""
                    ],
                    [
                        163,
                        "    print(\"Data has been saved to\", path)"
                    ],
                    [
                        208,
                        "    print(\"XES log has been saved to\", path)"
                    ],
                    [
                        212,
                        "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ],
                    [
                        213,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        215,
                        "    # with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        216,
                        "      #  commits_data = json.load(json_file)"
                    ],
                    [
                        217,
                        "    # analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        218,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        219,
                        "    # analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ],
                    [
                        220,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        221,
                        ""
                    ],
                    [
                        222,
                        "    # Test case"
                    ],
                    [
                        223,
                        "    with open(\"Exports/analyzed_data.json\", \"r\") as json_file:"
                    ],
                    [
                        224,
                        "        data = json.load(json_file)"
                    ],
                    [
                        225,
                        "    print(\"\\n\")"
                    ],
                    [
                        226,
                        "    analyzed_data = analyze_diffs(data)"
                    ],
                    [
                        227,
                        "    for result in analyzed_data:"
                    ],
                    [
                        228,
                        "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \""
                    ],
                    [
                        229,
                        "            f\"after being changed on {result['last_code_change_time']}.\")"
                    ],
                    [
                        230,
                        "    save_to_json(analyzed_data, \"Exports/analysis_results.json\")"
                    ]
                ],
                "deleted": [
                    [
                        4,
                        "import datetime"
                    ],
                    [
                        13,
                        "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)"
                    ],
                    [
                        43,
                        "                        print(int(line[0]))"
                    ],
                    [
                        88,
                        "def analyze_diff(commits_data, type):"
                    ],
                    [
                        125,
                        "    print(\"Commit data has been saved to \", path)"
                    ],
                    [
                        170,
                        "    print(\"XES log has been saved to \", path)"
                    ],
                    [
                        174,
                        "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ],
                    [
                        175,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        177,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        178,
                        "       commits_data = json.load(json_file)"
                    ],
                    [
                        179,
                        "    analyzed_data = analyze_diff(commits_data, \"added\")"
                    ],
                    [
                        180,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        181,
                        "    analyzed_data = analyze_diff(commits_data, \"deleted\")"
                    ],
                    [
                        182,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        183,
                        ""
                    ],
                    [
                        184,
                        ""
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            4
                        ],
                        "contents": [
                            "from datetime import datetime"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            13,
                            14
                        ],
                        "contents": [
                            "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                            "    dt2 = datetime(2022, 10, 8, 17, 59, 0)"
                        ],
                        "comments": [
                            "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            87
                        ],
                        "contents": [
                            "def pretty_diff(commits_data, type):"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            120,
                            121,
                            122,
                            123
                        ],
                        "contents": [
                            "def analyze_diffs(data):",
                            "    analysis_results = []",
                            "",
                            "    for file, commits in data.items():"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            124,
                            125,
                            126,
                            127,
                            128,
                            129,
                            130
                        ],
                        "contents": [
                            "        # Store last modified timestamps for each line",
                            "        last_modified = {}",
                            "",
                            "        for commit in commits:",
                            "            print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])",
                            ""
                        ],
                        "comments": [
                            "# Store last modified timestamps for each line",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            8,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            131,
                            132,
                            133,
                            134,
                            135,
                            136,
                            137,
                            138
                        ],
                        "contents": [
                            "            # Track modified lines",
                            "            for block in commit[\"diff\"][\"added\"]:",
                            "                for line in block[\"line_numbers\"]:",
                            "                    line_number = line",
                            "                    last_modified[line_number] = commit_time",
                            "",
                            "            print(last_modified)",
                            ""
                        ],
                        "comments": [
                            "# Track modified lines",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            139,
                            140,
                            141,
                            142
                        ],
                        "contents": [
                            "            # Compare with comments",
                            "            for line in commit[\"comment_added_diff\"]:",
                            "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                            "                last_modified_lines = list(last_modified.keys())"
                        ],
                        "comments": [
                            "# Compare with comments",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            143,
                            144
                        ],
                        "contents": [
                            "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                            "                if int(line) in last_modified_lines:"
                        ],
                        "comments": [
                            "# print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                            ""
                        ],
                        "comment_positions": [
                            16,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            145,
                            146,
                            147,
                            148,
                            149,
                            150,
                            151,
                            152,
                            153
                        ],
                        "contents": [
                            "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                            "                    if(comment_time > last_modified[int(line)]):",
                            "                        analysis_results.append({",
                            "                            \"file\": file,",
                            "                            \"line\": int(line),",
                            "                            \"comment\": commit[\"comment_added_diff\"][line],",
                            "                            \"comment_time\": str(comment_time),",
                            "                            \"last_code_change_time\": str(last_modified[int(line)])",
                            "                        })"
                        ],
                        "comments": [
                            "# print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            20,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            154,
                            155,
                            156,
                            157,
                            158
                        ],
                        "contents": [
                            "            # print(\"Finsihed with commit\")",
                            "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                            "",
                            "    return analysis_results",
                            ""
                        ],
                        "comments": [
                            "# print(\"Finsihed with commit\")",
                            "# print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            12,
                            12,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            163
                        ],
                        "contents": [
                            "    print(\"Data has been saved to\", path)"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            208
                        ],
                        "contents": [
                            "    print(\"XES log has been saved to\", path)"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            212,
                            213
                        ],
                        "contents": [
                            "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                            "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                        ],
                        "comments": [
                            "# commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                            "# save_to_json(commits_data, \"Data/commits_data.json\")"
                        ],
                        "comment_positions": [
                            4,
                            4
                        ],
                        "edits": [
                            "added",
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            215,
                            216,
                            217,
                            218,
                            219,
                            220,
                            221
                        ],
                        "contents": [
                            "    # with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "      #  commits_data = json.load(json_file)",
                            "    # analyzed_data = pretty_diff(commits_data, \"added\")",
                            "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "    # analyzed_data = pretty_diff(commits_data, \"deleted\")",
                            "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            ""
                        ],
                        "comments": [
                            "# with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "#  commits_data = json.load(json_file)",
                            "# analyzed_data = pretty_diff(commits_data, \"added\")",
                            "# save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "# analyzed_data = pretty_diff(commits_data, \"deleted\")",
                            "# save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            6,
                            4,
                            4,
                            4,
                            4,
                            -1
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            222,
                            223,
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230
                        ],
                        "contents": [
                            "    # Test case",
                            "    with open(\"Exports/analyzed_data.json\", \"r\") as json_file:",
                            "        data = json.load(json_file)",
                            "    print(\"\\n\")",
                            "    analyzed_data = analyze_diffs(data)",
                            "    for result in analyzed_data:",
                            "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \"",
                            "            f\"after being changed on {result['last_code_change_time']}.\")",
                            "    save_to_json(analyzed_data, \"Exports/analysis_results.json\")"
                        ],
                        "comments": [
                            "# Test case",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            4,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 95,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28
                },
                {
                    "line": 100,
                    "comment": "# or create new one",
                    "char_position_in_line": 32
                },
                {
                    "line": 107,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 112,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 124,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "edit": "added"
                },
                {
                    "line": 131,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 139,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 143,
                    "comment": "# print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 145,
                    "comment": "# print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 154,
                    "comment": "# print(\"Finsihed with commit\")",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 155,
                    "comment": "# print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 160,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 166,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 169,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 171,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 176,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 190,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 193,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 199,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 203,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 206,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 211,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61
                },
                {
                    "line": 212,
                    "comment": "# commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 213,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 214,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 215,
                    "comment": "# with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 216,
                    "comment": "#  commits_data = json.load(json_file)",
                    "char_position_in_line": 6,
                    "edit": "added"
                },
                {
                    "line": 217,
                    "comment": "# analyzed_data = pretty_diff(commits_data, \"added\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 218,
                    "comment": "# save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 219,
                    "comment": "# analyzed_data = pretty_diff(commits_data, \"deleted\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 220,
                    "comment": "# save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 222,
                    "comment": "# Test case",
                    "char_position_in_line": 4,
                    "edit": "added"
                }
            ]
        },
        {
            "commit": "e226da877d3d9f98cab4990bb1fbaa02e6adbb7b",
            "timestamp": "2024-11-19T15:32:58+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        14,
                        "    dt2 = datetime(2010, 10, 8, 17, 59, 0)"
                    ],
                    [
                        93,
                        "                    curr_line = commit[\"diff\"][type][i][0]"
                    ],
                    [
                        94,
                        "                    curr_content = commit[\"diff\"][type][i][1]"
                    ],
                    [
                        95,
                        "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:"
                    ],
                    [
                        98,
                        "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        99,
                        "                                diff_edited[-1][\"comments\"][curr_line] = curr_content"
                    ],
                    [
                        100,
                        "                            # else:"
                    ],
                    [
                        101,
                        "                            #     diff_edited.append({"
                    ],
                    [
                        102,
                        "                            #         \"line_numbers\": [],"
                    ],
                    [
                        103,
                        "                            #         \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        104,
                        "                            #         \"lines\": []})"
                    ],
                    [
                        106,
                        "                        #     if i < 5:"
                    ],
                    [
                        107,
                        "                        #     # or create new one"
                    ],
                    [
                        108,
                        "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)"
                    ],
                    [
                        111,
                        "                                \"line_numbers\": [],"
                    ],
                    [
                        112,
                        "                                \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        114,
                        "                    else:"
                    ],
                    [
                        115,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        116,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        117,
                        "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        118,
                        "                                diff_edited[-1][\"line_numbers\"].append(curr_line)"
                    ],
                    [
                        119,
                        "                                diff_edited[-1][\"lines\"].append(curr_content)"
                    ],
                    [
                        120,
                        "                            else:"
                    ],
                    [
                        121,
                        "                                # or create new one"
                    ],
                    [
                        122,
                        "                                diff_edited.append({"
                    ],
                    [
                        123,
                        "                                    \"line_numbers\": [curr_line],"
                    ],
                    [
                        124,
                        "                                    \"comments\": {},"
                    ],
                    [
                        125,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        137,
                        "            # print(\"Starting to analyse commit: \", commit[\"commit\"])"
                    ],
                    [
                        146,
                        "            # print(last_modified)"
                    ],
                    [
                        153,
                        "                    for block in commit[\"diff\"][\"added\"]:"
                    ],
                    [
                        154,
                        "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:"
                    ],
                    [
                        155,
                        "                            if(comment_time > last_modified[int(line)]):"
                    ],
                    [
                        156,
                        "                                analysis_results.append({"
                    ],
                    [
                        157,
                        "                                    \"file\": file,"
                    ],
                    [
                        158,
                        "                                    \"line\": int(line),"
                    ],
                    [
                        159,
                        "                                    \"comment\": commit[\"comment_added_diff\"][line],"
                    ],
                    [
                        160,
                        "                                    \"comment_time\": str(comment_time),"
                    ],
                    [
                        161,
                        "                                    \"last_code_change_time\": str(last_modified[int(line)])"
                    ],
                    [
                        162,
                        "                                })"
                    ],
                    [
                        218,
                        "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL"
                    ],
                    [
                        219,
                        "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")"
                    ],
                    [
                        222,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        223,
                        "       commits_data = json.load(json_file)"
                    ],
                    [
                        224,
                        "    analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        225,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        226,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ],
                    [
                        227,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        232,
                        "    analyzed_data = analyze_diffs(data)"
                    ],
                    [
                        233,
                        ""
                    ]
                ],
                "deleted": [
                    [
                        14,
                        "    dt2 = datetime(2022, 10, 8, 17, 59, 0)"
                    ],
                    [
                        93,
                        "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:"
                    ],
                    [
                        94,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        95,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        96,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        97,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        98,
                        "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        99,
                        "                            else:"
                    ],
                    [
                        100,
                        "                                # or create new one"
                    ],
                    [
                        101,
                        "                                diff_edited.append({"
                    ],
                    [
                        102,
                        "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        103,
                        "                                    \"comments\": [],"
                    ],
                    [
                        104,
                        "                                    \"lines\": [commit[\"diff\"][type][i][1]]})"
                    ],
                    [
                        105,
                        "                    else:"
                    ],
                    [
                        108,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        109,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        110,
                        "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        114,
                        "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        115,
                        "                                \"comments\": [commit[\"diff\"][type][i][1]],"
                    ],
                    [
                        128,
                        "            print(\"Starting to analyse commit: \", commit[\"commit\"])"
                    ],
                    [
                        137,
                        "            print(last_modified)"
                    ],
                    [
                        143,
                        "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)"
                    ],
                    [
                        145,
                        "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])"
                    ],
                    [
                        146,
                        "                    if(comment_time > last_modified[int(line)]):"
                    ],
                    [
                        147,
                        "                        analysis_results.append({"
                    ],
                    [
                        148,
                        "                            \"file\": file,"
                    ],
                    [
                        149,
                        "                            \"line\": int(line),"
                    ],
                    [
                        150,
                        "                            \"comment\": commit[\"comment_added_diff\"][line],"
                    ],
                    [
                        151,
                        "                            \"comment_time\": str(comment_time),"
                    ],
                    [
                        152,
                        "                            \"last_code_change_time\": str(last_modified[int(line)])"
                    ],
                    [
                        153,
                        "                        })"
                    ],
                    [
                        154,
                        "            # print(\"Finsihed with commit\")"
                    ],
                    [
                        155,
                        "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")"
                    ],
                    [
                        211,
                        "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL"
                    ],
                    [
                        212,
                        "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ],
                    [
                        215,
                        "    # with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        216,
                        "      #  commits_data = json.load(json_file)"
                    ],
                    [
                        217,
                        "    # analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        218,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        219,
                        "    # analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ],
                    [
                        220,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        225,
                        "    print(\"\\n\")"
                    ],
                    [
                        226,
                        "    analyzed_data = analyze_diffs(data)"
                    ],
                    [
                        227,
                        "    for result in analyzed_data:"
                    ],
                    [
                        228,
                        "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \""
                    ],
                    [
                        229,
                        "            f\"after being changed on {result['last_code_change_time']}.\")"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            14
                        ],
                        "contents": [
                            "    dt2 = datetime(2010, 10, 8, 17, 59, 0)"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            93,
                            94,
                            95
                        ],
                        "contents": [
                            "                    curr_line = commit[\"diff\"][type][i][0]",
                            "                    curr_content = commit[\"diff\"][type][i][1]",
                            "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:"
                        ],
                        "comments": [
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            98,
                            99
                        ],
                        "contents": [
                            "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "                                diff_edited[-1][\"comments\"][curr_line] = curr_content"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            100,
                            101,
                            102,
                            103,
                            104
                        ],
                        "contents": [
                            "                            # else:",
                            "                            #     diff_edited.append({",
                            "                            #         \"line_numbers\": [],",
                            "                            #         \"comments\": {curr_line: curr_content},",
                            "                            #         \"lines\": []})"
                        ],
                        "comments": [
                            "# else: ",
                            "#     diff_edited.append({",
                            "#         \"line_numbers\": [],",
                            "#         \"comments\": {curr_line: curr_content},",
                            "#         \"lines\": []})"
                        ],
                        "comment_positions": [
                            28,
                            28,
                            28,
                            28,
                            28
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added",
                            "added",
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            106,
                            107,
                            108
                        ],
                        "contents": [
                            "                        #     if i < 5:",
                            "                        #     # or create new one",
                            "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)"
                        ],
                        "comments": [
                            "#     if i < 5:",
                            "#     # or create new one",
                            "#         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)"
                        ],
                        "comment_positions": [
                            24,
                            24,
                            24
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            111,
                            112
                        ],
                        "contents": [
                            "                                \"line_numbers\": [],",
                            "                                \"comments\": {curr_line: curr_content},"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            114,
                            115
                        ],
                        "contents": [
                            "                    else:",
                            "                        if len(diff_edited) > 0:"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            116,
                            117,
                            118,
                            119,
                            120
                        ],
                        "contents": [
                            "                            # In case of no comment add lines to existing dict if line number directly follows",
                            "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "                                diff_edited[-1][\"line_numbers\"].append(curr_line)",
                            "                                diff_edited[-1][\"lines\"].append(curr_content)",
                            "                            else:"
                        ],
                        "comments": [
                            "# In case of no comment add lines to existing dict if line number directly follows",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            28,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            121,
                            122,
                            123,
                            124,
                            125
                        ],
                        "contents": [
                            "                                # or create new one",
                            "                                diff_edited.append({",
                            "                                    \"line_numbers\": [curr_line],",
                            "                                    \"comments\": {},",
                            "                                    \"lines\": [curr_content]})"
                        ],
                        "comments": [
                            "# or create new one",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            32,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            137
                        ],
                        "contents": [
                            "            # print(\"Starting to analyse commit: \", commit[\"commit\"])"
                        ],
                        "comments": [
                            "# print(\"Starting to analyse commit: \", commit[\"commit\"])"
                        ],
                        "comment_positions": [
                            12
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            146
                        ],
                        "contents": [
                            "            # print(last_modified)"
                        ],
                        "comments": [
                            "# print(last_modified)"
                        ],
                        "comment_positions": [
                            12
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            153,
                            154,
                            155,
                            156,
                            157,
                            158,
                            159,
                            160,
                            161,
                            162
                        ],
                        "contents": [
                            "                    for block in commit[\"diff\"][\"added\"]:",
                            "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:",
                            "                            if(comment_time > last_modified[int(line)]):",
                            "                                analysis_results.append({",
                            "                                    \"file\": file,",
                            "                                    \"line\": int(line),",
                            "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                            "                                    \"comment_time\": str(comment_time),",
                            "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                            "                                })"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            218,
                            219
                        ],
                        "contents": [
                            "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL",
                            "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")"
                        ],
                        "comments": [
                            "# Example repository URL",
                            "# commits_data = analyze_commits(repo_url, \"//\", \"js\")"
                        ],
                        "comment_positions": [
                            49,
                            4
                        ],
                        "edits": [
                            "added",
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            222,
                            223,
                            224,
                            225,
                            226,
                            227
                        ],
                        "contents": [
                            "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "       commits_data = json.load(json_file)",
                            "    analyzed_data = pretty_diff(commits_data, \"added\")",
                            "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "    analyzed_data = pretty_diff(commits_data, \"deleted\")",
                            "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            232,
                            233
                        ],
                        "contents": [
                            "    analyzed_data = analyze_diffs(data)",
                            ""
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 97,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 100,
                    "comment": "# else: ",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 101,
                    "comment": "#     diff_edited.append({",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 102,
                    "comment": "#         \"line_numbers\": [],",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 103,
                    "comment": "#         \"comments\": {curr_line: curr_content},",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 104,
                    "comment": "#         \"lines\": []})",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 106,
                    "comment": "#     if i < 5:",
                    "char_position_in_line": 24,
                    "edit": "added"
                },
                {
                    "line": 107,
                    "comment": "#     # or create new one",
                    "char_position_in_line": 24,
                    "edit": "added"
                },
                {
                    "line": 108,
                    "comment": "#         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)",
                    "char_position_in_line": 24,
                    "edit": "added"
                },
                {
                    "line": 109,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 116,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28,
                    "edit": "added"
                },
                {
                    "line": 121,
                    "comment": "# or create new one",
                    "char_position_in_line": 32,
                    "edit": "added"
                },
                {
                    "line": 133,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 137,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 140,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 146,
                    "comment": "# print(last_modified)",
                    "char_position_in_line": 12,
                    "edit": "added"
                },
                {
                    "line": 148,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 167,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 173,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 176,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 178,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 183,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 197,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 200,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 206,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 210,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 213,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 218,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49,
                    "edit": "added"
                },
                {
                    "line": 219,
                    "comment": "# commits_data = analyze_commits(repo_url, \"//\", \"js\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 220,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 221,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 229,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "367493d87df2ab980b261f32c54beb20f1bc5c4e",
            "timestamp": "2024-11-19T17:09:41+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        8,
                        "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):"
                    ],
                    [
                        16,
                        "    since=dt1,"
                    ],
                    [
                        18,
                        "        if len(multi_comment_symbols) >= 2:"
                    ],
                    [
                        19,
                        "            multi_comments_enabled = True"
                    ],
                    [
                        20,
                        "        else:"
                    ],
                    [
                        21,
                        "            multi_comments_enabled = False"
                    ],
                    [
                        41,
                        "                following_multi_comment = False"
                    ],
                    [
                        43,
                        "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:"
                    ],
                    [
                        44,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        45,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        46,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        47,
                        "                        following_multi_comment = True"
                    ],
                    [
                        48,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:"
                    ],
                    [
                        50,
                        "                        following_multi_comment = False"
                    ],
                    [
                        53,
                        "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:"
                    ],
                    [
                        57,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        58,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        59,
                        "                        following_multi_comment = True"
                    ],
                    [
                        60,
                        "                        if line[0] in diff_added.keys():"
                    ],
                    [
                        61,
                        "                            diff_modified[line[0]] = line[1]"
                    ],
                    [
                        62,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:"
                    ],
                    [
                        63,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        64,
                        "                        if line[0] in diff_added.keys():"
                    ],
                    [
                        65,
                        "                            diff_modified[line[0]] = line[1]"
                    ],
                    [
                        103,
                        "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):"
                    ],
                    [
                        104,
                        "    following_multi_comment = False"
                    ],
                    [
                        105,
                        "    if len(multi_comment_symbols) >= 2:"
                    ],
                    [
                        106,
                        "        multi_comments_enabled = True"
                    ],
                    [
                        107,
                        "    else:"
                    ],
                    [
                        108,
                        "        multi_comments_enabled = False"
                    ],
                    [
                        116,
                        "                    if curr_content == \"/*<replacement>*/\":"
                    ],
                    [
                        117,
                        "                        print()"
                    ],
                    [
                        118,
                        "                    if curr_content.find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        119,
                        "                            following_multi_comment = True"
                    ],
                    [
                        120,
                        "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:"
                    ],
                    [
                        142,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        143,
                        "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:"
                    ],
                    [
                        144,
                        "                        following_multi_comment = False"
                    ],
                    [
                        238,
                        "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        239,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        243,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        245,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                    ]
                ],
                "deleted": [
                    [
                        8,
                        "def analyze_commits(repo_url, comment_symbol, language_file_extension):"
                    ],
                    [
                        12,
                        "    # Analysis range"
                    ],
                    [
                        13,
                        "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime(2010, 10, 8, 17, 59, 0)"
                    ],
                    [
                        15,
                        ""
                    ],
                    [
                        20,
                        "    # since=dt1,"
                    ],
                    [
                        42,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        46,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        87,
                        "def pretty_diff(commits_data, type):"
                    ],
                    [
                        95,
                        "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:"
                    ],
                    [
                        100,
                        "                            # else:"
                    ],
                    [
                        101,
                        "                            #     diff_edited.append({"
                    ],
                    [
                        102,
                        "                            #         \"line_numbers\": [],"
                    ],
                    [
                        103,
                        "                            #         \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        104,
                        "                            #         \"lines\": []})"
                    ],
                    [
                        106,
                        "                        #     if i < 5:"
                    ],
                    [
                        107,
                        "                        #     # or create new one"
                    ],
                    [
                        108,
                        "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)"
                    ],
                    [
                        125,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        219,
                        "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")"
                    ],
                    [
                        220,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        224,
                        "    analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        226,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            8
                        ],
                        "contents": [
                            "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            16
                        ],
                        "contents": [
                            "    since=dt1,"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            18,
                            19,
                            20,
                            21
                        ],
                        "contents": [
                            "        if len(multi_comment_symbols) >= 2:",
                            "            multi_comments_enabled = True",
                            "        else:",
                            "            multi_comments_enabled = False"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            41
                        ],
                        "contents": [
                            "                following_multi_comment = False"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            43,
                            44,
                            45,
                            46,
                            47,
                            48
                        ],
                        "contents": [
                            "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                            "                        diff_added[line[0]] = line[1]",
                            "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                            "                        diff_added[line[0]] = line[1]",
                            "                        following_multi_comment = True",
                            "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            50
                        ],
                        "contents": [
                            "                        following_multi_comment = False"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            53
                        ],
                        "contents": [
                            "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65
                        ],
                        "contents": [
                            "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                            "                        diff_added[line[0]] = line[1]",
                            "                        following_multi_comment = True",
                            "                        if line[0] in diff_added.keys():",
                            "                            diff_modified[line[0]] = line[1]",
                            "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                            "                        diff_added[line[0]] = line[1]",
                            "                        if line[0] in diff_added.keys():",
                            "                            diff_modified[line[0]] = line[1]"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            103,
                            104,
                            105,
                            106,
                            107,
                            108
                        ],
                        "contents": [
                            "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):",
                            "    following_multi_comment = False",
                            "    if len(multi_comment_symbols) >= 2:",
                            "        multi_comments_enabled = True",
                            "    else:",
                            "        multi_comments_enabled = False"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            116,
                            117,
                            118,
                            119,
                            120
                        ],
                        "contents": [
                            "                    if curr_content == \"/*<replacement>*/\":",
                            "                        print()",
                            "                    if curr_content.find(multi_comment_symbols[0]) != -1:",
                            "                            following_multi_comment = True",
                            "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            142,
                            143,
                            144
                        ],
                        "contents": [
                            "                                    \"lines\": [curr_content]})",
                            "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:",
                            "                        following_multi_comment = False"
                        ],
                        "comments": [
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            238,
                            239
                        ],
                        "contents": [
                            "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])",
                            "    save_to_json(commits_data, \"Data/commits_data.json\")"
                        ],
                        "comments": [
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            243
                        ],
                        "contents": [
                            "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            245
                        ],
                        "contents": [
                            "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 68,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 77,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 78,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 91,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 122,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 126,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 133,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28
                },
                {
                    "line": 138,
                    "comment": "# or create new one",
                    "char_position_in_line": 32
                },
                {
                    "line": 152,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 156,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 159,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 165,
                    "comment": "# print(last_modified)",
                    "char_position_in_line": 12
                },
                {
                    "line": 167,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 186,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 192,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 195,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 202,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 216,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 219,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 225,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 229,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 232,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 237,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 240,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 248,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "bdfb1cc02e0a08cad8109e142080e326cd09f189",
            "timestamp": "2024-11-19T17:28:53+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        40,
                        "                # For added diff ispect lines filter out comments"
                    ],
                    [
                        51,
                        "                # For deleted diff ispect lines filter out comments"
                    ],
                    [
                        77,
                        "    # Determine basic keywords based on the commit message"
                    ],
                    [
                        112,
                        "                # Set current line for each analysis"
                    ],
                    [
                        116,
                        "                    # In case of a starting multiline comment start adding future lines without comment symbol"
                    ],
                    [
                        119,
                        "                    # In case of comment add them to existing dict if they directly follow"
                    ],
                    [
                        125,
                        "                    # or create new one"
                    ],
                    [
                        130,
                        "                    # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        131,
                        "                    else:"
                    ],
                    [
                        137,
                        "                    # Or create new one"
                    ],
                    [
                        141,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        142,
                        "                    # Disable multiline comments when symbol found"
                    ]
                ],
                "deleted": [
                    [
                        9,
                        "    # This will hold the data for each file and its changes across commits"
                    ],
                    [
                        11,
                        ""
                    ],
                    [
                        77,
                        "    # This function can use NLP techniques or simple keyword extraction"
                    ],
                    [
                        78,
                        "    # Here, a simplified approach is used: basic keywords based on the commit message"
                    ],
                    [
                        116,
                        "                    if curr_content == \"/*<replacement>*/\":"
                    ],
                    [
                        117,
                        "                        print()"
                    ],
                    [
                        122,
                        "                            # In case of comment add them to existing dict if they directly follow"
                    ],
                    [
                        126,
                        "                            # or create new one"
                    ],
                    [
                        131,
                        "                    else:"
                    ],
                    [
                        133,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        138,
                        "                                # or create new one"
                    ],
                    [
                        142,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        154,
                        ""
                    ],
                    [
                        158,
                        ""
                    ],
                    [
                        164,
                        ""
                    ],
                    [
                        165,
                        "            # print(last_modified)"
                    ],
                    [
                        166,
                        ""
                    ],
                    [
                        182,
                        ""
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            40
                        ],
                        "contents": [
                            "                # For added diff ispect lines filter out comments"
                        ],
                        "comments": [
                            "# For added diff ispect lines filter out comments"
                        ],
                        "comment_positions": [
                            16
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            51
                        ],
                        "contents": [
                            "                # For deleted diff ispect lines filter out comments"
                        ],
                        "comments": [
                            "# For deleted diff ispect lines filter out comments"
                        ],
                        "comment_positions": [
                            16
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            77
                        ],
                        "contents": [
                            "    # Determine basic keywords based on the commit message"
                        ],
                        "comments": [
                            "# Determine basic keywords based on the commit message"
                        ],
                        "comment_positions": [
                            4
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            112
                        ],
                        "contents": [
                            "                # Set current line for each analysis"
                        ],
                        "comments": [
                            "# Set current line for each analysis"
                        ],
                        "comment_positions": [
                            16
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            116
                        ],
                        "contents": [
                            "                    # In case of a starting multiline comment start adding future lines without comment symbol"
                        ],
                        "comments": [
                            "# In case of a starting multiline comment start adding future lines without comment symbol "
                        ],
                        "comment_positions": [
                            20
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            119
                        ],
                        "contents": [
                            "                    # In case of comment add them to existing dict if they directly follow"
                        ],
                        "comments": [
                            "# In case of comment add them to existing dict if they directly follow"
                        ],
                        "comment_positions": [
                            20
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            125
                        ],
                        "contents": [
                            "                    # or create new one"
                        ],
                        "comments": [
                            "# or create new one"
                        ],
                        "comment_positions": [
                            20
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            130,
                            131
                        ],
                        "contents": [
                            "                    # In case of no comment add lines to existing dict if line number directly follows",
                            "                    else:"
                        ],
                        "comments": [
                            "# In case of no comment add lines to existing dict if line number directly follows",
                            ""
                        ],
                        "comment_positions": [
                            20,
                            -1
                        ],
                        "edits": [
                            "added",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            137
                        ],
                        "contents": [
                            "                    # Or create new one"
                        ],
                        "comments": [
                            "# Or create new one"
                        ],
                        "comment_positions": [
                            20
                        ],
                        "edits": [
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            141
                        ],
                        "contents": [
                            "                                    \"lines\": [curr_content]})"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            142
                        ],
                        "contents": [
                            "                    # Disable multiline comments when symbol found"
                        ],
                        "comments": [
                            "# Disable multiline comments when symbol found"
                        ],
                        "comment_positions": [
                            20
                        ],
                        "edits": [
                            "added"
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 10,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 11,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 22,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 40,
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 51,
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 68,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 77,
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 90,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 112,
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16,
                    "edit": "added"
                },
                {
                    "line": 116,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 119,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 125,
                    "comment": "# or create new one",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 130,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 137,
                    "comment": "# Or create new one",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 142,
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20,
                    "edit": "added"
                },
                {
                    "line": 152,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 155,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 157,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 162,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 180,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 186,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 189,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 191,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 196,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 210,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 213,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 219,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 223,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 226,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 231,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 234,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 242,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "2bfdaaeca6f4bc1b69403beb494198e8364ba925",
            "timestamp": "2024-11-19T18:23:46+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        117,
                        "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        123,
                        "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:"
                    ],
                    [
                        124,
                        "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content"
                    ],
                    [
                        125,
                        "                                else:"
                    ],
                    [
                        126,
                        "                                    diff_edited.append({"
                    ],
                    [
                        127,
                        "                                        \"line_numbers\": [],"
                    ],
                    [
                        128,
                        "                                        \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        129,
                        "                                        \"lines\": []})"
                    ],
                    [
                        237,
                        "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL"
                    ],
                    [
                        238,
                        "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")"
                    ],
                    [
                        239,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        243,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")"
                    ],
                    [
                        245,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"#\")"
                    ]
                ],
                "deleted": [
                    [
                        117,
                        "                    if curr_content.find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        123,
                        "                                diff_edited[-1][\"comments\"][curr_line] = curr_content"
                    ],
                    [
                        231,
                        "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL"
                    ],
                    [
                        232,
                        "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        233,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        237,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        239,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            117
                        ],
                        "contents": [
                            "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            123,
                            124,
                            125,
                            126,
                            127,
                            128,
                            129
                        ],
                        "contents": [
                            "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:",
                            "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content",
                            "                                else:",
                            "                                    diff_edited.append({",
                            "                                        \"line_numbers\": [],",
                            "                                        \"comments\": {curr_line: curr_content},",
                            "                                        \"lines\": []})"
                        ],
                        "comments": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1,
                            -1
                        ],
                        "edits": [
                            "",
                            "",
                            "",
                            "",
                            "",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            237,
                            238,
                            239
                        ],
                        "contents": [
                            "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL",
                            "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                            "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                        ],
                        "comments": [
                            "# Example repository URL",
                            "# commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                            "# save_to_json(commits_data, \"Data/commits_data.json\")"
                        ],
                        "comment_positions": [
                            59,
                            4,
                            4
                        ],
                        "edits": [
                            "added",
                            "added",
                            "added"
                        ]
                    },
                    {
                        "lines": [
                            243
                        ],
                        "contents": [
                            "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            245
                        ],
                        "contents": [
                            "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"#\")"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 10,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 11,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 22,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 40,
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 51,
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 68,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 77,
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 90,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 112,
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16
                },
                {
                    "line": 116,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20
                },
                {
                    "line": 119,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20
                },
                {
                    "line": 131,
                    "comment": "# or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 136,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20
                },
                {
                    "line": 143,
                    "comment": "# Or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 148,
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20
                },
                {
                    "line": 158,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 161,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 163,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 168,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 186,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 192,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 195,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 202,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 216,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 219,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 225,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 229,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 232,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 237,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 59,
                    "edit": "added"
                },
                {
                    "line": 238,
                    "comment": "# commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 239,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4,
                    "edit": "added"
                },
                {
                    "line": 240,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 248,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "96c6276dc1ea0aad50b96cf844406a8641fa1d37",
            "timestamp": "2024-11-21T12:33:35+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        5,
                        "from dateutil.relativedelta import relativedelta"
                    ],
                    [
                        238,
                        "    repo_url = \"https://github.com/apache/accumulo.git\"  # Example repository URL"
                    ],
                    [
                        239,
                        "    commits_data = analyze_commits(repo_url, \"java\", datetime.today() - relativedelta(years=1), datetime.today(), \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        240,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        242,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        244,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                    ]
                ],
                "deleted": [
                    [
                        237,
                        "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL"
                    ],
                    [
                        238,
                        "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")"
                    ],
                    [
                        239,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        241,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        243,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")"
                    ]
                ],
                "block_diff": [
                    {
                        "lines": [
                            5
                        ],
                        "contents": [
                            "from dateutil.relativedelta import relativedelta"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            238,
                            239,
                            240
                        ],
                        "contents": [
                            "    repo_url = \"https://github.com/apache/accumulo.git\"  # Example repository URL",
                            "    commits_data = analyze_commits(repo_url, \"java\", datetime.today() - relativedelta(years=1), datetime.today(), \"//\", [\"/*\", \"*/\"])",
                            "    save_to_json(commits_data, \"Data/commits_data.json\")"
                        ],
                        "comments": [
                            "# Example repository URL",
                            "",
                            ""
                        ],
                        "comment_positions": [
                            57,
                            -1,
                            -1
                        ],
                        "edits": [
                            "added",
                            "",
                            ""
                        ]
                    },
                    {
                        "lines": [
                            242
                        ],
                        "contents": [
                            "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    },
                    {
                        "lines": [
                            244
                        ],
                        "contents": [
                            "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                        ],
                        "comments": [
                            ""
                        ],
                        "comment_positions": [
                            -1
                        ],
                        "edits": [
                            ""
                        ]
                    }
                ]
            },
            "comments": [
                {
                    "line": 11,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 21,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 23,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 41,
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 52,
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 72,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 78,
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 91,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 113,
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16
                },
                {
                    "line": 117,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20
                },
                {
                    "line": 120,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20
                },
                {
                    "line": 132,
                    "comment": "# or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 137,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20
                },
                {
                    "line": 144,
                    "comment": "# Or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 149,
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20
                },
                {
                    "line": 159,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 162,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 164,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 169,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 187,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 193,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 196,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 198,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 203,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 217,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 220,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 226,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 230,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 233,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 238,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 57,
                    "edit": "added"
                },
                {
                    "line": 241,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 249,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        }
    ]
}