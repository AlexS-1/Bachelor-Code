{
    "main.py": [
        {
            "commit": "16a01cf914066656381d461f822ba3cccc2a3171",
            "timestamp": "2024-10-22T15:10:44+02:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "1": "",
                    "2": "import matplotlib.pyplot as plt",
                    "3": "# from pydriller import Repository",
                    "4": "# import numpy as np",
                    "5": "# import requests",
                    "6": "# import json",
                    "7": "# from flask import Response",
                    "8": "#",
                    "9": "# commits_monthly = list()",
                    "10": "# curr_month = 0",
                    "11": "# curr_year = 0",
                    "12": "# i = 0",
                    "13": "# month_del = 0",
                    "14": "# month_add = 0",
                    "15": "# month_commits = 0",
                    "16": "# filecounter = 0",
                    "17": "#",
                    "18": "#",
                    "19": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                    "20": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                    "21": "#     if (commit.committer_date.month != curr_month):",
                    "22": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                    "23": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                    "24": "#         curr_month = commit.committer_date.month",
                    "25": "#         curr_year = commit.committer_date.year",
                    "26": "#         i += 1",
                    "27": "#         filecounter = 0",
                    "28": "#         month_del = 0",
                    "29": "#         month_add = 0",
                    "30": "#         month_commits = 0",
                    "31": "#",
                    "32": "#     month_commits += 1",
                    "33": "#     for file in commit.modified_files:",
                    "34": "#         month_add += file.added_lines",
                    "35": "#         month_del += file.deleted_lines",
                    "36": "#         filecounter += 1",
                    "37": "#",
                    "38": "# commits = []",
                    "39": "# additions = []",
                    "40": "# deletions = []",
                    "41": "# files = []",
                    "42": "# loc = []",
                    "43": "# issues = []",
                    "44": "#",
                    "45": "# for i in range(0, len(commits_monthly)):",
                    "46": "#     commits.append(commits_monthly[i][1])",
                    "47": "#     files.append(commits_monthly[i][2])",
                    "48": "#     additions.append(commits_monthly[i][3])",
                    "49": "#     deletions.append(commits_monthly[i][4])",
                    "50": "#     if (i == 0):",
                    "51": "#         loc.append(additions[i] - deletions[i])",
                    "52": "#     else:",
                    "53": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                    "54": "#",
                    "55": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                    "56": "# for i in range (1, 50):",
                    "57": "#     params = {",
                    "58": "#         \"state\": \"all\",",
                    "59": "#         \"direction\": \"asc\",",
                    "60": "#         \"per_page\": 100,",
                    "61": "#         \"page\" : i",
                    "62": "#     }",
                    "63": "#     response = requests.get(api_url, params=params)",
                    "64": "#     issues_response = response.json()",
                    "65": "#     for issue in issues_response:",
                    "66": "#         issue_data = []",
                    "67": "#         issue_data.append(issue['number'])",
                    "68": "#         issue_data.append(issue['created_at'])",
                    "69": "#         issue_data.append(issue['closed_at'])",
                    "70": "#         issues.append(issue_data)",
                    "71": "#",
                    "72": "# m = 0",
                    "73": "# issues_monthly = [0]",
                    "74": "# for i in range(len(issues)):",
                    "75": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                    "76": "#         m += 1",
                    "77": "#         issues_monthly.append(0)",
                    "78": "#     issues_monthly[m] += 1",
                    "79": "#",
                    "80": "# fig, ax1 = plt.subplots()",
                    "81": "# ax1.plot(additions, color='g', label='Additions')",
                    "82": "# ax1.plot(deletions, color='r', label='Deletions')",
                    "83": "# ax1.plot(loc, color='0', label='LOC')",
                    "84": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                    "85": "#",
                    "86": "# ax2 = ax1.twinx()",
                    "87": "# ax2.plot(commits, color='y', label='Commits')",
                    "88": "# ax2.plot(files, color='b', label='Files')",
                    "89": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                    "90": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                    "91": "#",
                    "92": "# fig.tight_layout()",
                    "93": "# ax1.legend()",
                    "94": "# ax2.legend()",
                    "95": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "96": "# plt.show()",
                    "97": "#",
                    "98": "import matplotlib.pyplot as plt",
                    "99": "from pydriller import Repository",
                    "100": "import requests",
                    "101": "",
                    "102": "def analyze_commit_data(repo_url):",
                    "103": "    # Initialize tracking variables",
                    "104": "    monthly_commit_data = []",
                    "105": "    current_month = 0",
                    "106": "    current_year = 0",
                    "107": "    monthly_additions = 0",
                    "108": "    monthly_deletions = 0",
                    "109": "    monthly_commit_count = 0",
                    "110": "    modified_file_count = 0",
                    "111": "",
                    "112": "    # Traverse through all commits in the repository",
                    "113": "    for commit in Repository(repo_url).traverse_commits():",
                    "114": "        # If we encounter a new month, save the previous month's data",
                    "115": "        if commit.committer_date.month != current_month:",
                    "116": "            label = f\"{current_month}-{current_year}\"",
                    "117": "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])",
                    "118": "            # Reset counters for the new month",
                    "119": "            current_month = commit.committer_date.month",
                    "120": "            current_year = commit.committer_date.year",
                    "121": "            monthly_additions = 0",
                    "122": "            monthly_deletions = 0",
                    "123": "            monthly_commit_count = 0",
                    "124": "            modified_file_count = 0",
                    "125": "",
                    "126": "        # Update current month's data",
                    "127": "        monthly_commit_count += 1",
                    "128": "        for file in commit.modified_files:",
                    "129": "            monthly_additions += file.added_lines",
                    "130": "            monthly_deletions += file.deleted_lines",
                    "131": "            modified_file_count += 1",
                    "132": "",
                    "133": "    return monthly_commit_data",
                    "134": "",
                    "135": "def analyze_issues_data(repo_url, max_pages):",
                    "136": "    issues_data = []",
                    "137": "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\"",
                    "138": "",
                    "139": "    # Fetch issues data from GitHub using pagination",
                    "140": "    for page in range(1, max_pages + 1):",
                    "141": "        params = {",
                    "142": "            \"state\": \"all\",",
                    "143": "            \"direction\": \"asc\",",
                    "144": "            \"per_page\": 100,",
                    "145": "            \"page\": page",
                    "146": "        }",
                    "147": "        response = requests.get(api_url, params=params)",
                    "148": "        if response.status_code != 200:",
                    "149": "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")",
                    "150": "            break",
                    "151": "",
                    "152": "        issues_response = response.json()",
                    "153": "        # Stop if no more issues are returned",
                    "154": "        if not issues_response:",
                    "155": "            break",
                    "156": "",
                    "157": "        # Extract necessary issue data",
                    "158": "        for issue in issues_response:",
                    "159": "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])",
                    "160": "",
                    "161": "    return issues_data",
                    "162": "",
                    "163": "def count_issues_monthly(issues_data):",
                    "164": "    issues_per_month = [0,0,0,0]",
                    "165": "    current_month = issues_data[0][1][5:7] if issues_data else None",
                    "166": "    monthly_issue_count = 0",
                    "167": "",
                    "168": "    # Count issues per month",
                    "169": "    for i in range(len(issues_data) - 1):",
                    "170": "        issue_month = issues_data[i][1][5:7]",
                    "171": "        next_issue_month = issues_data[i + 1][1][5:7]",
                    "172": "        if issue_month != next_issue_month:",
                    "173": "            issues_per_month.append(monthly_issue_count)",
                    "174": "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])",
                    "175": "            monthly_issue_count = 0",
                    "176": "            current_month = next_issue_month",
                    "177": "        monthly_issue_count += 1",
                    "178": "",
                    "179": "    # Add the last month's count",
                    "180": "    issues_per_month.append(monthly_issue_count)",
                    "181": "    return issues_per_month",
                    "182": "",
                    "183": "def calculate_loc(monthly_commit_data):",
                    "184": "    # Calculate lines of code (LOC) changes over time",
                    "185": "    loc_over_time = []",
                    "186": "    total_loc = 0",
                    "187": "",
                    "188": "    for month_data in monthly_commit_data:",
                    "189": "        additions = month_data[3]",
                    "190": "        deletions = month_data[4]",
                    "191": "        total_loc += additions - deletions",
                    "192": "        loc_over_time.append(total_loc)",
                    "193": "",
                    "194": "    return loc_over_time",
                    "195": "",
                    "196": "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):",
                    "197": "    # Extract data for plotting",
                    "198": "    monthly_labels = [data[0] for data in monthly_commit_data]",
                    "199": "    monthly_commits = [data[1] for data in monthly_commit_data]",
                    "200": "    modified_files = [data[2] for data in monthly_commit_data]",
                    "201": "    monthly_additions = [data[3] for data in monthly_commit_data]",
                    "202": "    monthly_deletions = [data[4] for data in monthly_commit_data]",
                    "203": "",
                    "204": "    for i in range(len(monthly_labels)):",
                    "205": "        label = monthly_labels[i].split('-')",
                    "206": "        if (len(label[0]) == 1):",
                    "207": "            label[0] = \"0\" + label[0]",
                    "208": "        label[1] = label[1][2:]",
                    "209": "        monthly_labels[i] = label[1] + \"-\" + label[0]",
                    "210": "",
                    "211": "    # Plotting",
                    "212": "    fig, ax1 = plt.subplots()",
                    "213": "",
                    "214": "    # Plot lines for additions, deletions, and LOC",
                    "215": "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')",
                    "216": "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')",
                    "217": "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')",
                    "218": "    ax1.tick_params(axis='y', labelcolor='black')",
                    "219": "",
                    "220": "    # Secondary Y-axis for commits, modified files, and issues",
                    "221": "    ax2 = ax1.twinx()",
                    "222": "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')",
                    "223": "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')",
                    "224": "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')",
                    "225": "    ax2.tick_params(axis='y', labelcolor='grey')",
                    "226": "",
                    "227": "    # Finalize and show the plot",
                    "228": "    fig.tight_layout()",
                    "229": "    ax1.legend(loc='upper left')",
                    "230": "    ax2.legend(loc='upper right')",
                    "231": "    plt.xticks(rotation=45)",
                    "232": "    plt.title(\"Repository Analysis\")",
                    "233": "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "234": "    plt.show()",
                    "235": "",
                    "236": "def main():",
                    "237": "    repo_url = 'dani-garcia/vaultwarden'",
                    "238": "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')",
                    "239": "    issues_data = analyze_issues_data(repo_url, 50)",
                    "240": "    issues_per_month = count_issues_monthly(issues_data)",
                    "241": "    loc_over_time = calculate_loc(monthly_commit_data)",
                    "242": "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)",
                    "243": "",
                    "244": "if __name__ == \"__main__\":",
                    "245": "    main()"
                },
                "deleted": {},
                "block_diff": [
                    {
                        "1": {
                            "content": "",
                            "comment_index": -1
                        },
                        "2": {
                            "content": "import matplotlib.pyplot as plt",
                            "comment_index": -1
                        }
                    },
                    {
                        "3": {
                            "content": "# from pydriller import Repository",
                            "comment_index": 0
                        },
                        "4": {
                            "content": "# import numpy as np",
                            "comment_index": 0
                        },
                        "5": {
                            "content": "# import requests",
                            "comment_index": 0
                        },
                        "6": {
                            "content": "# import json",
                            "comment_index": 0
                        },
                        "7": {
                            "content": "# from flask import Response",
                            "comment_index": 0
                        },
                        "8": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "9": {
                            "content": "# commits_monthly = list()",
                            "comment_index": 0
                        },
                        "10": {
                            "content": "# curr_month = 0",
                            "comment_index": 0
                        },
                        "11": {
                            "content": "# curr_year = 0",
                            "comment_index": 0
                        },
                        "12": {
                            "content": "# i = 0",
                            "comment_index": 0
                        },
                        "13": {
                            "content": "# month_del = 0",
                            "comment_index": 0
                        },
                        "14": {
                            "content": "# month_add = 0",
                            "comment_index": 0
                        },
                        "15": {
                            "content": "# month_commits = 0",
                            "comment_index": 0
                        },
                        "16": {
                            "content": "# filecounter = 0",
                            "comment_index": 0
                        },
                        "17": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "18": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "19": {
                            "content": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                            "comment_index": 0
                        },
                        "20": {
                            "content": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                            "comment_index": 0
                        },
                        "21": {
                            "content": "#     if (commit.committer_date.month != curr_month):",
                            "comment_index": 0
                        },
                        "22": {
                            "content": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                            "comment_index": 0
                        },
                        "23": {
                            "content": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                            "comment_index": 0
                        },
                        "24": {
                            "content": "#         curr_month = commit.committer_date.month",
                            "comment_index": 0
                        },
                        "25": {
                            "content": "#         curr_year = commit.committer_date.year",
                            "comment_index": 0
                        },
                        "26": {
                            "content": "#         i += 1",
                            "comment_index": 0
                        },
                        "27": {
                            "content": "#         filecounter = 0",
                            "comment_index": 0
                        },
                        "28": {
                            "content": "#         month_del = 0",
                            "comment_index": 0
                        },
                        "29": {
                            "content": "#         month_add = 0",
                            "comment_index": 0
                        },
                        "30": {
                            "content": "#         month_commits = 0",
                            "comment_index": 0
                        },
                        "31": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "32": {
                            "content": "#     month_commits += 1",
                            "comment_index": 0
                        },
                        "33": {
                            "content": "#     for file in commit.modified_files:",
                            "comment_index": 0
                        },
                        "34": {
                            "content": "#         month_add += file.added_lines",
                            "comment_index": 0
                        },
                        "35": {
                            "content": "#         month_del += file.deleted_lines",
                            "comment_index": 0
                        },
                        "36": {
                            "content": "#         filecounter += 1",
                            "comment_index": 0
                        },
                        "37": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "38": {
                            "content": "# commits = []",
                            "comment_index": 0
                        },
                        "39": {
                            "content": "# additions = []",
                            "comment_index": 0
                        },
                        "40": {
                            "content": "# deletions = []",
                            "comment_index": 0
                        },
                        "41": {
                            "content": "# files = []",
                            "comment_index": 0
                        },
                        "42": {
                            "content": "# loc = []",
                            "comment_index": 0
                        },
                        "43": {
                            "content": "# issues = []",
                            "comment_index": 0
                        },
                        "44": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "45": {
                            "content": "# for i in range(0, len(commits_monthly)):",
                            "comment_index": 0
                        },
                        "46": {
                            "content": "#     commits.append(commits_monthly[i][1])",
                            "comment_index": 0
                        },
                        "47": {
                            "content": "#     files.append(commits_monthly[i][2])",
                            "comment_index": 0
                        },
                        "48": {
                            "content": "#     additions.append(commits_monthly[i][3])",
                            "comment_index": 0
                        },
                        "49": {
                            "content": "#     deletions.append(commits_monthly[i][4])",
                            "comment_index": 0
                        },
                        "50": {
                            "content": "#     if (i == 0):",
                            "comment_index": 0
                        },
                        "51": {
                            "content": "#         loc.append(additions[i] - deletions[i])",
                            "comment_index": 0
                        },
                        "52": {
                            "content": "#     else:",
                            "comment_index": 0
                        },
                        "53": {
                            "content": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                            "comment_index": 0
                        },
                        "54": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "55": {
                            "content": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                            "comment_index": 0
                        },
                        "56": {
                            "content": "# for i in range (1, 50):",
                            "comment_index": 0
                        },
                        "57": {
                            "content": "#     params = {",
                            "comment_index": 0
                        },
                        "58": {
                            "content": "#         \"state\": \"all\",",
                            "comment_index": 0
                        },
                        "59": {
                            "content": "#         \"direction\": \"asc\",",
                            "comment_index": 0
                        },
                        "60": {
                            "content": "#         \"per_page\": 100,",
                            "comment_index": 0
                        },
                        "61": {
                            "content": "#         \"page\" : i",
                            "comment_index": 0
                        },
                        "62": {
                            "content": "#     }",
                            "comment_index": 0
                        },
                        "63": {
                            "content": "#     response = requests.get(api_url, params=params)",
                            "comment_index": 0
                        },
                        "64": {
                            "content": "#     issues_response = response.json()",
                            "comment_index": 0
                        },
                        "65": {
                            "content": "#     for issue in issues_response:",
                            "comment_index": 0
                        },
                        "66": {
                            "content": "#         issue_data = []",
                            "comment_index": 0
                        },
                        "67": {
                            "content": "#         issue_data.append(issue['number'])",
                            "comment_index": 0
                        },
                        "68": {
                            "content": "#         issue_data.append(issue['created_at'])",
                            "comment_index": 0
                        },
                        "69": {
                            "content": "#         issue_data.append(issue['closed_at'])",
                            "comment_index": 0
                        },
                        "70": {
                            "content": "#         issues.append(issue_data)",
                            "comment_index": 0
                        },
                        "71": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "72": {
                            "content": "# m = 0",
                            "comment_index": 0
                        },
                        "73": {
                            "content": "# issues_monthly = [0]",
                            "comment_index": 0
                        },
                        "74": {
                            "content": "# for i in range(len(issues)):",
                            "comment_index": 0
                        },
                        "75": {
                            "content": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                            "comment_index": 0
                        },
                        "76": {
                            "content": "#         m += 1",
                            "comment_index": 0
                        },
                        "77": {
                            "content": "#         issues_monthly.append(0)",
                            "comment_index": 0
                        },
                        "78": {
                            "content": "#     issues_monthly[m] += 1",
                            "comment_index": 0
                        },
                        "79": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "80": {
                            "content": "# fig, ax1 = plt.subplots()",
                            "comment_index": 0
                        },
                        "81": {
                            "content": "# ax1.plot(additions, color='g', label='Additions')",
                            "comment_index": 0
                        },
                        "82": {
                            "content": "# ax1.plot(deletions, color='r', label='Deletions')",
                            "comment_index": 0
                        },
                        "83": {
                            "content": "# ax1.plot(loc, color='0', label='LOC')",
                            "comment_index": 0
                        },
                        "84": {
                            "content": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                            "comment_index": 0
                        },
                        "85": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "86": {
                            "content": "# ax2 = ax1.twinx()",
                            "comment_index": 0
                        },
                        "87": {
                            "content": "# ax2.plot(commits, color='y', label='Commits')",
                            "comment_index": 0
                        },
                        "88": {
                            "content": "# ax2.plot(files, color='b', label='Files')",
                            "comment_index": 0
                        },
                        "89": {
                            "content": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                            "comment_index": 0
                        },
                        "90": {
                            "content": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                            "comment_index": 0
                        },
                        "91": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "92": {
                            "content": "# fig.tight_layout()",
                            "comment_index": 0
                        },
                        "93": {
                            "content": "# ax1.legend()",
                            "comment_index": 0
                        },
                        "94": {
                            "content": "# ax2.legend()",
                            "comment_index": 0
                        },
                        "95": {
                            "content": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                            "comment_index": 0
                        },
                        "96": {
                            "content": "# plt.show()",
                            "comment_index": 0
                        },
                        "97": {
                            "content": "#",
                            "comment_index": 0
                        },
                        "98": {
                            "content": "import matplotlib.pyplot as plt",
                            "comment_index": -1
                        },
                        "99": {
                            "content": "from pydriller import Repository",
                            "comment_index": -1
                        },
                        "100": {
                            "content": "import requests",
                            "comment_index": -1
                        },
                        "101": {
                            "content": "",
                            "comment_index": -1
                        },
                        "102": {
                            "content": "def analyze_commit_data(repo_url):",
                            "comment_index": -1
                        }
                    },
                    {
                        "103": {
                            "content": "    # Initialize tracking variables",
                            "comment_index": 4
                        },
                        "104": {
                            "content": "    monthly_commit_data = []",
                            "comment_index": -1
                        },
                        "105": {
                            "content": "    current_month = 0",
                            "comment_index": -1
                        },
                        "106": {
                            "content": "    current_year = 0",
                            "comment_index": -1
                        },
                        "107": {
                            "content": "    monthly_additions = 0",
                            "comment_index": -1
                        },
                        "108": {
                            "content": "    monthly_deletions = 0",
                            "comment_index": -1
                        },
                        "109": {
                            "content": "    monthly_commit_count = 0",
                            "comment_index": -1
                        },
                        "110": {
                            "content": "    modified_file_count = 0",
                            "comment_index": -1
                        },
                        "111": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "112": {
                            "content": "    # Traverse through all commits in the repository",
                            "comment_index": 4
                        },
                        "113": {
                            "content": "    for commit in Repository(repo_url).traverse_commits():",
                            "comment_index": -1
                        }
                    },
                    {
                        "114": {
                            "content": "        # If we encounter a new month, save the previous month's data",
                            "comment_index": 8
                        },
                        "115": {
                            "content": "        if commit.committer_date.month != current_month:",
                            "comment_index": -1
                        },
                        "116": {
                            "content": "            label = f\"{current_month}-{current_year}\"",
                            "comment_index": -1
                        },
                        "117": {
                            "content": "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])",
                            "comment_index": -1
                        }
                    },
                    {
                        "118": {
                            "content": "            # Reset counters for the new month",
                            "comment_index": 12
                        },
                        "119": {
                            "content": "            current_month = commit.committer_date.month",
                            "comment_index": -1
                        },
                        "120": {
                            "content": "            current_year = commit.committer_date.year",
                            "comment_index": -1
                        },
                        "121": {
                            "content": "            monthly_additions = 0",
                            "comment_index": -1
                        },
                        "122": {
                            "content": "            monthly_deletions = 0",
                            "comment_index": -1
                        },
                        "123": {
                            "content": "            monthly_commit_count = 0",
                            "comment_index": -1
                        },
                        "124": {
                            "content": "            modified_file_count = 0",
                            "comment_index": -1
                        },
                        "125": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "126": {
                            "content": "        # Update current month's data",
                            "comment_index": 8
                        },
                        "127": {
                            "content": "        monthly_commit_count += 1",
                            "comment_index": -1
                        },
                        "128": {
                            "content": "        for file in commit.modified_files:",
                            "comment_index": -1
                        },
                        "129": {
                            "content": "            monthly_additions += file.added_lines",
                            "comment_index": -1
                        },
                        "130": {
                            "content": "            monthly_deletions += file.deleted_lines",
                            "comment_index": -1
                        },
                        "131": {
                            "content": "            modified_file_count += 1",
                            "comment_index": -1
                        },
                        "132": {
                            "content": "",
                            "comment_index": -1
                        },
                        "133": {
                            "content": "    return monthly_commit_data",
                            "comment_index": -1
                        },
                        "134": {
                            "content": "",
                            "comment_index": -1
                        },
                        "135": {
                            "content": "def analyze_issues_data(repo_url, max_pages):",
                            "comment_index": -1
                        },
                        "136": {
                            "content": "    issues_data = []",
                            "comment_index": -1
                        },
                        "137": {
                            "content": "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\"",
                            "comment_index": -1
                        },
                        "138": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "139": {
                            "content": "    # Fetch issues data from GitHub using pagination",
                            "comment_index": 4
                        },
                        "140": {
                            "content": "    for page in range(1, max_pages + 1):",
                            "comment_index": -1
                        },
                        "141": {
                            "content": "        params = {",
                            "comment_index": -1
                        },
                        "142": {
                            "content": "            \"state\": \"all\",",
                            "comment_index": -1
                        },
                        "143": {
                            "content": "            \"direction\": \"asc\",",
                            "comment_index": -1
                        },
                        "144": {
                            "content": "            \"per_page\": 100,",
                            "comment_index": -1
                        },
                        "145": {
                            "content": "            \"page\": page",
                            "comment_index": -1
                        },
                        "146": {
                            "content": "        }",
                            "comment_index": -1
                        },
                        "147": {
                            "content": "        response = requests.get(api_url, params=params)",
                            "comment_index": -1
                        },
                        "148": {
                            "content": "        if response.status_code != 200:",
                            "comment_index": -1
                        },
                        "149": {
                            "content": "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")",
                            "comment_index": -1
                        },
                        "150": {
                            "content": "            break",
                            "comment_index": -1
                        },
                        "151": {
                            "content": "",
                            "comment_index": -1
                        },
                        "152": {
                            "content": "        issues_response = response.json()",
                            "comment_index": -1
                        }
                    },
                    {
                        "153": {
                            "content": "        # Stop if no more issues are returned",
                            "comment_index": 8
                        },
                        "154": {
                            "content": "        if not issues_response:",
                            "comment_index": -1
                        },
                        "155": {
                            "content": "            break",
                            "comment_index": -1
                        },
                        "156": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "157": {
                            "content": "        # Extract necessary issue data",
                            "comment_index": 8
                        },
                        "158": {
                            "content": "        for issue in issues_response:",
                            "comment_index": -1
                        },
                        "159": {
                            "content": "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])",
                            "comment_index": -1
                        },
                        "160": {
                            "content": "",
                            "comment_index": -1
                        },
                        "161": {
                            "content": "    return issues_data",
                            "comment_index": -1
                        },
                        "162": {
                            "content": "",
                            "comment_index": -1
                        },
                        "163": {
                            "content": "def count_issues_monthly(issues_data):",
                            "comment_index": -1
                        },
                        "164": {
                            "content": "    issues_per_month = [0,0,0,0]",
                            "comment_index": -1
                        },
                        "165": {
                            "content": "    current_month = issues_data[0][1][5:7] if issues_data else None",
                            "comment_index": -1
                        },
                        "166": {
                            "content": "    monthly_issue_count = 0",
                            "comment_index": -1
                        },
                        "167": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "168": {
                            "content": "    # Count issues per month",
                            "comment_index": 4
                        },
                        "169": {
                            "content": "    for i in range(len(issues_data) - 1):",
                            "comment_index": -1
                        },
                        "170": {
                            "content": "        issue_month = issues_data[i][1][5:7]",
                            "comment_index": -1
                        },
                        "171": {
                            "content": "        next_issue_month = issues_data[i + 1][1][5:7]",
                            "comment_index": -1
                        },
                        "172": {
                            "content": "        if issue_month != next_issue_month:",
                            "comment_index": -1
                        },
                        "173": {
                            "content": "            issues_per_month.append(monthly_issue_count)",
                            "comment_index": -1
                        },
                        "174": {
                            "content": "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])",
                            "comment_index": -1
                        },
                        "175": {
                            "content": "            monthly_issue_count = 0",
                            "comment_index": -1
                        },
                        "176": {
                            "content": "            current_month = next_issue_month",
                            "comment_index": -1
                        },
                        "177": {
                            "content": "        monthly_issue_count += 1",
                            "comment_index": -1
                        },
                        "178": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "179": {
                            "content": "    # Add the last month's count",
                            "comment_index": 4
                        },
                        "180": {
                            "content": "    issues_per_month.append(monthly_issue_count)",
                            "comment_index": -1
                        },
                        "181": {
                            "content": "    return issues_per_month",
                            "comment_index": -1
                        },
                        "182": {
                            "content": "",
                            "comment_index": -1
                        },
                        "183": {
                            "content": "def calculate_loc(monthly_commit_data):",
                            "comment_index": -1
                        }
                    },
                    {
                        "184": {
                            "content": "    # Calculate lines of code (LOC) changes over time",
                            "comment_index": 4
                        },
                        "185": {
                            "content": "    loc_over_time = []",
                            "comment_index": -1
                        },
                        "186": {
                            "content": "    total_loc = 0",
                            "comment_index": -1
                        },
                        "187": {
                            "content": "",
                            "comment_index": -1
                        },
                        "188": {
                            "content": "    for month_data in monthly_commit_data:",
                            "comment_index": -1
                        },
                        "189": {
                            "content": "        additions = month_data[3]",
                            "comment_index": -1
                        },
                        "190": {
                            "content": "        deletions = month_data[4]",
                            "comment_index": -1
                        },
                        "191": {
                            "content": "        total_loc += additions - deletions",
                            "comment_index": -1
                        },
                        "192": {
                            "content": "        loc_over_time.append(total_loc)",
                            "comment_index": -1
                        },
                        "193": {
                            "content": "",
                            "comment_index": -1
                        },
                        "194": {
                            "content": "    return loc_over_time",
                            "comment_index": -1
                        },
                        "195": {
                            "content": "",
                            "comment_index": -1
                        },
                        "196": {
                            "content": "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):",
                            "comment_index": -1
                        }
                    },
                    {
                        "197": {
                            "content": "    # Extract data for plotting",
                            "comment_index": 4
                        },
                        "198": {
                            "content": "    monthly_labels = [data[0] for data in monthly_commit_data]",
                            "comment_index": -1
                        },
                        "199": {
                            "content": "    monthly_commits = [data[1] for data in monthly_commit_data]",
                            "comment_index": -1
                        },
                        "200": {
                            "content": "    modified_files = [data[2] for data in monthly_commit_data]",
                            "comment_index": -1
                        },
                        "201": {
                            "content": "    monthly_additions = [data[3] for data in monthly_commit_data]",
                            "comment_index": -1
                        },
                        "202": {
                            "content": "    monthly_deletions = [data[4] for data in monthly_commit_data]",
                            "comment_index": -1
                        },
                        "203": {
                            "content": "",
                            "comment_index": -1
                        },
                        "204": {
                            "content": "    for i in range(len(monthly_labels)):",
                            "comment_index": -1
                        },
                        "205": {
                            "content": "        label = monthly_labels[i].split('-')",
                            "comment_index": -1
                        },
                        "206": {
                            "content": "        if (len(label[0]) == 1):",
                            "comment_index": -1
                        },
                        "207": {
                            "content": "            label[0] = \"0\" + label[0]",
                            "comment_index": -1
                        },
                        "208": {
                            "content": "        label[1] = label[1][2:]",
                            "comment_index": -1
                        },
                        "209": {
                            "content": "        monthly_labels[i] = label[1] + \"-\" + label[0]",
                            "comment_index": -1
                        },
                        "210": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "211": {
                            "content": "    # Plotting",
                            "comment_index": 4
                        },
                        "212": {
                            "content": "    fig, ax1 = plt.subplots()",
                            "comment_index": -1
                        },
                        "213": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "214": {
                            "content": "    # Plot lines for additions, deletions, and LOC",
                            "comment_index": 4
                        },
                        "215": {
                            "content": "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')",
                            "comment_index": -1
                        },
                        "216": {
                            "content": "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')",
                            "comment_index": -1
                        },
                        "217": {
                            "content": "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')",
                            "comment_index": -1
                        },
                        "218": {
                            "content": "    ax1.tick_params(axis='y', labelcolor='black')",
                            "comment_index": -1
                        },
                        "219": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "220": {
                            "content": "    # Secondary Y-axis for commits, modified files, and issues",
                            "comment_index": 4
                        },
                        "221": {
                            "content": "    ax2 = ax1.twinx()",
                            "comment_index": -1
                        },
                        "222": {
                            "content": "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')",
                            "comment_index": -1
                        },
                        "223": {
                            "content": "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')",
                            "comment_index": -1
                        },
                        "224": {
                            "content": "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')",
                            "comment_index": -1
                        },
                        "225": {
                            "content": "    ax2.tick_params(axis='y', labelcolor='grey')",
                            "comment_index": -1
                        },
                        "226": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "227": {
                            "content": "    # Finalize and show the plot",
                            "comment_index": 4
                        },
                        "228": {
                            "content": "    fig.tight_layout()",
                            "comment_index": -1
                        },
                        "229": {
                            "content": "    ax1.legend(loc='upper left')",
                            "comment_index": -1
                        },
                        "230": {
                            "content": "    ax2.legend(loc='upper right')",
                            "comment_index": -1
                        },
                        "231": {
                            "content": "    plt.xticks(rotation=45)",
                            "comment_index": -1
                        },
                        "232": {
                            "content": "    plt.title(\"Repository Analysis\")",
                            "comment_index": -1
                        },
                        "233": {
                            "content": "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                            "comment_index": -1
                        },
                        "234": {
                            "content": "    plt.show()",
                            "comment_index": -1
                        },
                        "235": {
                            "content": "",
                            "comment_index": -1
                        },
                        "236": {
                            "content": "def main():",
                            "comment_index": -1
                        },
                        "237": {
                            "content": "    repo_url = 'dani-garcia/vaultwarden'",
                            "comment_index": -1
                        },
                        "238": {
                            "content": "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')",
                            "comment_index": -1
                        },
                        "239": {
                            "content": "    issues_data = analyze_issues_data(repo_url, 50)",
                            "comment_index": -1
                        },
                        "240": {
                            "content": "    issues_per_month = count_issues_monthly(issues_data)",
                            "comment_index": -1
                        },
                        "241": {
                            "content": "    loc_over_time = calculate_loc(monthly_commit_data)",
                            "comment_index": -1
                        },
                        "242": {
                            "content": "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)",
                            "comment_index": -1
                        },
                        "243": {
                            "content": "",
                            "comment_index": -1
                        },
                        "244": {
                            "content": "if __name__ == \"__main__\":",
                            "comment_index": -1
                        },
                        "245": {
                            "content": "    main()",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 3,
                    "comment": "# from pydriller import Repository",
                    "char_position_in_line": 0
                },
                {
                    "line": 4,
                    "comment": "# import numpy as np",
                    "char_position_in_line": 0
                },
                {
                    "line": 5,
                    "comment": "# import requests",
                    "char_position_in_line": 0
                },
                {
                    "line": 6,
                    "comment": "# import json",
                    "char_position_in_line": 0
                },
                {
                    "line": 7,
                    "comment": "# from flask import Response",
                    "char_position_in_line": 0
                },
                {
                    "line": 8,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 9,
                    "comment": "# commits_monthly = list()",
                    "char_position_in_line": 0
                },
                {
                    "line": 10,
                    "comment": "# curr_month = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 11,
                    "comment": "# curr_year = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 12,
                    "comment": "# i = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 13,
                    "comment": "# month_del = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 14,
                    "comment": "# month_add = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 15,
                    "comment": "# month_commits = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 16,
                    "comment": "# filecounter = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 17,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 18,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 19,
                    "comment": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                    "char_position_in_line": 0
                },
                {
                    "line": 20,
                    "comment": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                    "char_position_in_line": 0
                },
                {
                    "line": 21,
                    "comment": "#     if (commit.committer_date.month != curr_month):",
                    "char_position_in_line": 0
                },
                {
                    "line": 22,
                    "comment": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                    "char_position_in_line": 0
                },
                {
                    "line": 23,
                    "comment": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                    "char_position_in_line": 0
                },
                {
                    "line": 24,
                    "comment": "#         curr_month = commit.committer_date.month",
                    "char_position_in_line": 0
                },
                {
                    "line": 25,
                    "comment": "#         curr_year = commit.committer_date.year",
                    "char_position_in_line": 0
                },
                {
                    "line": 26,
                    "comment": "#         i += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 27,
                    "comment": "#         filecounter = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 28,
                    "comment": "#         month_del = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 29,
                    "comment": "#         month_add = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 30,
                    "comment": "#         month_commits = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 31,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 32,
                    "comment": "#     month_commits += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 33,
                    "comment": "#     for file in commit.modified_files:",
                    "char_position_in_line": 0
                },
                {
                    "line": 34,
                    "comment": "#         month_add += file.added_lines",
                    "char_position_in_line": 0
                },
                {
                    "line": 35,
                    "comment": "#         month_del += file.deleted_lines",
                    "char_position_in_line": 0
                },
                {
                    "line": 36,
                    "comment": "#         filecounter += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 37,
                    "comment": "#     ",
                    "char_position_in_line": 0
                },
                {
                    "line": 38,
                    "comment": "# commits = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 39,
                    "comment": "# additions = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 40,
                    "comment": "# deletions = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 41,
                    "comment": "# files = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 42,
                    "comment": "# loc = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 43,
                    "comment": "# issues = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 44,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 45,
                    "comment": "# for i in range(0, len(commits_monthly)):",
                    "char_position_in_line": 0
                },
                {
                    "line": 46,
                    "comment": "#     commits.append(commits_monthly[i][1])",
                    "char_position_in_line": 0
                },
                {
                    "line": 47,
                    "comment": "#     files.append(commits_monthly[i][2])",
                    "char_position_in_line": 0
                },
                {
                    "line": 48,
                    "comment": "#     additions.append(commits_monthly[i][3])",
                    "char_position_in_line": 0
                },
                {
                    "line": 49,
                    "comment": "#     deletions.append(commits_monthly[i][4])",
                    "char_position_in_line": 0
                },
                {
                    "line": 50,
                    "comment": "#     if (i == 0):",
                    "char_position_in_line": 0
                },
                {
                    "line": 51,
                    "comment": "#         loc.append(additions[i] - deletions[i])",
                    "char_position_in_line": 0
                },
                {
                    "line": 52,
                    "comment": "#     else: ",
                    "char_position_in_line": 0
                },
                {
                    "line": 53,
                    "comment": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                    "char_position_in_line": 0
                },
                {
                    "line": 54,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 55,
                    "comment": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                    "char_position_in_line": 0
                },
                {
                    "line": 56,
                    "comment": "# for i in range (1, 50):",
                    "char_position_in_line": 0
                },
                {
                    "line": 57,
                    "comment": "#     params = {",
                    "char_position_in_line": 0
                },
                {
                    "line": 58,
                    "comment": "#         \"state\": \"all\",",
                    "char_position_in_line": 0
                },
                {
                    "line": 59,
                    "comment": "#         \"direction\": \"asc\",",
                    "char_position_in_line": 0
                },
                {
                    "line": 60,
                    "comment": "#         \"per_page\": 100,",
                    "char_position_in_line": 0
                },
                {
                    "line": 61,
                    "comment": "#         \"page\" : i",
                    "char_position_in_line": 0
                },
                {
                    "line": 62,
                    "comment": "#     }",
                    "char_position_in_line": 0
                },
                {
                    "line": 63,
                    "comment": "#     response = requests.get(api_url, params=params)",
                    "char_position_in_line": 0
                },
                {
                    "line": 64,
                    "comment": "#     issues_response = response.json()",
                    "char_position_in_line": 0
                },
                {
                    "line": 65,
                    "comment": "#     for issue in issues_response:",
                    "char_position_in_line": 0
                },
                {
                    "line": 66,
                    "comment": "#         issue_data = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 67,
                    "comment": "#         issue_data.append(issue['number'])",
                    "char_position_in_line": 0
                },
                {
                    "line": 68,
                    "comment": "#         issue_data.append(issue['created_at'])",
                    "char_position_in_line": 0
                },
                {
                    "line": 69,
                    "comment": "#         issue_data.append(issue['closed_at'])",
                    "char_position_in_line": 0
                },
                {
                    "line": 70,
                    "comment": "#         issues.append(issue_data)",
                    "char_position_in_line": 0
                },
                {
                    "line": 71,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 72,
                    "comment": "# m = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 73,
                    "comment": "# issues_monthly = [0]",
                    "char_position_in_line": 0
                },
                {
                    "line": 74,
                    "comment": "# for i in range(len(issues)):",
                    "char_position_in_line": 0
                },
                {
                    "line": 75,
                    "comment": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                    "char_position_in_line": 0
                },
                {
                    "line": 76,
                    "comment": "#         m += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 77,
                    "comment": "#         issues_monthly.append(0)",
                    "char_position_in_line": 0
                },
                {
                    "line": 78,
                    "comment": "#     issues_monthly[m] += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 79,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 80,
                    "comment": "# fig, ax1 = plt.subplots()",
                    "char_position_in_line": 0
                },
                {
                    "line": 81,
                    "comment": "# ax1.plot(additions, color='g', label='Additions')",
                    "char_position_in_line": 0
                },
                {
                    "line": 82,
                    "comment": "# ax1.plot(deletions, color='r', label='Deletions')",
                    "char_position_in_line": 0
                },
                {
                    "line": 83,
                    "comment": "# ax1.plot(loc, color='0', label='LOC')",
                    "char_position_in_line": 0
                },
                {
                    "line": 84,
                    "comment": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                    "char_position_in_line": 0
                },
                {
                    "line": 85,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 86,
                    "comment": "# ax2 = ax1.twinx()",
                    "char_position_in_line": 0
                },
                {
                    "line": 87,
                    "comment": "# ax2.plot(commits, color='y', label='Commits')",
                    "char_position_in_line": 0
                },
                {
                    "line": 88,
                    "comment": "# ax2.plot(files, color='b', label='Files')",
                    "char_position_in_line": 0
                },
                {
                    "line": 89,
                    "comment": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                    "char_position_in_line": 0
                },
                {
                    "line": 90,
                    "comment": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                    "char_position_in_line": 0
                },
                {
                    "line": 91,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 92,
                    "comment": "# fig.tight_layout()",
                    "char_position_in_line": 0
                },
                {
                    "line": 93,
                    "comment": "# ax1.legend()",
                    "char_position_in_line": 0
                },
                {
                    "line": 94,
                    "comment": "# ax2.legend()",
                    "char_position_in_line": 0
                },
                {
                    "line": 95,
                    "comment": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "char_position_in_line": 0
                },
                {
                    "line": 96,
                    "comment": "# plt.show()",
                    "char_position_in_line": 0
                },
                {
                    "line": 97,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 103,
                    "comment": "# Initialize tracking variables",
                    "char_position_in_line": 4
                },
                {
                    "line": 112,
                    "comment": "# Traverse through all commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 114,
                    "comment": "# If we encounter a new month, save the previous month's data",
                    "char_position_in_line": 8
                },
                {
                    "line": 118,
                    "comment": "# Reset counters for the new month",
                    "char_position_in_line": 12
                },
                {
                    "line": 126,
                    "comment": "# Update current month's data",
                    "char_position_in_line": 8
                },
                {
                    "line": 139,
                    "comment": "# Fetch issues data from GitHub using pagination",
                    "char_position_in_line": 4
                },
                {
                    "line": 153,
                    "comment": "# Stop if no more issues are returned",
                    "char_position_in_line": 8
                },
                {
                    "line": 157,
                    "comment": "# Extract necessary issue data",
                    "char_position_in_line": 8
                },
                {
                    "line": 168,
                    "comment": "# Count issues per month",
                    "char_position_in_line": 4
                },
                {
                    "line": 179,
                    "comment": "# Add the last month's count",
                    "char_position_in_line": 4
                },
                {
                    "line": 184,
                    "comment": "# Calculate lines of code (LOC) changes over time",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Extract data for plotting",
                    "char_position_in_line": 4
                },
                {
                    "line": 211,
                    "comment": "# Plotting",
                    "char_position_in_line": 4
                },
                {
                    "line": 214,
                    "comment": "# Plot lines for additions, deletions, and LOC",
                    "char_position_in_line": 4
                },
                {
                    "line": 220,
                    "comment": "# Secondary Y-axis for commits, modified files, and issues",
                    "char_position_in_line": 4
                },
                {
                    "line": 227,
                    "comment": "# Finalize and show the plot",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "1061293a43b0788f9db921ae6fc61734ccdf1b8d",
            "timestamp": "2024-11-16T19:39:45+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {},
                "deleted": {
                    "1": "",
                    "2": "import matplotlib.pyplot as plt",
                    "3": "# from pydriller import Repository",
                    "4": "# import numpy as np",
                    "5": "# import requests",
                    "6": "# import json",
                    "7": "# from flask import Response",
                    "8": "#",
                    "9": "# commits_monthly = list()",
                    "10": "# curr_month = 0",
                    "11": "# curr_year = 0",
                    "12": "# i = 0",
                    "13": "# month_del = 0",
                    "14": "# month_add = 0",
                    "15": "# month_commits = 0",
                    "16": "# filecounter = 0",
                    "17": "#",
                    "18": "#",
                    "19": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                    "20": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                    "21": "#     if (commit.committer_date.month != curr_month):",
                    "22": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                    "23": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                    "24": "#         curr_month = commit.committer_date.month",
                    "25": "#         curr_year = commit.committer_date.year",
                    "26": "#         i += 1",
                    "27": "#         filecounter = 0",
                    "28": "#         month_del = 0",
                    "29": "#         month_add = 0",
                    "30": "#         month_commits = 0",
                    "31": "#",
                    "32": "#     month_commits += 1",
                    "33": "#     for file in commit.modified_files:",
                    "34": "#         month_add += file.added_lines",
                    "35": "#         month_del += file.deleted_lines",
                    "36": "#         filecounter += 1",
                    "37": "#",
                    "38": "# commits = []",
                    "39": "# additions = []",
                    "40": "# deletions = []",
                    "41": "# files = []",
                    "42": "# loc = []",
                    "43": "# issues = []",
                    "44": "#",
                    "45": "# for i in range(0, len(commits_monthly)):",
                    "46": "#     commits.append(commits_monthly[i][1])",
                    "47": "#     files.append(commits_monthly[i][2])",
                    "48": "#     additions.append(commits_monthly[i][3])",
                    "49": "#     deletions.append(commits_monthly[i][4])",
                    "50": "#     if (i == 0):",
                    "51": "#         loc.append(additions[i] - deletions[i])",
                    "52": "#     else:",
                    "53": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                    "54": "#",
                    "55": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                    "56": "# for i in range (1, 50):",
                    "57": "#     params = {",
                    "58": "#         \"state\": \"all\",",
                    "59": "#         \"direction\": \"asc\",",
                    "60": "#         \"per_page\": 100,",
                    "61": "#         \"page\" : i",
                    "62": "#     }",
                    "63": "#     response = requests.get(api_url, params=params)",
                    "64": "#     issues_response = response.json()",
                    "65": "#     for issue in issues_response:",
                    "66": "#         issue_data = []",
                    "67": "#         issue_data.append(issue['number'])",
                    "68": "#         issue_data.append(issue['created_at'])",
                    "69": "#         issue_data.append(issue['closed_at'])",
                    "70": "#         issues.append(issue_data)",
                    "71": "#",
                    "72": "# m = 0",
                    "73": "# issues_monthly = [0]",
                    "74": "# for i in range(len(issues)):",
                    "75": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                    "76": "#         m += 1",
                    "77": "#         issues_monthly.append(0)",
                    "78": "#     issues_monthly[m] += 1",
                    "79": "#",
                    "80": "# fig, ax1 = plt.subplots()",
                    "81": "# ax1.plot(additions, color='g', label='Additions')",
                    "82": "# ax1.plot(deletions, color='r', label='Deletions')",
                    "83": "# ax1.plot(loc, color='0', label='LOC')",
                    "84": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                    "85": "#",
                    "86": "# ax2 = ax1.twinx()",
                    "87": "# ax2.plot(commits, color='y', label='Commits')",
                    "88": "# ax2.plot(files, color='b', label='Files')",
                    "89": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                    "90": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                    "91": "#",
                    "92": "# fig.tight_layout()",
                    "93": "# ax1.legend()",
                    "94": "# ax2.legend()",
                    "95": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "96": "# plt.show()",
                    "97": "#",
                    "98": "import matplotlib.pyplot as plt",
                    "99": "from pydriller import Repository",
                    "100": "import requests",
                    "101": "",
                    "102": "def analyze_commit_data(repo_url):",
                    "103": "    # Initialize tracking variables",
                    "104": "    monthly_commit_data = []",
                    "105": "    current_month = 0",
                    "106": "    current_year = 0",
                    "107": "    monthly_additions = 0",
                    "108": "    monthly_deletions = 0",
                    "109": "    monthly_commit_count = 0",
                    "110": "    modified_file_count = 0",
                    "111": "",
                    "112": "    # Traverse through all commits in the repository",
                    "113": "    for commit in Repository(repo_url).traverse_commits():",
                    "114": "        # If we encounter a new month, save the previous month's data",
                    "115": "        if commit.committer_date.month != current_month:",
                    "116": "            label = f\"{current_month}-{current_year}\"",
                    "117": "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])",
                    "118": "            # Reset counters for the new month",
                    "119": "            current_month = commit.committer_date.month",
                    "120": "            current_year = commit.committer_date.year",
                    "121": "            monthly_additions = 0",
                    "122": "            monthly_deletions = 0",
                    "123": "            monthly_commit_count = 0",
                    "124": "            modified_file_count = 0",
                    "125": "",
                    "126": "        # Update current month's data",
                    "127": "        monthly_commit_count += 1",
                    "128": "        for file in commit.modified_files:",
                    "129": "            monthly_additions += file.added_lines",
                    "130": "            monthly_deletions += file.deleted_lines",
                    "131": "            modified_file_count += 1",
                    "132": "",
                    "133": "    return monthly_commit_data",
                    "134": "",
                    "135": "def analyze_issues_data(repo_url, max_pages):",
                    "136": "    issues_data = []",
                    "137": "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\"",
                    "138": "",
                    "139": "    # Fetch issues data from GitHub using pagination",
                    "140": "    for page in range(1, max_pages + 1):",
                    "141": "        params = {",
                    "142": "            \"state\": \"all\",",
                    "143": "            \"direction\": \"asc\",",
                    "144": "            \"per_page\": 100,",
                    "145": "            \"page\": page",
                    "146": "        }",
                    "147": "        response = requests.get(api_url, params=params)",
                    "148": "        if response.status_code != 200:",
                    "149": "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")",
                    "150": "            break",
                    "151": "",
                    "152": "        issues_response = response.json()",
                    "153": "        # Stop if no more issues are returned",
                    "154": "        if not issues_response:",
                    "155": "            break",
                    "156": "",
                    "157": "        # Extract necessary issue data",
                    "158": "        for issue in issues_response:",
                    "159": "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])",
                    "160": "",
                    "161": "    return issues_data",
                    "162": "",
                    "163": "def count_issues_monthly(issues_data):",
                    "164": "    issues_per_month = [0,0,0,0]",
                    "165": "    current_month = issues_data[0][1][5:7] if issues_data else None",
                    "166": "    monthly_issue_count = 0",
                    "167": "",
                    "168": "    # Count issues per month",
                    "169": "    for i in range(len(issues_data) - 1):",
                    "170": "        issue_month = issues_data[i][1][5:7]",
                    "171": "        next_issue_month = issues_data[i + 1][1][5:7]",
                    "172": "        if issue_month != next_issue_month:",
                    "173": "            issues_per_month.append(monthly_issue_count)",
                    "174": "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])",
                    "175": "            monthly_issue_count = 0",
                    "176": "            current_month = next_issue_month",
                    "177": "        monthly_issue_count += 1",
                    "178": "",
                    "179": "    # Add the last month's count",
                    "180": "    issues_per_month.append(monthly_issue_count)",
                    "181": "    return issues_per_month",
                    "182": "",
                    "183": "def calculate_loc(monthly_commit_data):",
                    "184": "    # Calculate lines of code (LOC) changes over time",
                    "185": "    loc_over_time = []",
                    "186": "    total_loc = 0",
                    "187": "",
                    "188": "    for month_data in monthly_commit_data:",
                    "189": "        additions = month_data[3]",
                    "190": "        deletions = month_data[4]",
                    "191": "        total_loc += additions - deletions",
                    "192": "        loc_over_time.append(total_loc)",
                    "193": "",
                    "194": "    return loc_over_time",
                    "195": "",
                    "196": "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):",
                    "197": "    # Extract data for plotting",
                    "198": "    monthly_labels = [data[0] for data in monthly_commit_data]",
                    "199": "    monthly_commits = [data[1] for data in monthly_commit_data]",
                    "200": "    modified_files = [data[2] for data in monthly_commit_data]",
                    "201": "    monthly_additions = [data[3] for data in monthly_commit_data]",
                    "202": "    monthly_deletions = [data[4] for data in monthly_commit_data]",
                    "203": "",
                    "204": "    for i in range(len(monthly_labels)):",
                    "205": "        label = monthly_labels[i].split('-')",
                    "206": "        if (len(label[0]) == 1):",
                    "207": "            label[0] = \"0\" + label[0]",
                    "208": "        label[1] = label[1][2:]",
                    "209": "        monthly_labels[i] = label[1] + \"-\" + label[0]",
                    "210": "",
                    "211": "    # Plotting",
                    "212": "    fig, ax1 = plt.subplots()",
                    "213": "",
                    "214": "    # Plot lines for additions, deletions, and LOC",
                    "215": "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')",
                    "216": "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')",
                    "217": "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')",
                    "218": "    ax1.tick_params(axis='y', labelcolor='black')",
                    "219": "",
                    "220": "    # Secondary Y-axis for commits, modified files, and issues",
                    "221": "    ax2 = ax1.twinx()",
                    "222": "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')",
                    "223": "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')",
                    "224": "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')",
                    "225": "    ax2.tick_params(axis='y', labelcolor='grey')",
                    "226": "",
                    "227": "    # Finalize and show the plot",
                    "228": "    fig.tight_layout()",
                    "229": "    ax1.legend(loc='upper left')",
                    "230": "    ax2.legend(loc='upper right')",
                    "231": "    plt.xticks(rotation=45)",
                    "232": "    plt.title(\"Repository Analysis\")",
                    "233": "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "234": "    plt.show()",
                    "235": "",
                    "236": "def main():",
                    "237": "    repo_url = 'dani-garcia/vaultwarden'",
                    "238": "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')",
                    "239": "    issues_data = analyze_issues_data(repo_url, 50)",
                    "240": "    issues_per_month = count_issues_monthly(issues_data)",
                    "241": "    loc_over_time = calculate_loc(monthly_commit_data)",
                    "242": "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)",
                    "243": "",
                    "244": "if __name__ == \"__main__\":",
                    "245": "    main()"
                },
                "block_diff": []
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# For each file affected in the commit, create a trace",
                    "char_position_in_line": 8
                },
                {
                    "line": 100,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "char_position_in_line": 12
                },
                {
                    "line": 109,
                    "comment": "# Create an event for the current commit affecting this file",
                    "char_position_in_line": 12
                },
                {
                    "line": 115,
                    "comment": "# Add custom attributes for the event",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "#event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "char_position_in_line": 12
                },
                {
                    "line": 123,
                    "comment": "# Append the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 129,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 133,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 134,
                    "comment": "# commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 135,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 136,
                    "comment": "# print(\"Commit data has been saved to commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 137,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 144,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        }
    ],
    "XESConversion.py": [
        {
            "commit": "a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e",
            "timestamp": "2024-10-24T15:08:06+02:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "1": "from pydriller import Repository",
                    "2": "import json",
                    "3": "import pm4py",
                    "4": "from pm4py.objects.log.obj import EventLog, Trace, Event",
                    "5": "from pm4py.objects.log.exporter.xes import exporter as xes_exporter",
                    "6": "",
                    "7": "def analyze_commits(repo_url):",
                    "8": "    # This will hold the data for each file and its changes across commits",
                    "9": "    commits_data = []",
                    "10": "",
                    "11": "    # Traverse through the commits in the repository",
                    "12": "    for commit in Repository(repo_url).traverse_commits():",
                    "13": "        commit_data = {",
                    "14": "            \"timestamp\": commit.committer_date.isoformat(),",
                    "15": "            \"author\": commit.author.name,",
                    "16": "            \"files\": []",
                    "17": "        }",
                    "18": "",
                    "19": "        # Analyze each file modified in the commit",
                    "20": "        for modified_file in commit.modified_files:",
                    "21": "            file_data = {",
                    "22": "                \"filename\": modified_file.filename,",
                    "23": "                \"additions\": modified_file.added_lines,",
                    "24": "                \"deletions\": modified_file.deleted_lines,",
                    "25": "                \"change_type\": modified_file.change_type.name,",
                    "26": "                \"commit_message\": commit.msg",
                    "27": "            }",
                    "28": "",
                    "29": "            # Use commit message keywords to determine activity type",
                    "30": "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                    "31": "                file_data[\"activity\"] = \"Bug Fix\"",
                    "32": "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                    "33": "                file_data[\"activity\"] = \"Feature Development\"",
                    "34": "            elif \"refactor\" in commit.msg.lower():",
                    "35": "                file_data[\"activity\"] = \"Refactoring\"",
                    "36": "            else:",
                    "37": "                file_data[\"activity\"] = \"Other\"",
                    "38": "",
                    "39": "            # Generate effect/meaning keywords based on the commit message and type of changes",
                    "40": "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "41": "",
                    "42": "            commit_data[\"files\"].append(file_data)",
                    "43": "",
                    "44": "        # Store the processed commit data",
                    "45": "        commits_data.append(commit_data)",
                    "46": "",
                    "47": "    return commits_data",
                    "48": "",
                    "49": "def extract_keywords(commit_message, modified_file):",
                    "50": "    # This function can use NLP techniques or simple keyword extraction",
                    "51": "    # Here, a simplified approach is used: basic keywords based on the commit message",
                    "52": "    keywords = []",
                    "53": "    if \"performance\" in commit_message.lower():",
                    "54": "        keywords.append(\"performance\")",
                    "55": "    if \"security\" in commit_message.lower():",
                    "56": "        keywords.append(\"security\")",
                    "57": "    if modified_file.added_lines > modified_file.deleted_lines:",
                    "58": "        keywords.append(\"expansion\")",
                    "59": "    else:",
                    "60": "        keywords.append(\"optimization\")",
                    "61": "",
                    "62": "    return keywords",
                    "63": "",
                    "64": "def save_to_json(commits_data, filename):",
                    "65": "    # Save the processed commit data to a JSON file",
                    "66": "    with open(filename, 'w') as json_file:",
                    "67": "        json.dump(commits_data, json_file, indent=4)",
                    "68": "",
                    "69": "",
                    "70": "",
                    "71": "def create_xes_log(commits_data):",
                    "72": "    # Create a new EventLog object",
                    "73": "    log = EventLog()",
                    "74": "",
                    "75": "    # Iterate over each commit entry in the data",
                    "76": "    for commit_data in commits_data:",
                    "77": "        # For each file affected in the commit, create a trace",
                    "78": "        for file_data in commit_data['files']:",
                    "79": "            # Check if a trace for this file already exists, if not, create one",
                    "80": "            trace_name = file_data['filename']",
                    "81": "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)",
                    "82": "",
                    "83": "            if trace is None:",
                    "84": "                trace = Trace()",
                    "85": "                trace.attributes[\"concept:name\"] = trace_name",
                    "86": "                log.append(trace)",
                    "87": "",
                    "88": "            # Create an event for the current commit affecting this file",
                    "89": "            event = Event()",
                    "90": "            event[\"concept:name\"] = file_data['activity']",
                    "91": "            event[\"time:timestamp\"] = commit_data['timestamp']",
                    "92": "            event[\"org:resource\"] = commit_data['author']",
                    "93": "",
                    "94": "            # Add custom attributes for the event",
                    "95": "            event[\"additions\"] = file_data['additions']",
                    "96": "            event[\"deletions\"] = file_data['deletions']",
                    "97": "            event[\"change_type\"] = file_data['change_type']",
                    "98": "            event[\"commit_message\"] = file_data['commit_message']",
                    "99": "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "100": "",
                    "101": "            # Append the event to the trace",
                    "102": "            trace.append(event)",
                    "103": "",
                    "104": "    return log",
                    "105": "",
                    "106": "def save_xes_log(log, filename):",
                    "107": "    # Export the log to an XES file",
                    "108": "    xes_exporter.apply(log, filename)",
                    "109": "",
                    "110": "if __name__ == \"__main__\":",
                    "111": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL",
                    "112": "    commits_data = analyze_commits(repo_url)",
                    "113": "    save_to_json(commits_data, \"commits_data.json\")",
                    "114": "    print(\"Commit data has been saved to commits_data.json\")",
                    "115": "     # Load the previously saved commit data JSON file",
                    "116": "    with open(\"commits_data.json\", \"r\") as json_file:",
                    "117": "        commits_data = json.load(json_file)",
                    "118": "",
                    "119": "    # Create the XES log from the commit data",
                    "120": "    xes_log = create_xes_log(commits_data)",
                    "121": "",
                    "122": "    # Save the XES log to a file",
                    "123": "    save_xes_log(xes_log, \"commits_data.xes\")",
                    "124": "",
                    "125": "    print(\"XES log has been saved to commits_data.xes\")"
                },
                "deleted": {},
                "block_diff": [
                    {
                        "1": {
                            "content": "from pydriller import Repository",
                            "comment_index": -1
                        },
                        "2": {
                            "content": "import json",
                            "comment_index": -1
                        }
                    },
                    {
                        "3": {
                            "content": "import pm4py",
                            "comment_index": 0
                        },
                        "4": {
                            "content": "from pm4py.objects.log.obj import EventLog, Trace, Event",
                            "comment_index": 0
                        },
                        "5": {
                            "content": "from pm4py.objects.log.exporter.xes import exporter as xes_exporter",
                            "comment_index": 0
                        },
                        "6": {
                            "content": "",
                            "comment_index": 0
                        },
                        "7": {
                            "content": "def analyze_commits(repo_url):",
                            "comment_index": 0
                        },
                        "8": {
                            "content": "    # This will hold the data for each file and its changes across commits",
                            "comment_index": 4
                        },
                        "9": {
                            "content": "    commits_data = []",
                            "comment_index": 0
                        },
                        "10": {
                            "content": "",
                            "comment_index": 0
                        },
                        "11": {
                            "content": "    # Traverse through the commits in the repository",
                            "comment_index": 4
                        },
                        "12": {
                            "content": "    for commit in Repository(repo_url).traverse_commits():",
                            "comment_index": 0
                        },
                        "13": {
                            "content": "        commit_data = {",
                            "comment_index": 0
                        },
                        "14": {
                            "content": "            \"timestamp\": commit.committer_date.isoformat(),",
                            "comment_index": 0
                        },
                        "15": {
                            "content": "            \"author\": commit.author.name,",
                            "comment_index": 0
                        },
                        "16": {
                            "content": "            \"files\": []",
                            "comment_index": 0
                        },
                        "17": {
                            "content": "        }",
                            "comment_index": 0
                        },
                        "18": {
                            "content": "",
                            "comment_index": 0
                        },
                        "19": {
                            "content": "        # Analyze each file modified in the commit",
                            "comment_index": 8
                        },
                        "20": {
                            "content": "        for modified_file in commit.modified_files:",
                            "comment_index": 0
                        },
                        "21": {
                            "content": "            file_data = {",
                            "comment_index": 0
                        },
                        "22": {
                            "content": "                \"filename\": modified_file.filename,",
                            "comment_index": 0
                        },
                        "23": {
                            "content": "                \"additions\": modified_file.added_lines,",
                            "comment_index": 0
                        },
                        "24": {
                            "content": "                \"deletions\": modified_file.deleted_lines,",
                            "comment_index": 0
                        },
                        "25": {
                            "content": "                \"change_type\": modified_file.change_type.name,",
                            "comment_index": 0
                        },
                        "26": {
                            "content": "                \"commit_message\": commit.msg",
                            "comment_index": 0
                        },
                        "27": {
                            "content": "            }",
                            "comment_index": 0
                        },
                        "28": {
                            "content": "",
                            "comment_index": 0
                        },
                        "29": {
                            "content": "            # Use commit message keywords to determine activity type",
                            "comment_index": 12
                        },
                        "30": {
                            "content": "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                            "comment_index": 0
                        },
                        "31": {
                            "content": "                file_data[\"activity\"] = \"Bug Fix\"",
                            "comment_index": 0
                        },
                        "32": {
                            "content": "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                            "comment_index": 0
                        },
                        "33": {
                            "content": "                file_data[\"activity\"] = \"Feature Development\"",
                            "comment_index": 0
                        },
                        "34": {
                            "content": "            elif \"refactor\" in commit.msg.lower():",
                            "comment_index": 0
                        },
                        "35": {
                            "content": "                file_data[\"activity\"] = \"Refactoring\"",
                            "comment_index": 0
                        },
                        "36": {
                            "content": "            else:",
                            "comment_index": 0
                        },
                        "37": {
                            "content": "                file_data[\"activity\"] = \"Other\"",
                            "comment_index": 0
                        },
                        "38": {
                            "content": "",
                            "comment_index": 0
                        },
                        "39": {
                            "content": "            # Generate effect/meaning keywords based on the commit message and type of changes",
                            "comment_index": 12
                        },
                        "40": {
                            "content": "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)",
                            "comment_index": 0
                        },
                        "41": {
                            "content": "",
                            "comment_index": 0
                        },
                        "42": {
                            "content": "            commit_data[\"files\"].append(file_data)",
                            "comment_index": 0
                        },
                        "43": {
                            "content": "",
                            "comment_index": 0
                        },
                        "44": {
                            "content": "        # Store the processed commit data",
                            "comment_index": 8
                        },
                        "45": {
                            "content": "        commits_data.append(commit_data)",
                            "comment_index": 0
                        },
                        "46": {
                            "content": "",
                            "comment_index": 0
                        },
                        "47": {
                            "content": "    return commits_data",
                            "comment_index": 0
                        },
                        "48": {
                            "content": "",
                            "comment_index": 0
                        },
                        "49": {
                            "content": "def extract_keywords(commit_message, modified_file):",
                            "comment_index": 0
                        },
                        "50": {
                            "content": "    # This function can use NLP techniques or simple keyword extraction",
                            "comment_index": 4
                        },
                        "51": {
                            "content": "    # Here, a simplified approach is used: basic keywords based on the commit message",
                            "comment_index": 4
                        },
                        "52": {
                            "content": "    keywords = []",
                            "comment_index": 0
                        },
                        "53": {
                            "content": "    if \"performance\" in commit_message.lower():",
                            "comment_index": 0
                        },
                        "54": {
                            "content": "        keywords.append(\"performance\")",
                            "comment_index": 0
                        },
                        "55": {
                            "content": "    if \"security\" in commit_message.lower():",
                            "comment_index": 0
                        },
                        "56": {
                            "content": "        keywords.append(\"security\")",
                            "comment_index": 0
                        },
                        "57": {
                            "content": "    if modified_file.added_lines > modified_file.deleted_lines:",
                            "comment_index": 0
                        },
                        "58": {
                            "content": "        keywords.append(\"expansion\")",
                            "comment_index": 0
                        },
                        "59": {
                            "content": "    else:",
                            "comment_index": 0
                        },
                        "60": {
                            "content": "        keywords.append(\"optimization\")",
                            "comment_index": 0
                        },
                        "61": {
                            "content": "",
                            "comment_index": 0
                        },
                        "62": {
                            "content": "    return keywords",
                            "comment_index": 0
                        },
                        "63": {
                            "content": "",
                            "comment_index": 0
                        },
                        "64": {
                            "content": "def save_to_json(commits_data, filename):",
                            "comment_index": 0
                        },
                        "65": {
                            "content": "    # Save the processed commit data to a JSON file",
                            "comment_index": 4
                        },
                        "66": {
                            "content": "    with open(filename, 'w') as json_file:",
                            "comment_index": 0
                        },
                        "67": {
                            "content": "        json.dump(commits_data, json_file, indent=4)",
                            "comment_index": 0
                        },
                        "68": {
                            "content": "",
                            "comment_index": 0
                        },
                        "69": {
                            "content": "",
                            "comment_index": 0
                        },
                        "70": {
                            "content": "",
                            "comment_index": 0
                        },
                        "71": {
                            "content": "def create_xes_log(commits_data):",
                            "comment_index": 0
                        },
                        "72": {
                            "content": "    # Create a new EventLog object",
                            "comment_index": 4
                        },
                        "73": {
                            "content": "    log = EventLog()",
                            "comment_index": 0
                        },
                        "74": {
                            "content": "",
                            "comment_index": 0
                        },
                        "75": {
                            "content": "    # Iterate over each commit entry in the data",
                            "comment_index": 4
                        },
                        "76": {
                            "content": "    for commit_data in commits_data:",
                            "comment_index": 0
                        },
                        "77": {
                            "content": "        # For each file affected in the commit, create a trace",
                            "comment_index": 8
                        },
                        "78": {
                            "content": "        for file_data in commit_data['files']:",
                            "comment_index": 0
                        },
                        "79": {
                            "content": "            # Check if a trace for this file already exists, if not, create one",
                            "comment_index": 12
                        },
                        "80": {
                            "content": "            trace_name = file_data['filename']",
                            "comment_index": 0
                        },
                        "81": {
                            "content": "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)",
                            "comment_index": 0
                        },
                        "82": {
                            "content": "",
                            "comment_index": 0
                        },
                        "83": {
                            "content": "            if trace is None:",
                            "comment_index": 0
                        },
                        "84": {
                            "content": "                trace = Trace()",
                            "comment_index": 0
                        },
                        "85": {
                            "content": "                trace.attributes[\"concept:name\"] = trace_name",
                            "comment_index": 0
                        },
                        "86": {
                            "content": "                log.append(trace)",
                            "comment_index": 0
                        },
                        "87": {
                            "content": "",
                            "comment_index": 0
                        },
                        "88": {
                            "content": "            # Create an event for the current commit affecting this file",
                            "comment_index": 12
                        },
                        "89": {
                            "content": "            event = Event()",
                            "comment_index": 0
                        },
                        "90": {
                            "content": "            event[\"concept:name\"] = file_data['activity']",
                            "comment_index": 0
                        },
                        "91": {
                            "content": "            event[\"time:timestamp\"] = commit_data['timestamp']",
                            "comment_index": 0
                        },
                        "92": {
                            "content": "            event[\"org:resource\"] = commit_data['author']",
                            "comment_index": 0
                        },
                        "93": {
                            "content": "",
                            "comment_index": 0
                        },
                        "94": {
                            "content": "            # Add custom attributes for the event",
                            "comment_index": 12
                        },
                        "95": {
                            "content": "            event[\"additions\"] = file_data['additions']",
                            "comment_index": 0
                        },
                        "96": {
                            "content": "            event[\"deletions\"] = file_data['deletions']",
                            "comment_index": 0
                        },
                        "97": {
                            "content": "            event[\"change_type\"] = file_data['change_type']",
                            "comment_index": 0
                        },
                        "98": {
                            "content": "            event[\"commit_message\"] = file_data['commit_message']",
                            "comment_index": -1
                        },
                        "99": {
                            "content": "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                            "comment_index": -1
                        },
                        "100": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "101": {
                            "content": "            # Append the event to the trace",
                            "comment_index": 12
                        },
                        "102": {
                            "content": "            trace.append(event)",
                            "comment_index": -1
                        }
                    },
                    {
                        "103": {
                            "content": "",
                            "comment_index": 4
                        },
                        "104": {
                            "content": "    return log",
                            "comment_index": -1
                        },
                        "105": {
                            "content": "",
                            "comment_index": -1
                        },
                        "106": {
                            "content": "def save_xes_log(log, filename):",
                            "comment_index": -1
                        }
                    },
                    {
                        "107": {
                            "content": "    # Export the log to an XES file",
                            "comment_index": 4
                        },
                        "108": {
                            "content": "    xes_exporter.apply(log, filename)",
                            "comment_index": -1
                        },
                        "109": {
                            "content": "",
                            "comment_index": -1
                        },
                        "110": {
                            "content": "if __name__ == \"__main__\":",
                            "comment_index": -1
                        }
                    },
                    {
                        "111": {
                            "content": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL",
                            "comment_index": 61
                        },
                        "112": {
                            "content": "    commits_data = analyze_commits(repo_url)",
                            "comment_index": 4
                        },
                        "113": {
                            "content": "    save_to_json(commits_data, \"commits_data.json\")",
                            "comment_index": -1
                        }
                    },
                    {
                        "114": {
                            "content": "    print(\"Commit data has been saved to commits_data.json\")",
                            "comment_index": 8
                        },
                        "115": {
                            "content": "     # Load the previously saved commit data JSON file",
                            "comment_index": 5
                        },
                        "116": {
                            "content": "    with open(\"commits_data.json\", \"r\") as json_file:",
                            "comment_index": -1
                        },
                        "117": {
                            "content": "        commits_data = json.load(json_file)",
                            "comment_index": -1
                        }
                    },
                    {
                        "118": {
                            "content": "",
                            "comment_index": 12
                        },
                        "119": {
                            "content": "    # Create the XES log from the commit data",
                            "comment_index": 4
                        },
                        "120": {
                            "content": "    xes_log = create_xes_log(commits_data)",
                            "comment_index": -1
                        },
                        "121": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "122": {
                            "content": "    # Save the XES log to a file",
                            "comment_index": 4
                        },
                        "123": {
                            "content": "    save_xes_log(xes_log, \"commits_data.xes\")",
                            "comment_index": -1
                        },
                        "124": {
                            "content": "",
                            "comment_index": -1
                        },
                        "125": {
                            "content": "    print(\"XES log has been saved to commits_data.xes\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 8,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 11,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 19,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 29,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 12
                },
                {
                    "line": 39,
                    "comment": "# Generate effect/meaning keywords based on the commit message and type of changes",
                    "char_position_in_line": 12
                },
                {
                    "line": 44,
                    "comment": "# Store the processed commit data",
                    "char_position_in_line": 8
                },
                {
                    "line": 50,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 51,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 65,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 72,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 77,
                    "comment": "# For each file affected in the commit, create a trace",
                    "char_position_in_line": 8
                },
                {
                    "line": 79,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "char_position_in_line": 12
                },
                {
                    "line": 88,
                    "comment": "# Create an event for the current commit affecting this file",
                    "char_position_in_line": 12
                },
                {
                    "line": 94,
                    "comment": "# Add custom attributes for the event",
                    "char_position_in_line": 12
                },
                {
                    "line": 101,
                    "comment": "# Append the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 107,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 111,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61
                },
                {
                    "line": 115,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 5
                },
                {
                    "line": 119,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 122,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 3,
                    "comment": "# from pydriller import Repository",
                    "char_position_in_line": 0
                },
                {
                    "line": 4,
                    "comment": "# import numpy as np",
                    "char_position_in_line": 0
                },
                {
                    "line": 5,
                    "comment": "# import requests",
                    "char_position_in_line": 0
                },
                {
                    "line": 6,
                    "comment": "# import json",
                    "char_position_in_line": 0
                },
                {
                    "line": 7,
                    "comment": "# from flask import Response",
                    "char_position_in_line": 0
                },
                {
                    "line": 8,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 9,
                    "comment": "# commits_monthly = list()",
                    "char_position_in_line": 0
                },
                {
                    "line": 10,
                    "comment": "# curr_month = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 11,
                    "comment": "# curr_year = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 12,
                    "comment": "# i = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 13,
                    "comment": "# month_del = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 14,
                    "comment": "# month_add = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 15,
                    "comment": "# month_commits = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 16,
                    "comment": "# filecounter = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 17,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 18,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 19,
                    "comment": "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():",
                    "char_position_in_line": 0
                },
                {
                    "line": 20,
                    "comment": "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():",
                    "char_position_in_line": 0
                },
                {
                    "line": 21,
                    "comment": "#     if (commit.committer_date.month != curr_month):",
                    "char_position_in_line": 0
                },
                {
                    "line": 22,
                    "comment": "#         label = str(curr_month) + \"-\" + str(curr_year)",
                    "char_position_in_line": 0
                },
                {
                    "line": 23,
                    "comment": "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])",
                    "char_position_in_line": 0
                },
                {
                    "line": 24,
                    "comment": "#         curr_month = commit.committer_date.month",
                    "char_position_in_line": 0
                },
                {
                    "line": 25,
                    "comment": "#         curr_year = commit.committer_date.year",
                    "char_position_in_line": 0
                },
                {
                    "line": 26,
                    "comment": "#         i += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 27,
                    "comment": "#         filecounter = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 28,
                    "comment": "#         month_del = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 29,
                    "comment": "#         month_add = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 30,
                    "comment": "#         month_commits = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 31,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 32,
                    "comment": "#     month_commits += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 33,
                    "comment": "#     for file in commit.modified_files:",
                    "char_position_in_line": 0
                },
                {
                    "line": 34,
                    "comment": "#         month_add += file.added_lines",
                    "char_position_in_line": 0
                },
                {
                    "line": 35,
                    "comment": "#         month_del += file.deleted_lines",
                    "char_position_in_line": 0
                },
                {
                    "line": 36,
                    "comment": "#         filecounter += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 37,
                    "comment": "#     ",
                    "char_position_in_line": 0
                },
                {
                    "line": 38,
                    "comment": "# commits = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 39,
                    "comment": "# additions = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 40,
                    "comment": "# deletions = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 41,
                    "comment": "# files = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 42,
                    "comment": "# loc = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 43,
                    "comment": "# issues = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 44,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 45,
                    "comment": "# for i in range(0, len(commits_monthly)):",
                    "char_position_in_line": 0
                },
                {
                    "line": 46,
                    "comment": "#     commits.append(commits_monthly[i][1])",
                    "char_position_in_line": 0
                },
                {
                    "line": 47,
                    "comment": "#     files.append(commits_monthly[i][2])",
                    "char_position_in_line": 0
                },
                {
                    "line": 48,
                    "comment": "#     additions.append(commits_monthly[i][3])",
                    "char_position_in_line": 0
                },
                {
                    "line": 49,
                    "comment": "#     deletions.append(commits_monthly[i][4])",
                    "char_position_in_line": 0
                },
                {
                    "line": 50,
                    "comment": "#     if (i == 0):",
                    "char_position_in_line": 0
                },
                {
                    "line": 51,
                    "comment": "#         loc.append(additions[i] - deletions[i])",
                    "char_position_in_line": 0
                },
                {
                    "line": 52,
                    "comment": "#     else: ",
                    "char_position_in_line": 0
                },
                {
                    "line": 53,
                    "comment": "#         loc.append(loc[i-1] + additions[i] - deletions[i])",
                    "char_position_in_line": 0
                },
                {
                    "line": 54,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 55,
                    "comment": "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\"",
                    "char_position_in_line": 0
                },
                {
                    "line": 56,
                    "comment": "# for i in range (1, 50):",
                    "char_position_in_line": 0
                },
                {
                    "line": 57,
                    "comment": "#     params = {",
                    "char_position_in_line": 0
                },
                {
                    "line": 58,
                    "comment": "#         \"state\": \"all\",",
                    "char_position_in_line": 0
                },
                {
                    "line": 59,
                    "comment": "#         \"direction\": \"asc\",",
                    "char_position_in_line": 0
                },
                {
                    "line": 60,
                    "comment": "#         \"per_page\": 100,",
                    "char_position_in_line": 0
                },
                {
                    "line": 61,
                    "comment": "#         \"page\" : i",
                    "char_position_in_line": 0
                },
                {
                    "line": 62,
                    "comment": "#     }",
                    "char_position_in_line": 0
                },
                {
                    "line": 63,
                    "comment": "#     response = requests.get(api_url, params=params)",
                    "char_position_in_line": 0
                },
                {
                    "line": 64,
                    "comment": "#     issues_response = response.json()",
                    "char_position_in_line": 0
                },
                {
                    "line": 65,
                    "comment": "#     for issue in issues_response:",
                    "char_position_in_line": 0
                },
                {
                    "line": 66,
                    "comment": "#         issue_data = []",
                    "char_position_in_line": 0
                },
                {
                    "line": 67,
                    "comment": "#         issue_data.append(issue['number'])",
                    "char_position_in_line": 0
                },
                {
                    "line": 68,
                    "comment": "#         issue_data.append(issue['created_at'])",
                    "char_position_in_line": 0
                },
                {
                    "line": 69,
                    "comment": "#         issue_data.append(issue['closed_at'])",
                    "char_position_in_line": 0
                },
                {
                    "line": 70,
                    "comment": "#         issues.append(issue_data)",
                    "char_position_in_line": 0
                },
                {
                    "line": 71,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 72,
                    "comment": "# m = 0",
                    "char_position_in_line": 0
                },
                {
                    "line": 73,
                    "comment": "# issues_monthly = [0]",
                    "char_position_in_line": 0
                },
                {
                    "line": 74,
                    "comment": "# for i in range(len(issues)):",
                    "char_position_in_line": 0
                },
                {
                    "line": 75,
                    "comment": "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):",
                    "char_position_in_line": 0
                },
                {
                    "line": 76,
                    "comment": "#         m += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 77,
                    "comment": "#         issues_monthly.append(0)",
                    "char_position_in_line": 0
                },
                {
                    "line": 78,
                    "comment": "#     issues_monthly[m] += 1",
                    "char_position_in_line": 0
                },
                {
                    "line": 79,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 80,
                    "comment": "# fig, ax1 = plt.subplots()",
                    "char_position_in_line": 0
                },
                {
                    "line": 81,
                    "comment": "# ax1.plot(additions, color='g', label='Additions')",
                    "char_position_in_line": 0
                },
                {
                    "line": 82,
                    "comment": "# ax1.plot(deletions, color='r', label='Deletions')",
                    "char_position_in_line": 0
                },
                {
                    "line": 83,
                    "comment": "# ax1.plot(loc, color='0', label='LOC')",
                    "char_position_in_line": 0
                },
                {
                    "line": 84,
                    "comment": "# ax1.tick_params(axis='y', labelcolor='0.5')",
                    "char_position_in_line": 0
                },
                {
                    "line": 85,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 86,
                    "comment": "# ax2 = ax1.twinx()",
                    "char_position_in_line": 0
                },
                {
                    "line": 87,
                    "comment": "# ax2.plot(commits, color='y', label='Commits')",
                    "char_position_in_line": 0
                },
                {
                    "line": 88,
                    "comment": "# ax2.plot(files, color='b', label='Files')",
                    "char_position_in_line": 0
                },
                {
                    "line": 89,
                    "comment": "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')",
                    "char_position_in_line": 0
                },
                {
                    "line": 90,
                    "comment": "# ax2.tick_params(axis='y', labelcolor='0.8')",
                    "char_position_in_line": 0
                },
                {
                    "line": 91,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 92,
                    "comment": "# fig.tight_layout()",
                    "char_position_in_line": 0
                },
                {
                    "line": 93,
                    "comment": "# ax1.legend()",
                    "char_position_in_line": 0
                },
                {
                    "line": 94,
                    "comment": "# ax2.legend()",
                    "char_position_in_line": 0
                },
                {
                    "line": 95,
                    "comment": "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")",
                    "char_position_in_line": 0
                },
                {
                    "line": 96,
                    "comment": "# plt.show()",
                    "char_position_in_line": 0
                },
                {
                    "line": 97,
                    "comment": "# ",
                    "char_position_in_line": 0
                },
                {
                    "line": 103,
                    "comment": "# Initialize tracking variables",
                    "char_position_in_line": 4
                },
                {
                    "line": 112,
                    "comment": "# Traverse through all commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 114,
                    "comment": "# If we encounter a new month, save the previous month's data",
                    "char_position_in_line": 8
                },
                {
                    "line": 118,
                    "comment": "# Reset counters for the new month",
                    "char_position_in_line": 12
                },
                {
                    "line": 126,
                    "comment": "# Update current month's data",
                    "char_position_in_line": 8
                },
                {
                    "line": 139,
                    "comment": "# Fetch issues data from GitHub using pagination",
                    "char_position_in_line": 4
                },
                {
                    "line": 153,
                    "comment": "# Stop if no more issues are returned",
                    "char_position_in_line": 8
                },
                {
                    "line": 157,
                    "comment": "# Extract necessary issue data",
                    "char_position_in_line": 8
                },
                {
                    "line": 168,
                    "comment": "# Count issues per month",
                    "char_position_in_line": 4
                },
                {
                    "line": 179,
                    "comment": "# Add the last month's count",
                    "char_position_in_line": 4
                },
                {
                    "line": 184,
                    "comment": "# Calculate lines of code (LOC) changes over time",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Extract data for plotting",
                    "char_position_in_line": 4
                },
                {
                    "line": 211,
                    "comment": "# Plotting",
                    "char_position_in_line": 4
                },
                {
                    "line": 214,
                    "comment": "# Plot lines for additions, deletions, and LOC",
                    "char_position_in_line": 4
                },
                {
                    "line": 220,
                    "comment": "# Secondary Y-axis for commits, modified files, and issues",
                    "char_position_in_line": 4
                },
                {
                    "line": 227,
                    "comment": "# Finalize and show the plot",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "1061293a43b0788f9db921ae6fc61734ccdf1b8d",
            "timestamp": "2024-11-16T19:39:45+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "4": "import datetime",
                    "8": "def analyze_commits(repo_url, comment_symbol, language_file_extension):",
                    "10": "    files_data = {}",
                    "12": "    # Analysis range",
                    "13": "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                    "14": "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)",
                    "16": "    # Traverse through the commits in the repository",
                    "17": "    # Only save commits, that contain at least one file of the format {language_file_extension}",
                    "18": "    for commit in Repository(repo_url,",
                    "19": "    only_modifications_with_file_types=[f\".{language_file_extension}\"],",
                    "20": "    since=dt1,",
                    "21": "    to=dt2).traverse_commits():",
                    "24": "            # only store file data for Rust files",
                    "25": "            if modified_file.filename not in files_data:",
                    "26": "                files_data[modified_file.filename] = []",
                    "27": "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:",
                    "28": "                file_data = {",
                    "29": "                    \"commit\": commit.hash,",
                    "30": "                    \"timestamp\": commit.committer_date.isoformat(),",
                    "31": "                    \"author\": commit.author.name,",
                    "32": "                    \"commit_message\": commit.msg,",
                    "33": "                    \"additions\": modified_file.added_lines,",
                    "34": "                    \"deletions\": modified_file.deleted_lines,",
                    "35": "                    \"change_type\": modified_file.change_type.name,",
                    "36": "                    \"diff\": modified_file.diff",
                    "37": "                }",
                    "38": "                diff_added = {}",
                    "39": "                diff_deleted = {}",
                    "40": "                diff_modified = {}",
                    "41": "                for line in modified_file.diff_parsed[\"added\"]:",
                    "42": "                    if line[1].find(comment_symbol) != -1:",
                    "43": "                        diff_added[line[0]] = line[1]",
                    "44": "                file_data[\"comment_added_diff\"] = diff_added",
                    "45": "                for line in modified_file.diff_parsed[\"deleted\"]:",
                    "46": "                    if line[1].find(comment_symbol) != -1:",
                    "47": "                        diff_deleted[line[0]] = line[1]",
                    "48": "                    if line[0] in diff_added.keys():",
                    "49": "                        diff_modified[line[0]] = line[1]",
                    "50": "                file_data[\"comment_deleted_diff\"] = diff_deleted",
                    "51": "                file_data[\"comment_modified_diff\"] = diff_modified",
                    "52": "                # Generate keywords based on the commit message and type of changes",
                    "53": "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "54": "                # Extract type of commit from commit message",
                    "55": "                # file_data[\"activity\"] = extract_activity(commit.msg)",
                    "56": "                if len(diff_added) + len(diff_deleted) != 0:",
                    "57": "                    files_data[modified_file.filename].append(file_data)",
                    "58": "    return files_data",
                    "74": "def extract_activity(commit_message):",
                    "75": "    # Use commit message keywords to determine activity type",
                    "76": "    activity = \"\"",
                    "77": "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                    "78": "        activity = \"Bug Fix\"",
                    "79": "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                    "80": "        activity = \"Feature Development\"",
                    "81": "    elif \"refactor\" in commit.msg.lower():",
                    "82": "        activity = \"Refactoring\"",
                    "83": "    else:",
                    "84": "        activity = \"Other\"",
                    "85": "    return activity",
                    "86": "",
                    "92": "def create_xes_log(data):",
                    "97": "    for file in data:",
                    "120": "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "121": "            event[\"diff\"] = file_data[\"diff\"]",
                    "133": "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL",
                    "134": "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "135": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "136": "    # print(\"Commit data has been saved to commits_data.json\")",
                    "137": "    # Load the previously saved commit data JSON file",
                    "138": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "139": "       commits_data = json.load(json_file)",
                    "145": "    save_xes_log(xes_log, \"Data/commits_data.xes\")"
                },
                "deleted": {
                    "7": "def analyze_commits(repo_url):",
                    "9": "    commits_data = []",
                    "11": "    # Traverse through the commits in the repository",
                    "12": "    for commit in Repository(repo_url).traverse_commits():",
                    "13": "        commit_data = {",
                    "14": "            \"timestamp\": commit.committer_date.isoformat(),",
                    "15": "            \"author\": commit.author.name,",
                    "16": "            \"files\": []",
                    "17": "        }",
                    "21": "            file_data = {",
                    "22": "                \"filename\": modified_file.filename,",
                    "23": "                \"additions\": modified_file.added_lines,",
                    "24": "                \"deletions\": modified_file.deleted_lines,",
                    "25": "                \"change_type\": modified_file.change_type.name,",
                    "26": "                \"commit_message\": commit.msg",
                    "27": "            }",
                    "28": "",
                    "29": "            # Use commit message keywords to determine activity type",
                    "30": "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                    "31": "                file_data[\"activity\"] = \"Bug Fix\"",
                    "32": "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                    "33": "                file_data[\"activity\"] = \"Feature Development\"",
                    "34": "            elif \"refactor\" in commit.msg.lower():",
                    "35": "                file_data[\"activity\"] = \"Refactoring\"",
                    "36": "            else:",
                    "37": "                file_data[\"activity\"] = \"Other\"",
                    "38": "",
                    "39": "            # Generate effect/meaning keywords based on the commit message and type of changes",
                    "40": "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "41": "",
                    "42": "            commit_data[\"files\"].append(file_data)",
                    "43": "",
                    "44": "        # Store the processed commit data",
                    "45": "        commits_data.append(commit_data)",
                    "46": "",
                    "47": "    return commits_data",
                    "61": "",
                    "69": "",
                    "70": "",
                    "71": "def create_xes_log(commits_data):",
                    "76": "    for commit_data in commits_data:",
                    "99": "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "111": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL",
                    "112": "    commits_data = analyze_commits(repo_url)",
                    "113": "    save_to_json(commits_data, \"commits_data.json\")",
                    "114": "    print(\"Commit data has been saved to commits_data.json\")",
                    "115": "     # Load the previously saved commit data JSON file",
                    "116": "    with open(\"commits_data.json\", \"r\") as json_file:",
                    "117": "        commits_data = json.load(json_file)",
                    "123": "    save_xes_log(xes_log, \"commits_data.xes\")",
                    "124": ""
                },
                "block_diff": [
                    {
                        "4": {
                            "content": "import datetime",
                            "comment_index": -1
                        }
                    },
                    {
                        "8": {
                            "content": "def analyze_commits(repo_url, comment_symbol, language_file_extension):",
                            "comment_index": -1
                        }
                    },
                    {
                        "10": {
                            "content": "    files_data = {}",
                            "comment_index": -1
                        }
                    },
                    {
                        "12": {
                            "content": "    # Analysis range",
                            "comment_index": 4
                        },
                        "13": {
                            "content": "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                            "comment_index": -1
                        },
                        "14": {
                            "content": "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)",
                            "comment_index": -1
                        }
                    },
                    {
                        "16": {
                            "content": "    # Traverse through the commits in the repository",
                            "comment_index": 4
                        },
                        "17": {
                            "content": "    # Only save commits, that contain at least one file of the format {language_file_extension}",
                            "comment_index": 4
                        },
                        "18": {
                            "content": "    for commit in Repository(repo_url,",
                            "comment_index": -1
                        },
                        "19": {
                            "content": "    only_modifications_with_file_types=[f\".{language_file_extension}\"],",
                            "comment_index": -1
                        },
                        "20": {
                            "content": "    since=dt1,",
                            "comment_index": -1
                        },
                        "21": {
                            "content": "    to=dt2).traverse_commits():",
                            "comment_index": -1
                        }
                    },
                    {
                        "24": {
                            "content": "            # only store file data for Rust files",
                            "comment_index": 12
                        },
                        "25": {
                            "content": "            if modified_file.filename not in files_data:",
                            "comment_index": -1
                        },
                        "26": {
                            "content": "                files_data[modified_file.filename] = []",
                            "comment_index": -1
                        },
                        "27": {
                            "content": "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:",
                            "comment_index": -1
                        },
                        "28": {
                            "content": "                file_data = {",
                            "comment_index": -1
                        },
                        "29": {
                            "content": "                    \"commit\": commit.hash,",
                            "comment_index": -1
                        },
                        "30": {
                            "content": "                    \"timestamp\": commit.committer_date.isoformat(),",
                            "comment_index": -1
                        },
                        "31": {
                            "content": "                    \"author\": commit.author.name,",
                            "comment_index": -1
                        },
                        "32": {
                            "content": "                    \"commit_message\": commit.msg,",
                            "comment_index": -1
                        },
                        "33": {
                            "content": "                    \"additions\": modified_file.added_lines,",
                            "comment_index": -1
                        },
                        "34": {
                            "content": "                    \"deletions\": modified_file.deleted_lines,",
                            "comment_index": -1
                        },
                        "35": {
                            "content": "                    \"change_type\": modified_file.change_type.name,",
                            "comment_index": -1
                        },
                        "36": {
                            "content": "                    \"diff\": modified_file.diff",
                            "comment_index": -1
                        },
                        "37": {
                            "content": "                }",
                            "comment_index": -1
                        },
                        "38": {
                            "content": "                diff_added = {}",
                            "comment_index": -1
                        },
                        "39": {
                            "content": "                diff_deleted = {}",
                            "comment_index": -1
                        },
                        "40": {
                            "content": "                diff_modified = {}",
                            "comment_index": -1
                        },
                        "41": {
                            "content": "                for line in modified_file.diff_parsed[\"added\"]:",
                            "comment_index": -1
                        },
                        "42": {
                            "content": "                    if line[1].find(comment_symbol) != -1:",
                            "comment_index": -1
                        },
                        "43": {
                            "content": "                        diff_added[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "44": {
                            "content": "                file_data[\"comment_added_diff\"] = diff_added",
                            "comment_index": -1
                        },
                        "45": {
                            "content": "                for line in modified_file.diff_parsed[\"deleted\"]:",
                            "comment_index": -1
                        },
                        "46": {
                            "content": "                    if line[1].find(comment_symbol) != -1:",
                            "comment_index": -1
                        },
                        "47": {
                            "content": "                        diff_deleted[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "48": {
                            "content": "                    if line[0] in diff_added.keys():",
                            "comment_index": -1
                        },
                        "49": {
                            "content": "                        diff_modified[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "50": {
                            "content": "                file_data[\"comment_deleted_diff\"] = diff_deleted",
                            "comment_index": -1
                        },
                        "51": {
                            "content": "                file_data[\"comment_modified_diff\"] = diff_modified",
                            "comment_index": -1
                        }
                    },
                    {
                        "52": {
                            "content": "                # Generate keywords based on the commit message and type of changes",
                            "comment_index": 16
                        },
                        "53": {
                            "content": "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                            "comment_index": 16
                        },
                        "54": {
                            "content": "                # Extract type of commit from commit message",
                            "comment_index": 16
                        },
                        "55": {
                            "content": "                # file_data[\"activity\"] = extract_activity(commit.msg)",
                            "comment_index": 16
                        },
                        "56": {
                            "content": "                if len(diff_added) + len(diff_deleted) != 0:",
                            "comment_index": -1
                        },
                        "57": {
                            "content": "                    files_data[modified_file.filename].append(file_data)",
                            "comment_index": -1
                        },
                        "58": {
                            "content": "    return files_data",
                            "comment_index": -1
                        }
                    },
                    {
                        "74": {
                            "content": "def extract_activity(commit_message):",
                            "comment_index": -1
                        }
                    },
                    {
                        "75": {
                            "content": "    # Use commit message keywords to determine activity type",
                            "comment_index": 4
                        },
                        "76": {
                            "content": "    activity = \"\"",
                            "comment_index": -1
                        },
                        "77": {
                            "content": "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                            "comment_index": -1
                        },
                        "78": {
                            "content": "        activity = \"Bug Fix\"",
                            "comment_index": -1
                        },
                        "79": {
                            "content": "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                            "comment_index": -1
                        },
                        "80": {
                            "content": "        activity = \"Feature Development\"",
                            "comment_index": -1
                        },
                        "81": {
                            "content": "    elif \"refactor\" in commit.msg.lower():",
                            "comment_index": -1
                        },
                        "82": {
                            "content": "        activity = \"Refactoring\"",
                            "comment_index": -1
                        },
                        "83": {
                            "content": "    else:",
                            "comment_index": -1
                        },
                        "84": {
                            "content": "        activity = \"Other\"",
                            "comment_index": -1
                        },
                        "85": {
                            "content": "    return activity",
                            "comment_index": -1
                        },
                        "86": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "92": {
                            "content": "def create_xes_log(data):",
                            "comment_index": -1
                        }
                    },
                    {
                        "97": {
                            "content": "    for file in data:",
                            "comment_index": -1
                        }
                    },
                    {
                        "120": {
                            "content": "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                            "comment_index": 12
                        },
                        "121": {
                            "content": "            event[\"diff\"] = file_data[\"diff\"]",
                            "comment_index": -1
                        }
                    },
                    {
                        "133": {
                            "content": "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL",
                            "comment_index": 49
                        },
                        "134": {
                            "content": "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                            "comment_index": 4
                        },
                        "135": {
                            "content": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                            "comment_index": 4
                        },
                        "136": {
                            "content": "    # print(\"Commit data has been saved to commits_data.json\")",
                            "comment_index": 4
                        },
                        "137": {
                            "content": "    # Load the previously saved commit data JSON file",
                            "comment_index": 4
                        },
                        "138": {
                            "content": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "comment_index": -1
                        },
                        "139": {
                            "content": "       commits_data = json.load(json_file)",
                            "comment_index": -1
                        }
                    },
                    {
                        "145": {
                            "content": "    save_xes_log(xes_log, \"Data/commits_data.xes\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# For each file affected in the commit, create a trace",
                    "char_position_in_line": 8
                },
                {
                    "line": 100,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "char_position_in_line": 12
                },
                {
                    "line": 109,
                    "comment": "# Create an event for the current commit affecting this file",
                    "char_position_in_line": 12
                },
                {
                    "line": 115,
                    "comment": "# Add custom attributes for the event",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "#event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "char_position_in_line": 12
                },
                {
                    "line": 123,
                    "comment": "# Append the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 129,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 133,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 134,
                    "comment": "# commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 135,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 136,
                    "comment": "# print(\"Commit data has been saved to commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 137,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 144,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "f73512c4aa778287e31d18e9d218502acf7479ee",
            "timestamp": "2024-11-16T20:51:56+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "97": "    for file, commits in data.items():",
                    "98": "        # Create a trace for the file",
                    "99": "        trace = Trace()",
                    "100": "        trace.attributes[\"file\"] = file",
                    "101": "",
                    "102": "        for commit in commits:",
                    "103": "            # Extract event attributes",
                    "105": "            event[\"timestamp\"] = commit.get(\"timestamp\")",
                    "106": "            event[\"author\"] = commit.get(\"author\")",
                    "107": "            event[\"change_type\"] = commit.get(\"change_type\")",
                    "108": "            event[\"commit_message\"] = commit.get(\"commit_message\")",
                    "109": "            event[\"additions\"] = commit.get(\"additions\")",
                    "110": "            event[\"deletions\"] = commit.get(\"deletions\")",
                    "111": "            event[\"diff\"] = commit.get(\"diff\")",
                    "112": "            if commit.get(\"comment_added_diff\"):",
                    "113": "                event[\"comment_change\"] = \"True\"",
                    "114": "            else:",
                    "115": "                event[\"comment_change\"] = \"False\"",
                    "116": "",
                    "117": "            # Add the event to the trace",
                    "120": "        # Add the trace to the log",
                    "121": "        log.append(trace)",
                    "122": "",
                    "131": "    commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "132": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "133": "    print(\"Commit data has been saved to commits_data.json\")"
                },
                "deleted": {
                    "97": "    for file in data:",
                    "98": "        # For each file affected in the commit, create a trace",
                    "99": "        for file_data in commit_data['files']:",
                    "100": "            # Check if a trace for this file already exists, if not, create one",
                    "101": "            trace_name = file_data['filename']",
                    "102": "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)",
                    "103": "",
                    "104": "            if trace is None:",
                    "105": "                trace = Trace()",
                    "106": "                trace.attributes[\"concept:name\"] = trace_name",
                    "107": "                log.append(trace)",
                    "108": "",
                    "109": "            # Create an event for the current commit affecting this file",
                    "111": "            event[\"concept:name\"] = file_data['activity']",
                    "112": "            event[\"time:timestamp\"] = commit_data['timestamp']",
                    "113": "            event[\"org:resource\"] = commit_data['author']",
                    "114": "",
                    "115": "            # Add custom attributes for the event",
                    "116": "            event[\"additions\"] = file_data['additions']",
                    "117": "            event[\"deletions\"] = file_data['deletions']",
                    "118": "            event[\"change_type\"] = file_data['change_type']",
                    "119": "            event[\"commit_message\"] = file_data['commit_message']",
                    "120": "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "121": "            event[\"diff\"] = file_data[\"diff\"]",
                    "122": "",
                    "123": "            # Append the event to the trace",
                    "134": "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                    "135": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "136": "    # print(\"Commit data has been saved to commits_data.json\")"
                },
                "block_diff": [
                    {
                        "97": {
                            "content": "    for file, commits in data.items():",
                            "comment_index": -1
                        }
                    },
                    {
                        "98": {
                            "content": "        # Create a trace for the file",
                            "comment_index": 8
                        },
                        "99": {
                            "content": "        trace = Trace()",
                            "comment_index": -1
                        },
                        "100": {
                            "content": "        trace.attributes[\"file\"] = file",
                            "comment_index": -1
                        },
                        "101": {
                            "content": "",
                            "comment_index": -1
                        },
                        "102": {
                            "content": "        for commit in commits:",
                            "comment_index": -1
                        }
                    },
                    {
                        "103": {
                            "content": "            # Extract event attributes",
                            "comment_index": 12
                        }
                    },
                    {
                        "105": {
                            "content": "            event[\"timestamp\"] = commit.get(\"timestamp\")",
                            "comment_index": -1
                        },
                        "106": {
                            "content": "            event[\"author\"] = commit.get(\"author\")",
                            "comment_index": -1
                        },
                        "107": {
                            "content": "            event[\"change_type\"] = commit.get(\"change_type\")",
                            "comment_index": -1
                        },
                        "108": {
                            "content": "            event[\"commit_message\"] = commit.get(\"commit_message\")",
                            "comment_index": -1
                        },
                        "109": {
                            "content": "            event[\"additions\"] = commit.get(\"additions\")",
                            "comment_index": -1
                        },
                        "110": {
                            "content": "            event[\"deletions\"] = commit.get(\"deletions\")",
                            "comment_index": -1
                        },
                        "111": {
                            "content": "            event[\"diff\"] = commit.get(\"diff\")",
                            "comment_index": -1
                        },
                        "112": {
                            "content": "            if commit.get(\"comment_added_diff\"):",
                            "comment_index": -1
                        },
                        "113": {
                            "content": "                event[\"comment_change\"] = \"True\"",
                            "comment_index": -1
                        },
                        "114": {
                            "content": "            else:",
                            "comment_index": -1
                        },
                        "115": {
                            "content": "                event[\"comment_change\"] = \"False\"",
                            "comment_index": -1
                        },
                        "116": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "117": {
                            "content": "            # Add the event to the trace",
                            "comment_index": 12
                        },
                        "120": {
                            "content": "        # Add the trace to the log",
                            "comment_index": 8
                        },
                        "121": {
                            "content": "        log.append(trace)",
                            "comment_index": -1
                        },
                        "122": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "131": {
                            "content": "    commits_data = analyze_commits(repo_url, \"#\", \"py\")",
                            "comment_index": -1
                        },
                        "132": {
                            "content": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                            "comment_index": -1
                        },
                        "133": {
                            "content": "    print(\"Commit data has been saved to commits_data.json\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 103,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 117,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 126,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 130,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 134,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 138,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "1277d634d38557e2d5981481fd55f1753da2314b",
            "timestamp": "2024-11-17T16:33:10+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "48": "                        if line[0] in diff_added.keys():",
                    "49": "                            diff_modified[line[0]] = line[1]",
                    "130": "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL",
                    "131": "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                },
                "deleted": {
                    "48": "                    if line[0] in diff_added.keys():",
                    "49": "                        diff_modified[line[0]] = line[1]",
                    "130": "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL",
                    "131": "    commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                },
                "block_diff": [
                    {
                        "48": {
                            "content": "                        if line[0] in diff_added.keys():",
                            "comment_index": -1
                        },
                        "49": {
                            "content": "                            diff_modified[line[0]] = line[1]",
                            "comment_index": -1
                        }
                    },
                    {
                        "130": {
                            "content": "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL",
                            "comment_index": 61
                        },
                        "131": {
                            "content": "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 98,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 103,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 117,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 120,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 126,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 130,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61
                },
                {
                    "line": 134,
                    "comment": "# Load the previously saved commit data JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 138,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 141,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "a8af330e0eb1c2574ba424b69e0958c938502a67",
            "timestamp": "2024-11-18T10:51:21+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "13": "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                    "14": "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)",
                    "20": "    # since=dt1,",
                    "36": "                    \"diff\": modified_file.diff_parsed",
                    "43": "                        print(int(line[0]))",
                    "88": "def analyze_diff(commits_data, type):",
                    "89": "    for file, commits in commits_data.items():",
                    "90": "        if len(file) > 0:",
                    "91": "            for commit in commits:",
                    "92": "                diff_edited = []",
                    "93": "                for i in range(len(commit[\"diff\"][type])):",
                    "94": "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:",
                    "95": "                        if len(diff_edited) > 0:",
                    "96": "                            # In case of no comment add lines to existing dict if line number directly follows",
                    "97": "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "98": "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                    "99": "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])",
                    "100": "                            else:",
                    "101": "                                # or create new one",
                    "102": "                                diff_edited.append({",
                    "103": "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                    "104": "                                    \"comments\": [],",
                    "105": "                                    \"lines\": [commit[\"diff\"][type][i][1]]})",
                    "106": "                    else:",
                    "107": "                        if len(diff_edited) > 0:",
                    "108": "                            # In case of comment add them to existing dict if they directly follow",
                    "109": "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "110": "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                    "111": "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])",
                    "112": "                        else:",
                    "113": "                            # or create new one",
                    "114": "                            diff_edited.append({",
                    "115": "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                    "116": "                                \"comments\": [commit[\"diff\"][type][i][1]],",
                    "117": "                                \"lines\": []})",
                    "118": "                commit[\"diff\"][type] = diff_edited",
                    "119": "    return commits_data",
                    "120": "",
                    "121": "def save_to_json(commits_data, path):",
                    "123": "    with open(path, 'w') as json_file:",
                    "125": "    print(\"Commit data has been saved to \", path)",
                    "164": "def save_to_xes(log, path):",
                    "165": "    # Create the XES log from the commit data",
                    "166": "    xes_log = create_xes_log(log)",
                    "167": "",
                    "168": "    # Save the XES log to a file",
                    "169": "    save_xes_log(xes_log, path)",
                    "170": "    print(\"XES log has been saved to \", path)",
                    "171": "",
                    "176": "    # save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "179": "    analyzed_data = analyze_diff(commits_data, \"added\")",
                    "180": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "181": "    analyzed_data = analyze_diff(commits_data, \"deleted\")",
                    "182": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                },
                "deleted": {
                    "13": "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                    "14": "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)",
                    "20": "    since=dt1,",
                    "36": "                    \"diff\": modified_file.diff",
                    "87": "def save_to_json(commits_data, filename):",
                    "89": "    with open(filename, 'w') as json_file:",
                    "133": "    print(\"Commit data has been saved to commits_data.json\")",
                    "134": "    # Load the previously saved commit data JSON file",
                    "138": "    # Create the XES log from the commit data",
                    "139": "    xes_log = create_xes_log(commits_data)",
                    "141": "    # Save the XES log to a file",
                    "142": "    save_xes_log(xes_log, \"Data/commits_data.xes\")",
                    "143": "    print(\"XES log has been saved to commits_data.xes\")"
                },
                "block_diff": [
                    {
                        "13": {
                            "content": "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                            "comment_index": 4
                        },
                        "14": {
                            "content": "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)",
                            "comment_index": -1
                        }
                    },
                    {
                        "20": {
                            "content": "    # since=dt1,",
                            "comment_index": 4
                        }
                    },
                    {
                        "36": {
                            "content": "                    \"diff\": modified_file.diff_parsed",
                            "comment_index": -1
                        }
                    },
                    {
                        "43": {
                            "content": "                        print(int(line[0]))",
                            "comment_index": -1
                        }
                    },
                    {
                        "88": {
                            "content": "def analyze_diff(commits_data, type):",
                            "comment_index": -1
                        },
                        "89": {
                            "content": "    for file, commits in commits_data.items():",
                            "comment_index": -1
                        },
                        "90": {
                            "content": "        if len(file) > 0:",
                            "comment_index": -1
                        },
                        "91": {
                            "content": "            for commit in commits:",
                            "comment_index": -1
                        },
                        "92": {
                            "content": "                diff_edited = []",
                            "comment_index": -1
                        },
                        "93": {
                            "content": "                for i in range(len(commit[\"diff\"][type])):",
                            "comment_index": -1
                        },
                        "94": {
                            "content": "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:",
                            "comment_index": -1
                        },
                        "95": {
                            "content": "                        if len(diff_edited) > 0:",
                            "comment_index": -1
                        }
                    },
                    {
                        "96": {
                            "content": "                            # In case of no comment add lines to existing dict if line number directly follows",
                            "comment_index": 28
                        },
                        "97": {
                            "content": "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "comment_index": -1
                        },
                        "98": {
                            "content": "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                            "comment_index": -1
                        },
                        "99": {
                            "content": "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])",
                            "comment_index": -1
                        },
                        "100": {
                            "content": "                            else:",
                            "comment_index": -1
                        }
                    },
                    {
                        "101": {
                            "content": "                                # or create new one",
                            "comment_index": 32
                        },
                        "102": {
                            "content": "                                diff_edited.append({",
                            "comment_index": -1
                        },
                        "103": {
                            "content": "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                            "comment_index": -1
                        },
                        "104": {
                            "content": "                                    \"comments\": [],",
                            "comment_index": -1
                        },
                        "105": {
                            "content": "                                    \"lines\": [commit[\"diff\"][type][i][1]]})",
                            "comment_index": -1
                        },
                        "106": {
                            "content": "                    else:",
                            "comment_index": -1
                        },
                        "107": {
                            "content": "                        if len(diff_edited) > 0:",
                            "comment_index": -1
                        }
                    },
                    {
                        "108": {
                            "content": "                            # In case of comment add them to existing dict if they directly follow",
                            "comment_index": 28
                        },
                        "109": {
                            "content": "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "comment_index": -1
                        },
                        "110": {
                            "content": "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                            "comment_index": -1
                        },
                        "111": {
                            "content": "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])",
                            "comment_index": -1
                        },
                        "112": {
                            "content": "                        else:",
                            "comment_index": -1
                        }
                    },
                    {
                        "113": {
                            "content": "                            # or create new one",
                            "comment_index": 28
                        },
                        "114": {
                            "content": "                            diff_edited.append({",
                            "comment_index": -1
                        },
                        "115": {
                            "content": "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                            "comment_index": -1
                        },
                        "116": {
                            "content": "                                \"comments\": [commit[\"diff\"][type][i][1]],",
                            "comment_index": -1
                        },
                        "117": {
                            "content": "                                \"lines\": []})",
                            "comment_index": -1
                        },
                        "118": {
                            "content": "                commit[\"diff\"][type] = diff_edited",
                            "comment_index": -1
                        },
                        "119": {
                            "content": "    return commits_data",
                            "comment_index": -1
                        },
                        "120": {
                            "content": "",
                            "comment_index": -1
                        },
                        "121": {
                            "content": "def save_to_json(commits_data, path):",
                            "comment_index": -1
                        }
                    },
                    {
                        "123": {
                            "content": "    with open(path, 'w') as json_file:",
                            "comment_index": -1
                        }
                    },
                    {
                        "125": {
                            "content": "    print(\"Commit data has been saved to \", path)",
                            "comment_index": -1
                        }
                    },
                    {
                        "164": {
                            "content": "def save_to_xes(log, path):",
                            "comment_index": -1
                        }
                    },
                    {
                        "165": {
                            "content": "    # Create the XES log from the commit data",
                            "comment_index": 4
                        },
                        "166": {
                            "content": "    xes_log = create_xes_log(log)",
                            "comment_index": -1
                        },
                        "167": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "168": {
                            "content": "    # Save the XES log to a file",
                            "comment_index": 4
                        },
                        "169": {
                            "content": "    save_xes_log(xes_log, path)",
                            "comment_index": -1
                        },
                        "170": {
                            "content": "    print(\"XES log has been saved to \", path)",
                            "comment_index": -1
                        },
                        "171": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "176": {
                            "content": "    # save_to_xes(commits_data, \"Data/commits_data.xes\")",
                            "comment_index": 4
                        }
                    },
                    {
                        "179": {
                            "content": "    analyzed_data = analyze_diff(commits_data, \"added\")",
                            "comment_index": -1
                        },
                        "180": {
                            "content": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "comment_index": -1
                        },
                        "181": {
                            "content": "    analyzed_data = analyze_diff(commits_data, \"deleted\")",
                            "comment_index": -1
                        },
                        "182": {
                            "content": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 53,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 56,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 62,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 63,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 76,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 96,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28
                },
                {
                    "line": 101,
                    "comment": "# or create new one",
                    "char_position_in_line": 32
                },
                {
                    "line": 108,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 113,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 122,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 128,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 131,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 133,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 138,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 152,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 155,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 161,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 165,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 168,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 173,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61
                },
                {
                    "line": 176,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "3bffee0480ea6e1007c2b96cafa58305afd4a9f2",
            "timestamp": "2024-11-18T15:19:19+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "4": "from datetime import datetime",
                    "13": "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                    "14": "    dt2 = datetime(2022, 10, 8, 17, 59, 0)",
                    "87": "def pretty_diff(commits_data, type):",
                    "120": "def analyze_diffs(data):",
                    "121": "    analysis_results = []",
                    "122": "",
                    "123": "    for file, commits in data.items():",
                    "124": "        # Store last modified timestamps for each line",
                    "125": "        last_modified = {}",
                    "126": "",
                    "127": "        for commit in commits:",
                    "128": "            print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "129": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])",
                    "130": "",
                    "131": "            # Track modified lines",
                    "132": "            for block in commit[\"diff\"][\"added\"]:",
                    "133": "                for line in block[\"line_numbers\"]:",
                    "134": "                    line_number = line",
                    "135": "                    last_modified[line_number] = commit_time",
                    "136": "",
                    "137": "            print(last_modified)",
                    "138": "",
                    "139": "            # Compare with comments",
                    "140": "            for line in commit[\"comment_added_diff\"]:",
                    "141": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                    "142": "                last_modified_lines = list(last_modified.keys())",
                    "143": "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                    "144": "                if int(line) in last_modified_lines:",
                    "145": "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                    "146": "                    if(comment_time > last_modified[int(line)]):",
                    "147": "                        analysis_results.append({",
                    "148": "                            \"file\": file,",
                    "149": "                            \"line\": int(line),",
                    "150": "                            \"comment\": commit[\"comment_added_diff\"][line],",
                    "151": "                            \"comment_time\": str(comment_time),",
                    "152": "                            \"last_code_change_time\": str(last_modified[int(line)])",
                    "153": "                        })",
                    "154": "            # print(\"Finsihed with commit\")",
                    "155": "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                    "156": "",
                    "157": "    return analysis_results",
                    "158": "",
                    "163": "    print(\"Data has been saved to\", path)",
                    "208": "    print(\"XES log has been saved to\", path)",
                    "212": "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                    "213": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "215": "    # with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "216": "      #  commits_data = json.load(json_file)",
                    "217": "    # analyzed_data = pretty_diff(commits_data, \"added\")",
                    "218": "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "219": "    # analyzed_data = pretty_diff(commits_data, \"deleted\")",
                    "220": "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "221": "",
                    "222": "    # Test case",
                    "223": "    with open(\"Exports/analyzed_data.json\", \"r\") as json_file:",
                    "224": "        data = json.load(json_file)",
                    "225": "    print(\"\\n\")",
                    "226": "    analyzed_data = analyze_diffs(data)",
                    "227": "    for result in analyzed_data:",
                    "228": "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \"",
                    "229": "            f\"after being changed on {result['last_code_change_time']}.\")",
                    "230": "    save_to_json(analyzed_data, \"Exports/analysis_results.json\")"
                },
                "deleted": {
                    "4": "import datetime",
                    "13": "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)",
                    "14": "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)",
                    "43": "                        print(int(line[0]))",
                    "88": "def analyze_diff(commits_data, type):",
                    "125": "    print(\"Commit data has been saved to \", path)",
                    "170": "    print(\"XES log has been saved to \", path)",
                    "174": "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                    "175": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "177": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "178": "       commits_data = json.load(json_file)",
                    "179": "    analyzed_data = analyze_diff(commits_data, \"added\")",
                    "180": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "181": "    analyzed_data = analyze_diff(commits_data, \"deleted\")",
                    "182": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "183": "",
                    "184": ""
                },
                "block_diff": [
                    {
                        "4": {
                            "content": "from datetime import datetime",
                            "comment_index": -1
                        }
                    },
                    {
                        "13": {
                            "content": "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                            "comment_index": 4
                        },
                        "14": {
                            "content": "    dt2 = datetime(2022, 10, 8, 17, 59, 0)",
                            "comment_index": -1
                        }
                    },
                    {
                        "87": {
                            "content": "def pretty_diff(commits_data, type):",
                            "comment_index": -1
                        }
                    },
                    {
                        "120": {
                            "content": "def analyze_diffs(data):",
                            "comment_index": -1
                        },
                        "121": {
                            "content": "    analysis_results = []",
                            "comment_index": -1
                        },
                        "122": {
                            "content": "",
                            "comment_index": -1
                        },
                        "123": {
                            "content": "    for file, commits in data.items():",
                            "comment_index": -1
                        }
                    },
                    {
                        "124": {
                            "content": "        # Store last modified timestamps for each line",
                            "comment_index": 8
                        },
                        "125": {
                            "content": "        last_modified = {}",
                            "comment_index": -1
                        },
                        "126": {
                            "content": "",
                            "comment_index": -1
                        },
                        "127": {
                            "content": "        for commit in commits:",
                            "comment_index": -1
                        },
                        "128": {
                            "content": "            print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "comment_index": -1
                        },
                        "129": {
                            "content": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])",
                            "comment_index": -1
                        },
                        "130": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "131": {
                            "content": "            # Track modified lines",
                            "comment_index": 12
                        },
                        "132": {
                            "content": "            for block in commit[\"diff\"][\"added\"]:",
                            "comment_index": -1
                        },
                        "133": {
                            "content": "                for line in block[\"line_numbers\"]:",
                            "comment_index": -1
                        },
                        "134": {
                            "content": "                    line_number = line",
                            "comment_index": -1
                        },
                        "135": {
                            "content": "                    last_modified[line_number] = commit_time",
                            "comment_index": -1
                        },
                        "136": {
                            "content": "",
                            "comment_index": -1
                        },
                        "137": {
                            "content": "            print(last_modified)",
                            "comment_index": -1
                        },
                        "138": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "139": {
                            "content": "            # Compare with comments",
                            "comment_index": 12
                        },
                        "140": {
                            "content": "            for line in commit[\"comment_added_diff\"]:",
                            "comment_index": -1
                        },
                        "141": {
                            "content": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                            "comment_index": -1
                        },
                        "142": {
                            "content": "                last_modified_lines = list(last_modified.keys())",
                            "comment_index": -1
                        }
                    },
                    {
                        "143": {
                            "content": "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                            "comment_index": 16
                        },
                        "144": {
                            "content": "                if int(line) in last_modified_lines:",
                            "comment_index": -1
                        }
                    },
                    {
                        "145": {
                            "content": "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                            "comment_index": 20
                        },
                        "146": {
                            "content": "                    if(comment_time > last_modified[int(line)]):",
                            "comment_index": -1
                        },
                        "147": {
                            "content": "                        analysis_results.append({",
                            "comment_index": -1
                        },
                        "148": {
                            "content": "                            \"file\": file,",
                            "comment_index": -1
                        },
                        "149": {
                            "content": "                            \"line\": int(line),",
                            "comment_index": -1
                        },
                        "150": {
                            "content": "                            \"comment\": commit[\"comment_added_diff\"][line],",
                            "comment_index": -1
                        },
                        "151": {
                            "content": "                            \"comment_time\": str(comment_time),",
                            "comment_index": -1
                        },
                        "152": {
                            "content": "                            \"last_code_change_time\": str(last_modified[int(line)])",
                            "comment_index": -1
                        },
                        "153": {
                            "content": "                        })",
                            "comment_index": -1
                        }
                    },
                    {
                        "154": {
                            "content": "            # print(\"Finsihed with commit\")",
                            "comment_index": 12
                        },
                        "155": {
                            "content": "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                            "comment_index": 12
                        },
                        "156": {
                            "content": "",
                            "comment_index": -1
                        },
                        "157": {
                            "content": "    return analysis_results",
                            "comment_index": -1
                        },
                        "158": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "163": {
                            "content": "    print(\"Data has been saved to\", path)",
                            "comment_index": -1
                        }
                    },
                    {
                        "208": {
                            "content": "    print(\"XES log has been saved to\", path)",
                            "comment_index": -1
                        }
                    },
                    {
                        "212": {
                            "content": "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                            "comment_index": 4
                        },
                        "213": {
                            "content": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                            "comment_index": 4
                        },
                        "215": {
                            "content": "    # with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "comment_index": 4
                        },
                        "216": {
                            "content": "      #  commits_data = json.load(json_file)",
                            "comment_index": 6
                        },
                        "217": {
                            "content": "    # analyzed_data = pretty_diff(commits_data, \"added\")",
                            "comment_index": 4
                        },
                        "218": {
                            "content": "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "comment_index": 4
                        },
                        "219": {
                            "content": "    # analyzed_data = pretty_diff(commits_data, \"deleted\")",
                            "comment_index": 4
                        },
                        "220": {
                            "content": "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "comment_index": 4
                        },
                        "221": {
                            "content": "",
                            "comment_index": -1
                        }
                    },
                    {
                        "222": {
                            "content": "    # Test case",
                            "comment_index": 4
                        },
                        "223": {
                            "content": "    with open(\"Exports/analyzed_data.json\", \"r\") as json_file:",
                            "comment_index": -1
                        },
                        "224": {
                            "content": "        data = json.load(json_file)",
                            "comment_index": -1
                        },
                        "225": {
                            "content": "    print(\"\\n\")",
                            "comment_index": -1
                        },
                        "226": {
                            "content": "    analyzed_data = analyze_diffs(data)",
                            "comment_index": -1
                        },
                        "227": {
                            "content": "    for result in analyzed_data:",
                            "comment_index": -1
                        },
                        "228": {
                            "content": "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \"",
                            "comment_index": -1
                        },
                        "229": {
                            "content": "            f\"after being changed on {result['last_code_change_time']}.\")",
                            "comment_index": -1
                        },
                        "230": {
                            "content": "    save_to_json(analyzed_data, \"Exports/analysis_results.json\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 95,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28
                },
                {
                    "line": 100,
                    "comment": "# or create new one",
                    "char_position_in_line": 32
                },
                {
                    "line": 107,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 112,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 124,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 131,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 139,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 143,
                    "comment": "# print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                    "char_position_in_line": 16
                },
                {
                    "line": 145,
                    "comment": "# print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                    "char_position_in_line": 20
                },
                {
                    "line": 154,
                    "comment": "# print(\"Finsihed with commit\")",
                    "char_position_in_line": 12
                },
                {
                    "line": 155,
                    "comment": "# print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                    "char_position_in_line": 12
                },
                {
                    "line": 160,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 166,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 169,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 171,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 176,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 190,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 193,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 199,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 203,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 206,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 211,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 61
                },
                {
                    "line": 212,
                    "comment": "# commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 213,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 214,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 215,
                    "comment": "# with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "char_position_in_line": 4
                },
                {
                    "line": 216,
                    "comment": "#  commits_data = json.load(json_file)",
                    "char_position_in_line": 6
                },
                {
                    "line": 217,
                    "comment": "# analyzed_data = pretty_diff(commits_data, \"added\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 218,
                    "comment": "# save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 219,
                    "comment": "# analyzed_data = pretty_diff(commits_data, \"deleted\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 220,
                    "comment": "# save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 222,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "e226da877d3d9f98cab4990bb1fbaa02e6adbb7b",
            "timestamp": "2024-11-19T15:32:58+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "14": "    dt2 = datetime(2010, 10, 8, 17, 59, 0)",
                    "93": "                    curr_line = commit[\"diff\"][type][i][0]",
                    "94": "                    curr_content = commit[\"diff\"][type][i][1]",
                    "95": "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:",
                    "98": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "99": "                                diff_edited[-1][\"comments\"][curr_line] = curr_content",
                    "100": "                            # else:",
                    "101": "                            #     diff_edited.append({",
                    "102": "                            #         \"line_numbers\": [],",
                    "103": "                            #         \"comments\": {curr_line: curr_content},",
                    "104": "                            #         \"lines\": []})",
                    "106": "                        #     if i < 5:",
                    "107": "                        #     # or create new one",
                    "108": "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)",
                    "111": "                                \"line_numbers\": [],",
                    "112": "                                \"comments\": {curr_line: curr_content},",
                    "114": "                    else:",
                    "115": "                        if len(diff_edited) > 0:",
                    "116": "                            # In case of no comment add lines to existing dict if line number directly follows",
                    "117": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "118": "                                diff_edited[-1][\"line_numbers\"].append(curr_line)",
                    "119": "                                diff_edited[-1][\"lines\"].append(curr_content)",
                    "120": "                            else:",
                    "121": "                                # or create new one",
                    "122": "                                diff_edited.append({",
                    "123": "                                    \"line_numbers\": [curr_line],",
                    "124": "                                    \"comments\": {},",
                    "125": "                                    \"lines\": [curr_content]})",
                    "137": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "146": "            # print(last_modified)",
                    "153": "                    for block in commit[\"diff\"][\"added\"]:",
                    "154": "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:",
                    "155": "                            if(comment_time > last_modified[int(line)]):",
                    "156": "                                analysis_results.append({",
                    "157": "                                    \"file\": file,",
                    "158": "                                    \"line\": int(line),",
                    "159": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                    "160": "                                    \"comment_time\": str(comment_time),",
                    "161": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                    "162": "                                })",
                    "218": "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL",
                    "219": "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")",
                    "222": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "223": "       commits_data = json.load(json_file)",
                    "224": "    analyzed_data = pretty_diff(commits_data, \"added\")",
                    "225": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "226": "    analyzed_data = pretty_diff(commits_data, \"deleted\")",
                    "227": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "232": "    analyzed_data = analyze_diffs(data)",
                    "233": ""
                },
                "deleted": {
                    "14": "    dt2 = datetime(2022, 10, 8, 17, 59, 0)",
                    "93": "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:",
                    "94": "                        if len(diff_edited) > 0:",
                    "95": "                            # In case of no comment add lines to existing dict if line number directly follows",
                    "96": "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "97": "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                    "98": "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])",
                    "99": "                            else:",
                    "100": "                                # or create new one",
                    "101": "                                diff_edited.append({",
                    "102": "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                    "103": "                                    \"comments\": [],",
                    "104": "                                    \"lines\": [commit[\"diff\"][type][i][1]]})",
                    "105": "                    else:",
                    "108": "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "109": "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])",
                    "110": "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])",
                    "114": "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],",
                    "115": "                                \"comments\": [commit[\"diff\"][type][i][1]],",
                    "128": "            print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "137": "            print(last_modified)",
                    "143": "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)",
                    "145": "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])",
                    "146": "                    if(comment_time > last_modified[int(line)]):",
                    "147": "                        analysis_results.append({",
                    "148": "                            \"file\": file,",
                    "149": "                            \"line\": int(line),",
                    "150": "                            \"comment\": commit[\"comment_added_diff\"][line],",
                    "151": "                            \"comment_time\": str(comment_time),",
                    "152": "                            \"last_code_change_time\": str(last_modified[int(line)])",
                    "153": "                        })",
                    "154": "            # print(\"Finsihed with commit\")",
                    "155": "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")",
                    "211": "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL",
                    "212": "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")",
                    "215": "    # with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "216": "      #  commits_data = json.load(json_file)",
                    "217": "    # analyzed_data = pretty_diff(commits_data, \"added\")",
                    "218": "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "219": "    # analyzed_data = pretty_diff(commits_data, \"deleted\")",
                    "220": "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                    "225": "    print(\"\\n\")",
                    "226": "    analyzed_data = analyze_diffs(data)",
                    "227": "    for result in analyzed_data:",
                    "228": "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \"",
                    "229": "            f\"after being changed on {result['last_code_change_time']}.\")"
                },
                "block_diff": [
                    {
                        "14": {
                            "content": "    dt2 = datetime(2010, 10, 8, 17, 59, 0)",
                            "comment_index": -1
                        }
                    },
                    {
                        "93": {
                            "content": "                    curr_line = commit[\"diff\"][type][i][0]",
                            "comment_index": -1
                        },
                        "94": {
                            "content": "                    curr_content = commit[\"diff\"][type][i][1]",
                            "comment_index": -1
                        },
                        "95": {
                            "content": "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:",
                            "comment_index": -1
                        }
                    },
                    {
                        "98": {
                            "content": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "comment_index": -1
                        },
                        "99": {
                            "content": "                                diff_edited[-1][\"comments\"][curr_line] = curr_content",
                            "comment_index": -1
                        }
                    },
                    {
                        "100": {
                            "content": "                            # else:",
                            "comment_index": 28
                        },
                        "101": {
                            "content": "                            #     diff_edited.append({",
                            "comment_index": 28
                        },
                        "102": {
                            "content": "                            #         \"line_numbers\": [],",
                            "comment_index": 28
                        },
                        "103": {
                            "content": "                            #         \"comments\": {curr_line: curr_content},",
                            "comment_index": 28
                        },
                        "104": {
                            "content": "                            #         \"lines\": []})",
                            "comment_index": 28
                        },
                        "106": {
                            "content": "                        #     if i < 5:",
                            "comment_index": 24
                        },
                        "107": {
                            "content": "                        #     # or create new one",
                            "comment_index": 24
                        },
                        "108": {
                            "content": "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)",
                            "comment_index": 24
                        }
                    },
                    {
                        "111": {
                            "content": "                                \"line_numbers\": [],",
                            "comment_index": -1
                        },
                        "112": {
                            "content": "                                \"comments\": {curr_line: curr_content},",
                            "comment_index": -1
                        }
                    },
                    {
                        "114": {
                            "content": "                    else:",
                            "comment_index": -1
                        },
                        "115": {
                            "content": "                        if len(diff_edited) > 0:",
                            "comment_index": -1
                        }
                    },
                    {
                        "116": {
                            "content": "                            # In case of no comment add lines to existing dict if line number directly follows",
                            "comment_index": 28
                        },
                        "117": {
                            "content": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                            "comment_index": -1
                        },
                        "118": {
                            "content": "                                diff_edited[-1][\"line_numbers\"].append(curr_line)",
                            "comment_index": -1
                        },
                        "119": {
                            "content": "                                diff_edited[-1][\"lines\"].append(curr_content)",
                            "comment_index": -1
                        },
                        "120": {
                            "content": "                            else:",
                            "comment_index": -1
                        }
                    },
                    {
                        "121": {
                            "content": "                                # or create new one",
                            "comment_index": 32
                        },
                        "122": {
                            "content": "                                diff_edited.append({",
                            "comment_index": -1
                        },
                        "123": {
                            "content": "                                    \"line_numbers\": [curr_line],",
                            "comment_index": -1
                        },
                        "124": {
                            "content": "                                    \"comments\": {},",
                            "comment_index": -1
                        },
                        "125": {
                            "content": "                                    \"lines\": [curr_content]})",
                            "comment_index": -1
                        }
                    },
                    {
                        "137": {
                            "content": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "comment_index": 12
                        },
                        "146": {
                            "content": "            # print(last_modified)",
                            "comment_index": 12
                        }
                    },
                    {
                        "153": {
                            "content": "                    for block in commit[\"diff\"][\"added\"]:",
                            "comment_index": -1
                        },
                        "154": {
                            "content": "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:",
                            "comment_index": -1
                        },
                        "155": {
                            "content": "                            if(comment_time > last_modified[int(line)]):",
                            "comment_index": -1
                        },
                        "156": {
                            "content": "                                analysis_results.append({",
                            "comment_index": -1
                        },
                        "157": {
                            "content": "                                    \"file\": file,",
                            "comment_index": -1
                        },
                        "158": {
                            "content": "                                    \"line\": int(line),",
                            "comment_index": -1
                        },
                        "159": {
                            "content": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                            "comment_index": -1
                        },
                        "160": {
                            "content": "                                    \"comment_time\": str(comment_time),",
                            "comment_index": -1
                        },
                        "161": {
                            "content": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                            "comment_index": -1
                        },
                        "162": {
                            "content": "                                })",
                            "comment_index": -1
                        }
                    },
                    {
                        "218": {
                            "content": "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL",
                            "comment_index": 49
                        },
                        "219": {
                            "content": "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")",
                            "comment_index": 4
                        }
                    },
                    {
                        "222": {
                            "content": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "comment_index": -1
                        },
                        "223": {
                            "content": "       commits_data = json.load(json_file)",
                            "comment_index": -1
                        },
                        "224": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"added\")",
                            "comment_index": -1
                        },
                        "225": {
                            "content": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "comment_index": -1
                        },
                        "226": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"deleted\")",
                            "comment_index": -1
                        },
                        "227": {
                            "content": "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")",
                            "comment_index": -1
                        }
                    },
                    {
                        "232": {
                            "content": "    analyzed_data = analyze_diffs(data)",
                            "comment_index": -1
                        },
                        "233": {
                            "content": "",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                    "char_position_in_line": 4
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 17,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 53,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 54,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 55,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 62,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 97,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 100,
                    "comment": "# else: ",
                    "char_position_in_line": 28
                },
                {
                    "line": 101,
                    "comment": "#     diff_edited.append({",
                    "char_position_in_line": 28
                },
                {
                    "line": 102,
                    "comment": "#         \"line_numbers\": [],",
                    "char_position_in_line": 28
                },
                {
                    "line": 103,
                    "comment": "#         \"comments\": {curr_line: curr_content},",
                    "char_position_in_line": 28
                },
                {
                    "line": 104,
                    "comment": "#         \"lines\": []})",
                    "char_position_in_line": 28
                },
                {
                    "line": 106,
                    "comment": "#     if i < 5:",
                    "char_position_in_line": 24
                },
                {
                    "line": 107,
                    "comment": "#     # or create new one",
                    "char_position_in_line": 24
                },
                {
                    "line": 108,
                    "comment": "#         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)",
                    "char_position_in_line": 24
                },
                {
                    "line": 109,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 116,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28
                },
                {
                    "line": 121,
                    "comment": "# or create new one",
                    "char_position_in_line": 32
                },
                {
                    "line": 133,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 137,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 140,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 146,
                    "comment": "# print(last_modified)",
                    "char_position_in_line": 12
                },
                {
                    "line": 148,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 167,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 173,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 176,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 178,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 183,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 197,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 200,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 206,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 210,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 213,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 218,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 219,
                    "comment": "# commits_data = analyze_commits(repo_url, \"//\", \"js\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 220,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 221,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 229,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "367493d87df2ab980b261f32c54beb20f1bc5c4e",
            "timestamp": "2024-11-19T17:09:41+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "8": "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):",
                    "16": "    since=dt1,",
                    "18": "        if len(multi_comment_symbols) >= 2:",
                    "19": "            multi_comments_enabled = True",
                    "20": "        else:",
                    "21": "            multi_comments_enabled = False",
                    "41": "                following_multi_comment = False",
                    "43": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                    "44": "                        diff_added[line[0]] = line[1]",
                    "45": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                    "46": "                        diff_added[line[0]] = line[1]",
                    "47": "                        following_multi_comment = True",
                    "48": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                    "50": "                        following_multi_comment = False",
                    "53": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                    "57": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                    "58": "                        diff_added[line[0]] = line[1]",
                    "59": "                        following_multi_comment = True",
                    "60": "                        if line[0] in diff_added.keys():",
                    "61": "                            diff_modified[line[0]] = line[1]",
                    "62": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                    "63": "                        diff_added[line[0]] = line[1]",
                    "64": "                        if line[0] in diff_added.keys():",
                    "65": "                            diff_modified[line[0]] = line[1]",
                    "103": "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):",
                    "104": "    following_multi_comment = False",
                    "105": "    if len(multi_comment_symbols) >= 2:",
                    "106": "        multi_comments_enabled = True",
                    "107": "    else:",
                    "108": "        multi_comments_enabled = False",
                    "116": "                    if curr_content == \"/*<replacement>*/\":",
                    "117": "                        print()",
                    "118": "                    if curr_content.find(multi_comment_symbols[0]) != -1:",
                    "119": "                            following_multi_comment = True",
                    "120": "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:",
                    "142": "                                    \"lines\": [curr_content]})",
                    "143": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:",
                    "144": "                        following_multi_comment = False",
                    "238": "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])",
                    "239": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "243": "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])",
                    "245": "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                },
                "deleted": {
                    "8": "def analyze_commits(repo_url, comment_symbol, language_file_extension):",
                    "12": "    # Analysis range",
                    "13": "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)",
                    "14": "    dt2 = datetime(2010, 10, 8, 17, 59, 0)",
                    "15": "",
                    "20": "    # since=dt1,",
                    "42": "                    if line[1].find(comment_symbol) != -1:",
                    "46": "                    if line[1].find(comment_symbol) != -1:",
                    "87": "def pretty_diff(commits_data, type):",
                    "95": "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:",
                    "100": "                            # else:",
                    "101": "                            #     diff_edited.append({",
                    "102": "                            #         \"line_numbers\": [],",
                    "103": "                            #         \"comments\": {curr_line: curr_content},",
                    "104": "                            #         \"lines\": []})",
                    "106": "                        #     if i < 5:",
                    "107": "                        #     # or create new one",
                    "108": "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)",
                    "125": "                                    \"lines\": [curr_content]})",
                    "219": "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")",
                    "220": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "224": "    analyzed_data = pretty_diff(commits_data, \"added\")",
                    "226": "    analyzed_data = pretty_diff(commits_data, \"deleted\")"
                },
                "block_diff": [
                    {
                        "8": {
                            "content": "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):",
                            "comment_index": -1
                        }
                    },
                    {
                        "16": {
                            "content": "    since=dt1,",
                            "comment_index": -1
                        }
                    },
                    {
                        "18": {
                            "content": "        if len(multi_comment_symbols) >= 2:",
                            "comment_index": -1
                        },
                        "19": {
                            "content": "            multi_comments_enabled = True",
                            "comment_index": -1
                        },
                        "20": {
                            "content": "        else:",
                            "comment_index": -1
                        },
                        "21": {
                            "content": "            multi_comments_enabled = False",
                            "comment_index": -1
                        }
                    },
                    {
                        "41": {
                            "content": "                following_multi_comment = False",
                            "comment_index": -1
                        }
                    },
                    {
                        "43": {
                            "content": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                            "comment_index": -1
                        },
                        "44": {
                            "content": "                        diff_added[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "45": {
                            "content": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                            "comment_index": -1
                        },
                        "46": {
                            "content": "                        diff_added[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "47": {
                            "content": "                        following_multi_comment = True",
                            "comment_index": -1
                        },
                        "48": {
                            "content": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                            "comment_index": -1
                        }
                    },
                    {
                        "50": {
                            "content": "                        following_multi_comment = False",
                            "comment_index": -1
                        }
                    },
                    {
                        "53": {
                            "content": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                            "comment_index": -1
                        }
                    },
                    {
                        "57": {
                            "content": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                            "comment_index": -1
                        },
                        "58": {
                            "content": "                        diff_added[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "59": {
                            "content": "                        following_multi_comment = True",
                            "comment_index": -1
                        },
                        "60": {
                            "content": "                        if line[0] in diff_added.keys():",
                            "comment_index": -1
                        },
                        "61": {
                            "content": "                            diff_modified[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "62": {
                            "content": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                            "comment_index": -1
                        },
                        "63": {
                            "content": "                        diff_added[line[0]] = line[1]",
                            "comment_index": -1
                        },
                        "64": {
                            "content": "                        if line[0] in diff_added.keys():",
                            "comment_index": -1
                        },
                        "65": {
                            "content": "                            diff_modified[line[0]] = line[1]",
                            "comment_index": -1
                        }
                    },
                    {
                        "103": {
                            "content": "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):",
                            "comment_index": -1
                        },
                        "104": {
                            "content": "    following_multi_comment = False",
                            "comment_index": -1
                        },
                        "105": {
                            "content": "    if len(multi_comment_symbols) >= 2:",
                            "comment_index": -1
                        },
                        "106": {
                            "content": "        multi_comments_enabled = True",
                            "comment_index": -1
                        },
                        "107": {
                            "content": "    else:",
                            "comment_index": -1
                        },
                        "108": {
                            "content": "        multi_comments_enabled = False",
                            "comment_index": -1
                        }
                    },
                    {
                        "116": {
                            "content": "                    if curr_content == \"/*<replacement>*/\":",
                            "comment_index": -1
                        },
                        "117": {
                            "content": "                        print()",
                            "comment_index": -1
                        },
                        "118": {
                            "content": "                    if curr_content.find(multi_comment_symbols[0]) != -1:",
                            "comment_index": -1
                        },
                        "119": {
                            "content": "                            following_multi_comment = True",
                            "comment_index": -1
                        },
                        "120": {
                            "content": "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:",
                            "comment_index": -1
                        }
                    },
                    {
                        "142": {
                            "content": "                                    \"lines\": [curr_content]})",
                            "comment_index": -1
                        },
                        "143": {
                            "content": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:",
                            "comment_index": -1
                        },
                        "144": {
                            "content": "                        following_multi_comment = False",
                            "comment_index": -1
                        }
                    },
                    {
                        "238": {
                            "content": "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])",
                            "comment_index": -1
                        },
                        "239": {
                            "content": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                            "comment_index": -1
                        }
                    },
                    {
                        "243": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])",
                            "comment_index": -1
                        }
                    },
                    {
                        "245": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 13,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 68,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 77,
                    "comment": "# This function can use NLP techniques or simple keyword extraction",
                    "char_position_in_line": 4
                },
                {
                    "line": 78,
                    "comment": "# Here, a simplified approach is used: basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 91,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 122,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 28
                },
                {
                    "line": 126,
                    "comment": "# or create new one",
                    "char_position_in_line": 28
                },
                {
                    "line": 133,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 28
                },
                {
                    "line": 138,
                    "comment": "# or create new one",
                    "char_position_in_line": 32
                },
                {
                    "line": 152,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 156,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 159,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 165,
                    "comment": "# print(last_modified)",
                    "char_position_in_line": 12
                },
                {
                    "line": 167,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 186,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 192,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 195,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 202,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 216,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 219,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 225,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 229,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 232,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 237,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 240,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 248,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "bdfb1cc02e0a08cad8109e142080e326cd09f189",
            "timestamp": "2024-11-19T17:28:53+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "40": "                # For added diff ispect lines filter out comments",
                    "51": "                # For deleted diff ispect lines filter out comments",
                    "77": "    # Determine basic keywords based on the commit message",
                    "112": "                # Set current line for each analysis",
                    "116": "                    # In case of a starting multiline comment start adding future lines without comment symbol",
                    "119": "                    # In case of comment add them to existing dict if they directly follow",
                    "125": "                    # or create new one",
                    "130": "                    # In case of no comment add lines to existing dict if line number directly follows",
                    "131": "                    else:",
                    "137": "                    # Or create new one",
                    "141": "                                    \"lines\": [curr_content]})",
                    "142": "                    # Disable multiline comments when symbol found"
                },
                "deleted": {
                    "9": "    # This will hold the data for each file and its changes across commits",
                    "11": "",
                    "77": "    # This function can use NLP techniques or simple keyword extraction",
                    "78": "    # Here, a simplified approach is used: basic keywords based on the commit message",
                    "116": "                    if curr_content == \"/*<replacement>*/\":",
                    "117": "                        print()",
                    "122": "                            # In case of comment add them to existing dict if they directly follow",
                    "126": "                            # or create new one",
                    "131": "                    else:",
                    "133": "                            # In case of no comment add lines to existing dict if line number directly follows",
                    "138": "                                # or create new one",
                    "142": "                                    \"lines\": [curr_content]})",
                    "154": "",
                    "158": "",
                    "164": "",
                    "165": "            # print(last_modified)",
                    "166": "",
                    "182": ""
                },
                "block_diff": [
                    {
                        "40": {
                            "content": "                # For added diff ispect lines filter out comments",
                            "comment_index": 16
                        },
                        "51": {
                            "content": "                # For deleted diff ispect lines filter out comments",
                            "comment_index": 16
                        },
                        "77": {
                            "content": "    # Determine basic keywords based on the commit message",
                            "comment_index": 4
                        },
                        "112": {
                            "content": "                # Set current line for each analysis",
                            "comment_index": 16
                        },
                        "116": {
                            "content": "                    # In case of a starting multiline comment start adding future lines without comment symbol",
                            "comment_index": 20
                        },
                        "119": {
                            "content": "                    # In case of comment add them to existing dict if they directly follow",
                            "comment_index": 20
                        },
                        "125": {
                            "content": "                    # or create new one",
                            "comment_index": 20
                        },
                        "130": {
                            "content": "                    # In case of no comment add lines to existing dict if line number directly follows",
                            "comment_index": 20
                        },
                        "131": {
                            "content": "                    else:",
                            "comment_index": -1
                        }
                    },
                    {
                        "137": {
                            "content": "                    # Or create new one",
                            "comment_index": 20
                        }
                    },
                    {
                        "141": {
                            "content": "                                    \"lines\": [curr_content]})",
                            "comment_index": -1
                        }
                    },
                    {
                        "142": {
                            "content": "                    # Disable multiline comments when symbol found",
                            "comment_index": 20
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 10,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 11,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 22,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 40,
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 51,
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 68,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 77,
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 90,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 112,
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16
                },
                {
                    "line": 116,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20
                },
                {
                    "line": 119,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20
                },
                {
                    "line": 125,
                    "comment": "# or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 130,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20
                },
                {
                    "line": 137,
                    "comment": "# Or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 142,
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20
                },
                {
                    "line": 152,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 155,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 157,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 162,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 180,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 186,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 189,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 191,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 196,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 210,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 213,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 219,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 223,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 226,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 231,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 49
                },
                {
                    "line": 234,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 242,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "2bfdaaeca6f4bc1b69403beb494198e8364ba925",
            "timestamp": "2024-11-19T18:23:46+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "117": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:",
                    "123": "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:",
                    "124": "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content",
                    "125": "                                else:",
                    "126": "                                    diff_edited.append({",
                    "127": "                                        \"line_numbers\": [],",
                    "128": "                                        \"comments\": {curr_line: curr_content},",
                    "129": "                                        \"lines\": []})",
                    "237": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL",
                    "238": "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                    "239": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "243": "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")",
                    "245": "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"#\")"
                },
                "deleted": {
                    "117": "                    if curr_content.find(multi_comment_symbols[0]) != -1:",
                    "123": "                                diff_edited[-1][\"comments\"][curr_line] = curr_content",
                    "231": "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL",
                    "232": "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])",
                    "233": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "237": "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])",
                    "239": "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                },
                "block_diff": [
                    {
                        "117": {
                            "content": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:",
                            "comment_index": -1
                        }
                    },
                    {
                        "123": {
                            "content": "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:",
                            "comment_index": -1
                        },
                        "124": {
                            "content": "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content",
                            "comment_index": -1
                        },
                        "125": {
                            "content": "                                else:",
                            "comment_index": -1
                        },
                        "126": {
                            "content": "                                    diff_edited.append({",
                            "comment_index": -1
                        },
                        "127": {
                            "content": "                                        \"line_numbers\": [],",
                            "comment_index": -1
                        },
                        "128": {
                            "content": "                                        \"comments\": {curr_line: curr_content},",
                            "comment_index": -1
                        },
                        "129": {
                            "content": "                                        \"lines\": []})",
                            "comment_index": -1
                        }
                    },
                    {
                        "237": {
                            "content": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL",
                            "comment_index": 59
                        },
                        "238": {
                            "content": "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                            "comment_index": 4
                        },
                        "239": {
                            "content": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                            "comment_index": 4
                        }
                    },
                    {
                        "243": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")",
                            "comment_index": -1
                        }
                    },
                    {
                        "245": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"#\")",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 10,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 11,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 20,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 22,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 40,
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 51,
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 68,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 77,
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 90,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 112,
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16
                },
                {
                    "line": 116,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20
                },
                {
                    "line": 119,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20
                },
                {
                    "line": 131,
                    "comment": "# or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 136,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20
                },
                {
                    "line": 143,
                    "comment": "# Or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 148,
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20
                },
                {
                    "line": 158,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 161,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 163,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 168,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 186,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 192,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 195,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 197,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 202,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 216,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 219,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 225,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 229,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 232,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 237,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 59
                },
                {
                    "line": 238,
                    "comment": "# commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 239,
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 240,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 248,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        },
        {
            "commit": "96c6276dc1ea0aad50b96cf844406a8641fa1d37",
            "timestamp": "2024-11-21T12:33:35+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "5": "from dateutil.relativedelta import relativedelta",
                    "238": "    repo_url = \"https://github.com/apache/accumulo.git\"  # Example repository URL",
                    "239": "    commits_data = analyze_commits(repo_url, \"java\", datetime.today() - relativedelta(years=1), datetime.today(), \"//\", [\"/*\", \"*/\"])",
                    "240": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "242": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "244": "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                },
                "deleted": {
                    "237": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL",
                    "238": "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")",
                    "239": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "241": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                    "243": "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")"
                },
                "block_diff": [
                    {
                        "5": {
                            "content": "from dateutil.relativedelta import relativedelta",
                            "comment_index": -1
                        }
                    },
                    {
                        "238": {
                            "content": "    repo_url = \"https://github.com/apache/accumulo.git\"  # Example repository URL",
                            "comment_index": 57
                        },
                        "239": {
                            "content": "    commits_data = analyze_commits(repo_url, \"java\", datetime.today() - relativedelta(years=1), datetime.today(), \"//\", [\"/*\", \"*/\"])",
                            "comment_index": -1
                        },
                        "240": {
                            "content": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                            "comment_index": -1
                        }
                    },
                    {
                        "242": {
                            "content": "    with open(\"Data/commits_data.json\", \"r\") as json_file:",
                            "comment_index": -1
                        }
                    },
                    {
                        "244": {
                            "content": "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])",
                            "comment_index": -1
                        }
                    }
                ]
            },
            "comments": [
                {
                    "line": 11,
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4
                },
                {
                    "line": 12,
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4
                },
                {
                    "line": 21,
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8
                },
                {
                    "line": 23,
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12
                },
                {
                    "line": 41,
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 52,
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16
                },
                {
                    "line": 69,
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16
                },
                {
                    "line": 70,
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16
                },
                {
                    "line": 71,
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16
                },
                {
                    "line": 72,
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16
                },
                {
                    "line": 78,
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4
                },
                {
                    "line": 91,
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4
                },
                {
                    "line": 113,
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16
                },
                {
                    "line": 117,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20
                },
                {
                    "line": 120,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20
                },
                {
                    "line": 132,
                    "comment": "# or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 137,
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20
                },
                {
                    "line": 144,
                    "comment": "# Or create new one",
                    "char_position_in_line": 20
                },
                {
                    "line": 149,
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20
                },
                {
                    "line": 159,
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8
                },
                {
                    "line": 162,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12
                },
                {
                    "line": 164,
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12
                },
                {
                    "line": 169,
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12
                },
                {
                    "line": 187,
                    "comment": "# Save the processed commit data to a JSON file",
                    "char_position_in_line": 4
                },
                {
                    "line": 193,
                    "comment": "# Create a new EventLog object",
                    "char_position_in_line": 4
                },
                {
                    "line": 196,
                    "comment": "# Iterate over each commit entry in the data",
                    "char_position_in_line": 4
                },
                {
                    "line": 198,
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8
                },
                {
                    "line": 203,
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12
                },
                {
                    "line": 217,
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12
                },
                {
                    "line": 220,
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8
                },
                {
                    "line": 226,
                    "comment": "# Export the log to an XES file",
                    "char_position_in_line": 4
                },
                {
                    "line": 230,
                    "comment": "# Create the XES log from the commit data",
                    "char_position_in_line": 4
                },
                {
                    "line": 233,
                    "comment": "# Save the XES log to a file",
                    "char_position_in_line": 4
                },
                {
                    "line": 238,
                    "comment": "# Example repository URL",
                    "char_position_in_line": 57
                },
                {
                    "line": 241,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "char_position_in_line": 4
                },
                {
                    "line": 249,
                    "comment": "# Test case",
                    "char_position_in_line": 4
                }
            ]
        }
    ]
}