{
    "main.py": [
        {
            "commit": "16a01cf914066656381d461f822ba3cccc2a3171",
            "timestamp": "2024-10-22T15:10:44+02:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        1,
                        ""
                    ],
                    [
                        2,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        3,
                        "# from pydriller import Repository"
                    ],
                    [
                        4,
                        "# import numpy as np"
                    ],
                    [
                        5,
                        "# import requests"
                    ],
                    [
                        6,
                        "# import json"
                    ],
                    [
                        7,
                        "# from flask import Response"
                    ],
                    [
                        8,
                        "#"
                    ],
                    [
                        9,
                        "# commits_monthly = list()"
                    ],
                    [
                        10,
                        "# curr_month = 0"
                    ],
                    [
                        11,
                        "# curr_year = 0"
                    ],
                    [
                        12,
                        "# i = 0"
                    ],
                    [
                        13,
                        "# month_del = 0"
                    ],
                    [
                        14,
                        "# month_add = 0"
                    ],
                    [
                        15,
                        "# month_commits = 0"
                    ],
                    [
                        16,
                        "# filecounter = 0"
                    ],
                    [
                        17,
                        "#"
                    ],
                    [
                        18,
                        "#"
                    ],
                    [
                        19,
                        "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():"
                    ],
                    [
                        20,
                        "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():"
                    ],
                    [
                        21,
                        "#     if (commit.committer_date.month != curr_month):"
                    ],
                    [
                        22,
                        "#         label = str(curr_month) + \"-\" + str(curr_year)"
                    ],
                    [
                        23,
                        "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])"
                    ],
                    [
                        24,
                        "#         curr_month = commit.committer_date.month"
                    ],
                    [
                        25,
                        "#         curr_year = commit.committer_date.year"
                    ],
                    [
                        26,
                        "#         i += 1"
                    ],
                    [
                        27,
                        "#         filecounter = 0"
                    ],
                    [
                        28,
                        "#         month_del = 0"
                    ],
                    [
                        29,
                        "#         month_add = 0"
                    ],
                    [
                        30,
                        "#         month_commits = 0"
                    ],
                    [
                        31,
                        "#"
                    ],
                    [
                        32,
                        "#     month_commits += 1"
                    ],
                    [
                        33,
                        "#     for file in commit.modified_files:"
                    ],
                    [
                        34,
                        "#         month_add += file.added_lines"
                    ],
                    [
                        35,
                        "#         month_del += file.deleted_lines"
                    ],
                    [
                        36,
                        "#         filecounter += 1"
                    ],
                    [
                        37,
                        "#"
                    ],
                    [
                        38,
                        "# commits = []"
                    ],
                    [
                        39,
                        "# additions = []"
                    ],
                    [
                        40,
                        "# deletions = []"
                    ],
                    [
                        41,
                        "# files = []"
                    ],
                    [
                        42,
                        "# loc = []"
                    ],
                    [
                        43,
                        "# issues = []"
                    ],
                    [
                        44,
                        "#"
                    ],
                    [
                        45,
                        "# for i in range(0, len(commits_monthly)):"
                    ],
                    [
                        46,
                        "#     commits.append(commits_monthly[i][1])"
                    ],
                    [
                        47,
                        "#     files.append(commits_monthly[i][2])"
                    ],
                    [
                        48,
                        "#     additions.append(commits_monthly[i][3])"
                    ],
                    [
                        49,
                        "#     deletions.append(commits_monthly[i][4])"
                    ],
                    [
                        50,
                        "#     if (i == 0):"
                    ],
                    [
                        51,
                        "#         loc.append(additions[i] - deletions[i])"
                    ],
                    [
                        52,
                        "#     else:"
                    ],
                    [
                        53,
                        "#         loc.append(loc[i-1] + additions[i] - deletions[i])"
                    ],
                    [
                        54,
                        "#"
                    ],
                    [
                        55,
                        "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\""
                    ],
                    [
                        56,
                        "# for i in range (1, 50):"
                    ],
                    [
                        57,
                        "#     params = {"
                    ],
                    [
                        58,
                        "#         \"state\": \"all\","
                    ],
                    [
                        59,
                        "#         \"direction\": \"asc\","
                    ],
                    [
                        60,
                        "#         \"per_page\": 100,"
                    ],
                    [
                        61,
                        "#         \"page\" : i"
                    ],
                    [
                        62,
                        "#     }"
                    ],
                    [
                        63,
                        "#     response = requests.get(api_url, params=params)"
                    ],
                    [
                        64,
                        "#     issues_response = response.json()"
                    ],
                    [
                        65,
                        "#     for issue in issues_response:"
                    ],
                    [
                        66,
                        "#         issue_data = []"
                    ],
                    [
                        67,
                        "#         issue_data.append(issue['number'])"
                    ],
                    [
                        68,
                        "#         issue_data.append(issue['created_at'])"
                    ],
                    [
                        69,
                        "#         issue_data.append(issue['closed_at'])"
                    ],
                    [
                        70,
                        "#         issues.append(issue_data)"
                    ],
                    [
                        71,
                        "#"
                    ],
                    [
                        72,
                        "# m = 0"
                    ],
                    [
                        73,
                        "# issues_monthly = [0]"
                    ],
                    [
                        74,
                        "# for i in range(len(issues)):"
                    ],
                    [
                        75,
                        "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):"
                    ],
                    [
                        76,
                        "#         m += 1"
                    ],
                    [
                        77,
                        "#         issues_monthly.append(0)"
                    ],
                    [
                        78,
                        "#     issues_monthly[m] += 1"
                    ],
                    [
                        79,
                        "#"
                    ],
                    [
                        80,
                        "# fig, ax1 = plt.subplots()"
                    ],
                    [
                        81,
                        "# ax1.plot(additions, color='g', label='Additions')"
                    ],
                    [
                        82,
                        "# ax1.plot(deletions, color='r', label='Deletions')"
                    ],
                    [
                        83,
                        "# ax1.plot(loc, color='0', label='LOC')"
                    ],
                    [
                        84,
                        "# ax1.tick_params(axis='y', labelcolor='0.5')"
                    ],
                    [
                        85,
                        "#"
                    ],
                    [
                        86,
                        "# ax2 = ax1.twinx()"
                    ],
                    [
                        87,
                        "# ax2.plot(commits, color='y', label='Commits')"
                    ],
                    [
                        88,
                        "# ax2.plot(files, color='b', label='Files')"
                    ],
                    [
                        89,
                        "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')"
                    ],
                    [
                        90,
                        "# ax2.tick_params(axis='y', labelcolor='0.8')"
                    ],
                    [
                        91,
                        "#"
                    ],
                    [
                        92,
                        "# fig.tight_layout()"
                    ],
                    [
                        93,
                        "# ax1.legend()"
                    ],
                    [
                        94,
                        "# ax2.legend()"
                    ],
                    [
                        95,
                        "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        96,
                        "# plt.show()"
                    ],
                    [
                        97,
                        "#"
                    ],
                    [
                        98,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        99,
                        "from pydriller import Repository"
                    ],
                    [
                        100,
                        "import requests"
                    ],
                    [
                        101,
                        ""
                    ],
                    [
                        102,
                        "def analyze_commit_data(repo_url):"
                    ],
                    [
                        103,
                        "    # Initialize tracking variables"
                    ],
                    [
                        104,
                        "    monthly_commit_data = []"
                    ],
                    [
                        105,
                        "    current_month = 0"
                    ],
                    [
                        106,
                        "    current_year = 0"
                    ],
                    [
                        107,
                        "    monthly_additions = 0"
                    ],
                    [
                        108,
                        "    monthly_deletions = 0"
                    ],
                    [
                        109,
                        "    monthly_commit_count = 0"
                    ],
                    [
                        110,
                        "    modified_file_count = 0"
                    ],
                    [
                        111,
                        ""
                    ],
                    [
                        112,
                        "    # Traverse through all commits in the repository"
                    ],
                    [
                        113,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        114,
                        "        # If we encounter a new month, save the previous month's data"
                    ],
                    [
                        115,
                        "        if commit.committer_date.month != current_month:"
                    ],
                    [
                        116,
                        "            label = f\"{current_month}-{current_year}\""
                    ],
                    [
                        117,
                        "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])"
                    ],
                    [
                        118,
                        "            # Reset counters for the new month"
                    ],
                    [
                        119,
                        "            current_month = commit.committer_date.month"
                    ],
                    [
                        120,
                        "            current_year = commit.committer_date.year"
                    ],
                    [
                        121,
                        "            monthly_additions = 0"
                    ],
                    [
                        122,
                        "            monthly_deletions = 0"
                    ],
                    [
                        123,
                        "            monthly_commit_count = 0"
                    ],
                    [
                        124,
                        "            modified_file_count = 0"
                    ],
                    [
                        125,
                        ""
                    ],
                    [
                        126,
                        "        # Update current month's data"
                    ],
                    [
                        127,
                        "        monthly_commit_count += 1"
                    ],
                    [
                        128,
                        "        for file in commit.modified_files:"
                    ],
                    [
                        129,
                        "            monthly_additions += file.added_lines"
                    ],
                    [
                        130,
                        "            monthly_deletions += file.deleted_lines"
                    ],
                    [
                        131,
                        "            modified_file_count += 1"
                    ],
                    [
                        132,
                        ""
                    ],
                    [
                        133,
                        "    return monthly_commit_data"
                    ],
                    [
                        134,
                        ""
                    ],
                    [
                        135,
                        "def analyze_issues_data(repo_url, max_pages):"
                    ],
                    [
                        136,
                        "    issues_data = []"
                    ],
                    [
                        137,
                        "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\""
                    ],
                    [
                        138,
                        ""
                    ],
                    [
                        139,
                        "    # Fetch issues data from GitHub using pagination"
                    ],
                    [
                        140,
                        "    for page in range(1, max_pages + 1):"
                    ],
                    [
                        141,
                        "        params = {"
                    ],
                    [
                        142,
                        "            \"state\": \"all\","
                    ],
                    [
                        143,
                        "            \"direction\": \"asc\","
                    ],
                    [
                        144,
                        "            \"per_page\": 100,"
                    ],
                    [
                        145,
                        "            \"page\": page"
                    ],
                    [
                        146,
                        "        }"
                    ],
                    [
                        147,
                        "        response = requests.get(api_url, params=params)"
                    ],
                    [
                        148,
                        "        if response.status_code != 200:"
                    ],
                    [
                        149,
                        "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")"
                    ],
                    [
                        150,
                        "            break"
                    ],
                    [
                        151,
                        ""
                    ],
                    [
                        152,
                        "        issues_response = response.json()"
                    ],
                    [
                        153,
                        "        # Stop if no more issues are returned"
                    ],
                    [
                        154,
                        "        if not issues_response:"
                    ],
                    [
                        155,
                        "            break"
                    ],
                    [
                        156,
                        ""
                    ],
                    [
                        157,
                        "        # Extract necessary issue data"
                    ],
                    [
                        158,
                        "        for issue in issues_response:"
                    ],
                    [
                        159,
                        "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])"
                    ],
                    [
                        160,
                        ""
                    ],
                    [
                        161,
                        "    return issues_data"
                    ],
                    [
                        162,
                        ""
                    ],
                    [
                        163,
                        "def count_issues_monthly(issues_data):"
                    ],
                    [
                        164,
                        "    issues_per_month = [0,0,0,0]"
                    ],
                    [
                        165,
                        "    current_month = issues_data[0][1][5:7] if issues_data else None"
                    ],
                    [
                        166,
                        "    monthly_issue_count = 0"
                    ],
                    [
                        167,
                        ""
                    ],
                    [
                        168,
                        "    # Count issues per month"
                    ],
                    [
                        169,
                        "    for i in range(len(issues_data) - 1):"
                    ],
                    [
                        170,
                        "        issue_month = issues_data[i][1][5:7]"
                    ],
                    [
                        171,
                        "        next_issue_month = issues_data[i + 1][1][5:7]"
                    ],
                    [
                        172,
                        "        if issue_month != next_issue_month:"
                    ],
                    [
                        173,
                        "            issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        174,
                        "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])"
                    ],
                    [
                        175,
                        "            monthly_issue_count = 0"
                    ],
                    [
                        176,
                        "            current_month = next_issue_month"
                    ],
                    [
                        177,
                        "        monthly_issue_count += 1"
                    ],
                    [
                        178,
                        ""
                    ],
                    [
                        179,
                        "    # Add the last month's count"
                    ],
                    [
                        180,
                        "    issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        181,
                        "    return issues_per_month"
                    ],
                    [
                        182,
                        ""
                    ],
                    [
                        183,
                        "def calculate_loc(monthly_commit_data):"
                    ],
                    [
                        184,
                        "    # Calculate lines of code (LOC) changes over time"
                    ],
                    [
                        185,
                        "    loc_over_time = []"
                    ],
                    [
                        186,
                        "    total_loc = 0"
                    ],
                    [
                        187,
                        ""
                    ],
                    [
                        188,
                        "    for month_data in monthly_commit_data:"
                    ],
                    [
                        189,
                        "        additions = month_data[3]"
                    ],
                    [
                        190,
                        "        deletions = month_data[4]"
                    ],
                    [
                        191,
                        "        total_loc += additions - deletions"
                    ],
                    [
                        192,
                        "        loc_over_time.append(total_loc)"
                    ],
                    [
                        193,
                        ""
                    ],
                    [
                        194,
                        "    return loc_over_time"
                    ],
                    [
                        195,
                        ""
                    ],
                    [
                        196,
                        "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):"
                    ],
                    [
                        197,
                        "    # Extract data for plotting"
                    ],
                    [
                        198,
                        "    monthly_labels = [data[0] for data in monthly_commit_data]"
                    ],
                    [
                        199,
                        "    monthly_commits = [data[1] for data in monthly_commit_data]"
                    ],
                    [
                        200,
                        "    modified_files = [data[2] for data in monthly_commit_data]"
                    ],
                    [
                        201,
                        "    monthly_additions = [data[3] for data in monthly_commit_data]"
                    ],
                    [
                        202,
                        "    monthly_deletions = [data[4] for data in monthly_commit_data]"
                    ],
                    [
                        203,
                        ""
                    ],
                    [
                        204,
                        "    for i in range(len(monthly_labels)):"
                    ],
                    [
                        205,
                        "        label = monthly_labels[i].split('-')"
                    ],
                    [
                        206,
                        "        if (len(label[0]) == 1):"
                    ],
                    [
                        207,
                        "            label[0] = \"0\" + label[0]"
                    ],
                    [
                        208,
                        "        label[1] = label[1][2:]"
                    ],
                    [
                        209,
                        "        monthly_labels[i] = label[1] + \"-\" + label[0]"
                    ],
                    [
                        210,
                        ""
                    ],
                    [
                        211,
                        "    # Plotting"
                    ],
                    [
                        212,
                        "    fig, ax1 = plt.subplots()"
                    ],
                    [
                        213,
                        ""
                    ],
                    [
                        214,
                        "    # Plot lines for additions, deletions, and LOC"
                    ],
                    [
                        215,
                        "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')"
                    ],
                    [
                        216,
                        "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')"
                    ],
                    [
                        217,
                        "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')"
                    ],
                    [
                        218,
                        "    ax1.tick_params(axis='y', labelcolor='black')"
                    ],
                    [
                        219,
                        ""
                    ],
                    [
                        220,
                        "    # Secondary Y-axis for commits, modified files, and issues"
                    ],
                    [
                        221,
                        "    ax2 = ax1.twinx()"
                    ],
                    [
                        222,
                        "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')"
                    ],
                    [
                        223,
                        "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')"
                    ],
                    [
                        224,
                        "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')"
                    ],
                    [
                        225,
                        "    ax2.tick_params(axis='y', labelcolor='grey')"
                    ],
                    [
                        226,
                        ""
                    ],
                    [
                        227,
                        "    # Finalize and show the plot"
                    ],
                    [
                        228,
                        "    fig.tight_layout()"
                    ],
                    [
                        229,
                        "    ax1.legend(loc='upper left')"
                    ],
                    [
                        230,
                        "    ax2.legend(loc='upper right')"
                    ],
                    [
                        231,
                        "    plt.xticks(rotation=45)"
                    ],
                    [
                        232,
                        "    plt.title(\"Repository Analysis\")"
                    ],
                    [
                        233,
                        "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        234,
                        "    plt.show()"
                    ],
                    [
                        235,
                        ""
                    ],
                    [
                        236,
                        "def main():"
                    ],
                    [
                        237,
                        "    repo_url = 'dani-garcia/vaultwarden'"
                    ],
                    [
                        238,
                        "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')"
                    ],
                    [
                        239,
                        "    issues_data = analyze_issues_data(repo_url, 50)"
                    ],
                    [
                        240,
                        "    issues_per_month = count_issues_monthly(issues_data)"
                    ],
                    [
                        241,
                        "    loc_over_time = calculate_loc(monthly_commit_data)"
                    ],
                    [
                        242,
                        "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)"
                    ],
                    [
                        243,
                        ""
                    ],
                    [
                        244,
                        "if __name__ == \"__main__\":"
                    ],
                    [
                        245,
                        "    main()"
                    ]
                ],
                "deleted": []
            },
            "comments": []
        },
        {
            "commit": "1061293a43b0788f9db921ae6fc61734ccdf1b8d",
            "timestamp": "2024-11-16T19:39:45+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [],
                "deleted": [
                    [
                        1,
                        ""
                    ],
                    [
                        2,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        3,
                        "# from pydriller import Repository"
                    ],
                    [
                        4,
                        "# import numpy as np"
                    ],
                    [
                        5,
                        "# import requests"
                    ],
                    [
                        6,
                        "# import json"
                    ],
                    [
                        7,
                        "# from flask import Response"
                    ],
                    [
                        8,
                        "#"
                    ],
                    [
                        9,
                        "# commits_monthly = list()"
                    ],
                    [
                        10,
                        "# curr_month = 0"
                    ],
                    [
                        11,
                        "# curr_year = 0"
                    ],
                    [
                        12,
                        "# i = 0"
                    ],
                    [
                        13,
                        "# month_del = 0"
                    ],
                    [
                        14,
                        "# month_add = 0"
                    ],
                    [
                        15,
                        "# month_commits = 0"
                    ],
                    [
                        16,
                        "# filecounter = 0"
                    ],
                    [
                        17,
                        "#"
                    ],
                    [
                        18,
                        "#"
                    ],
                    [
                        19,
                        "# for commit in Repository('https://github.com/dani-garcia/vaultwarden').traverse_commits():"
                    ],
                    [
                        20,
                        "# #for commit in Repository('~/Developer/Ecogenium/Atava').traverse_commits():"
                    ],
                    [
                        21,
                        "#     if (commit.committer_date.month != curr_month):"
                    ],
                    [
                        22,
                        "#         label = str(curr_month) + \"-\" + str(curr_year)"
                    ],
                    [
                        23,
                        "#         commits_monthly.append([label, filecounter, month_commits, month_add, month_del])"
                    ],
                    [
                        24,
                        "#         curr_month = commit.committer_date.month"
                    ],
                    [
                        25,
                        "#         curr_year = commit.committer_date.year"
                    ],
                    [
                        26,
                        "#         i += 1"
                    ],
                    [
                        27,
                        "#         filecounter = 0"
                    ],
                    [
                        28,
                        "#         month_del = 0"
                    ],
                    [
                        29,
                        "#         month_add = 0"
                    ],
                    [
                        30,
                        "#         month_commits = 0"
                    ],
                    [
                        31,
                        "#"
                    ],
                    [
                        32,
                        "#     month_commits += 1"
                    ],
                    [
                        33,
                        "#     for file in commit.modified_files:"
                    ],
                    [
                        34,
                        "#         month_add += file.added_lines"
                    ],
                    [
                        35,
                        "#         month_del += file.deleted_lines"
                    ],
                    [
                        36,
                        "#         filecounter += 1"
                    ],
                    [
                        37,
                        "#"
                    ],
                    [
                        38,
                        "# commits = []"
                    ],
                    [
                        39,
                        "# additions = []"
                    ],
                    [
                        40,
                        "# deletions = []"
                    ],
                    [
                        41,
                        "# files = []"
                    ],
                    [
                        42,
                        "# loc = []"
                    ],
                    [
                        43,
                        "# issues = []"
                    ],
                    [
                        44,
                        "#"
                    ],
                    [
                        45,
                        "# for i in range(0, len(commits_monthly)):"
                    ],
                    [
                        46,
                        "#     commits.append(commits_monthly[i][1])"
                    ],
                    [
                        47,
                        "#     files.append(commits_monthly[i][2])"
                    ],
                    [
                        48,
                        "#     additions.append(commits_monthly[i][3])"
                    ],
                    [
                        49,
                        "#     deletions.append(commits_monthly[i][4])"
                    ],
                    [
                        50,
                        "#     if (i == 0):"
                    ],
                    [
                        51,
                        "#         loc.append(additions[i] - deletions[i])"
                    ],
                    [
                        52,
                        "#     else:"
                    ],
                    [
                        53,
                        "#         loc.append(loc[i-1] + additions[i] - deletions[i])"
                    ],
                    [
                        54,
                        "#"
                    ],
                    [
                        55,
                        "# api_url = \"https://api.github.com/repos/dani-garcia/vaultwarden/issues\""
                    ],
                    [
                        56,
                        "# for i in range (1, 50):"
                    ],
                    [
                        57,
                        "#     params = {"
                    ],
                    [
                        58,
                        "#         \"state\": \"all\","
                    ],
                    [
                        59,
                        "#         \"direction\": \"asc\","
                    ],
                    [
                        60,
                        "#         \"per_page\": 100,"
                    ],
                    [
                        61,
                        "#         \"page\" : i"
                    ],
                    [
                        62,
                        "#     }"
                    ],
                    [
                        63,
                        "#     response = requests.get(api_url, params=params)"
                    ],
                    [
                        64,
                        "#     issues_response = response.json()"
                    ],
                    [
                        65,
                        "#     for issue in issues_response:"
                    ],
                    [
                        66,
                        "#         issue_data = []"
                    ],
                    [
                        67,
                        "#         issue_data.append(issue['number'])"
                    ],
                    [
                        68,
                        "#         issue_data.append(issue['created_at'])"
                    ],
                    [
                        69,
                        "#         issue_data.append(issue['closed_at'])"
                    ],
                    [
                        70,
                        "#         issues.append(issue_data)"
                    ],
                    [
                        71,
                        "#"
                    ],
                    [
                        72,
                        "# m = 0"
                    ],
                    [
                        73,
                        "# issues_monthly = [0]"
                    ],
                    [
                        74,
                        "# for i in range(len(issues)):"
                    ],
                    [
                        75,
                        "#     if (issues[i][1][2:5] != issues[i+1][1][2:5]):"
                    ],
                    [
                        76,
                        "#         m += 1"
                    ],
                    [
                        77,
                        "#         issues_monthly.append(0)"
                    ],
                    [
                        78,
                        "#     issues_monthly[m] += 1"
                    ],
                    [
                        79,
                        "#"
                    ],
                    [
                        80,
                        "# fig, ax1 = plt.subplots()"
                    ],
                    [
                        81,
                        "# ax1.plot(additions, color='g', label='Additions')"
                    ],
                    [
                        82,
                        "# ax1.plot(deletions, color='r', label='Deletions')"
                    ],
                    [
                        83,
                        "# ax1.plot(loc, color='0', label='LOC')"
                    ],
                    [
                        84,
                        "# ax1.tick_params(axis='y', labelcolor='0.5')"
                    ],
                    [
                        85,
                        "#"
                    ],
                    [
                        86,
                        "# ax2 = ax1.twinx()"
                    ],
                    [
                        87,
                        "# ax2.plot(commits, color='y', label='Commits')"
                    ],
                    [
                        88,
                        "# ax2.plot(files, color='b', label='Files')"
                    ],
                    [
                        89,
                        "# ax2.plot(issues_monthly, color='0.3', label='Created Issues')"
                    ],
                    [
                        90,
                        "# ax2.tick_params(axis='y', labelcolor='0.8')"
                    ],
                    [
                        91,
                        "#"
                    ],
                    [
                        92,
                        "# fig.tight_layout()"
                    ],
                    [
                        93,
                        "# ax1.legend()"
                    ],
                    [
                        94,
                        "# ax2.legend()"
                    ],
                    [
                        95,
                        "# plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        96,
                        "# plt.show()"
                    ],
                    [
                        97,
                        "#"
                    ],
                    [
                        98,
                        "import matplotlib.pyplot as plt"
                    ],
                    [
                        99,
                        "from pydriller import Repository"
                    ],
                    [
                        100,
                        "import requests"
                    ],
                    [
                        101,
                        ""
                    ],
                    [
                        102,
                        "def analyze_commit_data(repo_url):"
                    ],
                    [
                        103,
                        "    # Initialize tracking variables"
                    ],
                    [
                        104,
                        "    monthly_commit_data = []"
                    ],
                    [
                        105,
                        "    current_month = 0"
                    ],
                    [
                        106,
                        "    current_year = 0"
                    ],
                    [
                        107,
                        "    monthly_additions = 0"
                    ],
                    [
                        108,
                        "    monthly_deletions = 0"
                    ],
                    [
                        109,
                        "    monthly_commit_count = 0"
                    ],
                    [
                        110,
                        "    modified_file_count = 0"
                    ],
                    [
                        111,
                        ""
                    ],
                    [
                        112,
                        "    # Traverse through all commits in the repository"
                    ],
                    [
                        113,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        114,
                        "        # If we encounter a new month, save the previous month's data"
                    ],
                    [
                        115,
                        "        if commit.committer_date.month != current_month:"
                    ],
                    [
                        116,
                        "            label = f\"{current_month}-{current_year}\""
                    ],
                    [
                        117,
                        "            monthly_commit_data.append([label, monthly_commit_count, modified_file_count, monthly_additions, monthly_deletions])"
                    ],
                    [
                        118,
                        "            # Reset counters for the new month"
                    ],
                    [
                        119,
                        "            current_month = commit.committer_date.month"
                    ],
                    [
                        120,
                        "            current_year = commit.committer_date.year"
                    ],
                    [
                        121,
                        "            monthly_additions = 0"
                    ],
                    [
                        122,
                        "            monthly_deletions = 0"
                    ],
                    [
                        123,
                        "            monthly_commit_count = 0"
                    ],
                    [
                        124,
                        "            modified_file_count = 0"
                    ],
                    [
                        125,
                        ""
                    ],
                    [
                        126,
                        "        # Update current month's data"
                    ],
                    [
                        127,
                        "        monthly_commit_count += 1"
                    ],
                    [
                        128,
                        "        for file in commit.modified_files:"
                    ],
                    [
                        129,
                        "            monthly_additions += file.added_lines"
                    ],
                    [
                        130,
                        "            monthly_deletions += file.deleted_lines"
                    ],
                    [
                        131,
                        "            modified_file_count += 1"
                    ],
                    [
                        132,
                        ""
                    ],
                    [
                        133,
                        "    return monthly_commit_data"
                    ],
                    [
                        134,
                        ""
                    ],
                    [
                        135,
                        "def analyze_issues_data(repo_url, max_pages):"
                    ],
                    [
                        136,
                        "    issues_data = []"
                    ],
                    [
                        137,
                        "    api_url = f\"https://api.github.com/repos/{repo_url}/issues\""
                    ],
                    [
                        138,
                        ""
                    ],
                    [
                        139,
                        "    # Fetch issues data from GitHub using pagination"
                    ],
                    [
                        140,
                        "    for page in range(1, max_pages + 1):"
                    ],
                    [
                        141,
                        "        params = {"
                    ],
                    [
                        142,
                        "            \"state\": \"all\","
                    ],
                    [
                        143,
                        "            \"direction\": \"asc\","
                    ],
                    [
                        144,
                        "            \"per_page\": 100,"
                    ],
                    [
                        145,
                        "            \"page\": page"
                    ],
                    [
                        146,
                        "        }"
                    ],
                    [
                        147,
                        "        response = requests.get(api_url, params=params)"
                    ],
                    [
                        148,
                        "        if response.status_code != 200:"
                    ],
                    [
                        149,
                        "            print(f\"Failed to fetch issues data. Status code: {response.status_code}\")"
                    ],
                    [
                        150,
                        "            break"
                    ],
                    [
                        151,
                        ""
                    ],
                    [
                        152,
                        "        issues_response = response.json()"
                    ],
                    [
                        153,
                        "        # Stop if no more issues are returned"
                    ],
                    [
                        154,
                        "        if not issues_response:"
                    ],
                    [
                        155,
                        "            break"
                    ],
                    [
                        156,
                        ""
                    ],
                    [
                        157,
                        "        # Extract necessary issue data"
                    ],
                    [
                        158,
                        "        for issue in issues_response:"
                    ],
                    [
                        159,
                        "            issues_data.append([issue['number'], issue['created_at'], issue['closed_at']])"
                    ],
                    [
                        160,
                        ""
                    ],
                    [
                        161,
                        "    return issues_data"
                    ],
                    [
                        162,
                        ""
                    ],
                    [
                        163,
                        "def count_issues_monthly(issues_data):"
                    ],
                    [
                        164,
                        "    issues_per_month = [0,0,0,0]"
                    ],
                    [
                        165,
                        "    current_month = issues_data[0][1][5:7] if issues_data else None"
                    ],
                    [
                        166,
                        "    monthly_issue_count = 0"
                    ],
                    [
                        167,
                        ""
                    ],
                    [
                        168,
                        "    # Count issues per month"
                    ],
                    [
                        169,
                        "    for i in range(len(issues_data) - 1):"
                    ],
                    [
                        170,
                        "        issue_month = issues_data[i][1][5:7]"
                    ],
                    [
                        171,
                        "        next_issue_month = issues_data[i + 1][1][5:7]"
                    ],
                    [
                        172,
                        "        if issue_month != next_issue_month:"
                    ],
                    [
                        173,
                        "            issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        174,
                        "            print(\"mic: \", monthly_issue_count, issues_data[i][1][2:7])"
                    ],
                    [
                        175,
                        "            monthly_issue_count = 0"
                    ],
                    [
                        176,
                        "            current_month = next_issue_month"
                    ],
                    [
                        177,
                        "        monthly_issue_count += 1"
                    ],
                    [
                        178,
                        ""
                    ],
                    [
                        179,
                        "    # Add the last month's count"
                    ],
                    [
                        180,
                        "    issues_per_month.append(monthly_issue_count)"
                    ],
                    [
                        181,
                        "    return issues_per_month"
                    ],
                    [
                        182,
                        ""
                    ],
                    [
                        183,
                        "def calculate_loc(monthly_commit_data):"
                    ],
                    [
                        184,
                        "    # Calculate lines of code (LOC) changes over time"
                    ],
                    [
                        185,
                        "    loc_over_time = []"
                    ],
                    [
                        186,
                        "    total_loc = 0"
                    ],
                    [
                        187,
                        ""
                    ],
                    [
                        188,
                        "    for month_data in monthly_commit_data:"
                    ],
                    [
                        189,
                        "        additions = month_data[3]"
                    ],
                    [
                        190,
                        "        deletions = month_data[4]"
                    ],
                    [
                        191,
                        "        total_loc += additions - deletions"
                    ],
                    [
                        192,
                        "        loc_over_time.append(total_loc)"
                    ],
                    [
                        193,
                        ""
                    ],
                    [
                        194,
                        "    return loc_over_time"
                    ],
                    [
                        195,
                        ""
                    ],
                    [
                        196,
                        "def plot_data(monthly_commit_data, loc_over_time, issues_per_month):"
                    ],
                    [
                        197,
                        "    # Extract data for plotting"
                    ],
                    [
                        198,
                        "    monthly_labels = [data[0] for data in monthly_commit_data]"
                    ],
                    [
                        199,
                        "    monthly_commits = [data[1] for data in monthly_commit_data]"
                    ],
                    [
                        200,
                        "    modified_files = [data[2] for data in monthly_commit_data]"
                    ],
                    [
                        201,
                        "    monthly_additions = [data[3] for data in monthly_commit_data]"
                    ],
                    [
                        202,
                        "    monthly_deletions = [data[4] for data in monthly_commit_data]"
                    ],
                    [
                        203,
                        ""
                    ],
                    [
                        204,
                        "    for i in range(len(monthly_labels)):"
                    ],
                    [
                        205,
                        "        label = monthly_labels[i].split('-')"
                    ],
                    [
                        206,
                        "        if (len(label[0]) == 1):"
                    ],
                    [
                        207,
                        "            label[0] = \"0\" + label[0]"
                    ],
                    [
                        208,
                        "        label[1] = label[1][2:]"
                    ],
                    [
                        209,
                        "        monthly_labels[i] = label[1] + \"-\" + label[0]"
                    ],
                    [
                        210,
                        ""
                    ],
                    [
                        211,
                        "    # Plotting"
                    ],
                    [
                        212,
                        "    fig, ax1 = plt.subplots()"
                    ],
                    [
                        213,
                        ""
                    ],
                    [
                        214,
                        "    # Plot lines for additions, deletions, and LOC"
                    ],
                    [
                        215,
                        "    ax1.plot(monthly_labels, monthly_additions, color='g', label='Additions')"
                    ],
                    [
                        216,
                        "    ax1.plot(monthly_labels, monthly_deletions, color='r', label='Deletions')"
                    ],
                    [
                        217,
                        "    ax1.plot(monthly_labels, loc_over_time, color='k', label='LOC')"
                    ],
                    [
                        218,
                        "    ax1.tick_params(axis='y', labelcolor='black')"
                    ],
                    [
                        219,
                        ""
                    ],
                    [
                        220,
                        "    # Secondary Y-axis for commits, modified files, and issues"
                    ],
                    [
                        221,
                        "    ax2 = ax1.twinx()"
                    ],
                    [
                        222,
                        "    ax2.plot(monthly_labels, monthly_commits, color='y', label='Commits')"
                    ],
                    [
                        223,
                        "    ax2.plot(monthly_labels, modified_files, color='b', label='Modified Files')"
                    ],
                    [
                        224,
                        "    ax2.plot(monthly_labels[:len(issues_per_month)], issues_per_month, color='grey', label='Created Issues')"
                    ],
                    [
                        225,
                        "    ax2.tick_params(axis='y', labelcolor='grey')"
                    ],
                    [
                        226,
                        ""
                    ],
                    [
                        227,
                        "    # Finalize and show the plot"
                    ],
                    [
                        228,
                        "    fig.tight_layout()"
                    ],
                    [
                        229,
                        "    ax1.legend(loc='upper left')"
                    ],
                    [
                        230,
                        "    ax2.legend(loc='upper right')"
                    ],
                    [
                        231,
                        "    plt.xticks(rotation=45)"
                    ],
                    [
                        232,
                        "    plt.title(\"Repository Analysis\")"
                    ],
                    [
                        233,
                        "    plt.savefig(\"GitVisualisation.pdf\", format=\"pdf\")"
                    ],
                    [
                        234,
                        "    plt.show()"
                    ],
                    [
                        235,
                        ""
                    ],
                    [
                        236,
                        "def main():"
                    ],
                    [
                        237,
                        "    repo_url = 'dani-garcia/vaultwarden'"
                    ],
                    [
                        238,
                        "    monthly_commit_data = analyze_commit_data(f'https://github.com/{repo_url}')"
                    ],
                    [
                        239,
                        "    issues_data = analyze_issues_data(repo_url, 50)"
                    ],
                    [
                        240,
                        "    issues_per_month = count_issues_monthly(issues_data)"
                    ],
                    [
                        241,
                        "    loc_over_time = calculate_loc(monthly_commit_data)"
                    ],
                    [
                        242,
                        "    plot_data(monthly_commit_data, loc_over_time, issues_per_month)"
                    ],
                    [
                        243,
                        ""
                    ],
                    [
                        244,
                        "if __name__ == \"__main__\":"
                    ],
                    [
                        245,
                        "    main()"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "edit": "deleted"
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "edit": "deleted"
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository\n# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "edit": "deleted"
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "edit": "deleted"
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "edit": "deleted"
                },
                {
                    "line": 52,
                    "comment": "# Generate keywords based on the commit message and type of changes\n# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)\n# Extract type of commit from commit message\n# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "edit": "deleted"
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction\n# Here, a simplified approach is used: basic keywords based on the commit message",
                    "edit": "deleted"
                },
                {
                    "line": 75,
                    "comment": "# Use commit message keywords to determine activity type",
                    "edit": "deleted"
                },
                {
                    "line": 88,
                    "comment": "# Save the processed commit data to a JSON file",
                    "edit": "deleted"
                },
                {
                    "line": 93,
                    "comment": "# Create a new EventLog object",
                    "edit": "deleted"
                },
                {
                    "line": 96,
                    "comment": "# Iterate over each commit entry in the data",
                    "edit": "deleted"
                },
                {
                    "line": 98,
                    "comment": "# For each file affected in the commit, create a trace",
                    "edit": "deleted"
                },
                {
                    "line": 100,
                    "comment": "# Check if a trace for this file already exists, if not, create one",
                    "edit": "deleted"
                },
                {
                    "line": 109,
                    "comment": "# Create an event for the current commit affecting this file",
                    "edit": "deleted"
                },
                {
                    "line": 115,
                    "comment": "# Add custom attributes for the event",
                    "edit": "deleted"
                },
                {
                    "line": 120,
                    "comment": "#event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])",
                    "edit": "deleted"
                },
                {
                    "line": 123,
                    "comment": "# Append the event to the trace",
                    "edit": "deleted"
                },
                {
                    "line": 129,
                    "comment": "# Export the log to an XES file",
                    "edit": "deleted"
                },
                {
                    "line": 133,
                    "comment": "# Example repository URL",
                    "edit": "deleted"
                },
                {
                    "line": 134,
                    "comment": "# commits_data = analyze_commits(repo_url, \"#\", \"py\")\n# save_to_json(commits_data, \"Data/commits_data.json\")\n# print(\"Commit data has been saved to commits_data.json\")\n# Load the previously saved commit data JSON file",
                    "edit": "deleted"
                },
                {
                    "line": 141,
                    "comment": "# Create the XES log from the commit data",
                    "edit": "deleted"
                },
                {
                    "line": 144,
                    "comment": "# Save the XES log to a file",
                    "edit": "deleted"
                }
            ]
        }
    ],
    "XESConversion.py": [
        {
            "commit": "a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e",
            "timestamp": "2024-10-24T15:08:06+02:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        1,
                        "from pydriller import Repository"
                    ],
                    [
                        2,
                        "import json"
                    ],
                    [
                        3,
                        "import pm4py"
                    ],
                    [
                        4,
                        "from pm4py.objects.log.obj import EventLog, Trace, Event"
                    ],
                    [
                        5,
                        "from pm4py.objects.log.exporter.xes import exporter as xes_exporter"
                    ],
                    [
                        6,
                        ""
                    ],
                    [
                        7,
                        "def analyze_commits(repo_url):"
                    ],
                    [
                        8,
                        "    # This will hold the data for each file and its changes across commits"
                    ],
                    [
                        9,
                        "    commits_data = []"
                    ],
                    [
                        10,
                        ""
                    ],
                    [
                        11,
                        "    # Traverse through the commits in the repository"
                    ],
                    [
                        12,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        13,
                        "        commit_data = {"
                    ],
                    [
                        14,
                        "            \"timestamp\": commit.committer_date.isoformat(),"
                    ],
                    [
                        15,
                        "            \"author\": commit.author.name,"
                    ],
                    [
                        16,
                        "            \"files\": []"
                    ],
                    [
                        17,
                        "        }"
                    ],
                    [
                        18,
                        ""
                    ],
                    [
                        19,
                        "        # Analyze each file modified in the commit"
                    ],
                    [
                        20,
                        "        for modified_file in commit.modified_files:"
                    ],
                    [
                        21,
                        "            file_data = {"
                    ],
                    [
                        22,
                        "                \"filename\": modified_file.filename,"
                    ],
                    [
                        23,
                        "                \"additions\": modified_file.added_lines,"
                    ],
                    [
                        24,
                        "                \"deletions\": modified_file.deleted_lines,"
                    ],
                    [
                        25,
                        "                \"change_type\": modified_file.change_type.name,"
                    ],
                    [
                        26,
                        "                \"commit_message\": commit.msg"
                    ],
                    [
                        27,
                        "            }"
                    ],
                    [
                        28,
                        ""
                    ],
                    [
                        29,
                        "            # Use commit message keywords to determine activity type"
                    ],
                    [
                        30,
                        "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():"
                    ],
                    [
                        31,
                        "                file_data[\"activity\"] = \"Bug Fix\""
                    ],
                    [
                        32,
                        "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():"
                    ],
                    [
                        33,
                        "                file_data[\"activity\"] = \"Feature Development\""
                    ],
                    [
                        34,
                        "            elif \"refactor\" in commit.msg.lower():"
                    ],
                    [
                        35,
                        "                file_data[\"activity\"] = \"Refactoring\""
                    ],
                    [
                        36,
                        "            else:"
                    ],
                    [
                        37,
                        "                file_data[\"activity\"] = \"Other\""
                    ],
                    [
                        38,
                        ""
                    ],
                    [
                        39,
                        "            # Generate effect/meaning keywords based on the commit message and type of changes"
                    ],
                    [
                        40,
                        "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)"
                    ],
                    [
                        41,
                        ""
                    ],
                    [
                        42,
                        "            commit_data[\"files\"].append(file_data)"
                    ],
                    [
                        43,
                        ""
                    ],
                    [
                        44,
                        "        # Store the processed commit data"
                    ],
                    [
                        45,
                        "        commits_data.append(commit_data)"
                    ],
                    [
                        46,
                        ""
                    ],
                    [
                        47,
                        "    return commits_data"
                    ],
                    [
                        48,
                        ""
                    ],
                    [
                        49,
                        "def extract_keywords(commit_message, modified_file):"
                    ],
                    [
                        50,
                        "    # This function can use NLP techniques or simple keyword extraction"
                    ],
                    [
                        51,
                        "    # Here, a simplified approach is used: basic keywords based on the commit message"
                    ],
                    [
                        52,
                        "    keywords = []"
                    ],
                    [
                        53,
                        "    if \"performance\" in commit_message.lower():"
                    ],
                    [
                        54,
                        "        keywords.append(\"performance\")"
                    ],
                    [
                        55,
                        "    if \"security\" in commit_message.lower():"
                    ],
                    [
                        56,
                        "        keywords.append(\"security\")"
                    ],
                    [
                        57,
                        "    if modified_file.added_lines > modified_file.deleted_lines:"
                    ],
                    [
                        58,
                        "        keywords.append(\"expansion\")"
                    ],
                    [
                        59,
                        "    else:"
                    ],
                    [
                        60,
                        "        keywords.append(\"optimization\")"
                    ],
                    [
                        61,
                        ""
                    ],
                    [
                        62,
                        "    return keywords"
                    ],
                    [
                        63,
                        ""
                    ],
                    [
                        64,
                        "def save_to_json(commits_data, filename):"
                    ],
                    [
                        65,
                        "    # Save the processed commit data to a JSON file"
                    ],
                    [
                        66,
                        "    with open(filename, 'w') as json_file:"
                    ],
                    [
                        67,
                        "        json.dump(commits_data, json_file, indent=4)"
                    ],
                    [
                        68,
                        ""
                    ],
                    [
                        69,
                        ""
                    ],
                    [
                        70,
                        ""
                    ],
                    [
                        71,
                        "def create_xes_log(commits_data):"
                    ],
                    [
                        72,
                        "    # Create a new EventLog object"
                    ],
                    [
                        73,
                        "    log = EventLog()"
                    ],
                    [
                        74,
                        ""
                    ],
                    [
                        75,
                        "    # Iterate over each commit entry in the data"
                    ],
                    [
                        76,
                        "    for commit_data in commits_data:"
                    ],
                    [
                        77,
                        "        # For each file affected in the commit, create a trace"
                    ],
                    [
                        78,
                        "        for file_data in commit_data['files']:"
                    ],
                    [
                        79,
                        "            # Check if a trace for this file already exists, if not, create one"
                    ],
                    [
                        80,
                        "            trace_name = file_data['filename']"
                    ],
                    [
                        81,
                        "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)"
                    ],
                    [
                        82,
                        ""
                    ],
                    [
                        83,
                        "            if trace is None:"
                    ],
                    [
                        84,
                        "                trace = Trace()"
                    ],
                    [
                        85,
                        "                trace.attributes[\"concept:name\"] = trace_name"
                    ],
                    [
                        86,
                        "                log.append(trace)"
                    ],
                    [
                        87,
                        ""
                    ],
                    [
                        88,
                        "            # Create an event for the current commit affecting this file"
                    ],
                    [
                        89,
                        "            event = Event()"
                    ],
                    [
                        90,
                        "            event[\"concept:name\"] = file_data['activity']"
                    ],
                    [
                        91,
                        "            event[\"time:timestamp\"] = commit_data['timestamp']"
                    ],
                    [
                        92,
                        "            event[\"org:resource\"] = commit_data['author']"
                    ],
                    [
                        93,
                        ""
                    ],
                    [
                        94,
                        "            # Add custom attributes for the event"
                    ],
                    [
                        95,
                        "            event[\"additions\"] = file_data['additions']"
                    ],
                    [
                        96,
                        "            event[\"deletions\"] = file_data['deletions']"
                    ],
                    [
                        97,
                        "            event[\"change_type\"] = file_data['change_type']"
                    ],
                    [
                        98,
                        "            event[\"commit_message\"] = file_data['commit_message']"
                    ],
                    [
                        99,
                        "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        100,
                        ""
                    ],
                    [
                        101,
                        "            # Append the event to the trace"
                    ],
                    [
                        102,
                        "            trace.append(event)"
                    ],
                    [
                        103,
                        ""
                    ],
                    [
                        104,
                        "    return log"
                    ],
                    [
                        105,
                        ""
                    ],
                    [
                        106,
                        "def save_xes_log(log, filename):"
                    ],
                    [
                        107,
                        "    # Export the log to an XES file"
                    ],
                    [
                        108,
                        "    xes_exporter.apply(log, filename)"
                    ],
                    [
                        109,
                        ""
                    ],
                    [
                        110,
                        "if __name__ == \"__main__\":"
                    ],
                    [
                        111,
                        "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL"
                    ],
                    [
                        112,
                        "    commits_data = analyze_commits(repo_url)"
                    ],
                    [
                        113,
                        "    save_to_json(commits_data, \"commits_data.json\")"
                    ],
                    [
                        114,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        115,
                        "     # Load the previously saved commit data JSON file"
                    ],
                    [
                        116,
                        "    with open(\"commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        117,
                        "        commits_data = json.load(json_file)"
                    ],
                    [
                        118,
                        ""
                    ],
                    [
                        119,
                        "    # Create the XES log from the commit data"
                    ],
                    [
                        120,
                        "    xes_log = create_xes_log(commits_data)"
                    ],
                    [
                        121,
                        ""
                    ],
                    [
                        122,
                        "    # Save the XES log to a file"
                    ],
                    [
                        123,
                        "    save_xes_log(xes_log, \"commits_data.xes\")"
                    ],
                    [
                        124,
                        ""
                    ],
                    [
                        125,
                        "    print(\"XES log has been saved to commits_data.xes\")"
                    ]
                ],
                "deleted": []
            },
            "comments": []
        },
        {
            "commit": "1061293a43b0788f9db921ae6fc61734ccdf1b8d",
            "timestamp": "2024-11-16T19:39:45+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        4,
                        "import datetime"
                    ],
                    [
                        8,
                        "def analyze_commits(repo_url, comment_symbol, language_file_extension):"
                    ],
                    [
                        10,
                        "    files_data = {}"
                    ],
                    [
                        12,
                        "    # Analysis range"
                    ],
                    [
                        13,
                        "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)"
                    ],
                    [
                        16,
                        "    # Traverse through the commits in the repository"
                    ],
                    [
                        17,
                        "    # Only save commits, that contain at least one file of the format {language_file_extension}"
                    ],
                    [
                        18,
                        "    for commit in Repository(repo_url,"
                    ],
                    [
                        19,
                        "    only_modifications_with_file_types=[f\".{language_file_extension}\"],"
                    ],
                    [
                        20,
                        "    since=dt1,"
                    ],
                    [
                        21,
                        "    to=dt2).traverse_commits():"
                    ],
                    [
                        24,
                        "            # only store file data for Rust files"
                    ],
                    [
                        25,
                        "            if modified_file.filename not in files_data:"
                    ],
                    [
                        26,
                        "                files_data[modified_file.filename] = []"
                    ],
                    [
                        27,
                        "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:"
                    ],
                    [
                        28,
                        "                file_data = {"
                    ],
                    [
                        29,
                        "                    \"commit\": commit.hash,"
                    ],
                    [
                        30,
                        "                    \"timestamp\": commit.committer_date.isoformat(),"
                    ],
                    [
                        31,
                        "                    \"author\": commit.author.name,"
                    ],
                    [
                        32,
                        "                    \"commit_message\": commit.msg,"
                    ],
                    [
                        33,
                        "                    \"additions\": modified_file.added_lines,"
                    ],
                    [
                        34,
                        "                    \"deletions\": modified_file.deleted_lines,"
                    ],
                    [
                        35,
                        "                    \"change_type\": modified_file.change_type.name,"
                    ],
                    [
                        36,
                        "                    \"diff\": modified_file.diff"
                    ],
                    [
                        37,
                        "                }"
                    ],
                    [
                        38,
                        "                diff_added = {}"
                    ],
                    [
                        39,
                        "                diff_deleted = {}"
                    ],
                    [
                        40,
                        "                diff_modified = {}"
                    ],
                    [
                        41,
                        "                for line in modified_file.diff_parsed[\"added\"]:"
                    ],
                    [
                        42,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        43,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        44,
                        "                file_data[\"comment_added_diff\"] = diff_added"
                    ],
                    [
                        45,
                        "                for line in modified_file.diff_parsed[\"deleted\"]:"
                    ],
                    [
                        46,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        47,
                        "                        diff_deleted[line[0]] = line[1]"
                    ],
                    [
                        48,
                        "                    if line[0] in diff_added.keys():"
                    ],
                    [
                        49,
                        "                        diff_modified[line[0]] = line[1]"
                    ],
                    [
                        50,
                        "                file_data[\"comment_deleted_diff\"] = diff_deleted"
                    ],
                    [
                        51,
                        "                file_data[\"comment_modified_diff\"] = diff_modified"
                    ],
                    [
                        52,
                        "                # Generate keywords based on the commit message and type of changes"
                    ],
                    [
                        53,
                        "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)"
                    ],
                    [
                        54,
                        "                # Extract type of commit from commit message"
                    ],
                    [
                        55,
                        "                # file_data[\"activity\"] = extract_activity(commit.msg)"
                    ],
                    [
                        56,
                        "                if len(diff_added) + len(diff_deleted) != 0:"
                    ],
                    [
                        57,
                        "                    files_data[modified_file.filename].append(file_data)"
                    ],
                    [
                        58,
                        "    return files_data"
                    ],
                    [
                        74,
                        "def extract_activity(commit_message):"
                    ],
                    [
                        75,
                        "    # Use commit message keywords to determine activity type"
                    ],
                    [
                        76,
                        "    activity = \"\""
                    ],
                    [
                        77,
                        "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():"
                    ],
                    [
                        78,
                        "        activity = \"Bug Fix\""
                    ],
                    [
                        79,
                        "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():"
                    ],
                    [
                        80,
                        "        activity = \"Feature Development\""
                    ],
                    [
                        81,
                        "    elif \"refactor\" in commit.msg.lower():"
                    ],
                    [
                        82,
                        "        activity = \"Refactoring\""
                    ],
                    [
                        83,
                        "    else:"
                    ],
                    [
                        84,
                        "        activity = \"Other\""
                    ],
                    [
                        85,
                        "    return activity"
                    ],
                    [
                        86,
                        ""
                    ],
                    [
                        92,
                        "def create_xes_log(data):"
                    ],
                    [
                        97,
                        "    for file in data:"
                    ],
                    [
                        120,
                        "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        121,
                        "            event[\"diff\"] = file_data[\"diff\"]"
                    ],
                    [
                        133,
                        "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL"
                    ],
                    [
                        134,
                        "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ],
                    [
                        135,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        136,
                        "    # print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        137,
                        "    # Load the previously saved commit data JSON file"
                    ],
                    [
                        138,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        139,
                        "       commits_data = json.load(json_file)"
                    ],
                    [
                        145,
                        "    save_xes_log(xes_log, \"Data/commits_data.xes\")"
                    ]
                ],
                "deleted": [
                    [
                        7,
                        "def analyze_commits(repo_url):"
                    ],
                    [
                        9,
                        "    commits_data = []"
                    ],
                    [
                        11,
                        "    # Traverse through the commits in the repository"
                    ],
                    [
                        12,
                        "    for commit in Repository(repo_url).traverse_commits():"
                    ],
                    [
                        13,
                        "        commit_data = {"
                    ],
                    [
                        14,
                        "            \"timestamp\": commit.committer_date.isoformat(),"
                    ],
                    [
                        15,
                        "            \"author\": commit.author.name,"
                    ],
                    [
                        16,
                        "            \"files\": []"
                    ],
                    [
                        17,
                        "        }"
                    ],
                    [
                        21,
                        "            file_data = {"
                    ],
                    [
                        22,
                        "                \"filename\": modified_file.filename,"
                    ],
                    [
                        23,
                        "                \"additions\": modified_file.added_lines,"
                    ],
                    [
                        24,
                        "                \"deletions\": modified_file.deleted_lines,"
                    ],
                    [
                        25,
                        "                \"change_type\": modified_file.change_type.name,"
                    ],
                    [
                        26,
                        "                \"commit_message\": commit.msg"
                    ],
                    [
                        27,
                        "            }"
                    ],
                    [
                        28,
                        ""
                    ],
                    [
                        29,
                        "            # Use commit message keywords to determine activity type"
                    ],
                    [
                        30,
                        "            if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():"
                    ],
                    [
                        31,
                        "                file_data[\"activity\"] = \"Bug Fix\""
                    ],
                    [
                        32,
                        "            elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():"
                    ],
                    [
                        33,
                        "                file_data[\"activity\"] = \"Feature Development\""
                    ],
                    [
                        34,
                        "            elif \"refactor\" in commit.msg.lower():"
                    ],
                    [
                        35,
                        "                file_data[\"activity\"] = \"Refactoring\""
                    ],
                    [
                        36,
                        "            else:"
                    ],
                    [
                        37,
                        "                file_data[\"activity\"] = \"Other\""
                    ],
                    [
                        38,
                        ""
                    ],
                    [
                        39,
                        "            # Generate effect/meaning keywords based on the commit message and type of changes"
                    ],
                    [
                        40,
                        "            file_data[\"effect_keywords\"] = extract_keywords(commit.msg, modified_file)"
                    ],
                    [
                        41,
                        ""
                    ],
                    [
                        42,
                        "            commit_data[\"files\"].append(file_data)"
                    ],
                    [
                        43,
                        ""
                    ],
                    [
                        44,
                        "        # Store the processed commit data"
                    ],
                    [
                        45,
                        "        commits_data.append(commit_data)"
                    ],
                    [
                        46,
                        ""
                    ],
                    [
                        47,
                        "    return commits_data"
                    ],
                    [
                        61,
                        ""
                    ],
                    [
                        69,
                        ""
                    ],
                    [
                        70,
                        ""
                    ],
                    [
                        71,
                        "def create_xes_log(commits_data):"
                    ],
                    [
                        76,
                        "    for commit_data in commits_data:"
                    ],
                    [
                        99,
                        "            event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        111,
                        "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"  # Example repository URL"
                    ],
                    [
                        112,
                        "    commits_data = analyze_commits(repo_url)"
                    ],
                    [
                        113,
                        "    save_to_json(commits_data, \"commits_data.json\")"
                    ],
                    [
                        114,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        115,
                        "     # Load the previously saved commit data JSON file"
                    ],
                    [
                        116,
                        "    with open(\"commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        117,
                        "        commits_data = json.load(json_file)"
                    ],
                    [
                        123,
                        "    save_xes_log(xes_log, \"commits_data.xes\")"
                    ],
                    [
                        124,
                        ""
                    ]
                ]
            },
            "comments": [
                {
                    "line": 9,
                    "comment": "# This will hold the data for each file and its changes across commits",
                    "edit": "deleted"
                },
                {
                    "line": 12,
                    "comment": "# Analysis range",
                    "edit": "modified"
                },
                {
                    "line": 16,
                    "comment": "# Traverse through the commits in the repository\n# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "edit": "modified"
                },
                {
                    "line": 22,
                    "comment": "# Analyze each file modified in the commit",
                    "edit": "deleted"
                },
                {
                    "line": 24,
                    "comment": "# only store file data for Rust files",
                    "edit": "modified"
                },
                {
                    "line": 61,
                    "comment": "# This function can use NLP techniques or simple keyword extraction\n# Here, a simplified approach is used: basic keywords based on the commit message",
                    "edit": "deleted"
                },
                {
                    "line": 115,
                    "comment": "# Add custom attributes for the event",
                    "edit": "deleted"
                },
                {
                    "line": 123,
                    "comment": "# Append the event to the trace",
                    "edit": "deleted"
                }
            ]
        },
        {
            "commit": "f73512c4aa778287e31d18e9d218502acf7479ee",
            "timestamp": "2024-11-16T20:51:56+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        97,
                        "    for file, commits in data.items():"
                    ],
                    [
                        98,
                        "        # Create a trace for the file"
                    ],
                    [
                        99,
                        "        trace = Trace()"
                    ],
                    [
                        100,
                        "        trace.attributes[\"file\"] = file"
                    ],
                    [
                        101,
                        ""
                    ],
                    [
                        102,
                        "        for commit in commits:"
                    ],
                    [
                        103,
                        "            # Extract event attributes"
                    ],
                    [
                        105,
                        "            event[\"timestamp\"] = commit.get(\"timestamp\")"
                    ],
                    [
                        106,
                        "            event[\"author\"] = commit.get(\"author\")"
                    ],
                    [
                        107,
                        "            event[\"change_type\"] = commit.get(\"change_type\")"
                    ],
                    [
                        108,
                        "            event[\"commit_message\"] = commit.get(\"commit_message\")"
                    ],
                    [
                        109,
                        "            event[\"additions\"] = commit.get(\"additions\")"
                    ],
                    [
                        110,
                        "            event[\"deletions\"] = commit.get(\"deletions\")"
                    ],
                    [
                        111,
                        "            event[\"diff\"] = commit.get(\"diff\")"
                    ],
                    [
                        112,
                        "            if commit.get(\"comment_added_diff\"):"
                    ],
                    [
                        113,
                        "                event[\"comment_change\"] = \"True\""
                    ],
                    [
                        114,
                        "            else:"
                    ],
                    [
                        115,
                        "                event[\"comment_change\"] = \"False\""
                    ],
                    [
                        116,
                        ""
                    ],
                    [
                        117,
                        "            # Add the event to the trace"
                    ],
                    [
                        120,
                        "        # Add the trace to the log"
                    ],
                    [
                        121,
                        "        log.append(trace)"
                    ],
                    [
                        122,
                        ""
                    ],
                    [
                        131,
                        "    commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ],
                    [
                        132,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        133,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ]
                ],
                "deleted": [
                    [
                        97,
                        "    for file in data:"
                    ],
                    [
                        98,
                        "        # For each file affected in the commit, create a trace"
                    ],
                    [
                        99,
                        "        for file_data in commit_data['files']:"
                    ],
                    [
                        100,
                        "            # Check if a trace for this file already exists, if not, create one"
                    ],
                    [
                        101,
                        "            trace_name = file_data['filename']"
                    ],
                    [
                        102,
                        "            trace = next((t for t in log if t.attributes.get(\"concept:name\") == trace_name), None)"
                    ],
                    [
                        103,
                        ""
                    ],
                    [
                        104,
                        "            if trace is None:"
                    ],
                    [
                        105,
                        "                trace = Trace()"
                    ],
                    [
                        106,
                        "                trace.attributes[\"concept:name\"] = trace_name"
                    ],
                    [
                        107,
                        "                log.append(trace)"
                    ],
                    [
                        108,
                        ""
                    ],
                    [
                        109,
                        "            # Create an event for the current commit affecting this file"
                    ],
                    [
                        111,
                        "            event[\"concept:name\"] = file_data['activity']"
                    ],
                    [
                        112,
                        "            event[\"time:timestamp\"] = commit_data['timestamp']"
                    ],
                    [
                        113,
                        "            event[\"org:resource\"] = commit_data['author']"
                    ],
                    [
                        114,
                        ""
                    ],
                    [
                        115,
                        "            # Add custom attributes for the event"
                    ],
                    [
                        116,
                        "            event[\"additions\"] = file_data['additions']"
                    ],
                    [
                        117,
                        "            event[\"deletions\"] = file_data['deletions']"
                    ],
                    [
                        118,
                        "            event[\"change_type\"] = file_data['change_type']"
                    ],
                    [
                        119,
                        "            event[\"commit_message\"] = file_data['commit_message']"
                    ],
                    [
                        120,
                        "            #event[\"effect_keywords\"] = ', '.join(file_data['effect_keywords'])"
                    ],
                    [
                        121,
                        "            event[\"diff\"] = file_data[\"diff\"]"
                    ],
                    [
                        122,
                        ""
                    ],
                    [
                        123,
                        "            # Append the event to the trace"
                    ],
                    [
                        134,
                        "    # commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ],
                    [
                        135,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        136,
                        "    # print(\"Commit data has been saved to commits_data.json\")"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 98,
                    "comment": "# Create a trace for the file",
                    "edit": "modified"
                },
                {
                    "line": 103,
                    "comment": "# Extract event attributes",
                    "edit": "modified"
                },
                {
                    "line": 117,
                    "comment": "# Add the event to the trace",
                    "edit": "modified"
                },
                {
                    "line": 120,
                    "comment": "# Add the trace to the log",
                    "edit": "modified"
                },
                {
                    "line": 134,
                    "comment": "# Load the previously saved commit data JSON file",
                    "edit": "deleted"
                }
            ]
        },
        {
            "commit": "1277d634d38557e2d5981481fd55f1753da2314b",
            "timestamp": "2024-11-17T16:33:10+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        48,
                        "                        if line[0] in diff_added.keys():"
                    ],
                    [
                        49,
                        "                            diff_modified[line[0]] = line[1]"
                    ],
                    [
                        130,
                        "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL"
                    ],
                    [
                        131,
                        "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ]
                ],
                "deleted": [
                    [
                        48,
                        "                    if line[0] in diff_added.keys():"
                    ],
                    [
                        49,
                        "                        diff_modified[line[0]] = line[1]"
                    ],
                    [
                        130,
                        "    repo_url = \"https://github.com/numpy/numpy\"  # Example repository URL"
                    ],
                    [
                        131,
                        "    commits_data = analyze_commits(repo_url, \"#\", \"py\")"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 130,
                    "comment": "# Example repository URL",
                    "edit": "modified"
                }
            ]
        },
        {
            "commit": "a8af330e0eb1c2574ba424b69e0958c938502a67",
            "timestamp": "2024-11-18T10:51:21+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        13,
                        "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)"
                    ],
                    [
                        20,
                        "    # since=dt1,"
                    ],
                    [
                        36,
                        "                    \"diff\": modified_file.diff_parsed"
                    ],
                    [
                        43,
                        "                        print(int(line[0]))"
                    ],
                    [
                        88,
                        "def analyze_diff(commits_data, type):"
                    ],
                    [
                        89,
                        "    for file, commits in commits_data.items():"
                    ],
                    [
                        90,
                        "        if len(file) > 0:"
                    ],
                    [
                        91,
                        "            for commit in commits:"
                    ],
                    [
                        92,
                        "                diff_edited = []"
                    ],
                    [
                        93,
                        "                for i in range(len(commit[\"diff\"][type])):"
                    ],
                    [
                        94,
                        "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:"
                    ],
                    [
                        95,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        96,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        97,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        98,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        99,
                        "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        100,
                        "                            else:"
                    ],
                    [
                        101,
                        "                                # or create new one"
                    ],
                    [
                        102,
                        "                                diff_edited.append({"
                    ],
                    [
                        103,
                        "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        104,
                        "                                    \"comments\": [],"
                    ],
                    [
                        105,
                        "                                    \"lines\": [commit[\"diff\"][type][i][1]]})"
                    ],
                    [
                        106,
                        "                    else:"
                    ],
                    [
                        107,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        108,
                        "                            # In case of comment add them to existing dict if they directly follow"
                    ],
                    [
                        109,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        110,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        111,
                        "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        112,
                        "                        else:"
                    ],
                    [
                        113,
                        "                            # or create new one"
                    ],
                    [
                        114,
                        "                            diff_edited.append({"
                    ],
                    [
                        115,
                        "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        116,
                        "                                \"comments\": [commit[\"diff\"][type][i][1]],"
                    ],
                    [
                        117,
                        "                                \"lines\": []})"
                    ],
                    [
                        118,
                        "                commit[\"diff\"][type] = diff_edited"
                    ],
                    [
                        119,
                        "    return commits_data"
                    ],
                    [
                        120,
                        ""
                    ],
                    [
                        121,
                        "def save_to_json(commits_data, path):"
                    ],
                    [
                        123,
                        "    with open(path, 'w') as json_file:"
                    ],
                    [
                        125,
                        "    print(\"Commit data has been saved to \", path)"
                    ],
                    [
                        164,
                        "def save_to_xes(log, path):"
                    ],
                    [
                        165,
                        "    # Create the XES log from the commit data"
                    ],
                    [
                        166,
                        "    xes_log = create_xes_log(log)"
                    ],
                    [
                        167,
                        ""
                    ],
                    [
                        168,
                        "    # Save the XES log to a file"
                    ],
                    [
                        169,
                        "    save_xes_log(xes_log, path)"
                    ],
                    [
                        170,
                        "    print(\"XES log has been saved to \", path)"
                    ],
                    [
                        171,
                        ""
                    ],
                    [
                        176,
                        "    # save_to_xes(commits_data, \"Data/commits_data.xes\")"
                    ],
                    [
                        179,
                        "    analyzed_data = analyze_diff(commits_data, \"added\")"
                    ],
                    [
                        180,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        181,
                        "    analyzed_data = analyze_diff(commits_data, \"deleted\")"
                    ],
                    [
                        182,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ]
                ],
                "deleted": [
                    [
                        13,
                        "    dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2023, 10, 8, 17, 59, 0)"
                    ],
                    [
                        20,
                        "    since=dt1,"
                    ],
                    [
                        36,
                        "                    \"diff\": modified_file.diff"
                    ],
                    [
                        87,
                        "def save_to_json(commits_data, filename):"
                    ],
                    [
                        89,
                        "    with open(filename, 'w') as json_file:"
                    ],
                    [
                        133,
                        "    print(\"Commit data has been saved to commits_data.json\")"
                    ],
                    [
                        134,
                        "    # Load the previously saved commit data JSON file"
                    ],
                    [
                        138,
                        "    # Create the XES log from the commit data"
                    ],
                    [
                        139,
                        "    xes_log = create_xes_log(commits_data)"
                    ],
                    [
                        141,
                        "    # Save the XES log to a file"
                    ],
                    [
                        142,
                        "    save_xes_log(xes_log, \"Data/commits_data.xes\")"
                    ],
                    [
                        143,
                        "    print(\"XES log has been saved to commits_data.xes\")"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 20,
                    "comment": "# since=dt1,",
                    "edit": "modified"
                },
                {
                    "line": 133,
                    "comment": "# Create a trace for the file",
                    "edit": "deleted"
                },
                {
                    "line": 138,
                    "comment": "# Extract event attributes",
                    "edit": "deleted"
                }
            ]
        },
        {
            "commit": "3bffee0480ea6e1007c2b96cafa58305afd4a9f2",
            "timestamp": "2024-11-18T15:19:19+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        4,
                        "from datetime import datetime"
                    ],
                    [
                        13,
                        "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime(2022, 10, 8, 17, 59, 0)"
                    ],
                    [
                        87,
                        "def pretty_diff(commits_data, type):"
                    ],
                    [
                        120,
                        "def analyze_diffs(data):"
                    ],
                    [
                        121,
                        "    analysis_results = []"
                    ],
                    [
                        122,
                        ""
                    ],
                    [
                        123,
                        "    for file, commits in data.items():"
                    ],
                    [
                        124,
                        "        # Store last modified timestamps for each line"
                    ],
                    [
                        125,
                        "        last_modified = {}"
                    ],
                    [
                        126,
                        ""
                    ],
                    [
                        127,
                        "        for commit in commits:"
                    ],
                    [
                        128,
                        "            print(\"Starting to analyse commit: \", commit[\"commit\"])"
                    ],
                    [
                        129,
                        "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    ],
                    [
                        130,
                        ""
                    ],
                    [
                        131,
                        "            # Track modified lines"
                    ],
                    [
                        132,
                        "            for block in commit[\"diff\"][\"added\"]:"
                    ],
                    [
                        133,
                        "                for line in block[\"line_numbers\"]:"
                    ],
                    [
                        134,
                        "                    line_number = line"
                    ],
                    [
                        135,
                        "                    last_modified[line_number] = commit_time"
                    ],
                    [
                        136,
                        ""
                    ],
                    [
                        137,
                        "            print(last_modified)"
                    ],
                    [
                        138,
                        ""
                    ],
                    [
                        139,
                        "            # Compare with comments"
                    ],
                    [
                        140,
                        "            for line in commit[\"comment_added_diff\"]:"
                    ],
                    [
                        141,
                        "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    ],
                    [
                        142,
                        "                last_modified_lines = list(last_modified.keys())"
                    ],
                    [
                        143,
                        "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)"
                    ],
                    [
                        144,
                        "                if int(line) in last_modified_lines:"
                    ],
                    [
                        145,
                        "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])"
                    ],
                    [
                        146,
                        "                    if(comment_time > last_modified[int(line)]):"
                    ],
                    [
                        147,
                        "                        analysis_results.append({"
                    ],
                    [
                        148,
                        "                            \"file\": file,"
                    ],
                    [
                        149,
                        "                            \"line\": int(line),"
                    ],
                    [
                        150,
                        "                            \"comment\": commit[\"comment_added_diff\"][line],"
                    ],
                    [
                        151,
                        "                            \"comment_time\": str(comment_time),"
                    ],
                    [
                        152,
                        "                            \"last_code_change_time\": str(last_modified[int(line)])"
                    ],
                    [
                        153,
                        "                        })"
                    ],
                    [
                        154,
                        "            # print(\"Finsihed with commit\")"
                    ],
                    [
                        155,
                        "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")"
                    ],
                    [
                        156,
                        ""
                    ],
                    [
                        157,
                        "    return analysis_results"
                    ],
                    [
                        158,
                        ""
                    ],
                    [
                        163,
                        "    print(\"Data has been saved to\", path)"
                    ],
                    [
                        208,
                        "    print(\"XES log has been saved to\", path)"
                    ],
                    [
                        212,
                        "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ],
                    [
                        213,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        215,
                        "    # with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        216,
                        "      #  commits_data = json.load(json_file)"
                    ],
                    [
                        217,
                        "    # analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        218,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        219,
                        "    # analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ],
                    [
                        220,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        221,
                        ""
                    ],
                    [
                        222,
                        "    # Test case"
                    ],
                    [
                        223,
                        "    with open(\"Exports/analyzed_data.json\", \"r\") as json_file:"
                    ],
                    [
                        224,
                        "        data = json.load(json_file)"
                    ],
                    [
                        225,
                        "    print(\"\\n\")"
                    ],
                    [
                        226,
                        "    analyzed_data = analyze_diffs(data)"
                    ],
                    [
                        227,
                        "    for result in analyzed_data:"
                    ],
                    [
                        228,
                        "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \""
                    ],
                    [
                        229,
                        "            f\"after being changed on {result['last_code_change_time']}.\")"
                    ],
                    [
                        230,
                        "    save_to_json(analyzed_data, \"Exports/analysis_results.json\")"
                    ]
                ],
                "deleted": [
                    [
                        4,
                        "import datetime"
                    ],
                    [
                        13,
                        "    # dt1 = datetime.datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime.datetime(2020, 10, 8, 17, 59, 0)"
                    ],
                    [
                        43,
                        "                        print(int(line[0]))"
                    ],
                    [
                        88,
                        "def analyze_diff(commits_data, type):"
                    ],
                    [
                        125,
                        "    print(\"Commit data has been saved to \", path)"
                    ],
                    [
                        170,
                        "    print(\"XES log has been saved to \", path)"
                    ],
                    [
                        174,
                        "    commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ],
                    [
                        175,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        177,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        178,
                        "       commits_data = json.load(json_file)"
                    ],
                    [
                        179,
                        "    analyzed_data = analyze_diff(commits_data, \"added\")"
                    ],
                    [
                        180,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        181,
                        "    analyzed_data = analyze_diff(commits_data, \"deleted\")"
                    ],
                    [
                        182,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        183,
                        ""
                    ],
                    [
                        184,
                        ""
                    ]
                ]
            },
            "comments": []
        },
        {
            "commit": "e226da877d3d9f98cab4990bb1fbaa02e6adbb7b",
            "timestamp": "2024-11-19T15:32:58+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        14,
                        "    dt2 = datetime(2010, 10, 8, 17, 59, 0)"
                    ],
                    [
                        93,
                        "                    curr_line = commit[\"diff\"][type][i][0]"
                    ],
                    [
                        94,
                        "                    curr_content = commit[\"diff\"][type][i][1]"
                    ],
                    [
                        95,
                        "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:"
                    ],
                    [
                        98,
                        "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        99,
                        "                                diff_edited[-1][\"comments\"][curr_line] = curr_content"
                    ],
                    [
                        100,
                        "                            # else:"
                    ],
                    [
                        101,
                        "                            #     diff_edited.append({"
                    ],
                    [
                        102,
                        "                            #         \"line_numbers\": [],"
                    ],
                    [
                        103,
                        "                            #         \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        104,
                        "                            #         \"lines\": []})"
                    ],
                    [
                        106,
                        "                        #     if i < 5:"
                    ],
                    [
                        107,
                        "                        #     # or create new one"
                    ],
                    [
                        108,
                        "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)"
                    ],
                    [
                        111,
                        "                                \"line_numbers\": [],"
                    ],
                    [
                        112,
                        "                                \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        114,
                        "                    else:"
                    ],
                    [
                        115,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        116,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        117,
                        "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        118,
                        "                                diff_edited[-1][\"line_numbers\"].append(curr_line)"
                    ],
                    [
                        119,
                        "                                diff_edited[-1][\"lines\"].append(curr_content)"
                    ],
                    [
                        120,
                        "                            else:"
                    ],
                    [
                        121,
                        "                                # or create new one"
                    ],
                    [
                        122,
                        "                                diff_edited.append({"
                    ],
                    [
                        123,
                        "                                    \"line_numbers\": [curr_line],"
                    ],
                    [
                        124,
                        "                                    \"comments\": {},"
                    ],
                    [
                        125,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        137,
                        "            # print(\"Starting to analyse commit: \", commit[\"commit\"])"
                    ],
                    [
                        146,
                        "            # print(last_modified)"
                    ],
                    [
                        153,
                        "                    for block in commit[\"diff\"][\"added\"]:"
                    ],
                    [
                        154,
                        "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:"
                    ],
                    [
                        155,
                        "                            if(comment_time > last_modified[int(line)]):"
                    ],
                    [
                        156,
                        "                                analysis_results.append({"
                    ],
                    [
                        157,
                        "                                    \"file\": file,"
                    ],
                    [
                        158,
                        "                                    \"line\": int(line),"
                    ],
                    [
                        159,
                        "                                    \"comment\": commit[\"comment_added_diff\"][line],"
                    ],
                    [
                        160,
                        "                                    \"comment_time\": str(comment_time),"
                    ],
                    [
                        161,
                        "                                    \"last_code_change_time\": str(last_modified[int(line)])"
                    ],
                    [
                        162,
                        "                                })"
                    ],
                    [
                        218,
                        "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL"
                    ],
                    [
                        219,
                        "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")"
                    ],
                    [
                        222,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        223,
                        "       commits_data = json.load(json_file)"
                    ],
                    [
                        224,
                        "    analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        225,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        226,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ],
                    [
                        227,
                        "    save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        232,
                        "    analyzed_data = analyze_diffs(data)"
                    ],
                    [
                        233,
                        ""
                    ]
                ],
                "deleted": [
                    [
                        14,
                        "    dt2 = datetime(2022, 10, 8, 17, 59, 0)"
                    ],
                    [
                        93,
                        "                    if commit[\"diff\"][type][i][1].find(\"// \") == -1:"
                    ],
                    [
                        94,
                        "                        if len(diff_edited) > 0:"
                    ],
                    [
                        95,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        96,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        97,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        98,
                        "                                diff_edited[-1][\"lines\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        99,
                        "                            else:"
                    ],
                    [
                        100,
                        "                                # or create new one"
                    ],
                    [
                        101,
                        "                                diff_edited.append({"
                    ],
                    [
                        102,
                        "                                    \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        103,
                        "                                    \"comments\": [],"
                    ],
                    [
                        104,
                        "                                    \"lines\": [commit[\"diff\"][type][i][1]]})"
                    ],
                    [
                        105,
                        "                    else:"
                    ],
                    [
                        108,
                        "                            if commit[\"diff\"][type][i][0] == diff_edited[-1][\"line_numbers\"][-1] + 1:"
                    ],
                    [
                        109,
                        "                                diff_edited[-1][\"line_numbers\"].append(commit[\"diff\"][type][i][0])"
                    ],
                    [
                        110,
                        "                                diff_edited[-1][\"comments\"].append(commit[\"diff\"][type][i][1])"
                    ],
                    [
                        114,
                        "                                \"line_numbers\": [commit[\"diff\"][type][i][0]],"
                    ],
                    [
                        115,
                        "                                \"comments\": [commit[\"diff\"][type][i][1]],"
                    ],
                    [
                        128,
                        "            print(\"Starting to analyse commit: \", commit[\"commit\"])"
                    ],
                    [
                        137,
                        "            print(last_modified)"
                    ],
                    [
                        143,
                        "                # print(\"Check if \", line, \" is in keys \", last_modified_lines)"
                    ],
                    [
                        145,
                        "                    # print(\"Check if \", comment_time, \" is larger than \", last_modified[int(line)])"
                    ],
                    [
                        146,
                        "                    if(comment_time > last_modified[int(line)]):"
                    ],
                    [
                        147,
                        "                        analysis_results.append({"
                    ],
                    [
                        148,
                        "                            \"file\": file,"
                    ],
                    [
                        149,
                        "                            \"line\": int(line),"
                    ],
                    [
                        150,
                        "                            \"comment\": commit[\"comment_added_diff\"][line],"
                    ],
                    [
                        151,
                        "                            \"comment_time\": str(comment_time),"
                    ],
                    [
                        152,
                        "                            \"last_code_change_time\": str(last_modified[int(line)])"
                    ],
                    [
                        153,
                        "                        })"
                    ],
                    [
                        154,
                        "            # print(\"Finsihed with commit\")"
                    ],
                    [
                        155,
                        "            # print(\"Current state analysis results: \", analysis_results, \"\\n\")"
                    ],
                    [
                        211,
                        "    repo_url = \"https://github.com/espressif/arduino-esp32\"  # Example repository URL"
                    ],
                    [
                        212,
                        "    # commits_data = analyze_commits(repo_url, \"// \", \"cpp\")"
                    ],
                    [
                        215,
                        "    # with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        216,
                        "      #  commits_data = json.load(json_file)"
                    ],
                    [
                        217,
                        "    # analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        218,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        219,
                        "    # analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ],
                    [
                        220,
                        "    # save_to_json(analyzed_data, \"Exports/analyzed_data.json\")"
                    ],
                    [
                        225,
                        "    print(\"\\n\")"
                    ],
                    [
                        226,
                        "    analyzed_data = analyze_diffs(data)"
                    ],
                    [
                        227,
                        "    for result in analyzed_data:"
                    ],
                    [
                        228,
                        "        print(f\"In {result['file']}, line {result['line']} was commented on {result['comment_time']} \""
                    ],
                    [
                        229,
                        "            f\"after being changed on {result['last_code_change_time']}.\")"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 97,
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "edit": "deleted"
                },
                {
                    "line": 100,
                    "comment": "# else: \n#     diff_edited.append({\n#         \"line_numbers\": [],\n#         \"comments\": {curr_line: curr_content},\n#         \"lines\": []})",
                    "edit": "modified"
                },
                {
                    "line": 109,
                    "comment": "# or create new one",
                    "edit": "deleted"
                },
                {
                    "line": 137,
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "edit": "modified"
                },
                {
                    "line": 146,
                    "comment": "# print(last_modified)",
                    "edit": "modified"
                },
                {
                    "line": 148,
                    "comment": "# Compare with comments",
                    "edit": "deleted"
                },
                {
                    "line": 218,
                    "comment": "# Example repository URL",
                    "edit": "modified"
                },
                {
                    "line": 219,
                    "comment": "# commits_data = analyze_commits(repo_url, \"//\", \"js\")\n# save_to_json(commits_data, \"Data/commits_data.json\")\n# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "edit": "modified"
                },
                {
                    "line": 229,
                    "comment": "# Test case",
                    "edit": "deleted"
                }
            ]
        },
        {
            "commit": "367493d87df2ab980b261f32c54beb20f1bc5c4e",
            "timestamp": "2024-11-19T17:09:41+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        8,
                        "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):"
                    ],
                    [
                        16,
                        "    since=dt1,"
                    ],
                    [
                        18,
                        "        if len(multi_comment_symbols) >= 2:"
                    ],
                    [
                        19,
                        "            multi_comments_enabled = True"
                    ],
                    [
                        20,
                        "        else:"
                    ],
                    [
                        21,
                        "            multi_comments_enabled = False"
                    ],
                    [
                        41,
                        "                following_multi_comment = False"
                    ],
                    [
                        43,
                        "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:"
                    ],
                    [
                        44,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        45,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        46,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        47,
                        "                        following_multi_comment = True"
                    ],
                    [
                        48,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:"
                    ],
                    [
                        50,
                        "                        following_multi_comment = False"
                    ],
                    [
                        53,
                        "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:"
                    ],
                    [
                        57,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        58,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        59,
                        "                        following_multi_comment = True"
                    ],
                    [
                        60,
                        "                        if line[0] in diff_added.keys():"
                    ],
                    [
                        61,
                        "                            diff_modified[line[0]] = line[1]"
                    ],
                    [
                        62,
                        "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:"
                    ],
                    [
                        63,
                        "                        diff_added[line[0]] = line[1]"
                    ],
                    [
                        64,
                        "                        if line[0] in diff_added.keys():"
                    ],
                    [
                        65,
                        "                            diff_modified[line[0]] = line[1]"
                    ],
                    [
                        103,
                        "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):"
                    ],
                    [
                        104,
                        "    following_multi_comment = False"
                    ],
                    [
                        105,
                        "    if len(multi_comment_symbols) >= 2:"
                    ],
                    [
                        106,
                        "        multi_comments_enabled = True"
                    ],
                    [
                        107,
                        "    else:"
                    ],
                    [
                        108,
                        "        multi_comments_enabled = False"
                    ],
                    [
                        116,
                        "                    if curr_content == \"/*<replacement>*/\":"
                    ],
                    [
                        117,
                        "                        print()"
                    ],
                    [
                        118,
                        "                    if curr_content.find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        119,
                        "                            following_multi_comment = True"
                    ],
                    [
                        120,
                        "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:"
                    ],
                    [
                        142,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        143,
                        "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:"
                    ],
                    [
                        144,
                        "                        following_multi_comment = False"
                    ],
                    [
                        238,
                        "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        239,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        243,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        245,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                    ]
                ],
                "deleted": [
                    [
                        8,
                        "def analyze_commits(repo_url, comment_symbol, language_file_extension):"
                    ],
                    [
                        12,
                        "    # Analysis range"
                    ],
                    [
                        13,
                        "    # dt1 = datetime(2022, 10, 8, 17, 0, 0)"
                    ],
                    [
                        14,
                        "    dt2 = datetime(2010, 10, 8, 17, 59, 0)"
                    ],
                    [
                        15,
                        ""
                    ],
                    [
                        20,
                        "    # since=dt1,"
                    ],
                    [
                        42,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        46,
                        "                    if line[1].find(comment_symbol) != -1:"
                    ],
                    [
                        87,
                        "def pretty_diff(commits_data, type):"
                    ],
                    [
                        95,
                        "                    if curr_content.find(\"//\") == 0 or curr_content.find(\"// \") != -1:"
                    ],
                    [
                        100,
                        "                            # else:"
                    ],
                    [
                        101,
                        "                            #     diff_edited.append({"
                    ],
                    [
                        102,
                        "                            #         \"line_numbers\": [],"
                    ],
                    [
                        103,
                        "                            #         \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        104,
                        "                            #         \"lines\": []})"
                    ],
                    [
                        106,
                        "                        #     if i < 5:"
                    ],
                    [
                        107,
                        "                        #     # or create new one"
                    ],
                    [
                        108,
                        "                        #         print(\"I: \", i, \"comment is first part of block: \", curr_line, \": \", curr_content)"
                    ],
                    [
                        125,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        219,
                        "    # commits_data = analyze_commits(repo_url, \"//\", \"js\")"
                    ],
                    [
                        220,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        224,
                        "    analyzed_data = pretty_diff(commits_data, \"added\")"
                    ],
                    [
                        226,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\")"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 12,
                    "comment": "# Traverse through the commits in the repository\n# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "edit": "deleted"
                },
                {
                    "line": 219,
                    "comment": "# Add the trace to the log",
                    "edit": "deleted"
                }
            ]
        },
        {
            "commit": "bdfb1cc02e0a08cad8109e142080e326cd09f189",
            "timestamp": "2024-11-19T17:28:53+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        40,
                        "                # For added diff ispect lines filter out comments"
                    ],
                    [
                        51,
                        "                # For deleted diff ispect lines filter out comments"
                    ],
                    [
                        77,
                        "    # Determine basic keywords based on the commit message"
                    ],
                    [
                        112,
                        "                # Set current line for each analysis"
                    ],
                    [
                        116,
                        "                    # In case of a starting multiline comment start adding future lines without comment symbol"
                    ],
                    [
                        119,
                        "                    # In case of comment add them to existing dict if they directly follow"
                    ],
                    [
                        125,
                        "                    # or create new one"
                    ],
                    [
                        130,
                        "                    # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        131,
                        "                    else:"
                    ],
                    [
                        137,
                        "                    # Or create new one"
                    ],
                    [
                        141,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        142,
                        "                    # Disable multiline comments when symbol found"
                    ]
                ],
                "deleted": [
                    [
                        9,
                        "    # This will hold the data for each file and its changes across commits"
                    ],
                    [
                        11,
                        ""
                    ],
                    [
                        77,
                        "    # This function can use NLP techniques or simple keyword extraction"
                    ],
                    [
                        78,
                        "    # Here, a simplified approach is used: basic keywords based on the commit message"
                    ],
                    [
                        116,
                        "                    if curr_content == \"/*<replacement>*/\":"
                    ],
                    [
                        117,
                        "                        print()"
                    ],
                    [
                        122,
                        "                            # In case of comment add them to existing dict if they directly follow"
                    ],
                    [
                        126,
                        "                            # or create new one"
                    ],
                    [
                        131,
                        "                    else:"
                    ],
                    [
                        133,
                        "                            # In case of no comment add lines to existing dict if line number directly follows"
                    ],
                    [
                        138,
                        "                                # or create new one"
                    ],
                    [
                        142,
                        "                                    \"lines\": [curr_content]})"
                    ],
                    [
                        154,
                        ""
                    ],
                    [
                        158,
                        ""
                    ],
                    [
                        164,
                        ""
                    ],
                    [
                        165,
                        "            # print(last_modified)"
                    ],
                    [
                        166,
                        ""
                    ],
                    [
                        182,
                        ""
                    ]
                ]
            },
            "comments": [
                {
                    "line": 77,
                    "comment": "# Determine basic keywords based on the commit message",
                    "edit": "modified"
                },
                {
                    "line": 116,
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "edit": "modified"
                },
                {
                    "line": 142,
                    "comment": "# Disable multiline comments when symbol found",
                    "edit": "modified"
                }
            ]
        },
        {
            "commit": "2bfdaaeca6f4bc1b69403beb494198e8364ba925",
            "timestamp": "2024-11-19T18:23:46+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        117,
                        "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        123,
                        "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:"
                    ],
                    [
                        124,
                        "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content"
                    ],
                    [
                        125,
                        "                                else:"
                    ],
                    [
                        126,
                        "                                    diff_edited.append({"
                    ],
                    [
                        127,
                        "                                        \"line_numbers\": [],"
                    ],
                    [
                        128,
                        "                                        \"comments\": {curr_line: curr_content},"
                    ],
                    [
                        129,
                        "                                        \"lines\": []})"
                    ],
                    [
                        237,
                        "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL"
                    ],
                    [
                        238,
                        "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")"
                    ],
                    [
                        239,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        243,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")"
                    ],
                    [
                        245,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"#\")"
                    ]
                ],
                "deleted": [
                    [
                        117,
                        "                    if curr_content.find(multi_comment_symbols[0]) != -1:"
                    ],
                    [
                        123,
                        "                                diff_edited[-1][\"comments\"][curr_line] = curr_content"
                    ],
                    [
                        231,
                        "    repo_url = \"https://github.com/nodejs/node\"  # Example repository URL"
                    ],
                    [
                        232,
                        "    commits_data = analyze_commits(repo_url, \"js\", datetime(2015,2,1), datetime(2015,8,1), \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        233,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        237,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        239,
                        "    analyzed_data = pretty_diff(commits_data, \"deleted\", \"//\", [\"/*\", \"*/\"])"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 232,
                    "comment": "# Save the XES log to a file",
                    "edit": "deleted"
                },
                {
                    "line": 237,
                    "comment": "# Example repository URL",
                    "edit": "modified"
                }
            ]
        },
        {
            "commit": "96c6276dc1ea0aad50b96cf844406a8641fa1d37",
            "timestamp": "2024-11-21T12:33:35+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": [
                    [
                        5,
                        "from dateutil.relativedelta import relativedelta"
                    ],
                    [
                        238,
                        "    repo_url = \"https://github.com/apache/accumulo.git\"  # Example repository URL"
                    ],
                    [
                        239,
                        "    commits_data = analyze_commits(repo_url, \"java\", datetime.today() - relativedelta(years=1), datetime.today(), \"//\", [\"/*\", \"*/\"])"
                    ],
                    [
                        240,
                        "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        242,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        244,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"//\", [\"/*\", \"*/\"])"
                    ]
                ],
                "deleted": [
                    [
                        237,
                        "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"  # Example repository URL"
                    ],
                    [
                        238,
                        "    # commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")"
                    ],
                    [
                        239,
                        "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    ],
                    [
                        241,
                        "    with open(\"Data/commits_data.json\", \"r\") as json_file:"
                    ],
                    [
                        243,
                        "    analyzed_data = pretty_diff(commits_data, \"added\", \"#\")"
                    ]
                ]
            },
            "comments": [
                {
                    "line": 238,
                    "comment": "# Example repository URL",
                    "edit": "modified"
                },
                {
                    "line": 241,
                    "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")",
                    "edit": "deleted"
                }
            ]
        }
    ]
}