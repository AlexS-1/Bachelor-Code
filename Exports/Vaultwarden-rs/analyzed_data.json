{
    "notifications.rs": [
        {
            "commit": "0fdda3bc2f22b1881ac265d08e24ab9ef9402f9e",
            "timestamp": "2023-12-04T20:20:13+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Prevent generating an error during ws close (#4127)\n\nWhen a WebSocket connection was closing it was sending a message after\r\nit was closed already. This generated an error in the logs.\r\nWhile this error didn't harm any of the functionallity of Vaultwarden it\r\nisn't nice to see them of course.\r\n\r\nThis PR Fixes this by catching the close message and breaks the loop at\r\nthat point. This prevents the `_` catch-all from replying the close\r\nmessage back to the client, which was causing the error message.\r\n\r\nFixes #4090",
            "additions": 10,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            170,
                            171
                        ],
                        "comments": {
                            "168": "                                    // Prevent sending anything back when a `Close` Message is received.",
                            "169": "                                    // Just break the loop"
                        },
                        "lines": [
                            "                                    Message::Close(_) => break,",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            238
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            241,
                            242
                        ],
                        "comments": {
                            "239": "                                    // Prevent sending anything back when a `Close` Message is received.",
                            "240": "                                    // Just break the loop"
                        },
                        "lines": [
                            "                                    Message::Close(_) => break,",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "168": "                                    // Prevent sending anything back when a `Close` Message is received.",
                "169": "                                    // Just break the loop",
                "239": "                                    // Prevent sending anything back when a `Close` Message is received.",
                "240": "                                    // Just break the loop"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "34272176867af1d566bd3bc561486a4e7a492ea9",
            "timestamp": "2024-03-17T19:52:55+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Remove custom WebSocket code (#4001)\n\n* Remove custom WebSocket code\r\n\r\nRemove our custom WebSocket code and only use the Rocket code.\r\nRemoved all options in regards to WebSockets\r\nAdded a new option `WEBSOCKET_DISABLED` which defaults too `false`.\r\nThis can be used to disable WebSockets if you really do not want to use it.\r\n\r\n* Addressed remarks given and some updates\r\n\r\n- Addressed comments given during review\r\n- Updated crates, including Rocket to the latest merged v0.5 changes\r\n- Removed an extra header which should not be sent for websocket connections\r\n\r\n* Updated suggestions and crates\r\n\r\n- Addressed the suggestions\r\n- Updated Rocket to latest rc4\r\n  Also made the needed code changes\r\n- Updated all other crates\r\n  Pinned `openssl` and `openssl-sys`\r\n\r\n---------\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 70,
            "deletions": 158,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            344,
                            345,
                            346
                        ],
                        "comments": {
                            "343": "        // Skip any processing if both WebSockets and Push are not active"
                        },
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            353,
                            354,
                            355
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            self.send_update(&user.uuid, &data).await;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            364,
                            365,
                            366
                        ],
                        "comments": {},
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            373,
                            374,
                            375
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            self.send_update(&user.uuid, &data).await;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            390,
                            391,
                            392
                        ],
                        "comments": {},
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            403,
                            404,
                            405
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            self.send_update(&folder.user_uuid, &data).await;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            422,
                            423,
                            424
                        ],
                        "comments": {},
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            450,
                            451,
                            452,
                            453
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            for uuid in user_uuids {",
                            "                self.send_update(uuid, &data).await;",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            470,
                            471,
                            472
                        ],
                        "comments": {},
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            485,
                            486,
                            487,
                            488
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            for uuid in user_uuids {",
                            "                self.send_update(uuid, &data).await;",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            503,
                            504,
                            505
                        ],
                        "comments": {},
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            511,
                            512,
                            513
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            self.send_update(user_uuid, &data).await;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            528,
                            529,
                            530
                        ],
                        "comments": {},
                        "lines": [
                            "        if *NOTIFICATIONS_DISABLED {",
                            "            return;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            536,
                            537,
                            538
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.enable_websocket() {",
                            "            self.send_update(auth_response_uuid, &data).await;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            562,
                            563,
                            564
                        ],
                        "comments": {},
                        "lines": [
                            "        if !CONFIG.enable_websocket() {",
                            "            return;",
                            "        }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "343": "        // Skip any processing if both WebSockets and Push are not active",
                "363": "        // Skip any processing if both WebSockets and Push are not active",
                "389": "        // Skip any processing if both WebSockets and Push are not active",
                "421": "        // Skip any processing if both WebSockets and Push are not active",
                "469": "        // Skip any processing if both WebSockets and Push are not active",
                "502": "        // Skip any processing if both WebSockets and Push are not active",
                "527": "        // Skip any processing if both WebSockets and Push are not active"
            },
            "comment_deleted_diff": {
                "660": "    // Accept connection, do initial handshake, validate auth token and get the user ID",
                "676": "        // Add a channel to send messages to this client to the map",
                "681": "        // Once the guard goes out of scope, the connection will have been closed and the entry will be deleted from the map",
                "693": "                            // Respond to any pings",
                "697": "                            // We should receive an initial message with the protocol and version, and we will reply to it",
                "706": "                            // Just echo anything else the client sends"
            },
            "comment_modified_diff": {}
        }
    ],
    "Cargo.lock": [],
    "Cargo.toml": [],
    "build.rs": [
        {
            "commit": "8ab200224e9ef0879ccd35080365118b08c43b02",
            "timestamp": "2023-12-09T01:21:14+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Several small fixes for open issues (#4143)\n\n* Fix BWDC when re-run with cleared cache\r\n\r\nUsing the BWDC with a cleared cache caused invited users to be converted\r\nto accepted users.\r\n\r\nThe problem was a wrong check for the `restore` function.\r\n\r\nFixes #4114\r\n\r\n* Remove useless variable\r\n\r\nDuring some refactoring this seems to be overlooked.\r\nThis variable gets filled but isn't used at all afterwards.\r\n\r\nFixes #4105\r\n\r\n* Check some `.git` paths to force a rebuild\r\n\r\nWhen a checked-out repo switches to a specific tag, and that tag does\r\nnot have anything else changed in the files except the tag, it could\r\nhappen that the build process doesn't see any changes, while it could be\r\nthat the version string needs to be different.\r\n\r\nThis commit ensures that if some specific paths are changed within the\r\n.git directory, cargo will be triggered to rebuild.\r\n\r\nFixes #4087\r\n\r\n* Do not delete dir on file delete\r\n\r\nPreviously during a `delete_file` check we also tried to delete the\r\nparent directory and ignored all errors, like not being empty for\r\nexample.\r\n\r\nSince this function is called `delete_file` and does not mention\r\nanything in regards to a directory i have removed that code and it will\r\nnow only delete the file and leave the rest as-is.\r\n\r\nIf this somehow is still needed or wanted, which i do not think we want,\r\nthen we should create a new function.\r\n\r\nFixes #4081\r\n\r\n* Fix healthcheck when using an ENV file\r\n\r\nIf someone is using a `.env` file or configured the `ENV_FILE` variable\r\nto use that as it's configuration, this was missed by the healthcheck.\r\n\r\nSo, `DOMAIN` and `ROCKET_TLS` were not seen, and not used in these cases.\r\n\r\nThis commit fixes this by checking for this file and if it exists, then\r\nit will load those variables first.\r\n\r\nFixes #4112\r\n\r\n* Add missing route\r\n\r\nWhile there was a function and a derive, this endpoint wasn't part of\r\nthe routes. Since Bitwarden does have this endpoint ill add the route\r\ninstead of deleting it.\r\n\r\nFixes #4076\r\nFixes #4144\r\n\r\n* Update crates to update the openssl crate\r\n\r\nBecause of a bug in the openssl-sys crate we pinned the version to an\r\nolder version. This issue has been fixed and was released 2 days ago.\r\n\r\nThis commit updates the openssl crates including others.\r\nThis should also fix the issues with building Vaultwarden using newer\r\nversions of LibreSSL.\r\n\r\nFixes #4051",
            "additions": 5,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            53,
                            54,
                            55
                        ],
                        "comments": {
                            "51": "    // Rerun when these paths are changed.",
                            "52": "    // Someone could have checked-out a tag or specific commit, but no other files changed."
                        },
                        "lines": [
                            "    println!(\"cargo:rerun-if-changed=.git/HEAD\");",
                            "    println!(\"cargo:rerun-if-changed=.git/refs/tags/\");",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "51": "    // Rerun when these paths are changed.",
                "52": "    // Someone could have checked-out a tag or specific commit, but no other files changed."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "3246251f295fd16dba21ec9d32afbbb104bd9c8e",
            "timestamp": "2023-12-09T23:04:33+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix the version string (#4153)\n\nFor some reason still not known, the `.git` directory was not copied\r\ninto the container. I think buildkit (buildx) did this by default before, and\r\nstopped this with newer versions.\r\n\r\nThis PR fixes this by also touching `build.rs` besides `src/main.rs`.\r\n\r\nThis PR also updates Rust to v1.74.1 and some crates, including the\r\nlatest version of Alpine 3.19.\r\n\r\nFixes #4150",
            "additions": 7,
            "deletions": 5,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            22,
                            23,
                            24,
                            25,
                            26
                        ],
                        "comments": {
                            "20": "    // Rerun when these paths are changed.",
                            "21": "    // Someone could have checked-out a tag or specific commit, but no other files changed."
                        },
                        "lines": [
                            "    println!(\"cargo:rerun-if-changed=.git\");",
                            "    println!(\"cargo:rerun-if-changed=.git/HEAD\");",
                            "    println!(\"cargo:rerun-if-changed=.git/index\");",
                            "    println!(\"cargo:rerun-if-changed=.git/refs/tags\");",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "20": "    // Rerun when these paths are changed.",
                "21": "    // Someone could have checked-out a tag or specific commit, but no other files changed."
            },
            "comment_deleted_diff": {
                "51": "    // Rerun when these paths are changed.",
                "52": "    // Someone could have checked-out a tag or specific commit, but no other files changed."
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "b9bdc9b8e227b556e6744c675a259b29d9e277db",
            "timestamp": "2024-02-08T22:16:29+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update Rust, crates and web-vault (#4328)\n\n- Updated Rust to v1.76.0\r\n- Updated crates\r\n- Updated web-vault to v2024.1.2b\r\n- Fixed some Clippy lints\r\n- Moved lint check configuration Cargo.toml\r\n- Fixed issue with Reset Password Enrollment when logged-in via device",
            "additions": 5,
            "deletions": 5,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "52": "///    - `env!(\"GIT_EXACT_TAG\")`",
                            "53": "///    - `env!(\"GIT_LAST_TAG\")`",
                            "54": "///    - `env!(\"GIT_BRANCH\")`",
                            "55": "///    - `env!(\"GIT_REV\")`",
                            "56": "///    - `env!(\"VW_VERSION\")`"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "52": "///    - `env!(\"GIT_EXACT_TAG\")`",
                "53": "///    - `env!(\"GIT_LAST_TAG\")`",
                "54": "///    - `env!(\"GIT_BRANCH\")`",
                "55": "///    - `env!(\"GIT_REV\")`",
                "56": "///    - `env!(\"VW_VERSION\")`"
            },
            "comment_deleted_diff": {
                "52": "///    - env!(\"GIT_EXACT_TAG\")",
                "53": "///    - env!(\"GIT_LAST_TAG\")",
                "54": "///    - env!(\"GIT_BRANCH\")",
                "55": "///    - env!(\"GIT_REV\")",
                "56": "///    - env!(\"VW_VERSION\")"
            },
            "comment_modified_diff": {
                "52": "///    - env!(\"GIT_EXACT_TAG\")",
                "53": "///    - env!(\"GIT_LAST_TAG\")",
                "54": "///    - env!(\"GIT_BRANCH\")",
                "55": "///    - env!(\"GIT_REV\")",
                "56": "///    - env!(\"VW_VERSION\")"
            }
        },
        {
            "commit": "9082e7cebb5b3c507f189f4438fd78ee1df1e6b2",
            "timestamp": "2024-06-20T09:35:52+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Fix some nightly build errors (#4657)",
            "additions": 7,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            22,
                            23,
                            24,
                            25,
                            26
                        ],
                        "comments": {
                            "20": "    // Use check-cfg to let cargo know which cfg's we define,",
                            "21": "    // and avoid warnings when they are used in the code."
                        },
                        "lines": [
                            "    println!(\"cargo::rustc-check-cfg=cfg(sqlite)\");",
                            "    println!(\"cargo::rustc-check-cfg=cfg(mysql)\");",
                            "    println!(\"cargo::rustc-check-cfg=cfg(postgresql)\");",
                            "    println!(\"cargo::rustc-check-cfg=cfg(query_logger)\");",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "20": "    // Use check-cfg to let cargo know which cfg's we define,",
                "21": "    // and avoid warnings when they are used in the code."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "healthcheck.sh": [],
    "ciphers.rs": [
        {
            "commit": "edf7484a70942de387d59c5d5cf849f24180ba66",
            "timestamp": "2024-01-27T02:43:26+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improve file limit handling (#4242)\n\n* Improve file limit handling\r\n\r\n* Oops\r\n\r\n* Update PostgreSQL migration\r\n\r\n* Review comments\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>",
            "additions": 58,
            "deletions": 20,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1064,
                            1065,
                            1066,
                            1067,
                            1068,
                            1069,
                            1070,
                            1071,
                            1072,
                            1073
                        ],
                        "comments": {
                            "1056": "        None => 0,              // Legacy API",
                            "1057": "        Some(a) => a.file_size, // v2 API"
                        },
                        "lines": [
                            "                let already_used = Attachment::size_by_user(user_uuid, &mut conn).await;",
                            "                let left = limit_kb",
                            "                    .checked_mul(1024)",
                            "                    .and_then(|l| l.checked_sub(already_used))",
                            "                    .and_then(|l| l.checked_add(size_adjust));",
                            "",
                            "                let Some(left) = left else {",
                            "                    err!(\"Attachment size overflow\");",
                            "                };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1077,
                            1078
                        ],
                        "comments": {},
                        "lines": [
                            "",
                            "                Some(left)"
                        ]
                    },
                    {
                        "line_numbers": [
                            1086,
                            1087,
                            1088,
                            1089,
                            1090,
                            1091,
                            1092,
                            1093,
                            1094,
                            1095
                        ],
                        "comments": {},
                        "lines": [
                            "                let already_used = Attachment::size_by_org(org_uuid, &mut conn).await;",
                            "                let left = limit_kb",
                            "                    .checked_mul(1024)",
                            "                    .and_then(|l| l.checked_sub(already_used))",
                            "                    .and_then(|l| l.checked_add(size_adjust));",
                            "",
                            "                let Some(left) = left else {",
                            "                    err!(\"Attachment size overflow\");",
                            "                };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1099,
                            1100
                        ],
                        "comments": {},
                        "lines": [
                            "",
                            "                Some(left)"
                        ]
                    },
                    {
                        "line_numbers": [
                            1109
                        ],
                        "comments": {},
                        "lines": [
                            "        if size > size_limit {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1126,
                            1127,
                            1128,
                            1129,
                            1130,
                            1131
                        ],
                        "comments": {},
                        "lines": [
                            "        let Some(min_size) = attachment.file_size.checked_add(LEEWAY) else {",
                            "            err!(\"Invalid attachment size min\")",
                            "        };",
                            "        let Some(max_size) = attachment.file_size.checked_sub(LEEWAY) else {",
                            "            err!(\"Invalid attachment size max\")",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            1146
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1159
                        ],
                        "comments": {
                            "1147": "        // SAFETY: This value is only stored in the database and is not used to access the file system.",
                            "1148": "        // As a result, the conditions specified by Rocket [0] are met and this is safe to use.",
                            "1149": "        // [0]: https://docs.rs/rocket/latest/rocket/fs/struct.FileName.html#-danger-"
                        },
                        "lines": [
                            "            Attachment::new(file_id.clone(), String::from(cipher_uuid), encrypted_filename.unwrap(), size, data.key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            1163,
                            1164,
                            1165,
                            1166
                        ],
                        "comments": {},
                        "lines": [
                            "    let folder_path = tokio::fs::canonicalize(&CONFIG.attachments_folder()).await?.join(cipher_uuid);",
                            "    let file_path = folder_path.join(&file_id);",
                            "    tokio::fs::create_dir_all(&folder_path).await?;",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1056": "        None => 0,              // Legacy API",
                "1057": "        Some(a) => a.file_size, // v2 API",
                "1125": "        const LEEWAY: i64 = 1024 * 1024; // 1 MiB",
                "1147": "        // SAFETY: This value is only stored in the database and is not used to access the file system.",
                "1148": "        // As a result, the conditions specified by Rocket [0] are met and this is safe to use.",
                "1149": "        // [0]: https://docs.rs/rocket/latest/rocket/fs/struct.FileName.html#-danger-"
            },
            "comment_deleted_diff": {
                "1043": "        None => 0,                         // Legacy API",
                "1044": "        Some(a) => i64::from(a.file_size), // v2 API",
                "1099": "        const LEEWAY: i32 = 1024 * 1024; // 1 MiB"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 180,
            "deletions": 216,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            968
                        ],
                        "comments": {
                            "953": "    admin_request: Option<bool>, // true when attaching from an org vault view"
                        },
                        "lines": [
                            "    data: Json<AttachmentRequestData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            981,
                            982
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: AttachmentRequestData = data.into_inner();",
                            "    let file_size = data.file_size.into_i64()?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            989
                        ],
                        "comments": {},
                        "lines": [
                            "        Attachment::new(attachment_id.clone(), cipher.uuid.clone(), data.file_name, file_size, Some(data.key));"
                        ]
                    },
                    {
                        "line_numbers": [
                            993,
                            994,
                            995
                        ],
                        "comments": {},
                        "lines": [
                            "    let response_key = match data.admin_request {",
                            "        Some(b) if b => \"cipherMiniResponse\",",
                            "        _ => \"cipherResponse\","
                        ]
                    },
                    {
                        "line_numbers": [
                            999,
                            1000,
                            1001,
                            1002
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"attachment-fileUpload\",",
                            "        \"attachmentId\": attachment_id,",
                            "        \"url\": url,",
                            "        \"fileUploadType\": FileUploadType::Direct as i32,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1337
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_cipher_selected(data: Json<Value>, headers: Headers, conn: DbConn, nt: Notify<'_>) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1342
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_cipher_selected_post(data: Json<Value>, headers: Headers, conn: DbConn, nt: Notify<'_>) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1347
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_cipher_selected_put(data: Json<Value>, headers: Headers, conn: DbConn, nt: Notify<'_>) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1353
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1363
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1373
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1392
                        ],
                        "comments": {},
                        "lines": [
                            "async fn restore_cipher_selected(data: Json<Value>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1397
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1399,
                            1400
                        ],
                        "comments": {},
                        "lines": [
                            "    folder_id: Option<String>,",
                            "    ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1405
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<MoveCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1410
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1413
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(ref folder_id) = data.folder_id {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1424
                        ],
                        "comments": {},
                        "lines": [
                            "    for uuid in data.ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1435
                        ],
                        "comments": {},
                        "lines": [
                            "        cipher.move_to_folder(data.folder_id.clone(), &user_uuid, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1453
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<MoveCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1470
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1475
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1583
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1589
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: Value = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1648
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1653
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: Value = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1672,
                            1673,
                            1674
                        ],
                        "comments": {},
                        "lines": [
                            "      \"data\": ciphers,",
                            "      \"object\": \"list\",",
                            "      \"continuationToken\": null"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            205
                        ],
                        "comments": {
                            "201": "#[derive(Deserialize, Debug)]",
                            "202": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "    pub Id: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            207
                        ],
                        "comments": {},
                        "lines": [
                            "    FolderId: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            209
                        ],
                        "comments": {},
                        "lines": [
                            "    pub OrganizationId: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            211
                        ],
                        "comments": {},
                        "lines": [
                            "    Key: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            219,
                            220,
                            221,
                            222
                        ],
                        "comments": {},
                        "lines": [
                            "    pub Type: i32,",
                            "    pub Name: String,",
                            "    pub Notes: Option<String>,",
                            "    Fields: Option<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            225,
                            226,
                            227,
                            228
                        ],
                        "comments": {},
                        "lines": [
                            "    Login: Option<Value>,",
                            "    SecureNote: Option<Value>,",
                            "    Card: Option<Value>,",
                            "    Identity: Option<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            230,
                            231
                        ],
                        "comments": {},
                        "lines": [
                            "    Favorite: Option<bool>,",
                            "    Reprompt: Option<i32>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            233
                        ],
                        "comments": {},
                        "lines": [
                            "    PasswordHistory: Option<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            237,
                            238,
                            239
                        ],
                        "comments": {},
                        "lines": [
                            "    #[serde(rename = \"Attachments\")]",
                            "    _Attachments: Option<Value>,",
                            "    Attachments2: Option<HashMap<String, Attachments2Data>>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            247
                        ],
                        "comments": {},
                        "lines": [
                            "    LastKnownRevisionDate: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            253,
                            254
                        ],
                        "comments": {},
                        "lines": [
                            "    FolderId: Option<String>,",
                            "    Favorite: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            260,
                            261
                        ],
                        "comments": {},
                        "lines": [
                            "    FileName: String,",
                            "    Key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            266,
                            267,
                            268,
                            269,
                            270,
                            271
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_ciphers_admin(",
                            "    data: JsonUpcase<ShareCipherData>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            280
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<ShareCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            285
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut data: ShareCipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            289
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.Cipher.OrganizationId.is_some() && data.CollectionIds.is_empty() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            296
                        ],
                        "comments": {},
                        "lines": [
                            "    enforce_personal_ownership_policy(Some(&data.Cipher), &headers, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            298
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut cipher = Cipher::new(data.Cipher.Type, data.Cipher.Name.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            308
                        ],
                        "comments": {},
                        "lines": [
                            "    data.Cipher.LastKnownRevisionDate = None;"
                        ]
                    },
                    {
                        "line_numbers": [
                            315,
                            316
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_ciphers(data: JsonUpcase<CipherData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> JsonResult {",
                            "    let mut data: CipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            322
                        ],
                        "comments": {},
                        "lines": [
                            "    data.LastKnownRevisionDate = None;"
                        ]
                    },
                    {
                        "line_numbers": [
                            324
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut cipher = Cipher::new(data.Type, data.Name.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            342
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.is_none() || data.unwrap().OrganizationId.is_none() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            366
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(dt) = data.LastKnownRevisionDate {"
                        ]
                    },
                    {
                        "line_numbers": [
                            378
                        ],
                        "comments": {},
                        "lines": [
                            "    if cipher.organization_uuid.is_some() && cipher.organization_uuid != data.OrganizationId {"
                        ]
                    },
                    {
                        "line_numbers": [
                            382
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(note) = &data.Notes {"
                        ]
                    },
                    {
                        "line_numbers": [
                            389
                        ],
                        "comments": {},
                        "lines": [
                            "    let transfer_cipher = cipher.organization_uuid.is_none() && data.OrganizationId.is_some();"
                        ]
                    },
                    {
                        "line_numbers": [
                            391
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(org_id) = data.OrganizationId {"
                        ]
                    },
                    {
                        "line_numbers": [
                            415
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(ref folder_id) = data.FolderId {"
                        ]
                    },
                    {
                        "line_numbers": [
                            427
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(attachments) = data.Attachments2 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            448,
                            449
                        ],
                        "comments": {},
                        "lines": [
                            "            saved_att.akey = Some(attachment.Key);",
                            "            saved_att.file_name = attachment.FileName;"
                        ]
                    },
                    {
                        "line_numbers": [
                            463
                        ],
                        "comments": {},
                        "lines": [
                            "                f.as_object_mut().unwrap().remove(\"Response\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            469,
                            470,
                            471,
                            472,
                            473
                        ],
                        "comments": {},
                        "lines": [
                            "    let type_data_opt = match data.Type {",
                            "        1 => data.Login,",
                            "        2 => data.SecureNote,",
                            "        3 => data.Card,",
                            "        4 => data.Identity,"
                        ]
                    },
                    {
                        "line_numbers": [
                            480
                        ],
                        "comments": {},
                        "lines": [
                            "            data.as_object_mut().unwrap().remove(\"Response\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            482,
                            483
                        ],
                        "comments": {},
                        "lines": [
                            "            if data[\"Uris\"].is_array() {",
                            "                data[\"Uris\"] = _clean_cipher_data(data[\"Uris\"].clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            490,
                            491,
                            492,
                            493
                        ],
                        "comments": {},
                        "lines": [
                            "    cipher.key = data.Key;",
                            "    cipher.name = data.Name;",
                            "    cipher.notes = data.Notes;",
                            "    cipher.fields = data.Fields.map(|f| _clean_cipher_data(f).to_string());"
                        ]
                    },
                    {
                        "line_numbers": [
                            495,
                            496
                        ],
                        "comments": {},
                        "lines": [
                            "    cipher.password_history = data.PasswordHistory.map(|f| f.to_string());",
                            "    cipher.reprompt = data.Reprompt;"
                        ]
                    },
                    {
                        "line_numbers": [
                            499,
                            500
                        ],
                        "comments": {},
                        "lines": [
                            "    cipher.move_to_folder(data.FolderId, &headers.user.uuid, conn).await?;",
                            "    cipher.set_favorite(data.Favorite, &headers.user.uuid, conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            538,
                            539,
                            540
                        ],
                        "comments": {},
                        "lines": [
                            "    Ciphers: Vec<CipherData>,",
                            "    Folders: Vec<FolderData>,",
                            "    FolderRelationships: Vec<RelationsData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            547
                        ],
                        "comments": {},
                        "lines": [
                            "    Key: usize,"
                        ]
                    },
                    {
                        "line_numbers": [
                            549
                        ],
                        "comments": {},
                        "lines": [
                            "    Value: usize,"
                        ]
                    },
                    {
                        "line_numbers": [
                            554
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<ImportData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            561
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ImportData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            567
                        ],
                        "comments": {},
                        "lines": [
                            "    Cipher::validate_notes(&data.Ciphers)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            571,
                            572
                        ],
                        "comments": {},
                        "lines": [
                            "    for folder in data.Folders.into_iter() {",
                            "        let mut new_folder = Folder::new(headers.user.uuid.clone(), folder.Name);"
                        ]
                    },
                    {
                        "line_numbers": [
                            581,
                            582
                        ],
                        "comments": {},
                        "lines": [
                            "    for relation in data.FolderRelationships {",
                            "        relations_map.insert(relation.Key, relation.Value);"
                        ]
                    },
                    {
                        "line_numbers": [
                            586
                        ],
                        "comments": {},
                        "lines": [
                            "    for (index, mut cipher_data) in data.Ciphers.into_iter().enumerate() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            588
                        ],
                        "comments": {},
                        "lines": [
                            "        cipher_data.FolderId = folder_uuid;"
                        ]
                    },
                    {
                        "line_numbers": [
                            590
                        ],
                        "comments": {},
                        "lines": [
                            "        let mut cipher = Cipher::new(cipher_data.Type, cipher_data.Name.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            605
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            616
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            625,
                            626,
                            627,
                            628,
                            629,
                            630,
                            631
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_cipher(",
                            "    uuid: &str,",
                            "    data: JsonUpcase<CipherData>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            638
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            643
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: CipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            665,
                            666,
                            667,
                            668,
                            669,
                            670
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_cipher_partial(",
                            "    uuid: &str,",
                            "    data: JsonUpcase<PartialCipherData>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            678
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<PartialCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            682
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PartialCipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            689
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(ref folder_id) = data.FolderId {"
                        ]
                    },
                    {
                        "line_numbers": [
                            701
                        ],
                        "comments": {},
                        "lines": [
                            "    cipher.move_to_folder(data.FolderId.clone(), &headers.user.uuid, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            703
                        ],
                        "comments": {},
                        "lines": [
                            "    cipher.set_favorite(Some(data.Favorite), &headers.user.uuid, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            711
                        ],
                        "comments": {},
                        "lines": [
                            "    CollectionIds: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            717
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CollectionsAdminData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            728
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CollectionsAdminData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            739
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CollectionsAdminData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            750
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<CollectionsAdminData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            755
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: CollectionsAdminData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            766
                        ],
                        "comments": {},
                        "lines": [
                            "    let posted_collections: HashSet<String> = data.CollectionIds.iter().cloned().collect();"
                        ]
                    },
                    {
                        "line_numbers": [
                            816,
                            817
                        ],
                        "comments": {},
                        "lines": [
                            "    Cipher: CipherData,",
                            "    CollectionIds: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            823
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<ShareCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            828
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ShareCipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            836
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<ShareCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            841
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ShareCipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            849,
                            850
                        ],
                        "comments": {},
                        "lines": [
                            "    Ciphers: Vec<CipherData>,",
                            "    CollectionIds: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            855
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<ShareSelectedCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            860
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut data: ShareSelectedCipherData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            862
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.Ciphers.is_empty() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            866
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.CollectionIds.is_empty() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            870,
                            871
                        ],
                        "comments": {},
                        "lines": [
                            "    for cipher in data.Ciphers.iter() {",
                            "        if cipher.Id.is_none() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            876
                        ],
                        "comments": {},
                        "lines": [
                            "    while let Some(cipher) = data.Ciphers.pop() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            878,
                            879
                        ],
                        "comments": {},
                        "lines": [
                            "            Cipher: cipher,",
                            "            CollectionIds: data.CollectionIds.clone(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            882
                        ],
                        "comments": {},
                        "lines": [
                            "        match shared_cipher_data.Cipher.Id.take() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            911,
                            912
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(organization_uuid) = &data.Cipher.OrganizationId {",
                            "        for uuid in &data.CollectionIds {"
                        ]
                    },
                    {
                        "line_numbers": [
                            928
                        ],
                        "comments": {},
                        "lines": [
                            "    let ut = if data.Cipher.LastKnownRevisionDate.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            934
                        ],
                        "comments": {},
                        "lines": [
                            "    update_cipher_from_data(&mut cipher, data.Cipher, headers, Some(shared_to_collections), conn, nt, ut).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            966,
                            967,
                            968,
                            969
                        ],
                        "comments": {},
                        "lines": [
                            "    Key: String,",
                            "    FileName: String,",
                            "    FileSize: NumberOrString,",
                            "    AdminRequest: Option<bool>, // true when attaching from an org vault view"
                        ]
                    },
                    {
                        "line_numbers": [
                            984
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<AttachmentRequestData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            997,
                            998
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: AttachmentRequestData = data.into_inner().data;",
                            "    let file_size = data.FileSize.into_i64()?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1005
                        ],
                        "comments": {},
                        "lines": [
                            "        Attachment::new(attachment_id.clone(), cipher.uuid.clone(), data.FileName, file_size, Some(data.Key));"
                        ]
                    },
                    {
                        "line_numbers": [
                            1009,
                            1010,
                            1011
                        ],
                        "comments": {},
                        "lines": [
                            "    let response_key = match data.AdminRequest {",
                            "        Some(b) if b => \"CipherMiniResponse\",",
                            "        _ => \"CipherResponse\","
                        ]
                    },
                    {
                        "line_numbers": [
                            1015,
                            1016,
                            1017,
                            1018
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"attachment-fileUpload\",",
                            "        \"AttachmentId\": attachment_id,",
                            "        \"Url\": url,",
                            "        \"FileUploadType\": FileUploadType::Direct as i32,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1353,
                            1354,
                            1355,
                            1356,
                            1357,
                            1358
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_cipher_selected(",
                            "    data: JsonUpcase<Value>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1363,
                            1364,
                            1365,
                            1366,
                            1367,
                            1368
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_cipher_selected_post(",
                            "    data: JsonUpcase<Value>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1373,
                            1374,
                            1375,
                            1376,
                            1377,
                            1378
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_cipher_selected_put(",
                            "    data: JsonUpcase<Value>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1384
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1394
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1404
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1423,
                            1424,
                            1425,
                            1426,
                            1427,
                            1428
                        ],
                        "comments": {},
                        "lines": [
                            "async fn restore_cipher_selected(",
                            "    data: JsonUpcase<Value>,",
                            "    headers: Headers,",
                            "    mut conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1435,
                            1436
                        ],
                        "comments": {},
                        "lines": [
                            "    FolderId: Option<String>,",
                            "    Ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1441
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<MoveCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1446
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1449
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(ref folder_id) = data.FolderId {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1460
                        ],
                        "comments": {},
                        "lines": [
                            "    for uuid in data.Ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1471
                        ],
                        "comments": {},
                        "lines": [
                            "        cipher.move_to_folder(data.FolderId.clone(), &user_uuid, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1489
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<MoveCipherData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1506
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1511
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1619
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1625
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: Value = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1684
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1689
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: Value = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1708,
                            1709,
                            1710
                        ],
                        "comments": {},
                        "lines": [
                            "      \"Data\": ciphers,",
                            "      \"Object\": \"list\",",
                            "      \"ContinuationToken\": null"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "953": "    admin_request: Option<bool>, // true when attaching from an org vault view"
            },
            "comment_deleted_diff": {
                "969": "    AdminRequest: Option<bool>, // true when attaching from an org vault view"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "fda77afc2a802f6e7607c19ad12b5f93520a688e",
            "timestamp": "2024-07-04T20:28:19+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "add group support for Cipher::get_collections() (#4592)\n\n* add group support for Cipher::get_collections()\r\n\r\njoin group infos assigned to a collection to check\r\nwhether user has been given access to all collections via any group\r\nor they have access to a specific collection via any group membership\r\n\r\n* fix Collection::is_writable_by_user()\r\n\r\nprevent side effects if groups are disabled\r\n\r\n* differentiate the /collection endpoints\r\n\r\n* return cipherDetails on post_collections_update()\r\n\r\n* add collections_v2 endpoint",
            "additions": 92,
            "deletions": 8,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            728,
                            729,
                            730,
                            731,
                            732,
                            733
                        ],
                        "comments": {
                            "727": "    Ok(Json(json!({ // AttachmentUploadDataResponseModel"
                        },
                        "lines": [
                            "        \"object\": \"optionalCipherDetails\",",
                            "        \"unavailable\": false,",
                            "        \"cipher\": *cipher_details",
                            "    })))",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            741,
                            742
                        ],
                        "comments": {},
                        "lines": [
                            ") -> JsonResult {",
                            "    post_collections_update(uuid, data, headers, conn, nt).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            750
                        ],
                        "comments": {},
                        "lines": [
                            "    mut conn: DbConn,"
                        ]
                    },
                    {
                        "line_numbers": [
                            752,
                            753,
                            754,
                            755,
                            756,
                            757,
                            758,
                            759,
                            760,
                            761,
                            762,
                            763,
                            764,
                            765,
                            766,
                            767,
                            768,
                            769,
                            770,
                            771,
                            772,
                            773
                        ],
                        "comments": {},
                        "lines": [
                            ") -> JsonResult {",
                            "    let data: CollectionsAdminData = data.into_inner();",
                            "",
                            "    let cipher = match Cipher::find_by_uuid(uuid, &mut conn).await {",
                            "        Some(cipher) => cipher,",
                            "        None => err!(\"Cipher doesn't exist\"),",
                            "    };",
                            "",
                            "    if !cipher.is_write_accessible_to_user(&headers.user.uuid, &mut conn).await {",
                            "        err!(\"Cipher is not write accessible\")",
                            "    }",
                            "",
                            "    let posted_collections = HashSet::<String>::from_iter(data.collection_ids);",
                            "    let current_collections =",
                            "        HashSet::<String>::from_iter(cipher.get_collections(headers.user.uuid.clone(), &mut conn).await);",
                            "",
                            "    for collection in posted_collections.symmetric_difference(&current_collections) {",
                            "        match Collection::find_by_uuid(collection, &mut conn).await {",
                            "            None => err!(\"Invalid collection ID provided\"),",
                            "            Some(collection) => {",
                            "                if collection.is_writable_by_user(&headers.user.uuid, &mut conn).await {",
                            "                    if posted_collections.contains(&collection.uuid) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            775,
                            776
                        ],
                        "comments": {
                            "774": "                        // Add to collection"
                        },
                        "lines": [
                            "                        CollectionCipher::save(&cipher.uuid, &collection.uuid, &mut conn).await?;",
                            "                    } else {"
                        ]
                    },
                    {
                        "line_numbers": [
                            778,
                            779,
                            780,
                            781,
                            782,
                            783,
                            784,
                            785,
                            786,
                            787,
                            788,
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            796,
                            797,
                            798,
                            799,
                            800,
                            801,
                            802,
                            803,
                            804,
                            805,
                            806,
                            807,
                            808
                        ],
                        "comments": {
                            "777": "                        // Remove from collection"
                        },
                        "lines": [
                            "                        CollectionCipher::delete(&cipher.uuid, &collection.uuid, &mut conn).await?;",
                            "                    }",
                            "                } else {",
                            "                    err!(\"No rights to modify the collection\")",
                            "                }",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    nt.send_cipher_update(",
                            "        UpdateType::SyncCipherUpdate,",
                            "        &cipher,",
                            "        &cipher.update_users_revision(&mut conn).await,",
                            "        &headers.device.uuid,",
                            "        Some(Vec::from_iter(posted_collections)),",
                            "        &mut conn,",
                            "    )",
                            "    .await;",
                            "",
                            "    log_event(",
                            "        EventType::CipherUpdatedCollections as i32,",
                            "        &cipher.uuid,",
                            "        &cipher.organization_uuid.clone().unwrap(),",
                            "        &headers.user.uuid,",
                            "        headers.device.atype,",
                            "        &headers.ip.ip,",
                            "        &mut conn,",
                            "    )",
                            "    .await;",
                            "",
                            "    Ok(Json(cipher.to_json(&headers.host, &headers.user.uuid, None, CipherSyncType::User, &mut conn).await))"
                        ]
                    },
                    {
                        "line_numbers": [
                            841,
                            842,
                            843
                        ],
                        "comments": {},
                        "lines": [
                            "    let posted_collections = HashSet::<String>::from_iter(data.collection_ids);",
                            "    let current_collections =",
                            "        HashSet::<String>::from_iter(cipher.get_admin_collections(headers.user.uuid.clone(), &mut conn).await);"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "727": "    Ok(Json(json!({ // AttachmentUploadDataResponseModel",
                "774": "                        // Add to collection",
                "777": "                        // Remove from collection"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "7c8ba0c2324dec1159d2fc2ba2e15b498899eb40",
            "timestamp": "2024-07-30T11:50:05+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "fix issue with adding ciphers to organizations on native ios app (#4800)\n\n* add organizationID alias for native ios\r\n\r\n* add reverse sanity check",
            "additions": 5,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            291,
                            292,
                            293
                        ],
                        "comments": {
                            "290": "    // reverse sanity check to prevent corruptions"
                        },
                        "lines": [
                            "    if !data.collection_ids.is_empty() && data.cipher.organization_id.is_none() {",
                            "        err!(\"The client has not provided an organization id!\");",
                            "    }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "290": "    // reverse sanity check to prevent corruptions"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "aaab7f96404726fe8791668d15c5e654138da5d6",
            "timestamp": "2024-08-21T21:54:13+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "remove overzealous sanity check (#4879)\n\nwhen cloning an item from an organization to the personal vault\r\nthe client sends the collection id of the cloned item",
            "additions": 0,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "290": "    // reverse sanity check to prevent corruptions"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "2393c3f3c08f451a04643fd9fed5027f491dc12d",
            "timestamp": "2024-11-15T18:38:16+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Support SSH keys on desktop 2024.12 (#5187)\n\n* Support SSH keys on desktop 2024.12\n\n* Document flags in .env.template\n\n* Validate key rotation contents",
            "additions": 23,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            120,
                            121,
                            122,
                            123,
                            124,
                            125,
                            126,
                            127,
                            128
                        ],
                        "comments": {
                            "119": "    // Filter out SSH keys if the client version is less than 2024.12.0"
                        },
                        "lines": [
                            "    let show_ssh_keys = if let Some(client_version) = client_version {",
                            "        let ver_match = semver::VersionReq::parse(\">=2024.12.0\").unwrap();",
                            "        ver_match.matches(&client_version.0)",
                            "    } else {",
                            "        false",
                            "    };",
                            "    if !show_ssh_keys {",
                            "        ciphers.retain(|c| c.atype != 5);",
                            "    }"
                        ]
                    },
                    {
                        "line_numbers": [
                            236,
                            237
                        ],
                        "comments": {},
                        "lines": [
                            "    Identity = 4,",
                            "    SshKey = 5"
                        ]
                    },
                    {
                        "line_numbers": [
                            249
                        ],
                        "comments": {},
                        "lines": [
                            "    ssh_key: Option<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            491
                        ],
                        "comments": {},
                        "lines": [
                            "        5 => data.ssh_key,"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "119": "    // Filter out SSH keys if the client version is less than 2024.12.0"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "cdfdc6ff4f61a7495cd70609c0d9098ff10b55a4",
            "timestamp": "2024-11-17T21:33:23+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix Org Import duplicate collections (#5200)\n\nThis fixes an issue with collections be duplicated same as was an issue with folders.\nAlso made some optimizations by using HashSet where possible and device the Vec/Hash capacity.\nAnd instead of passing objects only use the UUID which was the only value we needed.\n\nAlso found an issue with importing a personal export via the Org import where folders are used.\nSince Org's do not use folder we needed to clear those out, same as Bitwarden does.\n\nFixes #5193\n\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 5,
            "deletions": 5,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "604": "    // Ciphers can only be in one folder at the same time"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "604": "    // Ciphers can only be in one folder at the same time"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "emergency_access.rs": [
        {
            "commit": "e9aa5a545eda43e2e868f76115a3cc9c13d4cc30",
            "timestamp": "2024-04-27T22:16:05+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "fix emergency access invites (#4337)\n\n* fix emergency access invites with no mail\r\n\r\nwhen mail is disabled instead of accepting emergency access for all\r\ninvited users automatically, we only accept if the user already exists\r\n\r\non registration of a new account any open emergency access invitations\r\nwill be accepted, if mail is disabled\r\n\r\nalso prevent invited emergency access contacts to register if emergency\r\naccess is disabled (this is only relevant for when mail is enabled, if\r\nmail is disabled they should have an Invitation entry)\r\n\r\n* delete emergency access invitations\r\n\r\nif an invited user is deleted in the /admin panel their emergency\r\naccess invitation will remain in the database which causes\r\nthe to_json_grantee_details fn to panic\r\n\r\n* improve missing emergency access grantees\r\n\r\ninstead of returning an empty emergency access contact the entry should\r\nnot be added to the list. also the error handling can be improved a bit.",
            "additions": 20,
            "deletions": 49,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            266
                        ],
                        "comments": {
                            "265": "        // if mail is not enabled immediately accept the invitation for existing users"
                        },
                        "lines": [
                            "        new_emergency_access.accept_invite(&grantee_user.uuid, &email, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            310
                        ],
                        "comments": {},
                        "lines": [
                            "    } else if !grantee_user.password_hash.is_empty() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            312,
                            313,
                            314,
                            315
                        ],
                        "comments": {
                            "311": "        // accept the invitation for existing user"
                        },
                        "lines": [
                            "        emergency_access.accept_invite(&grantee_user.uuid, &email, &mut conn).await?;",
                            "    } else if CONFIG.invitations_allowed() && Invitation::find_by_mail(&email, &mut conn).await.is_none() {",
                            "        let invitation = Invitation::new(&email);",
                            "        invitation.save(&mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            364
                        ],
                        "comments": {},
                        "lines": [
                            "        emergency_access.accept_invite(&grantee_user.uuid, &grantee_user.email, &mut conn).await?;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "265": "        // if mail is not enabled immediately accept the invitation for existing users",
                "311": "        // accept the invitation for existing user"
            },
            "comment_deleted_diff": {
                "260": "        // Automatically mark user as accepted if no email invites",
                "317": "        // Automatically mark user as accepted if no email invites"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "e9aa5a545eda43e2e868f76115a3cc9c13d4cc30",
            "timestamp": "2024-04-27T22:16:05+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "fix emergency access invites (#4337)\n\n* fix emergency access invites with no mail\r\n\r\nwhen mail is disabled instead of accepting emergency access for all\r\ninvited users automatically, we only accept if the user already exists\r\n\r\non registration of a new account any open emergency access invitations\r\nwill be accepted, if mail is disabled\r\n\r\nalso prevent invited emergency access contacts to register if emergency\r\naccess is disabled (this is only relevant for when mail is enabled, if\r\nmail is disabled they should have an Invitation entry)\r\n\r\n* delete emergency access invitations\r\n\r\nif an invited user is deleted in the /admin panel their emergency\r\naccess invitation will remain in the database which causes\r\nthe to_json_grantee_details fn to panic\r\n\r\n* improve missing emergency access grantees\r\n\r\ninstead of returning an empty emergency access contact the entry should\r\nnot be added to the list. also the error handling can be improved a bit.",
            "additions": 47,
            "deletions": 9,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            92,
                            93,
                            94,
                            95
                        ],
                        "comments": {
                            "91": "                    // remove outstanding invitations which should not exist"
                        },
                        "lines": [
                            "                    let _ = Self::delete_all_by_grantee_email(email, conn).await;",
                            "                    return None;",
                            "                }",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            97
                        ],
                        "comments": {},
                        "lines": [
                            "            return None;"
                        ]
                    },
                    {
                        "line_numbers": [
                            100
                        ],
                        "comments": {},
                        "lines": [
                            "        Some(json!({"
                        ]
                    },
                    {
                        "line_numbers": [
                            105,
                            106,
                            107
                        ],
                        "comments": {},
                        "lines": [
                            "            \"GranteeId\": grantee_user.uuid,",
                            "            \"Email\": grantee_user.email,",
                            "            \"Name\": grantee_user.name,"
                        ]
                    },
                    {
                        "line_numbers": [
                            109
                        ],
                        "comments": {},
                        "lines": [
                            "        }))"
                        ]
                    },
                    {
                        "line_numbers": [
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230
                        ],
                        "comments": {},
                        "lines": [
                            "    pub async fn delete_all_by_grantee_email(grantee_email: &str, conn: &mut DbConn) -> EmptyResult {",
                            "        for ea in Self::find_all_invited_by_grantee_email(grantee_email, conn).await {",
                            "            ea.delete(conn).await?;",
                            "        }",
                            "        Ok(())",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            302,
                            303,
                            304,
                            305,
                            306,
                            307,
                            308,
                            309,
                            310
                        ],
                        "comments": {},
                        "lines": [
                            "    pub async fn find_all_invited_by_grantee_email(grantee_email: &str, conn: &mut DbConn) -> Vec<Self> {",
                            "        db_run! { conn: {",
                            "            emergency_access::table",
                            "                .filter(emergency_access::email.eq(grantee_email))",
                            "                .filter(emergency_access::status.eq(EmergencyAccessStatus::Invited as i32))",
                            "                .load::<EmergencyAccessDb>(conn).expect(\"Error loading emergency_access\").from_db()",
                            "        }}",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            318,
                            319,
                            320,
                            321,
                            322,
                            323,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330,
                            331,
                            332
                        ],
                        "comments": {},
                        "lines": [
                            "",
                            "    pub async fn accept_invite(&mut self, grantee_uuid: &str, grantee_email: &str, conn: &mut DbConn) -> EmptyResult {",
                            "        if self.email.is_none() || self.email.as_ref().unwrap() != grantee_email {",
                            "            err!(\"User email does not match invite.\");",
                            "        }",
                            "",
                            "        if self.status == EmergencyAccessStatus::Accepted as i32 {",
                            "            err!(\"Emergency contact already accepted.\");",
                            "        }",
                            "",
                            "        self.status = EmergencyAccessStatus::Accepted as i32;",
                            "        self.grantee_uuid = Some(String::from(grantee_uuid));",
                            "        self.email = None;",
                            "        self.save(conn).await",
                            "    }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "91": "                    // remove outstanding invitations which should not exist"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "d04b94b77d95a9968f61f71969f65aaaa8a496d6",
            "timestamp": "2024-07-08T23:39:22+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Some fixes for emergency access (#4715)\n\n- Add missing `Headers` parameter for some functions\r\n   This allowed any request from allowing these endpoints by not validating the user correctly.\r\n - Changed the functions to retreive the emergency access record by\r\n   using the user uuid which calls the endpoint, instead of validating afterwards.\r\n   This is more secure and prevents the need of an if check.",
            "additions": 90,
            "deletions": 77,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            359,
                            360,
                            361,
                            362,
                            363
                        ],
                        "comments": {
                            "357": "    // We need to search for the uuid in combination with the email, since we do not yet store the uuid of the grantee in the database.",
                            "358": "    // The uuid of the grantee gets stored once accepted."
                        },
                        "lines": [
                            "    let mut emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantee_email(emer_id, &headers.user.email, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            406,
                            407,
                            408,
                            409,
                            410
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantor_uuid(emer_id, &confirming_user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            453,
                            454,
                            455,
                            456,
                            457
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantee_uuid(emer_id, &initiating_user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            459
                        ],
                        "comments": {},
                        "lines": [
                            "    if emergency_access.status != EmergencyAccessStatus::Confirmed as i32 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            491,
                            492,
                            493,
                            494,
                            495
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantor_uuid(emer_id, &headers.user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            497
                        ],
                        "comments": {},
                        "lines": [
                            "    if emergency_access.status != EmergencyAccessStatus::RecoveryInitiated as i32 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            528,
                            529,
                            530,
                            531,
                            532
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantor_uuid(emer_id, &headers.user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            534,
                            535
                        ],
                        "comments": {},
                        "lines": [
                            "    if emergency_access.status != EmergencyAccessStatus::RecoveryInitiated as i32",
                            "        && emergency_access.status != EmergencyAccessStatus::RecoveryApproved as i32"
                        ]
                    },
                    {
                        "line_numbers": [
                            550
                        ],
                        "comments": {},
                        "lines": [
                            "            mail::send_emergency_access_recovery_rejected(&grantee_user.email, &headers.user.name).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            566,
                            567,
                            568,
                            569,
                            570
                        ],
                        "comments": {},
                        "lines": [
                            "    let emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantee_uuid(emer_id, &headers.user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            605,
                            606,
                            607,
                            608,
                            609
                        ],
                        "comments": {},
                        "lines": [
                            "    let emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantee_uuid(emer_id, &requesting_user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            653,
                            654,
                            655,
                            656,
                            657
                        ],
                        "comments": {},
                        "lines": [
                            "    let emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantee_uuid(emer_id, &requesting_user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            689,
                            690,
                            691,
                            692,
                            693
                        ],
                        "comments": {},
                        "lines": [
                            "    let emergency_access =",
                            "        match EmergencyAccess::find_by_uuid_and_grantee_uuid(emer_id, &requesting_user.uuid, &mut conn).await {",
                            "            Some(emer) => emer,",
                            "            None => err!(\"Emergency access not valid.\"),",
                            "        };"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "357": "    // We need to search for the uuid in combination with the email, since we do not yet store the uuid of the grantee in the database.",
                "358": "    // The uuid of the grantee gets stored once accepted."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "cd195ff24339056bc5246bd5ee9106379e7fb6e6",
            "timestamp": "2024-10-11T18:58:25+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix `--version` from failing without config (#5055)\n\n* Fix `--version` from failing without config\r\n\r\nSince we added the option to show the web-vault version also when running `--version` this causes the config to always be validated.\r\nWhile this is not very bad in general, it could cause the command to quit during the config validation, and not show the version, but also errors.\r\nThis is probably not very useful for this specific command, unlike the `--backup` for example.\r\n\r\nTo fix this, and preventing the config from being validated, i added an AtomicBool to check if we need to validate the config on first load.\r\nThis prevents errors, and will just show the Vaultwarden version, and if possible the web-vault version too.\r\n\r\nFixes #5046\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Adjusted the code bsaed upon review\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 1,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "29": "// Local methods"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "29": "// Local methods"
            },
            "comment_deleted_diff": {
                "29": "/// Local methods"
            },
            "comment_modified_diff": {
                "29": "/// Local methods"
            }
        }
    ],
    "organization.rs": [
        {
            "commit": "a641b48884bd66fc8cac4476a69d7f93bf48f2c4",
            "timestamp": "2024-01-01T15:46:03+01:00",
            "author": "Matlink",
            "commit_message": "Fix #3413: push to users accessing the collections using groups (#3757)\n\n* Fix #3413: push to users acessing the collections using groups\r\n\r\n* Notify groups only when enabled",
            "additions": 26,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            796
                        ],
                        "comments": {
                            "787": "                    groups::access_all.eq(true).or( // AccessAll via groups",
                            "788": "                        ciphers_collections::cipher_uuid.eq(&cipher_uuid) // ..or access to collection via group"
                        },
                        "lines": [
                            "                    )",
                            "                )",
                            "                .select(users_organizations::all_columns)",
                            "                .distinct()",
                            "            .load::<UserOrganizationDb>(conn).expect(\"Error loading user organizations with groups\").from_db()",
                            "        }}",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "787": "                    groups::access_all.eq(true).or( // AccessAll via groups",
                "788": "                        ciphers_collections::cipher_uuid.eq(&cipher_uuid) // ..or access to collection via group"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "0fe93edea6cb8d4b30416a6d319164f8828ad8b7",
            "timestamp": "2024-04-27T23:24:04+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Some fixes for the new mobile apps (#4526)",
            "additions": 20,
            "deletions": 21,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            350,
                            351,
                            352,
                            353,
                            354,
                            355,
                            356,
                            357,
                            358,
                            359
                        ],
                        "comments": {
                            "348": "                // TODO: Add support for Custom User Roles",
                            "349": "                // See: https://bitwarden.com/help/article/user-types-access-control/#custom-role"
                        },
                        "lines": [
                            "                \"accessEventLogs\": false,",
                            "                \"accessImportExport\": false,",
                            "                \"accessReports\": false,",
                            "                \"createNewCollections\": false,",
                            "                \"editAnyCollection\": false,",
                            "                \"deleteAnyCollection\": false,",
                            "                \"editAssignedCollections\": false,",
                            "                \"deleteAssignedCollections\": false,",
                            "                \"manageGroups\": false,",
                            "                \"managePolicies\": false,"
                        ]
                    },
                    {
                        "line_numbers": [
                            361,
                            362
                        ],
                        "comments": {
                            "360": "                \"manageSso\": false, // Not supported"
                        },
                        "lines": [
                            "                \"manageUsers\": false,",
                            "                \"manageResetPassword\": false,"
                        ]
                    },
                    {
                        "line_numbers": [
                            364,
                            365
                        ],
                        "comments": {
                            "363": "                \"manageScim\": false // Not supported (Not AGPLv3 Licensed)"
                        },
                        "lines": [
                            "        });",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            393
                        ],
                        "comments": {},
                        "lines": [
                            "            \"permissions\": permissions,"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "348": "                // TODO: Add support for Custom User Roles",
                "349": "                // See: https://bitwarden.com/help/article/user-types-access-control/#custom-role",
                "360": "                \"manageSso\": false, // Not supported",
                "363": "                \"manageScim\": false // Not supported (Not AGPLv3 Licensed)"
            },
            "comment_deleted_diff": {
                "374": "            // TODO: Add support for Custom User Roles",
                "375": "            // See: https://bitwarden.com/help/article/user-types-access-control/#custom-role",
                "376": "            // \"Permissions\": {",
                "377": "            //     \"AccessEventLogs\": false,",
                "378": "            //     \"AccessImportExport\": false,",
                "379": "            //     \"AccessReports\": false,",
                "380": "            //     \"ManageAllCollections\": false,",
                "381": "            //     \"CreateNewCollections\": false,",
                "382": "            //     \"EditAnyCollection\": false,",
                "383": "            //     \"DeleteAnyCollection\": false,",
                "384": "            //     \"ManageAssignedCollections\": false,",
                "385": "            //     \"editAssignedCollections\": false,",
                "386": "            //     \"deleteAssignedCollections\": false,",
                "387": "            //     \"ManageCiphers\": false,",
                "388": "            //     \"ManageGroups\": false,",
                "389": "            //     \"ManagePolicies\": false,",
                "390": "            //     \"ManageResetPassword\": false,",
                "391": "            //     \"ManageSso\": false, // Not supported",
                "392": "            //     \"ManageUsers\": false,",
                "393": "            //     \"ManageScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "394": "            // },"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 112,
            "deletions": 95,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            158
                        ],
                        "comments": {
                            "157": "            \"identifier\": null, // not supported by us"
                        },
                        "lines": [
                            "            \"name\": self.name,"
                        ]
                    },
                    {
                        "line_numbers": [
                            163
                        ],
                        "comments": {
                            "159": "            \"seats\": 10, // The value doesn't matter, we don't check server-side",
                            "160": "            // \"maxAutoscaleSeats\": null, // The value doesn't matter, we don't check server-side",
                            "161": "            \"maxCollections\": 10, // The value doesn't matter, we don't check server-side",
                            "162": "            \"maxStorageGb\": 10, // The value doesn't matter, we don't check server-side"
                        },
                        "lines": [
                            "            \"use2fa\": true,"
                        ]
                    },
                    {
                        "line_numbers": [
                            165,
                            166,
                            167,
                            168
                        ],
                        "comments": {
                            "164": "            \"useDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)"
                        },
                        "lines": [
                            "            \"useEvents\": CONFIG.org_events_enabled(),",
                            "            \"useGroups\": CONFIG.org_groups_enabled(),",
                            "            \"useTotp\": true,",
                            "            \"usePolicies\": true,"
                        ]
                    },
                    {
                        "line_numbers": [
                            172,
                            173,
                            174,
                            175,
                            176,
                            177,
                            178,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185
                        ],
                        "comments": {
                            "169": "            // \"useScim\": false, // Not supported (Not AGPLv3 Licensed)",
                            "170": "            \"useSso\": false, // Not supported",
                            "171": "            // \"useKeyConnector\": false, // Not supported"
                        },
                        "lines": [
                            "            \"selfHost\": true,",
                            "            \"useApi\": true,",
                            "            \"hasPublicAndPrivateKeys\": self.private_key.is_some() && self.public_key.is_some(),",
                            "            \"useResetPassword\": CONFIG.mail_enabled(),",
                            "",
                            "            \"businessName\": null,",
                            "            \"businessAddress1\": null,",
                            "            \"businessAddress2\": null,",
                            "            \"businessAddress3\": null,",
                            "            \"businessCountry\": null,",
                            "            \"businessTaxNumber\": null,",
                            "",
                            "            \"billingEmail\": self.billing_email,",
                            "            \"plan\": \"TeamsAnnually\","
                        ]
                    },
                    {
                        "line_numbers": [
                            187,
                            188
                        ],
                        "comments": {
                            "186": "            \"planType\": 5, // TeamsAnnually plan"
                        },
                        "lines": [
                            "            \"usersGetPremium\": true,",
                            "            \"object\": \"organization\","
                        ]
                    },
                    {
                        "line_numbers": [
                            369
                        ],
                        "comments": {},
                        "lines": [
                            "            \"id\": self.org_uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            371
                        ],
                        "comments": {
                            "370": "            \"identifier\": null, // Not supported"
                        },
                        "lines": [
                            "            \"name\": org.name,"
                        ]
                    },
                    {
                        "line_numbers": [
                            374,
                            375
                        ],
                        "comments": {
                            "372": "            \"seats\": 10, // The value doesn't matter, we don't check server-side",
                            "373": "            \"maxCollections\": 10, // The value doesn't matter, we don't check server-side"
                        },
                        "lines": [
                            "            \"usersGetPremium\": true,",
                            "            \"use2fa\": true,"
                        ]
                    },
                    {
                        "line_numbers": [
                            377,
                            378,
                            379
                        ],
                        "comments": {
                            "376": "            \"useDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)"
                        },
                        "lines": [
                            "            \"useEvents\": CONFIG.org_events_enabled(),",
                            "            \"useGroups\": CONFIG.org_groups_enabled(),",
                            "            \"useTotp\": true,"
                        ]
                    },
                    {
                        "line_numbers": [
                            381,
                            382,
                            383,
                            384,
                            385,
                            386
                        ],
                        "comments": {
                            "380": "            \"useScim\": false, // Not supported (Not AGPLv3 Licensed)"
                        },
                        "lines": [
                            "            \"usePolicies\": true,",
                            "            \"useApi\": true,",
                            "            \"selfHost\": true,",
                            "            \"hasPublicAndPrivateKeys\": org.private_key.is_some() && org.public_key.is_some(),",
                            "            \"resetPasswordEnrolled\": self.reset_password_key.is_some(),",
                            "            \"useResetPassword\": CONFIG.mail_enabled(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            389,
                            390,
                            391,
                            392,
                            393,
                            394,
                            395,
                            396,
                            397,
                            398,
                            399,
                            400,
                            401,
                            402,
                            403,
                            404,
                            405,
                            406,
                            407,
                            408,
                            409
                        ],
                        "comments": {
                            "387": "            \"ssoBound\": false, // Not supported",
                            "388": "            \"useSso\": false, // Not supported"
                        },
                        "lines": [
                            "            \"useKeyConnector\": false,",
                            "            \"useSecretsManager\": false,",
                            "            \"usePasswordManager\": true,",
                            "            \"useCustomPermissions\": false,",
                            "            \"useActivateAutofillPolicy\": false,",
                            "",
                            "            \"providerId\": null,",
                            "            \"providerName\": null,",
                            "            \"providerType\": null,",
                            "            \"familySponsorshipFriendlyName\": null,",
                            "            \"familySponsorshipAvailable\": false,",
                            "            \"planProductType\": 0,",
                            "            \"keyConnectorEnabled\": false,",
                            "            \"keyConnectorUrl\": null,",
                            "            \"familySponsorshipLastSyncDate\": null,",
                            "            \"familySponsorshipValidUntil\": null,",
                            "            \"familySponsorshipToDelete\": null,",
                            "            \"accessSecretsManager\": false,",
                            "            \"limitCollectionCreationDeletion\": true,",
                            "            \"allowAdminAccessToAllCollectionItems\": true,",
                            "            \"flexibleCollections\": true,"
                        ]
                    },
                    {
                        "line_numbers": [
                            416,
                            417,
                            418,
                            419,
                            420
                        ],
                        "comments": {},
                        "lines": [
                            "            \"userId\": self.user_uuid,",
                            "            \"key\": self.akey,",
                            "            \"status\": self.status,",
                            "            \"type\": self.atype,",
                            "            \"enabled\": true,"
                        ]
                    },
                    {
                        "line_numbers": [
                            422
                        ],
                        "comments": {},
                        "lines": [
                            "            \"object\": \"profileOrganization\","
                        ]
                    },
                    {
                        "line_numbers": [
                            458,
                            459,
                            460
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"id\": cu.collection_uuid,",
                            "                        \"readOnly\": cu.read_only,",
                            "                        \"hidePasswords\": cu.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            469,
                            470,
                            471,
                            472,
                            473,
                            474,
                            475,
                            476,
                            477,
                            478,
                            479,
                            480,
                            481,
                            482,
                            483
                        ],
                        "comments": {},
                        "lines": [
                            "            \"id\": self.uuid,",
                            "            \"userId\": self.user_uuid,",
                            "            \"name\": user.name,",
                            "            \"email\": user.email,",
                            "            \"externalId\": self.external_id,",
                            "            \"groups\": groups,",
                            "            \"collections\": collections,",
                            "",
                            "            \"status\": status,",
                            "            \"type\": self.atype,",
                            "            \"accessAll\": self.access_all,",
                            "            \"twoFactorEnabled\": twofactor_enabled,",
                            "            \"resetPasswordEnrolled\": self.reset_password_key.is_some(),",
                            "",
                            "            \"object\": \"organizationUserUserDetails\","
                        ]
                    },
                    {
                        "line_numbers": [
                            489,
                            490,
                            491
                        ],
                        "comments": {},
                        "lines": [
                            "            \"id\": self.uuid,",
                            "            \"readOnly\": col_user.read_only,",
                            "            \"hidePasswords\": col_user.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            505,
                            506,
                            507
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"id\": c.collection_uuid,",
                            "                        \"readOnly\": c.read_only,",
                            "                        \"hidePasswords\": c.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            522,
                            523
                        ],
                        "comments": {},
                        "lines": [
                            "            \"id\": self.uuid,",
                            "            \"userId\": self.user_uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            525,
                            526,
                            527,
                            528
                        ],
                        "comments": {},
                        "lines": [
                            "            \"status\": status,",
                            "            \"type\": self.atype,",
                            "            \"accessAll\": self.access_all,",
                            "            \"collections\": coll_uuids,"
                        ]
                    },
                    {
                        "line_numbers": [
                            530
                        ],
                        "comments": {},
                        "lines": [
                            "            \"object\": \"organizationUserDetails\","
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "157": "            \"identifier\": null, // not supported by us",
                "159": "            \"seats\": 10, // The value doesn't matter, we don't check server-side",
                "160": "            // \"maxAutoscaleSeats\": null, // The value doesn't matter, we don't check server-side",
                "161": "            \"maxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "162": "            \"maxStorageGb\": 10, // The value doesn't matter, we don't check server-side",
                "164": "            \"useDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)",
                "169": "            // \"useScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "170": "            \"useSso\": false, // Not supported",
                "171": "            // \"useKeyConnector\": false, // Not supported",
                "186": "            \"planType\": 5, // TeamsAnnually plan",
                "370": "            \"identifier\": null, // Not supported",
                "372": "            \"seats\": 10, // The value doesn't matter, we don't check server-side",
                "373": "            \"maxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "376": "            \"useDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)",
                "380": "            \"useScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "387": "            \"ssoBound\": false, // Not supported",
                "388": "            \"useSso\": false, // Not supported",
                "413": "            \"maxStorageGb\": 10, // The value doesn't matter, we don't check server-side"
            },
            "comment_deleted_diff": {
                "157": "            \"Identifier\": null, // not supported by us",
                "159": "            \"Seats\": 10, // The value doesn't matter, we don't check server-side",
                "160": "            // \"MaxAutoscaleSeats\": null, // The value doesn't matter, we don't check server-side",
                "161": "            \"MaxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "162": "            \"MaxStorageGb\": 10, // The value doesn't matter, we don't check server-side",
                "164": "            \"UseDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)",
                "169": "            // \"UseScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "170": "            \"UseSso\": false, // Not supported",
                "171": "            // \"UseKeyConnector\": false, // Not supported",
                "186": "            \"PlanType\": 5, // TeamsAnnually plan",
                "370": "            \"Identifier\": null, // Not supported",
                "372": "            \"Seats\": 10, // The value doesn't matter, we don't check server-side",
                "373": "            \"MaxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "376": "            \"UseDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)",
                "380": "            // \"UseScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "387": "            \"SsoBound\": false, // Not supported",
                "388": "            \"UseSso\": false, // Not supported",
                "391": "            // \"KeyConnectorEnabled\": false,",
                "392": "            // \"KeyConnectorUrl\": null,",
                "396": "            \"MaxStorageGb\": 10, // The value doesn't matter, we don't check server-side"
            },
            "comment_modified_diff": {
                "157": "            \"Identifier\": null, // not supported by us",
                "159": "            \"Seats\": 10, // The value doesn't matter, we don't check server-side",
                "160": "            // \"MaxAutoscaleSeats\": null, // The value doesn't matter, we don't check server-side",
                "161": "            \"MaxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "162": "            \"MaxStorageGb\": 10, // The value doesn't matter, we don't check server-side",
                "164": "            \"UseDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)",
                "169": "            // \"UseScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "170": "            \"UseSso\": false, // Not supported",
                "171": "            // \"UseKeyConnector\": false, // Not supported",
                "186": "            \"PlanType\": 5, // TeamsAnnually plan",
                "370": "            \"Identifier\": null, // Not supported",
                "372": "            \"Seats\": 10, // The value doesn't matter, we don't check server-side",
                "373": "            \"MaxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "376": "            \"UseDirectory\": false, // Is supported, but this value isn't checked anywhere (yet)",
                "380": "            // \"UseScim\": false, // Not supported (Not AGPLv3 Licensed)",
                "387": "            \"SsoBound\": false, // Not supported",
                "388": "            \"UseSso\": false, // Not supported"
            }
        },
        {
            "commit": "8e8483481f61e0054bfad1670749d44345bf879e",
            "timestamp": "2024-07-10T17:25:41+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "use a custom plan of enterprise tier to fix limits (#4726)\n\n* use a custom plan of enterprise tier to fix limits\r\n\r\n* set maxStorageGb limit to max signed int value",
            "additions": 13,
            "deletions": 10,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            164
                        ],
                        "comments": {
                            "162": "            \"maxStorageGb\": i16::MAX, // The value doesn't matter, we don't check server-side"
                        },
                        "lines": [
                            "            \"useCustomPermissions\": false,"
                        ]
                    },
                    {
                        "line_numbers": [
                            372,
                            373,
                            374
                        ],
                        "comments": {},
                        "lines": [
                            "            \"seats\": null,",
                            "            \"maxAutoscaleSeats\": null,",
                            "            \"maxCollections\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            396
                        ],
                        "comments": {},
                        "lines": [
                            "            \"organizationUserId\": self.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            402
                        ],
                        "comments": {},
                        "lines": [
                            "            \"planProductType\": 3,"
                        ]
                    },
                    {
                        "line_numbers": [],
                        "comments": {
                            "403": "            \"productTierType\": 3, // Enterprise tier"
                        },
                        "lines": []
                    },
                    {
                        "line_numbers": [],
                        "comments": {
                            "416": "            \"maxStorageGb\": i16::MAX, // The value doesn't matter, we don't check server-side"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "162": "            \"maxStorageGb\": i16::MAX, // The value doesn't matter, we don't check server-side",
                "186": "            \"planType\": 6, // Custom plan",
                "403": "            \"productTierType\": 3, // Enterprise tier",
                "416": "            \"maxStorageGb\": i16::MAX, // The value doesn't matter, we don't check server-side"
            },
            "comment_deleted_diff": {
                "159": "            \"seats\": 10, // The value doesn't matter, we don't check server-side",
                "160": "            // \"maxAutoscaleSeats\": null, // The value doesn't matter, we don't check server-side",
                "161": "            \"maxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "162": "            \"maxStorageGb\": 10, // The value doesn't matter, we don't check server-side",
                "186": "            \"planType\": 5, // TeamsAnnually plan",
                "372": "            \"seats\": 10, // The value doesn't matter, we don't check server-side",
                "373": "            \"maxCollections\": 10, // The value doesn't matter, we don't check server-side",
                "413": "            \"maxStorageGb\": 10, // The value doesn't matter, we don't check server-side"
            },
            "comment_modified_diff": {
                "162": "            \"maxStorageGb\": 10, // The value doesn't matter, we don't check server-side",
                "186": "            \"planType\": 5, // TeamsAnnually plan"
            }
        },
        {
            "commit": "9e26014b4df65acc44ee2c0e94fada0914843ec3",
            "timestamp": "2024-08-15T12:36:00+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix manager in web-vault v2024.6.2 for collections (#4860)\n\nThe web-vault v2024.6.2 we use needs some extra information to allow\r\nmanagers to actually be able to manage collections.\r\n\r\nThe v2024.6.2 web-vault has somewhat of a mixture of the newer roles and\r\nolder manager roles. To at least fix this for the web-vault we bundle\r\nthese changes will make the manager able to manage.\r\n\r\nFor future web-vaults we would need a lot more changes to be done to fix\r\nthis in a better way though.\r\n\r\nFixes #4844",
            "additions": 46,
            "deletions": 9,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            461,
                            462,
                            463,
                            464,
                            465,
                            466,
                            467
                        ],
                        "comments": {
                            "460": "            // Get all collections for the user here already to prevent more queries"
                        },
                        "lines": [
                            "            let cu: HashMap<String, CollectionUser> =",
                            "                CollectionUser::find_by_organization_and_user_uuid(&self.org_uuid, &self.user_uuid, conn)",
                            "                    .await",
                            "                    .into_iter()",
                            "                    .map(|cu| (cu.collection_uuid.clone(), cu))",
                            "                    .collect();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            469
                        ],
                        "comments": {
                            "468": "            // Get all collection groups for this user to prevent there inclusion"
                        },
                        "lines": [
                            "            let cg: HashSet<String> = CollectionGroup::find_by_user(&self.user_uuid, conn)"
                        ]
                    },
                    {
                        "line_numbers": [
                            471,
                            472,
                            473,
                            474,
                            475,
                            476,
                            477,
                            478,
                            479,
                            480,
                            481,
                            482,
                            483,
                            484,
                            485,
                            486
                        ],
                        "comments": {},
                        "lines": [
                            "                .into_iter()",
                            "                .map(|cg| cg.collections_uuid)",
                            "                .collect();",
                            "",
                            "            Collection::find_by_organization_and_user_uuid(&self.org_uuid, &self.user_uuid, conn)",
                            "                .await",
                            "                .into_iter()",
                            "                .filter_map(|c| {",
                            "                    let (read_only, hide_passwords, can_manage) = if self.has_full_access() {",
                            "                        (false, false, self.atype == UserOrgType::Manager)",
                            "                    } else if let Some(cu) = cu.get(&c.uuid) {",
                            "                        (",
                            "                            cu.read_only,",
                            "                            cu.hide_passwords,",
                            "                            self.atype == UserOrgType::Manager && !cu.read_only && !cu.hide_passwords,",
                            "                        )"
                        ]
                    },
                    {
                        "line_numbers": [
                            489,
                            490,
                            491,
                            492,
                            493,
                            494,
                            495,
                            496,
                            497,
                            498,
                            499,
                            500
                        ],
                        "comments": {
                            "487": "                    // If previous checks failed it might be that this user has access via a group, but we should not return those elements here",
                            "488": "                    // Those are returned via a special group endpoint"
                        },
                        "lines": [
                            "                    } else if cg.contains(&c.uuid) {",
                            "                        return None;",
                            "                    } else {",
                            "                        (true, true, false)",
                            "                    };",
                            "",
                            "                    Some(json!({",
                            "                        \"id\": c.uuid,",
                            "                        \"readOnly\": read_only,",
                            "                        \"hidePasswords\": hide_passwords,",
                            "                        \"manage\": can_manage,",
                            "                    }))"
                        ]
                    },
                    {
                        "line_numbers": [
                            513
                        ],
                        "comments": {},
                        "lines": [
                            "            \"avatarColor\": user.avatar_color,"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "460": "            // Get all collections for the user here already to prevent more queries",
                "468": "            // Get all collection groups for this user to prevent there inclusion",
                "487": "                    // If previous checks failed it might be that this user has access via a group, but we should not return those elements here",
                "488": "                    // Those are returned via a special group endpoint"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "e3541763fd349e9b66142f5119041db89fbf97a6",
            "timestamp": "2024-10-11T18:42:40+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Updates and collection management fixes (#5072)\n\n* Fix collections not editable by managers\r\n\r\nSince a newer version of the web-vault we use manager were not able to create sub collections anymore.\r\nThis was because of some missing details in the response of some json objects.\r\n\r\nThis commit fixes this by using the `to_json_details` instead of the `to_json`\r\n\r\nFixes #5066\r\nFixes #5044\r\n\r\n* Update crates and GitHub Actions\r\n\r\n- Updated all the crates\r\n- Updated all the GHA dependencies\r\n- Configured the trivy workflow to only run on the main repo and not on forks\r\n  Also selected a random new scheduled date so it will not run at the same time as all other forks.\r\n  The two changes should help running this scan every day without failing, and also prevent the same for new or updated forks.",
            "additions": 26,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            510,
                            511,
                            512,
                            513,
                            514,
                            515,
                            516,
                            517,
                            518,
                            519
                        ],
                        "comments": {
                            "508": "            // TODO: Add support for Custom User Roles",
                            "509": "            // See: https://bitwarden.com/help/article/user-types-access-control/#custom-role"
                        },
                        "lines": [
                            "            \"accessEventLogs\": false,",
                            "            \"accessImportExport\": false,",
                            "            \"accessReports\": false,",
                            "            \"createNewCollections\": false,",
                            "            \"editAnyCollection\": false,",
                            "            \"deleteAnyCollection\": false,",
                            "            \"editAssignedCollections\": false,",
                            "            \"deleteAssignedCollections\": false,",
                            "            \"manageGroups\": false,",
                            "            \"managePolicies\": false,"
                        ]
                    },
                    {
                        "line_numbers": [
                            521,
                            522
                        ],
                        "comments": {
                            "520": "            \"manageSso\": false, // Not supported"
                        },
                        "lines": [
                            "            \"manageUsers\": false,",
                            "            \"manageResetPassword\": false,"
                        ]
                    },
                    {
                        "line_numbers": [
                            524,
                            525
                        ],
                        "comments": {
                            "523": "            \"manageScim\": false // Not supported (Not AGPLv3 Licensed)"
                        },
                        "lines": [
                            "        });",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            541,
                            542,
                            543,
                            544
                        ],
                        "comments": {},
                        "lines": [
                            "            \"hasMasterPassword\": !user.password_hash.is_empty(),",
                            "",
                            "            \"permissions\": permissions,",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [],
                        "comments": {
                            "545": "            \"ssoBound\": false, // Not supported",
                            "546": "            \"usesKeyConnector\": false, // Not supported",
                            "547": "            \"accessSecretsManager\": false, // Not supported (Not AGPLv3 Licensed)"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "508": "            // TODO: Add support for Custom User Roles",
                "509": "            // See: https://bitwarden.com/help/article/user-types-access-control/#custom-role",
                "520": "            \"manageSso\": false, // Not supported",
                "523": "            \"manageScim\": false // Not supported (Not AGPLv3 Licensed)",
                "545": "            \"ssoBound\": false, // Not supported",
                "546": "            \"usesKeyConnector\": false, // Not supported",
                "547": "            \"accessSecretsManager\": false, // Not supported (Not AGPLv3 Licensed)"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "ae6ed0ece8bae45e8ff0e4a473004b54db348e25",
            "timestamp": "2024-10-18T20:37:32+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix collection management and match some json output (#5095)\n\n- Fixed collection management to be usable from the Password Manager UI\r\n- Checked and brought in-to-sync with upstream several json responses\r\n- Fixed a small issue with the `fields` response when it was empty\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 2,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            478
                        ],
                        "comments": {
                            "412": "            \"limitCollectionCreationDeletion\": false, // This should be set to true only when we can handle roles like createNewCollections"
                        },
                        "lines": [
                            "                        (false, false, self.atype >= UserOrgType::Manager)"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "412": "            \"limitCollectionCreationDeletion\": false, // This should be set to true only when we can handle roles like createNewCollections"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "13f4b66e6224775f194d4fc4274e7e948becb3a0",
            "timestamp": "2024-10-19T18:22:21+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Hide user name on invite status (#5110)\n\nA possible user disclosure when you invite an user into an organization which already has an account on the same instance.\r\nThis was because we always returned the user's name.\r\nTo prevent this, this PR only returns the user's name if the status is accepted or higher, else we will return null.\r\nThis is the same as Bitwarden does.\r\n\r\nResolves a reported issue.\r\n\r\nAlso resolved a new `nightly` reported clippy regarding a regex within a loop.",
            "additions": 9,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            236,
                            237,
                            238,
                            239,
                            240,
                            241,
                            242
                        ],
                        "comments": {
                            "235": "    /// Return the status of the user in an unrevoked state"
                        },
                        "lines": [
                            "    pub fn get_unrevoked_status(&self) -> i32 {",
                            "        if self.status <= UserOrgStatus::Revoked as i32 {",
                            "            return self.status + ACTIVATE_REVOKE_DIFF;",
                            "        }",
                            "        self.status",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            535
                        ],
                        "comments": {},
                        "lines": [
                            "            \"name\": if self.get_unrevoked_status() >= UserOrgStatus::Accepted as i32 { Some(user.name) } else { None },"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "235": "    /// Return the status of the user in an unrevoked state"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "util.rs": [
        {
            "commit": "8ab200224e9ef0879ccd35080365118b08c43b02",
            "timestamp": "2023-12-09T01:21:14+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Several small fixes for open issues (#4143)\n\n* Fix BWDC when re-run with cleared cache\r\n\r\nUsing the BWDC with a cleared cache caused invited users to be converted\r\nto accepted users.\r\n\r\nThe problem was a wrong check for the `restore` function.\r\n\r\nFixes #4114\r\n\r\n* Remove useless variable\r\n\r\nDuring some refactoring this seems to be overlooked.\r\nThis variable gets filled but isn't used at all afterwards.\r\n\r\nFixes #4105\r\n\r\n* Check some `.git` paths to force a rebuild\r\n\r\nWhen a checked-out repo switches to a specific tag, and that tag does\r\nnot have anything else changed in the files except the tag, it could\r\nhappen that the build process doesn't see any changes, while it could be\r\nthat the version string needs to be different.\r\n\r\nThis commit ensures that if some specific paths are changed within the\r\n.git directory, cargo will be triggered to rebuild.\r\n\r\nFixes #4087\r\n\r\n* Do not delete dir on file delete\r\n\r\nPreviously during a `delete_file` check we also tried to delete the\r\nparent directory and ignored all errors, like not being empty for\r\nexample.\r\n\r\nSince this function is called `delete_file` and does not mention\r\nanything in regards to a directory i have removed that code and it will\r\nnow only delete the file and leave the rest as-is.\r\n\r\nIf this somehow is still needed or wanted, which i do not think we want,\r\nthen we should create a new function.\r\n\r\nFixes #4081\r\n\r\n* Fix healthcheck when using an ENV file\r\n\r\nIf someone is using a `.env` file or configured the `ENV_FILE` variable\r\nto use that as it's configuration, this was missed by the healthcheck.\r\n\r\nSo, `DOMAIN` and `ROCKET_TLS` were not seen, and not used in these cases.\r\n\r\nThis commit fixes this by checking for this file and if it exists, then\r\nit will load those variables first.\r\n\r\nFixes #4112\r\n\r\n* Add missing route\r\n\r\nWhile there was a function and a derive, this endpoint wasn't part of\r\nthe routes. Since Bitwarden does have this endpoint ill add the route\r\ninstead of deleting it.\r\n\r\nFixes #4076\r\nFixes #4144\r\n\r\n* Update crates to update the openssl crate\r\n\r\nBecause of a bug in the openssl-sys crate we pinned the version to an\r\nolder version. This issue has been fixed and was released 2 days ago.\r\n\r\nThis commit updates the openssl crates including others.\r\nThis should also fix the issues with building Vaultwarden using newer\r\nversions of LibreSSL.\r\n\r\nFixes #4051",
            "additions": 1,
            "deletions": 9,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "369": "        // If the directory isn't empty, this returns an error, which we ignore",
                "370": "        // We only want to delete the folder if it's empty"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "98b2178c7d314a0c4f8d85bf4f5396c7704bc88d",
            "timestamp": "2024-01-01T15:44:02+01:00",
            "author": "Philipp Kolberg",
            "commit_message": "Allow customizing the featureStates (#4168)\n\n* Allow customizing the featureStates\r\n\r\nUse a comma separated list of features to enable using the FEATURE_FLAGS env variable\r\n\r\n* Move feature flag parsing to util\r\n\r\n* Fix formatting\r\n\r\n* Update supported feature flags\r\n\r\n* Rename feature_flags to experimental_client_feature_flags\r\n\r\nAdditionally, use a caret (^) instead of an exclamation mark (!) to disable features\r\n\r\n* Fix formatting issue.\r\n\r\n* Add documentation to env template\r\n\r\n* Remove functionality to disable feature flags\r\n\r\n* Fix JSON key for feature states\r\n\r\n* Convert error to warning when feature flag is unrecognized\r\n\r\n* Simplify parsing of feature flags\r\n\r\n* Fix default value of feature flags in env template\r\n\r\n* Fix formatting",
            "additions": 9,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            753,
                            754,
                            755,
                            756,
                            757,
                            758
                        ],
                        "comments": {
                            "752": "/// Parses the experimental client feature flags string into a HashMap."
                        },
                        "lines": [
                            "pub fn parse_experimental_client_feature_flags(experimental_client_feature_flags: &str) -> HashMap<String, bool> {",
                            "    let feature_states =",
                            "        experimental_client_feature_flags.to_lowercase().split(',').map(|f| (f.trim().to_owned(), true)).collect();",
                            "",
                            "    feature_states",
                            "}"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "752": "/// Parses the experimental client feature flags string into a HashMap."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "edf7484a70942de387d59c5d5cf849f24180ba66",
            "timestamp": "2024-01-27T02:43:26+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improve file limit handling (#4242)\n\n* Improve file limit handling\r\n\r\n* Oops\r\n\r\n* Update PostgreSQL migration\r\n\r\n* Review comments\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>",
            "additions": 48,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            375,
                            376,
                            377,
                            378
                        ],
                        "comments": {
                            "374": "    // If we're somehow too big for a f64, just return the size in bytes"
                        },
                        "lines": [
                            "    let Some(mut size) = size.to_f64() else {",
                            "        return format!(\"{size} bytes\");",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            646,
                            647,
                            648,
                            649,
                            650,
                            651,
                            652,
                            653,
                            654,
                            655,
                            656,
                            657,
                            658,
                            659,
                            660,
                            661,
                            662,
                            663,
                            664,
                            665,
                            666,
                            667,
                            668,
                            669,
                            670,
                            671,
                            672,
                            673,
                            674,
                            675,
                            676,
                            677,
                            678,
                            679,
                            680,
                            681,
                            682,
                            683,
                            684,
                            685,
                            686
                        ],
                        "comments": {},
                        "lines": [
                            "#[derive(Deserialize, Debug, Clone)]",
                            "#[serde(untagged)]",
                            "pub enum NumberOrString {",
                            "    Number(i64),",
                            "    String(String),",
                            "}",
                            "",
                            "impl NumberOrString {",
                            "    pub fn into_string(self) -> String {",
                            "        match self {",
                            "            NumberOrString::Number(n) => n.to_string(),",
                            "            NumberOrString::String(s) => s,",
                            "        }",
                            "    }",
                            "",
                            "    #[allow(clippy::wrong_self_convention)]",
                            "    pub fn into_i32(&self) -> Result<i32, crate::Error> {",
                            "        use std::num::ParseIntError as PIE;",
                            "        match self {",
                            "            NumberOrString::Number(n) => match n.to_i32() {",
                            "                Some(n) => Ok(n),",
                            "                None => err!(\"Number does not fit in i32\"),",
                            "            },",
                            "            NumberOrString::String(s) => {",
                            "                s.parse().map_err(|e: PIE| crate::Error::new(\"Can't convert to number\", e.to_string()))",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    #[allow(clippy::wrong_self_convention)]",
                            "    pub fn into_i64(&self) -> Result<i64, crate::Error> {",
                            "        use std::num::ParseIntError as PIE;",
                            "        match self {",
                            "            NumberOrString::Number(n) => Ok(*n),",
                            "            NumberOrString::String(s) => {",
                            "                s.parse().map_err(|e: PIE| crate::Error::new(\"Can't convert to number\", e.to_string()))",
                            "            }",
                            "        }",
                            "    }",
                            "}",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "374": "    // If we're somehow too big for a f64, just return the size in bytes"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "569add453d5039e4a2930be9ce0759828e056c88",
            "timestamp": "2024-02-02T21:44:19+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Add Kubernetes environment detection (#4290)\n\nAlso check if we are running within a Kubernetes environment.\r\nThese do not always run using Docker or Podman of course.\r\n\r\nAlso renamed all the functions and variables to use `container` instead\r\nof `docker`.",
            "additions": 8,
            "deletions": 5,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            535,
                            536,
                            537,
                            538,
                            539
                        ],
                        "comments": {
                            "534": "/// Returns true if the program is running in Docker, Podman or Kubernetes."
                        },
                        "lines": [
                            "pub fn is_running_in_container() -> bool {",
                            "    Path::new(\"/.dockerenv\").exists()",
                            "        || Path::new(\"/run/.containerenv\").exists()",
                            "        || Path::new(\"/run/secrets/kubernetes.io\").exists()",
                            "        || Path::new(\"/var/run/secrets/kubernetes.io\").exists()"
                        ]
                    },
                    {
                        "line_numbers": [
                            544
                        ],
                        "comments": {},
                        "lines": [
                            "pub fn container_base_image() -> &'static str {"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "534": "/// Returns true if the program is running in Docker, Podman or Kubernetes.",
                "542": "/// Simple check to determine on which container base image vaultwarden is running."
            },
            "comment_deleted_diff": {
                "534": "/// Returns true if the program is running in Docker or Podman.",
                "539": "/// Simple check to determine on which docker base image vaultwarden is running."
            },
            "comment_modified_diff": {
                "534": "/// Returns true if the program is running in Docker or Podman."
            }
        },
        {
            "commit": "a1fbd6d72917c0435da28b7f21c2f23aecc008b5",
            "timestamp": "2024-03-17T15:11:20+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improve JWT key initialization and avoid saving public key (#4085)",
            "additions": 2,
            "deletions": 40,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "337": "//",
                "338": "// File handling",
                "339": "//"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "27dc67fadd3d45b9f7d8d37407cef9453b8f5802",
            "timestamp": "2024-04-27T20:25:34+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Implement custom DNS resolver (#3988)",
            "additions": 249,
            "deletions": 8,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            848,
                            849,
                            850,
                            851,
                            852,
                            853,
                            854,
                            855,
                            856,
                            857,
                            858,
                            859,
                            860,
                            861,
                            862,
                            863,
                            864,
                            865,
                            866,
                            867,
                            868,
                            869,
                            870,
                            871,
                            872,
                            873,
                            874,
                            875,
                            876,
                            877,
                            878,
                            879,
                            880,
                            881,
                            882,
                            883,
                            884,
                            885,
                            886,
                            887,
                            888,
                            889,
                            890,
                            891,
                            892,
                            893,
                            894,
                            895,
                            896,
                            897,
                            898
                        ],
                        "comments": {
                            "847": "        // Note that we get an iterator of addresses, but we only grab the first one for convenience"
                        },
                        "lines": [
                            "        async fn resolve_domain(&self, name: &str) -> Result<Option<SocketAddr>, BoxError> {",
                            "            pre_resolve(name)?;",
                            "",
                            "            let result = match self {",
                            "                Self::Default() => tokio::net::lookup_host(name).await?.next(),",
                            "                Self::Hickory(r) => r.lookup_ip(name).await?.iter().next().map(|a| SocketAddr::new(a, 0)),",
                            "            };",
                            "",
                            "            if let Some(addr) = &result {",
                            "                post_resolve(name, addr.ip())?;",
                            "            }",
                            "",
                            "            Ok(result)",
                            "        }",
                            "    }",
                            "",
                            "    fn pre_resolve(name: &str) -> Result<(), CustomResolverError> {",
                            "        if crate::api::is_domain_blacklisted(name) {",
                            "            return Err(CustomResolverError::Blacklist {",
                            "                domain: name.to_string(),",
                            "            });",
                            "        }",
                            "",
                            "        Ok(())",
                            "    }",
                            "",
                            "    fn post_resolve(name: &str, ip: IpAddr) -> Result<(), CustomResolverError> {",
                            "        if CONFIG.icon_blacklist_non_global_ips() && !is_global(ip) {",
                            "            Err(CustomResolverError::NonGlobalIp {",
                            "                domain: name.to_string(),",
                            "                ip,",
                            "            })",
                            "        } else {",
                            "            Ok(())",
                            "        }",
                            "    }",
                            "",
                            "    impl Resolve for CustomDnsResolver {",
                            "        fn resolve(&self, name: Name) -> Resolving {",
                            "            let this = self.clone();",
                            "            Box::pin(async move {",
                            "                let name = name.as_str();",
                            "                let result = this.resolve_domain(name).await?;",
                            "                Ok::<reqwest::dns::Addrs, _>(Box::new(result.into_iter()))",
                            "            })",
                            "        }",
                            "    }",
                            "}",
                            "",
                            "pub use dns_resolver::{CustomDnsResolver, CustomResolverError};",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            902,
                            903,
                            904,
                            905,
                            906
                        ],
                        "comments": {
                            "899": "/// TODO: This is extracted from IpAddr::is_global, which is unstable:",
                            "900": "/// https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html#method.is_global",
                            "901": "/// Remove once https://github.com/rust-lang/rust/issues/27709 is merged"
                        },
                        "lines": [
                            "#[allow(clippy::nonminimal_bool)]",
                            "#[cfg(any(not(feature = \"unstable\"), test))]",
                            "pub fn is_global_hardcoded(ip: std::net::IpAddr) -> bool {",
                            "    match ip {",
                            "        std::net::IpAddr::V4(ip) => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            908,
                            909,
                            910,
                            911
                        ],
                        "comments": {
                            "907": "            !(ip.octets()[0] == 0 // \"This network\""
                        },
                        "lines": [
                            "            || ip.is_private()",
                            "            || (ip.octets()[0] == 100 && (ip.octets()[1] & 0b1100_0000 == 0b0100_0000)) //ip.is_shared()",
                            "            || ip.is_loopback()",
                            "            || ip.is_link_local()"
                        ]
                    },
                    {
                        "line_numbers": [
                            913,
                            914
                        ],
                        "comments": {
                            "912": "            // addresses reserved for future protocols (`192.0.0.0/24`)"
                        },
                        "lines": [
                            "            ||(ip.octets()[0] == 192 && ip.octets()[1] == 0 && ip.octets()[2] == 0)",
                            "            || ip.is_documentation()"
                        ]
                    },
                    {
                        "line_numbers": [
                            916,
                            917,
                            918,
                            919,
                            920,
                            921
                        ],
                        "comments": {
                            "915": "            || (ip.octets()[0] == 198 && (ip.octets()[1] & 0xfe) == 18) // ip.is_benchmarking()"
                        },
                        "lines": [
                            "            || (ip.octets()[0] & 240 == 240 && !ip.is_broadcast()) //ip.is_reserved()",
                            "            || ip.is_broadcast())",
                            "        }",
                            "        std::net::IpAddr::V6(ip) => {",
                            "            !(ip.is_unspecified()",
                            "            || ip.is_loopback()"
                        ]
                    },
                    {
                        "line_numbers": [
                            923
                        ],
                        "comments": {
                            "922": "            // IPv4-mapped Address (`::ffff:0:0/96`)"
                        },
                        "lines": [
                            "            || matches!(ip.segments(), [0, 0, 0, 0, 0, 0xffff, _, _])"
                        ]
                    },
                    {
                        "line_numbers": [
                            925
                        ],
                        "comments": {
                            "924": "            // IPv4-IPv6 Translat. (`64:ff9b:1::/48`)"
                        },
                        "lines": [
                            "            || matches!(ip.segments(), [0x64, 0xff9b, 1, _, _, _, _, _])"
                        ]
                    },
                    {
                        "line_numbers": [
                            927
                        ],
                        "comments": {
                            "926": "            // Discard-Only Address Block (`100::/64`)"
                        },
                        "lines": [
                            "            || matches!(ip.segments(), [0x100, 0, 0, 0, _, _, _, _])"
                        ]
                    },
                    {
                        "line_numbers": [
                            929,
                            930
                        ],
                        "comments": {
                            "928": "            // IETF Protocol Assignments (`2001::/23`)"
                        },
                        "lines": [
                            "            || (matches!(ip.segments(), [0x2001, b, _, _, _, _, _, _] if b < 0x200)",
                            "                && !("
                        ]
                    },
                    {
                        "line_numbers": [
                            932
                        ],
                        "comments": {
                            "931": "                    // Port Control Protocol Anycast (`2001:1::1`)"
                        },
                        "lines": [
                            "                    u128::from_be_bytes(ip.octets()) == 0x2001_0001_0000_0000_0000_0000_0000_0001"
                        ]
                    },
                    {
                        "line_numbers": [
                            934
                        ],
                        "comments": {
                            "933": "                    // Traversal Using Relays around NAT Anycast (`2001:1::2`)"
                        },
                        "lines": [
                            "                    || u128::from_be_bytes(ip.octets()) == 0x2001_0001_0000_0000_0000_0000_0000_0002"
                        ]
                    },
                    {
                        "line_numbers": [
                            936
                        ],
                        "comments": {
                            "935": "                    // AMT (`2001:3::/32`)"
                        },
                        "lines": [
                            "                    || matches!(ip.segments(), [0x2001, 3, _, _, _, _, _, _])"
                        ]
                    },
                    {
                        "line_numbers": [
                            938
                        ],
                        "comments": {
                            "937": "                    // AS112-v6 (`2001:4:112::/48`)"
                        },
                        "lines": [
                            "                    || matches!(ip.segments(), [0x2001, 4, 0x112, _, _, _, _, _])"
                        ]
                    },
                    {
                        "line_numbers": [
                            940,
                            941
                        ],
                        "comments": {
                            "939": "                    // ORCHIDv2 (`2001:20::/28`)"
                        },
                        "lines": [
                            "                    || matches!(ip.segments(), [0x2001, b, _, _, _, _, _, _] if (0x20..=0x2F).contains(&b))",
                            "                ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            943,
                            944,
                            945,
                            946,
                            947,
                            948,
                            949,
                            950,
                            951,
                            952,
                            953,
                            954,
                            955,
                            956,
                            957
                        ],
                        "comments": {
                            "942": "            || ((ip.segments()[0] == 0x2001) && (ip.segments()[1] == 0xdb8)) // ip.is_documentation()"
                        },
                        "lines": [
                            "            || ((ip.segments()[0] & 0xfe00) == 0xfc00) //ip.is_unique_local()",
                            "            || ((ip.segments()[0] & 0xffc0) == 0xfe80)) //ip.is_unicast_link_local()",
                            "        }",
                            "    }",
                            "}",
                            "",
                            "#[cfg(not(feature = \"unstable\"))]",
                            "pub use is_global_hardcoded as is_global;",
                            "",
                            "#[cfg(feature = \"unstable\")]",
                            "#[inline(always)]",
                            "pub fn is_global(ip: std::net::IpAddr) -> bool {",
                            "    ip.is_global()",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            965,
                            966,
                            967,
                            968,
                            969,
                            970,
                            971,
                            972,
                            973,
                            974,
                            975,
                            976,
                            977,
                            978,
                            979,
                            980,
                            981,
                            982,
                            983,
                            984,
                            985,
                            986,
                            987,
                            988,
                            989,
                            990,
                            991,
                            992,
                            993,
                            994,
                            995,
                            996,
                            997,
                            998,
                            999,
                            1000,
                            1001,
                            1002,
                            1003,
                            1004,
                            1005,
                            1006,
                            1007,
                            1008,
                            1009,
                            1010
                        ],
                        "comments": {
                            "958": "/// These are some tests to check that the implementations match",
                            "959": "/// The IPv4 can be all checked in 30 seconds or so and they are correct as of nightly 2023-07-17",
                            "960": "/// The IPV6 can't be checked in a reasonable time, so we check over a hundred billion random ones, so far correct",
                            "961": "/// Note that the is_global implementation is subject to change as new IP RFCs are created",
                            "962": "///",
                            "963": "/// To run while showing progress output:",
                            "964": "/// cargo +nightly test --release --features sqlite,unstable -- --nocapture --ignored"
                        },
                        "lines": [
                            "#[cfg(test)]",
                            "#[cfg(feature = \"unstable\")]",
                            "mod tests {",
                            "    use super::*;",
                            "    use std::net::IpAddr;",
                            "",
                            "    #[test]",
                            "    #[ignore]",
                            "    fn test_ipv4_global() {",
                            "        for a in 0..u8::MAX {",
                            "            println!(\"Iter: {}/255\", a);",
                            "            for b in 0..u8::MAX {",
                            "                for c in 0..u8::MAX {",
                            "                    for d in 0..u8::MAX {",
                            "                        let ip = IpAddr::V4(std::net::Ipv4Addr::new(a, b, c, d));",
                            "                        assert_eq!(ip.is_global(), is_global_hardcoded(ip), \"IP mismatch: {}\", ip)",
                            "                    }",
                            "                }",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    #[test]",
                            "    #[ignore]",
                            "    fn test_ipv6_global() {",
                            "        use rand::Rng;",
                            "",
                            "        std::thread::scope(|s| {",
                            "            for t in 0..16 {",
                            "                let handle = s.spawn(move || {",
                            "                    let mut v = [0u8; 16];",
                            "                    let mut rng = rand::thread_rng();",
                            "",
                            "                    for i in 0..20 {",
                            "                        println!(\"Thread {t} Iter: {i}/50\");",
                            "                        for _ in 0..500_000_000 {",
                            "                            rng.fill(&mut v);",
                            "                            let ip = IpAddr::V6(std::net::Ipv6Addr::from(v));",
                            "                            assert_eq!(ip.is_global(), is_global_hardcoded(ip), \"IP mismatch: {ip}\");",
                            "                        }",
                            "                    }",
                            "                });",
                            "            }",
                            "        });",
                            "    }",
                            "}"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "847": "        // Note that we get an iterator of addresses, but we only grab the first one for convenience",
                "899": "/// TODO: This is extracted from IpAddr::is_global, which is unstable:",
                "900": "/// https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html#method.is_global",
                "901": "/// Remove once https://github.com/rust-lang/rust/issues/27709 is merged",
                "907": "            !(ip.octets()[0] == 0 // \"This network\"",
                "909": "            || (ip.octets()[0] == 100 && (ip.octets()[1] & 0b1100_0000 == 0b0100_0000)) //ip.is_shared()",
                "912": "            // addresses reserved for future protocols (`192.0.0.0/24`)",
                "915": "            || (ip.octets()[0] == 198 && (ip.octets()[1] & 0xfe) == 18) // ip.is_benchmarking()",
                "916": "            || (ip.octets()[0] & 240 == 240 && !ip.is_broadcast()) //ip.is_reserved()",
                "922": "            // IPv4-mapped Address (`::ffff:0:0/96`)",
                "924": "            // IPv4-IPv6 Translat. (`64:ff9b:1::/48`)",
                "926": "            // Discard-Only Address Block (`100::/64`)",
                "928": "            // IETF Protocol Assignments (`2001::/23`)",
                "931": "                    // Port Control Protocol Anycast (`2001:1::1`)",
                "933": "                    // Traversal Using Relays around NAT Anycast (`2001:1::2`)",
                "935": "                    // AMT (`2001:3::/32`)",
                "937": "                    // AS112-v6 (`2001:4:112::/48`)",
                "939": "                    // ORCHIDv2 (`2001:20::/28`)",
                "942": "            || ((ip.segments()[0] == 0x2001) && (ip.segments()[1] == 0xdb8)) // ip.is_documentation()",
                "943": "            || ((ip.segments()[0] & 0xfe00) == 0xfc00) //ip.is_unique_local()",
                "944": "            || ((ip.segments()[0] & 0xffc0) == 0xfe80)) //ip.is_unicast_link_local()",
                "958": "/// These are some tests to check that the implementations match",
                "959": "/// The IPv4 can be all checked in 30 seconds or so and they are correct as of nightly 2023-07-17",
                "960": "/// The IPV6 can't be checked in a reasonable time, so we check over a hundred billion random ones, so far correct",
                "961": "/// Note that the is_global implementation is subject to change as new IP RFCs are created",
                "962": "///",
                "963": "/// To run while showing progress output:",
                "964": "/// cargo +nightly test --release --features sqlite,unstable -- --nocapture --ignored"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 25,
            "deletions": 39,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": [
                    {
                        "line_numbers": [
                            729
                        ],
                        "comments": {
                            "612": "#[derive(Deserialize, Debug, Clone)]"
                        },
                        "lines": [
                            "            for (key, value) in obj.iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            732,
                            733
                        ],
                        "comments": {},
                        "lines": [
                            "                        let inner_value = convert_json_key_lcase_first(Value::Object(elm.clone()));",
                            "                        json_map.insert(lcase_first(key), inner_value);"
                        ]
                    },
                    {
                        "line_numbers": [
                            740
                        ],
                        "comments": {},
                        "lines": [
                            "                            inner_array.push(convert_json_key_lcase_first(inner_obj.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            743
                        ],
                        "comments": {},
                        "lines": [
                            "                        json_map.insert(lcase_first(key), Value::Array(inner_array));"
                        ]
                    },
                    {
                        "line_numbers": [
                            747
                        ],
                        "comments": {},
                        "lines": [
                            "                        json_map.insert(lcase_first(key), value.clone());"
                        ]
                    }
                ]
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "591": "        // Initialize array with null values"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "035f694d2f94df5203bec6c0af951f78fcc888c2",
            "timestamp": "2024-07-12T22:33:11+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improved HTTP client (#4740)\n\n* Improved HTTP client\r\n\r\n* Change config compat to use auto, rename blacklist\r\n\r\n* Fix wrong doc references",
            "additions": 0,
            "deletions": 146,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "833": "        // Note that we get an iterator of addresses, but we only grab the first one for convenience"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "20d9e885bfcd7df7828d92c6e59ed5fe7b40a879",
            "timestamp": "2024-11-10T23:56:19+01:00",
            "author": "BlackDex",
            "commit_message": "Update crates and fix several issues\n\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 11,
            "deletions": 5,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            449,
                            450,
                            451,
                            452,
                            453
                        ],
                        "comments": {
                            "447": "/// Validates and formats a RFC3339 timestamp",
                            "448": "/// If parsing fails it will return the start of the unix datetime"
                        },
                        "lines": [
                            "pub fn validate_and_format_date(dt: &str) -> String {",
                            "    match DateTime::parse_from_rfc3339(dt) {",
                            "        Ok(dt) => dt.to_rfc3339_opts(chrono::SecondsFormat::Micros, true),",
                            "        _ => String::from(\"1970-01-01T00:00:00.000000Z\"),",
                            "    }"
                        ]
                    },
                    {
                        "line_numbers": [
                            495
                        ],
                        "comments": {},
                        "lines": [
                            "    DateTime::parse_from_rfc3339(date).unwrap().naive_utc()"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "447": "/// Validates and formats a RFC3339 timestamp",
                "448": "/// If parsing fails it will return the start of the unix datetime"
            },
            "comment_deleted_diff": {
                "441": "// Format used by Bitwarden API"
            },
            "comment_modified_diff": {}
        }
    ],
    "build.yml": [],
    "DockerSettings.yaml": [],
    "Dockerfile.alpine": [],
    "Dockerfile.debian": [],
    "Dockerfile.j2": [],
    "rust-toolchain.toml": [],
    "identity.rs": [
        {
            "commit": "eccb3ab9474f5088eb74cd606806153bdd463575",
            "timestamp": "2023-12-13T17:49:35+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Decrease JWT Refresh/Auth token (#4163)\n\nLarge JWT's could cause issue because of header or body sizes of the\r\nHTTP request could get too large when you are a member of a lot of organizations.\r\n\r\nThis PR removes these specific keys since they are not used either\r\nclient side or server side.\r\n\r\nBecause Bitwarden does add these in there JWT's i would suggest to keep\r\nthe code we had but then commented out as a reference.\r\n\r\nRemoving it and searching for this when needed would be a waist of time.\r\n\r\nFixes #4156",
            "additions": 21,
            "deletions": 6,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            112
                        ],
                        "comments": {
                            "106": "    // ---",
                            "107": "    // Disabled this variable, it was used to generate the JWT",
                            "108": "    // Because this might get used in the future, and is add by the Bitwarden Server, lets keep it, but then commented out",
                            "109": "    // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                            "110": "    // ---",
                            "111": "    // let orgs = UserOrganization::find_confirmed_by_user(&user.uuid, conn).await;"
                        },
                        "lines": [
                            "    let (access_token, expires_in) = device.refresh_tokens(&user, scope_vec);"
                        ]
                    },
                    {
                        "line_numbers": [
                            274
                        ],
                        "comments": {},
                        "lines": [
                            "    let (access_token, expires_in) = device.refresh_tokens(&user, scope_vec);"
                        ]
                    },
                    {
                        "line_numbers": [
                            393
                        ],
                        "comments": {},
                        "lines": [
                            "    let (access_token, expires_in) = device.refresh_tokens(&user, scope_vec);"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "106": "    // ---",
                "107": "    // Disabled this variable, it was used to generate the JWT",
                "108": "    // Because this might get used in the future, and is add by the Bitwarden Server, lets keep it, but then commented out",
                "109": "    // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                "110": "    // ---",
                "111": "    // let orgs = UserOrganization::find_confirmed_by_user(&user.uuid, conn).await;",
                "268": "    // ---",
                "269": "    // Disabled this variable, it was used to generate the JWT",
                "270": "    // Because this might get used in the future, and is add by the Bitwarden Server, lets keep it, but then commented out",
                "271": "    // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                "272": "    // ---",
                "273": "    // let orgs = UserOrganization::find_confirmed_by_user(&user.uuid, conn).await;",
                "387": "    // ---",
                "388": "    // Disabled this variable, it was used to generate the JWT",
                "389": "    // Because this might get used in the future, and is add by the Bitwarden Server, lets keep it, but then commented out",
                "390": "    // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                "391": "    // ---",
                "392": "    // let orgs = UserOrganization::find_confirmed_by_user(&user.uuid, conn).await;"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "3b283c289ebe254d0a1ab167682c006414bfa398",
            "timestamp": "2024-01-30T19:14:25+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "register missing push devices at login (#3792)\n\nsave the push token of new device even if push notifications are not\r\nenabled and provide a way to register the push device at login\r\n\r\nunregister device if there already is a push token saved unless the\r\nnew token has already been registered.\r\n\r\nalso the `unregister_push_device` function used the wrong argument\r\ncf. https://github.com/bitwarden/server/blob/08d380900b540f8d1a734c7abccaf80e59a91ced/src/Core/Services/Implementations/RelayPushRegistrationService.cs#L43",
            "additions": 4,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            271,
                            272
                        ],
                        "comments": {
                            "270": "    // register push device"
                        },
                        "lines": [
                            "    register_push_device(&mut device, conn).await?;",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "270": "    // register push device"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "0fe93edea6cb8d4b30416a6d319164f8828ad8b7",
            "timestamp": "2024-04-27T23:24:04+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Some fixes for the new mobile apps (#4526)",
            "additions": 6,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            299,
                            300,
                            301,
                            302,
                            303
                        ],
                        "comments": {
                            "298": "        \"ResetMasterPassword\": false, // TODO: Same as above"
                        },
                        "lines": [
                            "        \"ForcePasswordReset\": false,",
                            "        \"MasterPasswordPolicy\": {",
                            "            \"object\": \"masterPasswordPolicy\",",
                            "        },",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "298": "        \"ResetMasterPassword\": false, // TODO: Same as above"
            },
            "comment_deleted_diff": {
                "298": "        \"ResetMasterPassword\": false,// TODO: Same as above"
            },
            "comment_modified_diff": {
                "298": "        \"ResetMasterPassword\": false,// TODO: Same as above"
            }
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 9,
            "deletions": 7,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            569,
                            570,
                            571
                        ],
                        "comments": {
                            "568": "        \"TwoFactorProviders2\" : {}, // { \"0\" : null }"
                        },
                        "lines": [
                            "        \"MasterPasswordPolicy\": {",
                            "            \"Object\": \"masterPasswordPolicy\"",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            608
                        ],
                        "comments": {},
                        "lines": [
                            "                    \"Nfc\": yubikey_metadata.nfc,"
                        ]
                    },
                    {
                        "line_numbers": [
                            637
                        ],
                        "comments": {},
                        "lines": [
                            "async fn prelogin(data: Json<PreloginData>, conn: DbConn) -> Json<Value> {"
                        ]
                    },
                    {
                        "line_numbers": [
                            642
                        ],
                        "comments": {},
                        "lines": [
                            "async fn identity_register(data: Json<RegisterData>, conn: DbConn) -> JsonResult {"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "646": "#[allow(non_snake_case)]"
                        },
                        "lines": []
                    }
                ]
            },
            "comment_added_diff": {
                "568": "        \"TwoFactorProviders2\" : {}, // { \"0\" : null }"
            },
            "comment_deleted_diff": {
                "568": "        \"TwoFactorProviders2\" : {} // { \"0\" : null }"
            },
            "comment_modified_diff": {
                "568": "        \"TwoFactorProviders2\" : {} // { \"0\" : null }"
            }
        },
        {
            "commit": "b4b2701905752f90080dd46ba10a90c5c584a38e",
            "timestamp": "2024-07-24T16:50:35+02:00",
            "author": "0x0fbc",
            "commit_message": "Add support for MFA with Duo's Universal Prompt (#4637)\n\n* Add initial working Duo Universal Prompt support.\r\n\r\n* Add db schema and models for Duo 2FA state storage\r\n\r\n* store duo states in the database and validate during authentication\r\n\r\n* cleanup & comments\r\n\r\n* bump state/nonce length\r\n\r\n* replace stray use of TimeDelta\r\n\r\n* more cleanup\r\n\r\n* bind Duo oauth flow to device id, drop redundant device type handling\r\n\r\n* drop redundant alphanum string generation code\r\n\r\n* error handling cleanup\r\n\r\n* directly use JWT_VALIDITY_SECS constant instead of copying it to DuoClient instances\r\n\r\n* remove redundant explicit returns, rustfmt\r\n\r\n* rearrange constants, update comments, error message\r\n\r\n* override charset on duo state column to ascii for mysql\r\n\r\n* Reduce twofactor_duo_ctx state/nonce column size in postgres and maria\r\n\r\n* Add fixes suggested by clippy\r\n\r\n* rustfmt\r\n\r\n* Update to use the make_http_request\r\n\r\n* Don't handle OrganizationDuo\r\n\r\n* move Duo API endpoint fmt strings out of macros and into format! calls\r\n\r\n* Add missing indentation\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>\r\n\r\n* remove redundant expiry check when purging Duo contexts\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 52,
            "deletions": 11,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            527,
                            528,
                            529
                        ],
                        "comments": {
                            "526": "                    // Legacy iframe prompt flow"
                        },
                        "lines": [
                            "                    duo::validate_duo_login(data.username.as_ref().unwrap().trim(), twofactor_code, conn).await?",
                            "                }",
                            "                false => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            531,
                            532,
                            533,
                            534,
                            535,
                            536,
                            537,
                            538,
                            539,
                            540
                        ],
                        "comments": {
                            "530": "                    // OIDC based flow"
                        },
                        "lines": [
                            "                    duo_oidc::validate_duo_login(",
                            "                        data.username.as_ref().unwrap().trim(),",
                            "                        twofactor_code,",
                            "                        data.client_id.as_ref().unwrap(),",
                            "                        data.device_identifier.as_ref().unwrap(),",
                            "                        conn,",
                            "                    )",
                            "                    .await?",
                            "                }",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            553
                        ],
                        "comments": {},
                        "lines": [
                            "                        _json_err_twofactor(&twofactor_ids, &user.uuid, data, conn).await?,"
                        ]
                    },
                    {
                        "line_numbers": [
                            581,
                            582,
                            583,
                            584,
                            585,
                            586
                        ],
                        "comments": {},
                        "lines": [
                            "async fn _json_err_twofactor(",
                            "    providers: &[i32],",
                            "    user_uuid: &str,",
                            "    data: &ConnectData,",
                            "    conn: &mut DbConn,",
                            ") -> ApiResult<Value> {"
                        ]
                    },
                    {
                        "line_numbers": [
                            614,
                            615
                        ],
                        "comments": {},
                        "lines": [
                            "                match CONFIG.duo_use_iframe() {",
                            "                    true => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            617,
                            618,
                            619,
                            620,
                            621,
                            622,
                            623
                        ],
                        "comments": {
                            "616": "                        // Legacy iframe prompt flow"
                        },
                        "lines": [
                            "                        let (signature, host) = duo::generate_duo_signature(&email, conn).await?;",
                            "                        result[\"TwoFactorProviders2\"][provider.to_string()] = json!({",
                            "                            \"Host\": host,",
                            "                            \"Signature\": signature,",
                            "                        })",
                            "                    }",
                            "                    false => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            625,
                            626,
                            627,
                            628,
                            629,
                            630,
                            631,
                            632,
                            633,
                            634,
                            635,
                            636,
                            637
                        ],
                        "comments": {
                            "624": "                        // OIDC based flow"
                        },
                        "lines": [
                            "                        let auth_url = duo_oidc::get_duo_auth_url(",
                            "                            &email,",
                            "                            data.client_id.as_ref().unwrap(),",
                            "                            data.device_identifier.as_ref().unwrap(),",
                            "                            conn,",
                            "                        )",
                            "                        .await?;",
                            "",
                            "                        result[\"TwoFactorProviders2\"][provider.to_string()] = json!({",
                            "                            \"AuthUrl\": auth_url,",
                            "                        })",
                            "                    }",
                            "                }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "526": "                    // Legacy iframe prompt flow",
                "530": "                    // OIDC based flow",
                "616": "                        // Legacy iframe prompt flow",
                "624": "                        // OIDC based flow"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "978f0092937c3a62f2de4ddc487137429754d3c0",
            "timestamp": "2024-08-27T19:37:51+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Allow Org Master-Pw policy enforcement (#4899)\n\n* Allow Org Master-Pw policy enforcement\r\n\r\nWe didn't returned the master password policy for the user.\r\nIf the `Require existing members to change their passwords` check was enabled this should trigger the login to show a change password dialog.\r\n\r\nAll the master password policies are merged into one during the login response and it will contain the max values and all `true` values which are set by all the different orgs if a user is an accepted member.\r\n\r\nFixes #4507\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Use .reduce instead of .fold\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 43,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            298,
                            299,
                            300,
                            301,
                            302,
                            303,
                            304,
                            305,
                            306,
                            307,
                            308,
                            309,
                            310,
                            311,
                            312,
                            313,
                            314,
                            315,
                            316,
                            317,
                            318,
                            319,
                            320,
                            321,
                            322,
                            323,
                            324,
                            325,
                            326
                        ],
                        "comments": {
                            "297": "    // Fetch all valid Master Password Policies and merge them into one with all true's and larges numbers as one policy"
                        },
                        "lines": [
                            "    let master_password_policies: Vec<MasterPasswordPolicy> =",
                            "        OrgPolicy::find_accepted_and_confirmed_by_user_and_active_policy(",
                            "            &user.uuid,",
                            "            OrgPolicyType::MasterPassword,",
                            "            conn,",
                            "        )",
                            "        .await",
                            "        .into_iter()",
                            "        .filter_map(|p| serde_json::from_str(&p.data).ok())",
                            "        .collect();",
                            "",
                            "    let master_password_policy = if !master_password_policies.is_empty() {",
                            "        let mut mpp_json = json!(master_password_policies.into_iter().reduce(|acc, policy| {",
                            "            MasterPasswordPolicy {",
                            "                min_complexity: acc.min_complexity.max(policy.min_complexity),",
                            "                min_length: acc.min_length.max(policy.min_length),",
                            "                require_lower: acc.require_lower || policy.require_lower,",
                            "                require_upper: acc.require_upper || policy.require_upper,",
                            "                require_numbers: acc.require_numbers || policy.require_numbers,",
                            "                require_special: acc.require_special || policy.require_special,",
                            "                enforce_on_login: acc.enforce_on_login || policy.enforce_on_login,",
                            "            }",
                            "        }));",
                            "        mpp_json[\"object\"] = json!(\"masterPasswordPolicy\");",
                            "        mpp_json",
                            "    } else {",
                            "        json!({\"object\": \"masterPasswordPolicy\"})",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            342
                        ],
                        "comments": {},
                        "lines": [
                            "        \"MasterPasswordPolicy\": master_password_policy,"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "297": "    // Fetch all valid Master Password Policies and merge them into one with all true's and larges numbers as one policy"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "ae6ed0ece8bae45e8ff0e4a473004b54db348e25",
            "timestamp": "2024-10-18T20:37:32+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix collection management and match some json output (#5095)\n\n- Fixed collection management to be usable from the Password Manager UI\r\n- Checked and brought in-to-sync with upstream several json responses\r\n- Fixed a small issue with the `fields` response when it was empty\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 1,
            "deletions": 12,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "455": "        \"ResetMasterPassword\": false, // TODO: according to official server seems something like: user.password_hash.is_empty(), but would need testing"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "455": "        \"ResetMasterPassword\": false, // TODO: according to official server seems something like: user.password_hash.is_empty(), but would need testing"
            },
            "comment_deleted_diff": {
                "130": "        \"ResetMasterPassword\": false, // TODO: according to official server seems something like: user.password_hash.is_empty(), but would need testing",
                "464": "        \"ResetMasterPassword\": false, // TODO: Same as above"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "37c14c3c69b244ec50f5c62b4c9260171607c1d8",
            "timestamp": "2024-11-11T20:13:02+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "More authrequest fixes (#5176)",
            "additions": 34,
            "deletions": 26,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            169,
                            170,
                            171,
                            172,
                            173,
                            174
                        ],
                        "comments": {
                            "168": "    // Check if the user is disabled"
                        },
                        "lines": [
                            "    if !user.enabled {",
                            "        err!(",
                            "            \"This user has been disabled\",",
                            "            format!(\"IP: {}. Username: {}.\", ip.ip, username),",
                            "            ErrorEvent {",
                            "                event: EventType::UserFailedLogIn"
                        ]
                    },
                    {
                        "line_numbers": [
                            176,
                            177,
                            178,
                            179,
                            180
                        ],
                        "comments": {},
                        "lines": [
                            "        )",
                            "    }",
                            "",
                            "    let password = data.password.as_ref().unwrap();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            182,
                            183
                        ],
                        "comments": {
                            "181": "    // If we get an auth request, we don't check the user's password, but the access code of the auth request"
                        },
                        "lines": [
                            "    if let Some(ref auth_request_uuid) = data.auth_request {",
                            "        let Some(auth_request) = AuthRequest::find_by_uuid(auth_request_uuid.as_str(), conn).await else {"
                        ]
                    },
                    {
                        "line_numbers": [
                            191,
                            192
                        ],
                        "comments": {},
                        "lines": [
                            "        };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            194,
                            195,
                            196,
                            197,
                            198,
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207
                        ],
                        "comments": {
                            "193": "        // Delete the request after we used it"
                        },
                        "lines": [
                            "        auth_request.delete(conn).await?;",
                            "",
                            "        if auth_request.user_uuid != user.uuid",
                            "            || !auth_request.approved.unwrap_or(false)",
                            "            || ip.ip.to_string() != auth_request.request_ip",
                            "            || !auth_request.check_access_code(password)",
                            "        {",
                            "            err!(",
                            "                \"Username or access code is incorrect. Try again\",",
                            "                format!(\"IP: {}. Username: {}.\", ip.ip, username),",
                            "                ErrorEvent {",
                            "                    event: EventType::UserFailedLogIn,",
                            "                }",
                            "            )"
                        ]
                    },
                    {
                        "line_numbers": [
                            220
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.auth_request.is_none() && user.password_iterations != CONFIG.password_iterations() {"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "168": "    // Check if the user is disabled",
                "181": "    // If we get an auth request, we don't check the user's password, but the access code of the auth request",
                "193": "        // Delete the request after we used it",
                "219": "    // Change the KDF Iterations (only when not logging in with an auth request)"
            },
            "comment_deleted_diff": {
                "168": "    // Check password",
                "200": "    // Change the KDF Iterations",
                "210": "    // Check if the user is disabled"
            },
            "comment_modified_diff": {
                "168": "    // Check password"
            }
        },
        {
            "commit": "e927b8aa5ec8f0352bfb2ff95a996a89389959ff",
            "timestamp": "2024-11-12T15:48:39+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Remove auth-request deletion (#5184)\n\n2FA is needed to login even when using login-with-device.\r\nIf the user didn't saved the 2FA token they still need to provide this.\r\nWe deleted the auth-request after validation the request, but before 2FA was triggered.\r\n\r\nRemoving the deletion of this record from that point as it will get cleaned-up automatically anyways.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 0,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "193": "        // Delete the request after we used it"
            },
            "comment_modified_diff": {}
        }
    ],
    "auth.rs": [
        {
            "commit": "eccb3ab9474f5088eb74cd606806153bdd463575",
            "timestamp": "2023-12-13T17:49:35+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Decrease JWT Refresh/Auth token (#4163)\n\nLarge JWT's could cause issue because of header or body sizes of the\r\nHTTP request could get too large when you are a member of a lot of organizations.\r\n\r\nThis PR removes these specific keys since they are not used either\r\nclient side or server side.\r\n\r\nBecause Bitwarden does add these in there JWT's i would suggest to keep\r\nthe code we had but then commented out as a reference.\r\n\r\nRemoving it and searching for this when needed would be a waist of time.\r\n\r\nFixes #4156",
            "additions": 10,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "122": "    // ---",
                            "123": "    // Disabled these keys to be added to the JWT since they could cause the JWT to get too large",
                            "124": "    // Also These key/value pairs are not used anywhere by either Vaultwarden or Bitwarden Clients",
                            "125": "    // Because these might get used in the future, and they are added by the Bitwarden Server, lets keep it, but then commented out",
                            "126": "    // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                            "127": "    // ---",
                            "128": "    // pub orgowner: Vec<String>,",
                            "129": "    // pub orgadmin: Vec<String>,",
                            "130": "    // pub orguser: Vec<String>,",
                            "131": "    // pub orgmanager: Vec<String>,"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "122": "    // ---",
                "123": "    // Disabled these keys to be added to the JWT since they could cause the JWT to get too large",
                "124": "    // Also These key/value pairs are not used anywhere by either Vaultwarden or Bitwarden Clients",
                "125": "    // Because these might get used in the future, and they are added by the Bitwarden Server, lets keep it, but then commented out",
                "126": "    // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                "127": "    // ---",
                "128": "    // pub orgowner: Vec<String>,",
                "129": "    // pub orgadmin: Vec<String>,",
                "130": "    // pub orguser: Vec<String>,",
                "131": "    // pub orgmanager: Vec<String>,"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "a1fbd6d72917c0435da28b7f21c2f23aecc008b5",
            "timestamp": "2024-03-17T15:11:20+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improve JWT key initialization and avoid saving public key (#4085)",
            "additions": 43,
            "deletions": 16,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64
                        ],
                        "comments": {
                            "45": "            // Only create the key if the file doesn't exist or is empty"
                        },
                        "lines": [
                            "            let rsa_key = openssl::rsa::Rsa::generate(2048)?;",
                            "            priv_key_buffer = rsa_key.private_key_to_pem()?;",
                            "            priv_key_file.write_all(&priv_key_buffer)?;",
                            "            info!(\"Private key created correctly.\");",
                            "            rsa_key",
                            "        }",
                            "    };",
                            "",
                            "    let pub_key_buffer = priv_key.public_key_to_pem()?;",
                            "",
                            "    let enc = EncodingKey::from_rsa_pem(&priv_key_buffer)?;",
                            "    let dec: DecodingKey = DecodingKey::from_rsa_pem(&pub_key_buffer)?;",
                            "    if PRIVATE_RSA_KEY.set(enc).is_err() {",
                            "        err!(\"PRIVATE_RSA_KEY must only be initialized once\")",
                            "    }",
                            "    if PUBLIC_RSA_KEY.set(dec).is_err() {",
                            "        err!(\"PUBLIC_RSA_KEY must only be initialized once\")",
                            "    }",
                            "    Ok(())"
                        ]
                    },
                    {
                        "line_numbers": [
                            68
                        ],
                        "comments": {},
                        "lines": [
                            "    match jsonwebtoken::encode(&JWT_HEADER, claims, PRIVATE_RSA_KEY.wait()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            82
                        ],
                        "comments": {},
                        "lines": [
                            "    match jsonwebtoken::decode(&token, PUBLIC_RSA_KEY.wait(), &validation) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            825,
                            826,
                            827,
                            828,
                            829
                        ],
                        "comments": {},
                        "lines": [
                            "use std::{",
                            "    fs::File,",
                            "    io::{Read, Write},",
                            "    net::IpAddr,",
                            "};"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "45": "            // Only create the key if the file doesn't exist or is empty"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "54bfcb8bc3aa1d15cf20821dc5f3747892011272",
            "timestamp": "2024-07-12T22:59:48+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update admin interface (#4737)\n\n- Updated datatables\r\n- Set Cookie Secure flag if the connection is https\r\n- Prevent possible XSS via Organization Name\r\n  Converted all `innerHTML` and `innerText` to the Safe Sink version `textContent`\r\n- Removed `jsesc` function as handlebars escapes all these chars already and more by default",
            "additions": 30,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            856,
                            857,
                            858,
                            859,
                            860,
                            861,
                            862,
                            863,
                            864,
                            865,
                            866,
                            867,
                            868,
                            869,
                            870,
                            871,
                            872
                        ],
                        "comments": {
                            "855": "        // Try to guess from the headers"
                        },
                        "lines": [
                            "        let protocol = match headers.get_one(\"X-Forwarded-Proto\") {",
                            "            Some(proto) => proto,",
                            "            None => {",
                            "                if env::var(\"ROCKET_TLS\").is_ok() {",
                            "                    \"https\"",
                            "                } else {",
                            "                    \"http\"",
                            "                }",
                            "            }",
                            "        };",
                            "",
                            "        Outcome::Success(Secure {",
                            "            https: protocol == \"https\",",
                            "        })",
                            "    }",
                            "}",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "855": "        // Try to guess from the headers"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "device.rs": [
        {
            "commit": "eccb3ab9474f5088eb74cd606806153bdd463575",
            "timestamp": "2023-12-13T17:49:35+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Decrease JWT Refresh/Auth token (#4163)\n\nLarge JWT's could cause issue because of header or body sizes of the\r\nHTTP request could get too large when you are a member of a lot of organizations.\r\n\r\nThis PR removes these specific keys since they are not used either\r\nclient side or server side.\r\n\r\nBecause Bitwarden does add these in there JWT's i would suggest to keep\r\nthe code we had but then commented out as a reference.\r\n\r\nRemoving it and searching for this when needed would be a waist of time.\r\n\r\nFixes #4156",
            "additions": 22,
            "deletions": 15,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "73": "        // ---",
                            "74": "        // Disabled these keys to be added to the JWT since they could cause the JWT to get too large",
                            "75": "        // Also These key/value pairs are not used anywhere by either Vaultwarden or Bitwarden Clients",
                            "76": "        // Because these might get used in the future, and they are added by the Bitwarden Server, lets keep it, but then commented out",
                            "77": "        // ---",
                            "78": "        // fn arg: orgs: Vec<super::UserOrganization>,",
                            "79": "        // ---",
                            "80": "        // let orgowner: Vec<_> = orgs.iter().filter(|o| o.atype == 0).map(|o| o.org_uuid.clone()).collect();",
                            "81": "        // let orgadmin: Vec<_> = orgs.iter().filter(|o| o.atype == 1).map(|o| o.org_uuid.clone()).collect();",
                            "82": "        // let orguser: Vec<_> = orgs.iter().filter(|o| o.atype == 2).map(|o| o.org_uuid.clone()).collect();",
                            "83": "        // let orgmanager: Vec<_> = orgs.iter().filter(|o| o.atype == 3).map(|o| o.org_uuid.clone()).collect();"
                        },
                        "lines": []
                    },
                    {
                        "line_numbers": [],
                        "comments": {
                            "98": "            // ---",
                            "99": "            // Disabled these keys to be added to the JWT since they could cause the JWT to get too large",
                            "100": "            // Also These key/value pairs are not used anywhere by either Vaultwarden or Bitwarden Clients",
                            "101": "            // Because these might get used in the future, and they are added by the Bitwarden Server, lets keep it, but then commented out",
                            "102": "            // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                            "103": "            // ---",
                            "104": "            // orgowner,",
                            "105": "            // orgadmin,",
                            "106": "            // orguser,",
                            "107": "            // orgmanager,"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "73": "        // ---",
                "74": "        // Disabled these keys to be added to the JWT since they could cause the JWT to get too large",
                "75": "        // Also These key/value pairs are not used anywhere by either Vaultwarden or Bitwarden Clients",
                "76": "        // Because these might get used in the future, and they are added by the Bitwarden Server, lets keep it, but then commented out",
                "77": "        // ---",
                "78": "        // fn arg: orgs: Vec<super::UserOrganization>,",
                "79": "        // ---",
                "80": "        // let orgowner: Vec<_> = orgs.iter().filter(|o| o.atype == 0).map(|o| o.org_uuid.clone()).collect();",
                "81": "        // let orgadmin: Vec<_> = orgs.iter().filter(|o| o.atype == 1).map(|o| o.org_uuid.clone()).collect();",
                "82": "        // let orguser: Vec<_> = orgs.iter().filter(|o| o.atype == 2).map(|o| o.org_uuid.clone()).collect();",
                "83": "        // let orgmanager: Vec<_> = orgs.iter().filter(|o| o.atype == 3).map(|o| o.org_uuid.clone()).collect();",
                "98": "            // ---",
                "99": "            // Disabled these keys to be added to the JWT since they could cause the JWT to get too large",
                "100": "            // Also These key/value pairs are not used anywhere by either Vaultwarden or Bitwarden Clients",
                "101": "            // Because these might get used in the future, and they are added by the Bitwarden Server, lets keep it, but then commented out",
                "102": "            // See: https://github.com/dani-garcia/vaultwarden/issues/4156",
                "103": "            // ---",
                "104": "            // orgowner,",
                "105": "            // orgadmin,",
                "106": "            // orguser,",
                "107": "            // orgmanager,"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "c72200638552062f94b49c379ddd20fd3307643e",
            "timestamp": "2024-08-21T21:57:52+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix Login with device (#4878)\n\nFixed an issue with login with device for the new Bitwrden Beta clients.\r\nThey seem to not support ISO8601 milli date/time, only micro.\r\n\r\nAlso updated the device display names to match Upstream and added the\r\nCLI devices which were missing.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 20,
            "deletions": 11,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            270,
                            271,
                            272
                        ],
                        "comments": {
                            "19": "        pub atype: i32,         // https://github.com/bitwarden/server/blob/dcc199bcce4aa2d5621f6fab80f1b49d8b143418/src/Core/Enums/DeviceType.cs"
                        },
                        "lines": [
                            "    WindowsCLI = 23,",
                            "    MacOsCLI = 24,",
                            "    LinuxCLI = 25,"
                        ]
                    },
                    {
                        "line_numbers": [
                            284,
                            285,
                            286,
                            287,
                            288,
                            289,
                            290
                        ],
                        "comments": {},
                        "lines": [
                            "            DeviceType::WindowsDesktop => write!(f, \"Windows\"),",
                            "            DeviceType::MacOsDesktop => write!(f, \"macOS\"),",
                            "            DeviceType::LinuxDesktop => write!(f, \"Linux\"),",
                            "            DeviceType::ChromeBrowser => write!(f, \"Chrome\"),",
                            "            DeviceType::FirefoxBrowser => write!(f, \"Firefox\"),",
                            "            DeviceType::OperaBrowser => write!(f, \"Opera\"),",
                            "            DeviceType::EdgeBrowser => write!(f, \"Edge\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            293
                        ],
                        "comments": {},
                        "lines": [
                            "            DeviceType::AndroidAmazon => write!(f, \"Android\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            295,
                            296
                        ],
                        "comments": {},
                        "lines": [
                            "            DeviceType::SafariBrowser => write!(f, \"Safari\"),",
                            "            DeviceType::VivaldiBrowser => write!(f, \"Vivaldi\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            301,
                            302,
                            303
                        ],
                        "comments": {},
                        "lines": [
                            "            DeviceType::WindowsCLI => write!(f, \"Windows CLI\"),",
                            "            DeviceType::MacOsCLI => write!(f, \"macOS CLI\"),",
                            "            DeviceType::LinuxCLI => write!(f, \"Linux CLI\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            334,
                            335,
                            336
                        ],
                        "comments": {},
                        "lines": [
                            "            23 => DeviceType::WindowsCLI,",
                            "            24 => DeviceType::MacOsCLI,",
                            "            25 => DeviceType::LinuxCLI,"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "19": "        pub atype: i32,         // https://github.com/bitwarden/server/blob/dcc199bcce4aa2d5621f6fab80f1b49d8b143418/src/Core/Enums/DeviceType.cs"
            },
            "comment_deleted_diff": {
                "19": "        pub atype: i32,         // https://github.com/bitwarden/server/blob/master/src/Core/Enums/DeviceType.cs"
            },
            "comment_modified_diff": {
                "19": "        pub atype: i32,         // https://github.com/bitwarden/server/blob/master/src/Core/Enums/DeviceType.cs"
            }
        }
    ],
    "mod.rs": [
        {
            "commit": "98b2178c7d314a0c4f8d85bf4f5396c7704bc88d",
            "timestamp": "2024-01-01T15:44:02+01:00",
            "author": "Philipp Kolberg",
            "commit_message": "Allow customizing the featureStates (#4168)\n\n* Allow customizing the featureStates\r\n\r\nUse a comma separated list of features to enable using the FEATURE_FLAGS env variable\r\n\r\n* Move feature flag parsing to util\r\n\r\n* Fix formatting\r\n\r\n* Update supported feature flags\r\n\r\n* Rename feature_flags to experimental_client_feature_flags\r\n\r\nAdditionally, use a caret (^) instead of an exclamation mark (!) to disable features\r\n\r\n* Fix formatting issue.\r\n\r\n* Add documentation to env template\r\n\r\n* Remove functionality to disable feature flags\r\n\r\n* Fix JSON key for feature states\r\n\r\n* Convert error to warning when feature flag is unrecognized\r\n\r\n* Simplify parsing of feature flags\r\n\r\n* Fix default value of feature flags in env template\r\n\r\n* Fix formatting",
            "additions": 4,
            "deletions": 10,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "216": "          // Any feature flags that we want the clients to use",
                "217": "          // Can check the enabled ones at:",
                "218": "          // https://vault.bitwarden.com/api/config",
                "219": "          \"fido2-vault-credentials\": true,  // Passkey support",
                "220": "          \"autofill-v2\": false,             // Disabled because it is causing issues https://github.com/dani-garcia/vaultwarden/discussions/4052"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "2c36993792e187ba7517c7e691d67ac12645ea87",
            "timestamp": "2024-01-01T19:41:40+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "enforce 2FA policy on removal of second factor and login (#3803)\n\n* enforce 2fa policy on removal of second factor\r\n\r\nusers should be revoked when their second factors are removed.\r\n\r\nwe want to revoke users so they don't have to be invited again and\r\norganization admins and owners are aware that they no longer have\r\naccess.\r\n\r\nwe make an exception for non-confirmed users to speed up the invitation\r\nprocess as they would have to be restored before they can accept their\r\ninvitation or be confirmed.\r\n\r\nif email is enabled, invited users have to add a second factor before\r\nthey can accept the invitation to an organization with 2fa policy.\r\nand if it is not enabled that check is done when confirming the user.\r\n\r\n* use &str instead of String in log_event()\r\n\r\n* enforce the 2fa policy on login\r\n\r\nif a user doesn't have a second factor check if they are in an\r\norganization that has the 2fa policy enabled to revoke their access",
            "additions": 79,
            "deletions": 17,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            184,
                            185,
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192,
                            193,
                            194,
                            195,
                            196,
                            197,
                            198,
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208,
                            209,
                            210,
                            211,
                            212,
                            213,
                            214,
                            215,
                            216,
                            217
                        ],
                        "comments": {
                            "183": "        // Policy only applies to non-Owner/non-Admin members who have accepted joining the org"
                        },
                        "lines": [
                            "        if member.atype < UserOrgType::Admin {",
                            "            if CONFIG.mail_enabled() {",
                            "                let org = Organization::find_by_uuid(&member.org_uuid, conn).await.unwrap();",
                            "                mail::send_2fa_removed_from_org(&user.email, &org.name).await?;",
                            "            }",
                            "            let mut member = member;",
                            "            member.revoke();",
                            "            member.save(conn).await?;",
                            "",
                            "            log_event(",
                            "                EventType::OrganizationUserRevoked as i32,",
                            "                &member.uuid,",
                            "                &member.org_uuid,",
                            "                act_uuid,",
                            "                device_type,",
                            "                ip,",
                            "                conn,",
                            "            )",
                            "            .await;",
                            "        }",
                            "    }",
                            "",
                            "    Ok(())",
                            "}",
                            "",
                            "pub async fn enforce_2fa_policy_for_org(",
                            "    org_uuid: &str,",
                            "    act_uuid: &str,",
                            "    device_type: i32,",
                            "    ip: &std::net::IpAddr,",
                            "    conn: &mut DbConn,",
                            ") -> EmptyResult {",
                            "    let org = Organization::find_by_uuid(org_uuid, conn).await.unwrap();",
                            "    for member in UserOrganization::find_confirmed_by_org(org_uuid, conn).await.into_iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            219,
                            220,
                            221,
                            222,
                            223,
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236,
                            237,
                            238,
                            239,
                            240,
                            241,
                            242,
                            243
                        ],
                        "comments": {
                            "218": "        // Don't enforce the policy for Admins and Owners."
                        },
                        "lines": [
                            "        if member.atype < UserOrgType::Admin && TwoFactor::find_by_user(&member.user_uuid, conn).await.is_empty() {",
                            "            if CONFIG.mail_enabled() {",
                            "                let user = User::find_by_uuid(&member.user_uuid, conn).await.unwrap();",
                            "                mail::send_2fa_removed_from_org(&user.email, &org.name).await?;",
                            "            }",
                            "            let mut member = member;",
                            "            member.revoke();",
                            "            member.save(conn).await?;",
                            "",
                            "            log_event(",
                            "                EventType::OrganizationUserRevoked as i32,",
                            "                &member.uuid,",
                            "                org_uuid,",
                            "                act_uuid,",
                            "                device_type,",
                            "                ip,",
                            "                conn,",
                            "            )",
                            "            .await;",
                            "        }",
                            "    }",
                            "",
                            "    Ok(())",
                            "}",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "183": "        // Policy only applies to non-Owner/non-Admin members who have accepted joining the org",
                "218": "        // Don't enforce the policy for Admins and Owners."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "e1a8df96dbadfbf5ad36ce9aa2f31f34396166c2",
            "timestamp": "2024-04-06T14:42:53+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update Key Rotation web-vault v2024.3.x (#4446)\n\nKey rotation was changed since 2024.1.x.\r\nMultiple other items were added to be rotated like password-reset and emergency-access data to be part of just one POST instead of having multiple.\r\n\r\nSee: https://github.com/dani-garcia/bw_web_builds/pull/157",
            "additions": 5,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            197
                        ],
                        "comments": {
                            "196": "    // Force the new key rotation feature"
                        },
                        "lines": [
                            "    feature_states.insert(\"key-rotation-improvements\".to_string(), true);"
                        ]
                    },
                    {
                        "line_numbers": [
                            204
                        ],
                        "comments": {},
                        "lines": [
                            "        \"version\": \"2024.2.0\","
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "196": "    // Force the new key rotation feature"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 29,
            "deletions": 34,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": [
                    {
                        "line_numbers": [
                            62,
                            63,
                            64
                        ],
                        "comments": {
                            "59": "#[derive(Serialize, Deserialize, Debug)]",
                            "60": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "    Type: i32,",
                            "    Domains: Vec<String>,",
                            "    Excluded: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            84
                        ],
                        "comments": {},
                        "lines": [
                            "        global.Excluded = excluded_globals.contains(&global.Type);"
                        ]
                    },
                    {
                        "line_numbers": [
                            88
                        ],
                        "comments": {},
                        "lines": [
                            "        globals.retain(|g| !g.Excluded);"
                        ]
                    },
                    {
                        "line_numbers": [
                            92,
                            93,
                            94
                        ],
                        "comments": {},
                        "lines": [
                            "        \"EquivalentDomains\": equivalent_domains,",
                            "        \"GlobalEquivalentDomains\": globals,",
                            "        \"Object\": \"domains\","
                        ]
                    },
                    {
                        "line_numbers": [
                            101,
                            102
                        ],
                        "comments": {},
                        "lines": [
                            "    ExcludedGlobalEquivalentDomains: Option<Vec<i32>>,",
                            "    EquivalentDomains: Option<Vec<Vec<String>>>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            107
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<EquivDomainData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            112
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: EquivDomainData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            114,
                            115
                        ],
                        "comments": {},
                        "lines": [
                            "    let excluded_globals = data.ExcludedGlobalEquivalentDomains.unwrap_or_default();",
                            "    let equivalent_domains = data.EquivalentDomains.unwrap_or_default();"
                        ]
                    },
                    {
                        "line_numbers": [
                            131,
                            132,
                            133,
                            134,
                            135,
                            136
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_eq_domains(",
                            "    data: JsonUpcase<EquivDomainData>,",
                            "    headers: Headers,",
                            "    conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            160,
                            161,
                            162,
                            163,
                            164,
                            165,
                            166,
                            167,
                            168
                        ],
                        "comments": {},
                        "lines": [
                            "            \"Name\": \"HaveIBeenPwned\",",
                            "            \"Title\": \"Manual HIBP Check\",",
                            "            \"Domain\": \"haveibeenpwned.com\",",
                            "            \"BreachDate\": \"2019-08-18T00:00:00Z\",",
                            "            \"AddedDate\": \"2019-08-18T00:00:00Z\",",
                            "            \"Description\": format!(\"Go to: <a href=\\\"https://haveibeenpwned.com/account/{username}\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">https://haveibeenpwned.com/account/{username}</a> for a manual check.<br/><br/>HaveIBeenPwned API key not set!<br/>Go to <a href=\\\"https://haveibeenpwned.com/API/Key\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">https://haveibeenpwned.com/API/Key</a> to purchase an API key from HaveIBeenPwned.<br/><br/>\"),",
                            "            \"LogoPath\": \"vw_static/hibp.png\",",
                            "            \"PwnCount\": 0,",
                            "            \"DataClasses\": ["
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "160": "            \"description\": format!(\"Go to: <a href=\\\"https://haveibeenpwned.com/account/{username}\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">https://haveibeenpwned.com/account/{username}</a> for a manual check.<br/><br/>HaveIBeenPwned API key not set!<br/>Go to <a href=\\\"https://haveibeenpwned.com/API/Key\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">https://haveibeenpwned.com/API/Key</a> to purchase an API key from HaveIBeenPwned.<br/><br/>\"),"
            },
            "comment_deleted_diff": {
                "165": "            \"Description\": format!(\"Go to: <a href=\\\"https://haveibeenpwned.com/account/{username}\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">https://haveibeenpwned.com/account/{username}</a> for a manual check.<br/><br/>HaveIBeenPwned API key not set!<br/>Go to <a href=\\\"https://haveibeenpwned.com/API/Key\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">https://haveibeenpwned.com/API/Key</a> to purchase an API key from HaveIBeenPwned.<br/><br/>\"),"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "aa0fe7785a875a1fae12863cbe3f0b06b691f30c",
            "timestamp": "2024-08-22T21:42:30+02:00",
            "author": "philomathic_life",
            "commit_message": "Remove `version` from server config info (#4885)",
            "additions": 1,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {
                "205": "          \"url\": \"https://github.com/dani-garcia/vaultwarden\""
            },
            "comment_deleted_diff": {
                "205": "          \"url\": \"https://github.com/dani-garcia/vaultwarden\","
            },
            "comment_modified_diff": {
                "205": "          \"url\": \"https://github.com/dani-garcia/vaultwarden\","
            }
        },
        {
            "commit": "38aad4f7bedfb4279ecb385e036b1d84f3d59483",
            "timestamp": "2024-11-10T23:59:06+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Limit HIBP to authed users",
            "additions": 6,
            "deletions": 6,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {
                "142": "            \"https://haveibeenpwned.com/api/v3/breachedaccount/{username}?truncateResponse=false&includeUnverified=false\""
            },
            "comment_deleted_diff": {
                "141": "        \"https://haveibeenpwned.com/api/v3/breachedaccount/{username}?truncateResponse=false&includeUnverified=false\""
            },
            "comment_modified_diff": {}
        }
    ],
    ".env.template": [],
    "config.rs": [
        {
            "commit": "98b2178c7d314a0c4f8d85bf4f5396c7704bc88d",
            "timestamp": "2024-01-01T15:44:02+01:00",
            "author": "Philipp Kolberg",
            "commit_message": "Allow customizing the featureStates (#4168)\n\n* Allow customizing the featureStates\r\n\r\nUse a comma separated list of features to enable using the FEATURE_FLAGS env variable\r\n\r\n* Move feature flag parsing to util\r\n\r\n* Fix formatting\r\n\r\n* Update supported feature flags\r\n\r\n* Rename feature_flags to experimental_client_feature_flags\r\n\r\nAdditionally, use a caret (^) instead of an exclamation mark (!) to disable features\r\n\r\n* Fix formatting issue.\r\n\r\n* Add documentation to env template\r\n\r\n* Remove functionality to disable feature flags\r\n\r\n* Fix JSON key for feature states\r\n\r\n* Convert error to warning when feature flag is unrecognized\r\n\r\n* Simplify parsing of feature flags\r\n\r\n* Fix default value of feature flags in env template\r\n\r\n* Fix formatting",
            "additions": 12,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            551,
                            552
                        ],
                        "comments": {
                            "550": "        /// Customize the enabled feature flags on the clients |> This is a comma separated list of feature flags to enable."
                        },
                        "lines": [
                            "        experimental_client_feature_flags: String, false, def, \"fido2-vault-credentials\".to_string();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            757,
                            758,
                            759,
                            760,
                            761,
                            762,
                            763,
                            764
                        ],
                        "comments": {},
                        "lines": [
                            "    const KNOWN_FLAGS: &[&str] =",
                            "        &[\"autofill-overlay\", \"autofill-v2\", \"browser-fileless-import\", \"fido2-vault-credentials\"];",
                            "    for flag in parse_experimental_client_feature_flags(&cfg.experimental_client_feature_flags).keys() {",
                            "        if !KNOWN_FLAGS.contains(&flag.as_str()) {",
                            "            warn!(\"The experimental client feature flag {flag:?} is unrecognized. Please ensure the feature flag is spelled correctly and that it is supported in this version.\");",
                            "        }",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "550": "        /// Customize the enabled feature flags on the clients |> This is a comma separated list of feature flags to enable."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "d672ad3f76e9cf8437fbe58fb82791e4212382c8",
            "timestamp": "2024-01-01T16:01:57+01:00",
            "author": "THONY",
            "commit_message": "US or EU Data Region Selection (#3752)\n\n* add selection of data region for push\r\n\r\n* fix cargo check + rewrite config + add check url\r\n\r\n* fix clippy error\r\n\r\n* add comment in .env.template, adapt config.rs\r\n\r\n* Update .env.template\r\n\r\nCo-authored-by: William Desportes <williamdes@wdes.fr>\r\n\r\n* Update .env.template\r\n\r\nCo-authored-by: William Desportes <williamdes@wdes.fr>\r\n\r\n* Revert \"Update .env.template\"\r\n\r\nThis reverts commit 5bed974ba7b9f481792d2228834585f053d47dc3.\r\n\r\n* Revert \"Update .env.template\"\r\n\r\nThis reverts commit 0760eff95dfaf2a9cf97bb25f6cf7660bdf55173.\r\n\r\n* fix /connect/token to push identity\r\n\r\n* fix /connect/token to push identity\r\n\r\n* Fixed formatting when solving merge conflicts\r\n\r\n---------\r\n\r\nCo-authored-by: William Desportes <williamdes@wdes.fr>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 23,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "383": "        /// Push relay uri"
                        },
                        "lines": []
                    },
                    {
                        "line_numbers": [
                            386
                        ],
                        "comments": {
                            "385": "        /// Push identity uri"
                        },
                        "lines": [
                            "        push_identity_uri:      String, false,  def,    \"https://identity.bitwarden.com\".to_string();"
                        ]
                    },
                    {
                        "line_numbers": [
                            759,
                            760,
                            761,
                            762,
                            763,
                            764,
                            765,
                            766,
                            767,
                            768,
                            769,
                            770,
                            771,
                            772,
                            773,
                            774,
                            775,
                            776,
                            777,
                            778
                        ],
                        "comments": {},
                        "lines": [
                            "    if cfg.push_enabled {",
                            "        let push_relay_uri = cfg.push_relay_uri.to_lowercase();",
                            "        if !push_relay_uri.starts_with(\"https://\") {",
                            "            err!(\"`PUSH_RELAY_URI` must start with 'https://'.\")",
                            "        }",
                            "",
                            "        if Url::parse(&push_relay_uri).is_err() {",
                            "            err!(\"Invalid URL format for `PUSH_RELAY_URI`.\");",
                            "        }",
                            "",
                            "        let push_identity_uri = cfg.push_identity_uri.to_lowercase();",
                            "        if !push_identity_uri.starts_with(\"https://\") {",
                            "            err!(\"`PUSH_IDENTITY_URI` must start with 'https://'.\")",
                            "        }",
                            "",
                            "        if Url::parse(&push_identity_uri).is_err() {",
                            "            err!(\"Invalid URL format for `PUSH_IDENTITY_URI`.\");",
                            "        }",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "383": "        /// Push relay uri",
                "385": "        /// Push identity uri",
                "386": "        push_identity_uri:      String, false,  def,    \"https://identity.bitwarden.com\".to_string();",
                "761": "        if !push_relay_uri.starts_with(\"https://\") {",
                "762": "            err!(\"`PUSH_RELAY_URI` must start with 'https://'.\")",
                "770": "        if !push_identity_uri.starts_with(\"https://\") {",
                "771": "            err!(\"`PUSH_IDENTITY_URI` must start with 'https://'.\")"
            },
            "comment_deleted_diff": {
                "383": "        /// Push relay base uri"
            },
            "comment_modified_diff": {
                "383": "        /// Push relay base uri"
            }
        },
        {
            "commit": "596c16731284b46a152a655f92bddd0103c632e6",
            "timestamp": "2024-01-10T19:02:36+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "improve emergency access when not enabled (#4227)\n\n* improve emergency access when not enabled\r\n\r\n* display note that emergency access is disabled",
            "additions": 1,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "483": "        /// Enable emergency access |> Controls whether users can enable emergency access to their accounts. This setting applies globally to all users."
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "483": "        /// Enable emergency access |> Controls whether users can enable emergency access to their accounts. This setting applies globally to all users."
            },
            "comment_deleted_diff": {
                "483": "        /// Allow emergency access |> Controls whether users can enable emergency access to their accounts. This setting applies globally to all users."
            },
            "comment_modified_diff": {
                "483": "        /// Allow emergency access |> Controls whether users can enable emergency access to their accounts. This setting applies globally to all users."
            }
        },
        {
            "commit": "edf7484a70942de387d59c5d5cf849f24180ba66",
            "timestamp": "2024-01-27T02:43:26+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improve file limit handling (#4242)\n\n* Improve file limit handling\r\n\r\n* Oops\r\n\r\n* Update PostgreSQL migration\r\n\r\n* Review comments\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>",
            "additions": 22,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            446
                        ],
                        "comments": {
                            "445": "        /// Per-user send storage limit (KB) |> Max kilobytes of sends storage allowed per user. When this limit is reached, the user will not be allowed to upload further sends."
                        },
                        "lines": [
                            "        user_send_limit:   i64,    true,   option;"
                        ]
                    },
                    {
                        "line_numbers": [
                            789,
                            790,
                            791,
                            792,
                            793,
                            794,
                            795,
                            796,
                            797,
                            798,
                            799,
                            800,
                            801,
                            802,
                            803,
                            804,
                            805,
                            806,
                            807,
                            808
                        ],
                        "comments": {},
                        "lines": [
                            "    const MAX_FILESIZE_KB: i64 = i64::MAX >> 10;",
                            "",
                            "    if let Some(limit) = cfg.user_attachment_limit {",
                            "        if !(0i64..=MAX_FILESIZE_KB).contains(&limit) {",
                            "            err!(\"`USER_ATTACHMENT_LIMIT` is out of bounds\");",
                            "        }",
                            "    }",
                            "",
                            "    if let Some(limit) = cfg.org_attachment_limit {",
                            "        if !(0i64..=MAX_FILESIZE_KB).contains(&limit) {",
                            "            err!(\"`ORG_ATTACHMENT_LIMIT` is out of bounds\");",
                            "        }",
                            "    }",
                            "",
                            "    if let Some(limit) = cfg.user_send_limit {",
                            "        if !(0i64..=MAX_FILESIZE_KB).contains(&limit) {",
                            "            err!(\"`USER_SEND_LIMIT` is out of bounds\");",
                            "        }",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "445": "        /// Per-user send storage limit (KB) |> Max kilobytes of sends storage allowed per user. When this limit is reached, the user will not be allowed to upload further sends."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "4b9384cb2bdc98d6805e91f73a0ed6ed8ddfbec3",
            "timestamp": "2024-01-28T23:36:27+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "err on invalid feature flag (#4263)\n\n* err on invalid feature flag\r\n\r\n* print all invalid flags and improve error message",
            "additions": 7,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            784,
                            785,
                            786,
                            787,
                            788,
                            789
                        ],
                        "comments": {
                            "781": "    // TODO: deal with deprecated flags so they can be removed from this list, cf. #4263"
                        },
                        "lines": [
                            "    let configured_flags = parse_experimental_client_feature_flags(&cfg.experimental_client_feature_flags);",
                            "    let invalid_flags: Vec<_> = configured_flags.keys().filter(|flag| !KNOWN_FLAGS.contains(&flag.as_str())).collect();",
                            "    if !invalid_flags.is_empty() {",
                            "        err!(format!(\"Unrecognized experimental client feature flags: {invalid_flags:?}.\\n\\n\\",
                            "                     Please ensure all feature flags are spelled correctly and that they are supported in this version.\\n\\",
                            "                     Supported flags: {KNOWN_FLAGS:?}\"));"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "781": "    // TODO: deal with deprecated flags so they can be removed from this list, cf. #4263"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "34272176867af1d566bd3bc561486a4e7a492ea9",
            "timestamp": "2024-03-17T19:52:55+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Remove custom WebSocket code (#4001)\n\n* Remove custom WebSocket code\r\n\r\nRemove our custom WebSocket code and only use the Rocket code.\r\nRemoved all options in regards to WebSockets\r\nAdded a new option `WEBSOCKET_DISABLED` which defaults too `false`.\r\nThis can be used to disable WebSockets if you really do not want to use it.\r\n\r\n* Addressed remarks given and some updates\r\n\r\n- Addressed comments given during review\r\n- Updated crates, including Rocket to the latest merged v0.5 changes\r\n- Removed an extra header which should not be sent for websocket connections\r\n\r\n* Updated suggestions and crates\r\n\r\n- Addressed the suggestions\r\n- Updated Rocket to latest rc4\r\n  Also made the needed code changes\r\n- Updated all other crates\r\n  Pinned `openssl` and `openssl-sys`\r\n\r\n---------\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 2,
            "deletions": 16,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "375": "        /// Websocket address",
                "377": "        /// Websocket port"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "79ce5b49bc61227101aa0668a4ab3b8bdf4f32ef",
            "timestamp": "2024-03-17T22:35:02+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "automatically use email address as 2fa provider (#4317)",
            "additions": 11,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            690
                        ],
                        "comments": {
                            "689": "        /// Automatically enforce at login |> Setup email 2FA provider regardless of any organization policy"
                        },
                        "lines": [
                            "        email_2fa_enforce_on_verified_invite: bool,   true,   def,      false;"
                        ]
                    },
                    {
                        "line_numbers": [
                            692
                        ],
                        "comments": {
                            "691": "        /// Auto-enable 2FA (Know the risks!) |> Automatically setup email 2FA as fallback provider when needed"
                        },
                        "lines": [
                            "        email_2fa_auto_fallback: bool,  true,   def,      false;"
                        ]
                    },
                    {
                        "line_numbers": [
                            895,
                            896,
                            897,
                            898,
                            899,
                            900,
                            901
                        ],
                        "comments": {},
                        "lines": [
                            "    if !cfg._enable_email_2fa && cfg.email_2fa_enforce_on_verified_invite {",
                            "        err!(\"To enforce email 2FA on verified invitations, email 2fa has to be enabled!\");",
                            "    }",
                            "    if !cfg._enable_email_2fa && cfg.email_2fa_auto_fallback {",
                            "        err!(\"To use email 2FA as automatic fallback, email 2fa has to be enabled!\");",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "689": "        /// Automatically enforce at login |> Setup email 2FA provider regardless of any organization policy",
                "691": "        /// Auto-enable 2FA (Know the risks!) |> Automatically setup email 2FA as fallback provider when needed"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "035f694d2f94df5203bec6c0af951f78fcc888c2",
            "timestamp": "2024-07-12T22:33:11+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improved HTTP client (#4740)\n\n* Improved HTTP client\r\n\r\n* Change config compat to use auto, rename blacklist\r\n\r\n* Fix wrong doc references",
            "additions": 19,
            "deletions": 7,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            151,
                            152,
                            153,
                            154
                        ],
                        "comments": {
                            "150": "                // Copy the values from the deprecated flags to the new ones"
                        },
                        "lines": [
                            "                if config.http_request_block_regex.is_none() {",
                            "                    config.http_request_block_regex = config.icon_blacklist_regex.clone();",
                            "                }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            540
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            542
                        ],
                        "comments": {
                            "541": "        /// [Deprecated] Icon blacklist Regex |> Use `http_request_block_regex` instead"
                        },
                        "lines": [
                            "        icon_blacklist_regex:   String, false,   option;"
                        ]
                    },
                    {
                        "line_numbers": [
                            544,
                            545
                        ],
                        "comments": {
                            "543": "        /// [Deprecated] Icon blacklist non global IPs |> Use `http_request_block_non_global_ips` instead"
                        },
                        "lines": [
                            "        icon_blacklist_non_global_ips:  bool,   false,   def, true;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            548
                        ],
                        "comments": {
                            "546": "        /// Block HTTP domains/IPs by Regex |> Any domains or IPs that match this regex won't be fetched by the internal HTTP client."
                        },
                        "lines": [
                            "        http_request_block_regex:   String, true,   option;"
                        ]
                    },
                    {
                        "line_numbers": [
                            551
                        ],
                        "comments": {
                            "549": "        /// Block non global IPs |> Enabling this will cause the internal HTTP client to refuse to connect to any non global IP address."
                        },
                        "lines": [
                            "        http_request_block_non_global_ips:  bool,   true,   auto, |c| c.icon_blacklist_non_global_ips;"
                        ]
                    },
                    {
                        "line_numbers": [
                            915
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(ref r) = cfg.http_request_block_regex {"
                        ]
                    },
                    {
                        "line_numbers": [
                            919
                        ],
                        "comments": {},
                        "lines": [
                            "            Err(e) => err!(format!(\"`HTTP_REQUEST_BLOCK_REGEX` is invalid: {e:#?}\")),"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "150": "                // Copy the values from the deprecated flags to the new ones",
                "541": "        /// [Deprecated] Icon blacklist Regex |> Use `http_request_block_regex` instead",
                "543": "        /// [Deprecated] Icon blacklist non global IPs |> Use `http_request_block_non_global_ips` instead",
                "546": "        /// Block HTTP domains/IPs by Regex |> Any domains or IPs that match this regex won't be fetched by the internal HTTP client.",
                "549": "        /// Block non global IPs |> Enabling this will cause the internal HTTP client to refuse to connect to any non global IP address.",
                "914": "    // Check if the HTTP request block regex is valid"
            },
            "comment_deleted_diff": {
                "534": "        /// Icon blacklist Regex |> Any domains or IPs that match this regex won't be fetched by the icon service.",
                "537": "        /// Icon blacklist non global IPs |> Any IP which is not defined as a global IP will be blacklisted.",
                "902": "    // Check if the icon blacklist regex is valid"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "de66e56b6c951192bcb47987b34ac21e2bcea43a",
            "timestamp": "2024-07-24T16:49:03+02:00",
            "author": "Timshel",
            "commit_message": "Allow to override log level for specific target (#4305)",
            "additions": 3,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            581
                        ],
                        "comments": {
                            "579": "        /// Log level |> Valid values are \"trace\", \"debug\", \"info\", \"warn\", \"error\" and \"off\"",
                            "580": "        /// For a specific module append it as a comma separated value \"info,path::to::module=debug\""
                        },
                        "lines": [
                            "        log_level:              String, false,  def,    \"info\".to_string();"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "579": "        /// Log level |> Valid values are \"trace\", \"debug\", \"info\", \"warn\", \"error\" and \"off\"",
                "580": "        /// For a specific module append it as a comma separated value \"info,path::to::module=debug\""
            },
            "comment_deleted_diff": {
                "579": "        /// Log level"
            },
            "comment_modified_diff": {
                "579": "        /// Log level"
            }
        },
        {
            "commit": "b4b2701905752f90080dd46ba10a90c5c584a38e",
            "timestamp": "2024-07-24T16:50:35+02:00",
            "author": "0x0fbc",
            "commit_message": "Add support for MFA with Duo's Universal Prompt (#4637)\n\n* Add initial working Duo Universal Prompt support.\r\n\r\n* Add db schema and models for Duo 2FA state storage\r\n\r\n* store duo states in the database and validate during authentication\r\n\r\n* cleanup & comments\r\n\r\n* bump state/nonce length\r\n\r\n* replace stray use of TimeDelta\r\n\r\n* more cleanup\r\n\r\n* bind Duo oauth flow to device id, drop redundant device type handling\r\n\r\n* drop redundant alphanum string generation code\r\n\r\n* error handling cleanup\r\n\r\n* directly use JWT_VALIDITY_SECS constant instead of copying it to DuoClient instances\r\n\r\n* remove redundant explicit returns, rustfmt\r\n\r\n* rearrange constants, update comments, error message\r\n\r\n* override charset on duo state column to ascii for mysql\r\n\r\n* Reduce twofactor_duo_ctx state/nonce column size in postgres and maria\r\n\r\n* Add fixes suggested by clippy\r\n\r\n* rustfmt\r\n\r\n* Update to use the make_http_request\r\n\r\n* Don't handle OrganizationDuo\r\n\r\n* move Duo API endpoint fmt strings out of macros and into format! calls\r\n\r\n* Add missing indentation\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>\r\n\r\n* remove redundant expiry check when purging Duo contexts\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 5,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            420
                        ],
                        "comments": {
                            "418": "        /// Duo Auth context cleanup schedule |> Cron schedule of the job that cleans expired Duo contexts from the database. Does nothing if Duo MFA is disabled or set to use the legacy iframe prompt.",
                            "419": "        /// Defaults to once every minute. Set blank to disable this job."
                        },
                        "lines": [
                            "        duo_context_purge_schedule:   String, false,  def,    \"30 * * * * *\".to_string();"
                        ]
                    },
                    {
                        "line_numbers": [
                            641
                        ],
                        "comments": {},
                        "lines": [
                            "        duo_use_iframe:         bool,   false,  def,     false;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "418": "        /// Duo Auth context cleanup schedule |> Cron schedule of the job that cleans expired Duo contexts from the database. Does nothing if Duo MFA is disabled or set to use the legacy iframe prompt.",
                "419": "        /// Defaults to once every minute. Set blank to disable this job.",
                "640": "        /// Attempt to use deprecated iframe-based Traditional Prompt (Duo WebSDK 2)"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "b428481ac0047df695fb626d6c28f11ec7535cec",
            "timestamp": "2024-07-24T21:49:01+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Allow to increase the note size to 100_000 (#4772)\n\nThis PR adds a config option to allow the note size to increase to 100_000, instead of the default 10_000.\r\nSince this might cause issues with the clients (in the future), and will cause issues with importing into a Bitwarden server, i added warnings regarding this.\r\n\r\nCloses #3168",
            "additions": 12,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            625
                        ],
                        "comments": {
                            "623": "        /// Increase note size limit (Know the risks!) |> Sets the secure note size limit to 100_000 instead of the default 10_000.",
                            "624": "        /// WARNING: This could cause issues with clients. Also exports will not work on Bitwarden servers!"
                        },
                        "lines": [
                            "        increase_note_size_limit:      bool,  true,  def, false;"
                        ]
                    },
                    {
                        "line_numbers": [
                            627
                        ],
                        "comments": {
                            "626": "        /// Generated max_note_size value to prevent if..else matching during every check"
                        },
                        "lines": [
                            "        _max_note_size:                usize, false, gen, |c| if c.increase_note_size_limit {100_000} else {10_000};"
                        ]
                    },
                    {
                        "line_numbers": [
                            1010,
                            1011,
                            1012,
                            1013,
                            1014
                        ],
                        "comments": {},
                        "lines": [
                            "",
                            "    if cfg.increase_note_size_limit {",
                            "        println!(\"[WARNING] Secure Note size limit is increased to 100_000!\");",
                            "        println!(\"[WARNING] This could cause issues with clients. Also exports will not work on Bitwarden servers!.\");",
                            "    }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "623": "        /// Increase note size limit (Know the risks!) |> Sets the secure note size limit to 100_000 instead of the default 10_000.",
                "624": "        /// WARNING: This could cause issues with clients. Also exports will not work on Bitwarden servers!",
                "626": "        /// Generated max_note_size value to prevent if..else matching during every check"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "544b7229e8cc49436d3872ba2022e09231552fa7",
            "timestamp": "2024-08-30T21:37:59+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Allow enforcing Single Org with pw reset policy (#4903)\n\n* Allow enforcing Single Org with pw reset policy\r\n\r\nBitwarden only allows the Reset Password policy to be set when the Single Org policy is enabled already.\r\nThis PR adds a check so that this can be enforced when a config option is enabled.\r\n\r\nSince Vaultwarden encouraged to use multiple orgs when groups were not available yet we should not enable this by default now.\r\nThis might be something to do in the future.\r\n\r\nWhen enabled, it will prevent the Reset Password policy to be enabled if the Single Org policy is not enabled.\r\nIt will also prevent the Single Org policy to be disabled if the Reset Password policy is enabled.\r\n\r\nFixes #4855\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Removed some extra if checks\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 5,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            632
                        ],
                        "comments": {
                            "629": "        /// Enforce Single Org with Reset Password Policy |> Enforce that the Single Org policy is enabled before setting the Reset Password policy",
                            "630": "        /// Bitwarden enforces this by default. In Vaultwarden we encouraged to use multiple organizations because groups were not available.",
                            "631": "        /// Setting this to true will enforce the Single Org Policy to be enabled before you can enable the Reset Password policy."
                        },
                        "lines": [
                            "        enforce_single_org_with_reset_pw_policy: bool, false, def, false;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "629": "        /// Enforce Single Org with Reset Password Policy |> Enforce that the Single Org policy is enabled before setting the Reset Password policy",
                "630": "        /// Bitwarden enforces this by default. In Vaultwarden we encouraged to use multiple organizations because groups were not available.",
                "631": "        /// Setting this to true will enforce the Single Org Policy to be enabled before you can enable the Reset Password policy."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "d184c8f08cfdbc567d47d8edd473b8d22ebe8bd9",
            "timestamp": "2024-09-20T21:39:00+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Fix keyword collision in Rust 2024 and add new api/config value (#4975)\n\n* Avoid keyword collision with gen in Rust 2024\r\n\r\n* Include new api/config setting to disable user registration, not yet used by clients\r\n\r\n* Actually qualify CONFIG",
            "additions": 10,
            "deletions": 10,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            518
                        ],
                        "comments": {
                            "352": "//  def:       Use a default value",
                            "353": "//  auto:      Value is auto generated based on other values",
                            "354": "//  option:    Value is optional",
                            "355": "//  generated: Value is always autogenerated and it's original value ignored"
                        },
                        "lines": [
                            "        _ip_header_enabled:     bool,   false,  generated,    |c| &c.ip_header.trim().to_lowercase() != \"none\";"
                        ]
                    },
                    {
                        "line_numbers": [
                            527
                        ],
                        "comments": {},
                        "lines": [
                            "        _icon_service_url:      String, false,  generated,    |c| generate_icon_service_url(&c.icon_service);"
                        ]
                    },
                    {
                        "line_numbers": [
                            529
                        ],
                        "comments": {},
                        "lines": [
                            "        _icon_service_csp:      String, false,  generated,    |c| generate_icon_service_csp(&c.icon_service, &c._icon_service_url);"
                        ]
                    },
                    {
                        "line_numbers": [
                            627
                        ],
                        "comments": {},
                        "lines": [
                            "        _max_note_size:                usize, false, generated, |c| if c.increase_note_size_limit {100_000} else {10_000};"
                        ]
                    },
                    {
                        "line_numbers": [
                            698
                        ],
                        "comments": {},
                        "lines": [
                            "        _smtp_img_src:                 String, false, generated, |c| generate_smtp_img_src(c.smtp_embed_images, &c.domain);"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "352": "//  def:       Use a default value",
                "353": "//  auto:      Value is auto generated based on other values",
                "354": "//  option:    Value is optional",
                "355": "//  generated: Value is always autogenerated and it's original value ignored"
            },
            "comment_deleted_diff": {
                "352": "//  def:    Use a default value",
                "353": "//  auto:   Value is auto generated based on other values",
                "354": "//  option: Value is optional",
                "355": "//  gen:    Value is always autogenerated and it's original value ignored"
            },
            "comment_modified_diff": {
                "352": "//  def:    Use a default value",
                "353": "//  auto:   Value is auto generated based on other values",
                "354": "//  option: Value is optional",
                "355": "//  gen:    Value is always autogenerated and it's original value ignored"
            }
        },
        {
            "commit": "adb21d5c1acfef9bd06d1ad9cdf3b916b38b201b",
            "timestamp": "2024-11-12T21:22:25+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "fix password hint check (#5189)\n\n* fix password hint check\r\n\r\ndon't show password hints if you have disabled the hints with\r\nPASSWORD_HINTS_ALLOWED=false or if you have not configured mail and\r\nopted into showing password hints\r\n\r\n* update descriptions for pw hints options",
            "additions": 4,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "500": "        /// Allow password hints |> Controls whether users can set or show password hints. This setting applies globally to all users."
                        },
                        "lines": []
                    },
                    {
                        "line_numbers": [],
                        "comments": {
                            "502": "        /// Show password hint (Know the risks!) |> Controls whether a password hint should be shown directly in the web page",
                            "503": "        /// if SMTP service is not configured and password hints are allowed. Not recommended for publicly-accessible instances",
                            "504": "        /// because this provides unauthenticated access to potentially sensitive data."
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "500": "        /// Allow password hints |> Controls whether users can set or show password hints. This setting applies globally to all users.",
                "502": "        /// Show password hint (Know the risks!) |> Controls whether a password hint should be shown directly in the web page",
                "503": "        /// if SMTP service is not configured and password hints are allowed. Not recommended for publicly-accessible instances",
                "504": "        /// because this provides unauthenticated access to potentially sensitive data."
            },
            "comment_deleted_diff": {
                "500": "        /// Allow password hints |> Controls whether users can set password hints. This setting applies globally to all users.",
                "502": "        /// Show password hint |> Controls whether a password hint should be shown directly in the web page",
                "503": "        /// if SMTP service is not configured. Not recommended for publicly-accessible instances as this",
                "504": "        /// provides unauthenticated access to potentially sensitive data."
            },
            "comment_modified_diff": {
                "500": "        /// Allow password hints |> Controls whether users can set password hints. This setting applies globally to all users.",
                "502": "        /// Show password hint |> Controls whether a password hint should be shown directly in the web page",
                "503": "        /// if SMTP service is not configured. Not recommended for publicly-accessible instances as this",
                "504": "        /// provides unauthenticated access to potentially sensitive data."
            }
        }
    ],
    "cipher.rs": [
        {
            "commit": "a641b48884bd66fc8cac4476a69d7f93bf48f2c4",
            "timestamp": "2024-01-01T15:46:03+01:00",
            "author": "Matlink",
            "commit_message": "Fix #3413: push to users accessing the collections using groups (#3757)\n\n* Fix #3413: push to users acessing the collections using groups\r\n\r\n* Notify groups only when enabled",
            "additions": 10,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            277,
                            278,
                            279
                        ],
                        "comments": {
                            "276": "                    // users having access to the collection"
                        },
                        "lines": [
                            "                    let mut collection_users =",
                            "                        UserOrganization::find_by_cipher_and_org(&self.uuid, org_uuid, conn).await;",
                            "                    if CONFIG.org_groups_enabled() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            281,
                            282,
                            283,
                            284,
                            285
                        ],
                        "comments": {
                            "280": "                        // members of a group having access to the collection"
                        },
                        "lines": [
                            "                        let group_users =",
                            "                            UserOrganization::find_by_cipher_and_org_with_group(&self.uuid, org_uuid, conn).await;",
                            "                        collection_users.extend(group_users);",
                            "                    }",
                            "                    for user_org in collection_users {"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "276": "                    // users having access to the collection",
                "280": "                        // members of a group having access to the collection"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "1b801406d6bae8d9773e62d841bba362b7880fbb",
            "timestamp": "2024-01-25T22:02:07+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "prevent side effects if groups are disabled (#4265)",
            "additions": 83,
            "deletions": 43,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            625,
                            626,
                            627,
                            628,
                            629,
                            630,
                            631,
                            632,
                            633,
                            634,
                            635,
                            636,
                            637
                        ],
                        "comments": {
                            "624": "                            // Ensure that users_collections::user_uuid is NULL for unconfirmed users."
                        },
                        "lines": [
                            "                            .and(users_organizations::user_uuid.eq(users_collections::user_uuid))",
                            "                            ))",
                            "                    .left_join(groups_users::table.on(",
                            "                            groups_users::users_organizations_uuid.eq(users_organizations::uuid)",
                            "                            ))",
                            "                    .left_join(groups::table.on(",
                            "                            groups::uuid.eq(groups_users::groups_uuid)",
                            "                            ))",
                            "                    .left_join(collections_groups::table.on(",
                            "                            collections_groups::collections_uuid.eq(ciphers_collections::collection_uuid).and(",
                            "                                collections_groups::groups_uuid.eq(groups::uuid)",
                            "                                )",
                            "                            ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            643,
                            644,
                            645,
                            646
                        ],
                        "comments": {
                            "638": "                    .filter(ciphers::user_uuid.eq(user_uuid)) // Cipher owner",
                            "639": "                    .or_filter(users_organizations::access_all.eq(true)) // access_all in org",
                            "640": "                    .or_filter(users_collections::user_uuid.eq(user_uuid)) // Access to collection",
                            "641": "                    .or_filter(groups::access_all.eq(true)) // Access via groups",
                            "642": "                    .or_filter(collections_groups::collections_uuid.is_not_null()) // Access via groups"
                        },
                        "lines": [
                            "                    .into_boxed();",
                            "",
                            "                if !visible_only {",
                            "                    query = query.or_filter("
                        ]
                    },
                    {
                        "line_numbers": [
                            648,
                            649
                        ],
                        "comments": {
                            "647": "                        users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin/owner"
                        },
                        "lines": [
                            "                        );",
                            "                }"
                        ]
                    },
                    {
                        "line_numbers": [
                            651,
                            652,
                            653,
                            654,
                            655,
                            656,
                            657,
                            658,
                            659,
                            660,
                            661,
                            662,
                            663,
                            664,
                            665,
                            666,
                            667,
                            668
                        ],
                        "comments": {},
                        "lines": [
                            "                query",
                            "                    .select(ciphers::all_columns)",
                            "                    .distinct()",
                            "                    .load::<CipherDb>(conn).expect(\"Error loading ciphers\").from_db()",
                            "            }}",
                            "        } else {",
                            "            db_run! {conn: {",
                            "                let mut query = ciphers::table",
                            "                    .left_join(ciphers_collections::table.on(",
                            "                            ciphers::uuid.eq(ciphers_collections::cipher_uuid)",
                            "                            ))",
                            "                    .left_join(users_organizations::table.on(",
                            "                            ciphers::organization_uuid.eq(users_organizations::org_uuid.nullable())",
                            "                            .and(users_organizations::user_uuid.eq(user_uuid))",
                            "                            .and(users_organizations::status.eq(UserOrgStatus::Confirmed as i32))",
                            "                            ))",
                            "                    .left_join(users_collections::table.on(",
                            "                            ciphers_collections::collection_uuid.eq(users_collections::collection_uuid)"
                        ]
                    },
                    {
                        "line_numbers": [
                            670,
                            671
                        ],
                        "comments": {
                            "669": "                            // Ensure that users_collections::user_uuid is NULL for unconfirmed users."
                        },
                        "lines": [
                            "                            .and(users_organizations::user_uuid.eq(users_collections::user_uuid))",
                            "                            ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            675,
                            676,
                            677,
                            678
                        ],
                        "comments": {
                            "672": "                    .filter(ciphers::user_uuid.eq(user_uuid)) // Cipher owner",
                            "673": "                    .or_filter(users_organizations::access_all.eq(true)) // access_all in org",
                            "674": "                    .or_filter(users_collections::user_uuid.eq(user_uuid)) // Access to collection"
                        },
                        "lines": [
                            "                    .into_boxed();",
                            "",
                            "                    if !visible_only {",
                            "                        query = query.or_filter("
                        ]
                    },
                    {
                        "line_numbers": [
                            680,
                            681,
                            682,
                            683,
                            684,
                            685,
                            686,
                            687,
                            688
                        ],
                        "comments": {
                            "679": "                            users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin/owner"
                        },
                        "lines": [
                            "                            );",
                            "                    }",
                            "",
                            "                query",
                            "                    .select(ciphers::all_columns)",
                            "                    .distinct()",
                            "                    .load::<CipherDb>(conn).expect(\"Error loading ciphers\").from_db()",
                            "            }}",
                            "        }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "624": "                            // Ensure that users_collections::user_uuid is NULL for unconfirmed users.",
                "638": "                    .filter(ciphers::user_uuid.eq(user_uuid)) // Cipher owner",
                "639": "                    .or_filter(users_organizations::access_all.eq(true)) // access_all in org",
                "640": "                    .or_filter(users_collections::user_uuid.eq(user_uuid)) // Access to collection",
                "641": "                    .or_filter(groups::access_all.eq(true)) // Access via groups",
                "642": "                    .or_filter(collections_groups::collections_uuid.is_not_null()) // Access via groups",
                "647": "                        users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin/owner",
                "669": "                            // Ensure that users_collections::user_uuid is NULL for unconfirmed users.",
                "672": "                    .filter(ciphers::user_uuid.eq(user_uuid)) // Cipher owner",
                "673": "                    .or_filter(users_organizations::access_all.eq(true)) // access_all in org",
                "674": "                    .or_filter(users_collections::user_uuid.eq(user_uuid)) // Access to collection",
                "679": "                            users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin/owner"
            },
            "comment_deleted_diff": {
                "617": "                        // Ensure that users_collections::user_uuid is NULL for unconfirmed users.",
                "631": "                .filter(ciphers::user_uuid.eq(user_uuid)) // Cipher owner",
                "632": "                .or_filter(users_organizations::access_all.eq(true)) // access_all in org",
                "633": "                .or_filter(users_collections::user_uuid.eq(user_uuid)) // Access to collection",
                "634": "                .or_filter(groups::access_all.eq(true)) // Access via groups",
                "635": "                .or_filter(collections_groups::collections_uuid.is_not_null()) // Access via groups",
                "640": "                    users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin/owner"
            },
            "comment_modified_diff": {
                "640": "                    users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin/owner"
            }
        },
        {
            "commit": "d42b264a93eace528dc20f0cd363742d4fbce448",
            "timestamp": "2024-07-03T21:11:04+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix collections and native app issue (#4685)\n\nCollections were not visible in the organization view.\r\nThis was because the `flexibleCollections` was set to `true`\r\n\r\nFound an issue with loading some old created Secure Notes which had `{}` or `{\"type\":null}` as there `data` value.\r\nThis isn't allowed. When detected, replace it with `{\"type\":0}`\r\n\r\nFixes #4682\r\nFixes #4590",
            "additions": 6,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            194,
                            195,
                            196,
                            197
                        ],
                        "comments": {
                            "192": "        // Fix secure note issues when data is `{}`",
                            "193": "        // This breaks at least the native mobile clients"
                        },
                        "lines": [
                            "        if self.atype == 2 && (self.data.eq(\"{}\") || self.data.to_ascii_lowercase().eq(\"{\\\"type\\\":null}\")) {",
                            "            type_data_json = json!({\"type\": 0});",
                            "        }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "192": "        // Fix secure note issues when data is `{}`",
                "193": "        // This breaks at least the native mobile clients"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "fda77afc2a802f6e7607c19ad12b5f93520a688e",
            "timestamp": "2024-07-04T20:28:19+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "add group support for Cipher::get_collections() (#4592)\n\n* add group support for Cipher::get_collections()\r\n\r\njoin group infos assigned to a collection to check\r\nwhether user has been given access to all collections via any group\r\nor they have access to a specific collection via any group membership\r\n\r\n* fix Collection::is_writable_by_user()\r\n\r\nprevent side effects if groups are disabled\r\n\r\n* differentiate the /collection endpoints\r\n\r\n* return cipherDetails on post_collections_update()\r\n\r\n* add collections_v2 endpoint",
            "additions": 118,
            "deletions": 25,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            807
                        ],
                        "comments": {
                            "805": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                            "806": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection"
                        },
                        "lines": [
                            "                            .and(users_collections::read_only.eq(false)))"
                        ]
                    },
                    {
                        "line_numbers": [
                            810,
                            811,
                            812,
                            813,
                            814,
                            815,
                            816,
                            817,
                            818,
                            819,
                            820,
                            821,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            829
                        ],
                        "comments": {
                            "808": "                        .or(groups::access_all.eq(true)) // Access via groups",
                            "809": "                        .or(collections_groups::collections_uuid.is_not_null() // Access via groups"
                        },
                        "lines": [
                            "                            .and(collections_groups::read_only.eq(false)))",
                            "                    )",
                            "                    .select(ciphers_collections::collection_uuid)",
                            "                    .load::<String>(conn).unwrap_or_default()",
                            "            }}",
                            "        } else {",
                            "            db_run! {conn: {",
                            "                ciphers_collections::table",
                            "                    .filter(ciphers_collections::cipher_uuid.eq(&self.uuid))",
                            "                    .inner_join(collections::table.on(",
                            "                        collections::uuid.eq(ciphers_collections::collection_uuid)",
                            "                    ))",
                            "                    .inner_join(users_organizations::table.on(",
                            "                        users_organizations::org_uuid.eq(collections::org_uuid)",
                            "                        .and(users_organizations::user_uuid.eq(user_id.clone()))",
                            "                    ))",
                            "                    .left_join(users_collections::table.on(",
                            "                        users_collections::collection_uuid.eq(ciphers_collections::collection_uuid)",
                            "                        .and(users_collections::user_uuid.eq(user_id.clone()))",
                            "                    ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            832,
                            833,
                            834,
                            835,
                            836,
                            837,
                            838,
                            839,
                            840,
                            841,
                            842,
                            843,
                            844,
                            845,
                            846,
                            847,
                            848,
                            849,
                            850,
                            851,
                            852,
                            853,
                            854,
                            855,
                            856,
                            857,
                            858,
                            859,
                            860,
                            861,
                            862,
                            863
                        ],
                        "comments": {
                            "830": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                            "831": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection"
                        },
                        "lines": [
                            "                            .and(users_collections::read_only.eq(false)))",
                            "                    )",
                            "                    .select(ciphers_collections::collection_uuid)",
                            "                    .load::<String>(conn).unwrap_or_default()",
                            "            }}",
                            "        }",
                            "    }",
                            "",
                            "    pub async fn get_admin_collections(&self, user_id: String, conn: &mut DbConn) -> Vec<String> {",
                            "        if CONFIG.org_groups_enabled() {",
                            "            db_run! {conn: {",
                            "                ciphers_collections::table",
                            "                    .filter(ciphers_collections::cipher_uuid.eq(&self.uuid))",
                            "                    .inner_join(collections::table.on(",
                            "                        collections::uuid.eq(ciphers_collections::collection_uuid)",
                            "                    ))",
                            "                    .left_join(users_organizations::table.on(",
                            "                        users_organizations::org_uuid.eq(collections::org_uuid)",
                            "                        .and(users_organizations::user_uuid.eq(user_id.clone()))",
                            "                    ))",
                            "                    .left_join(users_collections::table.on(",
                            "                        users_collections::collection_uuid.eq(ciphers_collections::collection_uuid)",
                            "                        .and(users_collections::user_uuid.eq(user_id.clone()))",
                            "                    ))",
                            "                    .left_join(groups_users::table.on(",
                            "                        groups_users::users_organizations_uuid.eq(users_organizations::uuid)",
                            "                    ))",
                            "                    .left_join(groups::table.on(groups::uuid.eq(groups_users::groups_uuid)))",
                            "                    .left_join(collections_groups::table.on(",
                            "                        collections_groups::collections_uuid.eq(ciphers_collections::collection_uuid)",
                            "                        .and(collections_groups::groups_uuid.eq(groups::uuid))",
                            "                    ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            866
                        ],
                        "comments": {
                            "864": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                            "865": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection"
                        },
                        "lines": [
                            "                            .and(users_collections::read_only.eq(false)))"
                        ]
                    },
                    {
                        "line_numbers": [
                            869
                        ],
                        "comments": {
                            "867": "                        .or(groups::access_all.eq(true)) // Access via groups",
                            "868": "                        .or(collections_groups::collections_uuid.is_not_null() // Access via groups"
                        },
                        "lines": [
                            "                            .and(collections_groups::read_only.eq(false)))"
                        ]
                    },
                    {
                        "line_numbers": [
                            871,
                            872,
                            873,
                            874,
                            875,
                            876,
                            877,
                            878,
                            879,
                            880,
                            881,
                            882,
                            883,
                            884,
                            885,
                            886,
                            887,
                            888,
                            889
                        ],
                        "comments": {
                            "870": "                        .or(users_organizations::atype.le(UserOrgType::Admin as i32)) // User is admin or owner"
                        },
                        "lines": [
                            "                    )",
                            "                    .select(ciphers_collections::collection_uuid)",
                            "                    .load::<String>(conn).unwrap_or_default()",
                            "            }}",
                            "        } else {",
                            "            db_run! {conn: {",
                            "                ciphers_collections::table",
                            "                    .filter(ciphers_collections::cipher_uuid.eq(&self.uuid))",
                            "                    .inner_join(collections::table.on(",
                            "                        collections::uuid.eq(ciphers_collections::collection_uuid)",
                            "                    ))",
                            "                    .inner_join(users_organizations::table.on(",
                            "                        users_organizations::org_uuid.eq(collections::org_uuid)",
                            "                        .and(users_organizations::user_uuid.eq(user_id.clone()))",
                            "                    ))",
                            "                    .left_join(users_collections::table.on(",
                            "                        users_collections::collection_uuid.eq(ciphers_collections::collection_uuid)",
                            "                        .and(users_collections::user_uuid.eq(user_id.clone()))",
                            "                    ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            892
                        ],
                        "comments": {
                            "890": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                            "891": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection"
                        },
                        "lines": [
                            "                            .and(users_collections::read_only.eq(false)))"
                        ]
                    },
                    {
                        "line_numbers": [
                            894,
                            895,
                            896,
                            897,
                            898
                        ],
                        "comments": {
                            "893": "                        .or(users_organizations::atype.le(UserOrgType::Admin as i32)) // User is admin or owner"
                        },
                        "lines": [
                            "                    )",
                            "                    .select(ciphers_collections::collection_uuid)",
                            "                    .load::<String>(conn).unwrap_or_default()",
                            "            }}",
                            "        }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "805": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                "806": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection",
                "808": "                        .or(groups::access_all.eq(true)) // Access via groups",
                "809": "                        .or(collections_groups::collections_uuid.is_not_null() // Access via groups",
                "830": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                "831": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection",
                "864": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                "865": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection",
                "867": "                        .or(groups::access_all.eq(true)) // Access via groups",
                "868": "                        .or(collections_groups::collections_uuid.is_not_null() // Access via groups",
                "870": "                        .or(users_organizations::atype.le(UserOrgType::Admin as i32)) // User is admin or owner",
                "890": "                    .filter(users_organizations::access_all.eq(true) // User has access all",
                "891": "                        .or(users_collections::user_uuid.eq(user_id) // User has access to collection",
                "893": "                        .or(users_organizations::atype.le(UserOrgType::Admin as i32)) // User is admin or owner"
            },
            "comment_deleted_diff": {
                "798": "            .filter(users_collections::user_uuid.eq(user_id).or( // User has access to collection",
                "799": "                users_organizations::access_all.eq(true).or( // User has access all",
                "800": "                    users_organizations::atype.le(UserOrgType::Admin as i32) // User is admin or owner"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "a4ab014ade53e4e60bda0b9cbce3af9de7eac753",
            "timestamp": "2024-07-10T22:13:55+02:00",
            "author": "Coby Geralnik",
            "commit_message": "Fix bug where secureNotes is empty (#4730)",
            "additions": 4,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            194,
                            195,
                            196
                        ],
                        "comments": {
                            "192": "        // Fix secure note issues when data is invalid"
                        },
                        "lines": [
                            "        if self.atype == 2",
                            "            && (self.data.is_empty() || self.data.eq(\"{}\") || self.data.to_ascii_lowercase().eq(\"{\\\"type\\\":null}\"))",
                            "        {"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "192": "        // Fix secure note issues when data is invalid"
            },
            "comment_deleted_diff": {
                "192": "        // Fix secure note issues when data is `{}`"
            },
            "comment_modified_diff": {
                "192": "        // Fix secure note issues when data is `{}`"
            }
        },
        {
            "commit": "dca14285fd1506c28f32108ea82da6e1525a8e99",
            "timestamp": "2024-09-09T11:36:37+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix sync with new native clients (#4932)",
            "additions": 46,
            "deletions": 11,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            95
                        ],
                        "comments": {
                            "88": "            // Validate the note size and if it is exceeded return a warning"
                        },
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            97,
                            98,
                            99,
                            100,
                            101,
                            102,
                            103,
                            104,
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112
                        ],
                        "comments": {
                            "96": "            // Validate the password history if it contains `null` values and if so, return a warning"
                        },
                        "lines": [
                            "            if let Some(Value::Array(password_history)) = &cipher.password_history {",
                            "                for pwh in password_history {",
                            "                    if let Value::Object(pwo) = pwh {",
                            "                        if pwo.get(\"password\").is_some_and(|p| !p.is_string()) {",
                            "                            validation_errors.insert(",
                            "                                format!(\"Ciphers[{index}].Notes\"),",
                            "                                serde_json::to_value([",
                            "                                    \"The password history contains a `null` value. Only strings are allowed.\",",
                            "                                ])",
                            "                                .unwrap(),",
                            "                            );",
                            "                            break;",
                            "                        }",
                            "                    }",
                            "                }",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            114
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            176
                        ],
                        "comments": {},
                        "lines": [
                            "                    .inspect_err(|e| warn!(\"Error parsing fields {e:?} for {}\", self.uuid))"
                        ]
                    },
                    {
                        "line_numbers": [
                            181
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            187
                        ],
                        "comments": {},
                        "lines": [
                            "                    .inspect_err(|e| warn!(\"Error parsing password history {e:?} for {}\", self.uuid))"
                        ]
                    },
                    {
                        "line_numbers": [
                            190
                        ],
                        "comments": {},
                        "lines": [
                            "            .map(|d| {"
                        ]
                    },
                    {
                        "line_numbers": [
                            193,
                            194,
                            195,
                            196,
                            197,
                            198,
                            199
                        ],
                        "comments": {
                            "191": "                // Check every password history item if they are valid and return it.",
                            "192": "                // If a password field has the type `null` skip it, it breaks newer Bitwarden clients"
                        },
                        "lines": [
                            "                d.into_iter()",
                            "                    .filter_map(|d| match d.data.get(\"password\") {",
                            "                        Some(p) if p.is_string() => Some(d.data),",
                            "                        _ => None,",
                            "                    })",
                            "                    .collect()",
                            "            })"
                        ]
                    },
                    {
                        "line_numbers": [
                            204,
                            205,
                            206,
                            207,
                            208
                        ],
                        "comments": {},
                        "lines": [
                            "        let mut type_data_json =",
                            "            serde_json::from_str::<LowerCase<Value>>(&self.data).map(|d| d.data).unwrap_or_else(|_| {",
                            "                warn!(\"Error parsing data field for {}\", self.uuid);",
                            "                Value::Object(serde_json::Map::new())",
                            "            });"
                        ]
                    },
                    {
                        "line_numbers": [
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230
                        ],
                        "comments": {},
                        "lines": [
                            "        if self.atype == 2 {",
                            "            match type_data_json {",
                            "                Value::Object(ref t) if t.get(\"type\").is_some_and(|t| t.is_number()) => {}",
                            "                _ => {",
                            "                    type_data_json = json!({\"type\": 0});",
                            "                }",
                            "            }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "88": "            // Validate the note size and if it is exceeded return a warning",
                "96": "            // Validate the password history if it contains `null` values and if so, return a warning",
                "191": "                // Check every password history item if they are valid and return it.",
                "192": "                // If a password field has the type `null` skip it, it breaks newer Bitwarden clients"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "1bf85201e728f9d60d688b846203c1ed45e575ab",
            "timestamp": "2024-09-18T18:57:08+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix Pw History null dates (#4966)\n\nIt seemed to have been possible to have `null` date values.\r\nThis PR fixes this by setting the epoch start date if either the date does not exists or is not a string.\r\n\r\nThis should solve sync issues with the new native mobile clients.\r\n\r\nFixes https://github.com/dani-garcia/vaultwarden/pull/4932#issuecomment-2357581292\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 9,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206
                        ],
                        "comments": {
                            "193": "                // A second check is done to verify the lastUsedDate exists and is a string, if not the epoch start time will be used"
                        },
                        "lines": [
                            "                    .map(|d| match d.get(\"lastUsedDate\") {",
                            "                        Some(l) if l.is_string() => d,",
                            "                        _ => {",
                            "                            let mut d = d;",
                            "                            d[\"lastUsedDate\"] = json!(\"1970-01-01T00:00:00.000Z\");",
                            "                            d",
                            "                        }",
                            "                    })"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "193": "                // A second check is done to verify the lastUsedDate exists and is a string, if not the epoch start time will be used"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "7d6dec64138550643ee57c5a5341fa5c758c7f6f",
            "timestamp": "2024-09-20T20:38:42+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix encrypted lastUsedDate (#4972)\n\nIt appears that some password histories have an encrypted value on the `lastUsedDate`\r\nInstead of only checking if it is a string, also check if it is a valid RFC Date/Time String.\r\nIf not, set it also to epoch 0.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 4,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            199,
                            200
                        ],
                        "comments": {
                            "193": "                // A second check is done to verify the lastUsedDate exists and is a valid DateTime string, if not the epoch start time will be used"
                        },
                        "lines": [
                            "                    .map(|d| match d.get(\"lastUsedDate\").and_then(|l| l.as_str()) {",
                            "                        Some(l) if DateTime::parse_from_rfc3339(l).is_ok() => d,"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "193": "                // A second check is done to verify the lastUsedDate exists and is a valid DateTime string, if not the epoch start time will be used"
            },
            "comment_deleted_diff": {
                "193": "                // A second check is done to verify the lastUsedDate exists and is a string, if not the epoch start time will be used"
            },
            "comment_modified_diff": {
                "193": "                // A second check is done to verify the lastUsedDate exists and is a string, if not the epoch start time will be used"
            }
        },
        {
            "commit": "49c5dec9b6c1899f8fc5ad3cff0ddc09cecf71c5",
            "timestamp": "2024-10-13T20:25:09+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix iOS sync by converting field types to int (#5081)\n\nIt seems the iOS clients are not able to handle the `type` key within the `fields` array when they are of the type string.\r\nAll other clients seem to handle this just fine though.\r\n\r\nThis PR fixes this by validating it is a number, if this is not the case, try to convert the string to a number, or return the default of `1`.\r\n`1` is used as this is the type `hidden` and should prevent accidental data disclosure.\r\n\r\nFixes #5069\r\n\r\nPossibly Fixes #5016\r\nPossibly Fixes #5002\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 22,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192,
                            193,
                            194,
                            195,
                            196,
                            197,
                            198,
                            199
                        ],
                        "comments": {
                            "182": "                        // Check if the `type` key is a number, strings break some clients",
                            "183": "                        // The fallback type is the hidden type `1`. this should prevent accidental data disclosure",
                            "184": "                        // If not try to convert the string value to a number and fallback to `1`",
                            "185": "                        // If it is both not a number and not a string, fallback to `1`"
                        },
                        "lines": [
                            "                        match f.data.get(\"type\") {",
                            "                            Some(t) if t.is_number() => {}",
                            "                            Some(t) if t.is_string() => {",
                            "                                let type_num = &t.as_str().unwrap_or(\"0\").parse::<u8>().unwrap_or(1);",
                            "                                f.data[\"type\"] = json!(type_num);",
                            "                            }",
                            "                            _ => {",
                            "                                f.data[\"type\"] = json!(1);",
                            "                            }",
                            "                        }",
                            "                        f.data",
                            "                    })",
                            "                    .collect()",
                            "            })"
                        ]
                    },
                    {
                        "line_numbers": [
                            267
                        ],
                        "comments": {},
                        "lines": [
                            "        data_json[\"fields\"] = json!([fields_json]);"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "182": "                        // Check if the `type` key is a number, strings break some clients",
                "183": "                        // The fallback type is the hidden type `1`. this should prevent accidental data disclosure",
                "184": "                        // If not try to convert the string value to a number and fallback to `1`",
                "185": "                        // If it is both not a number and not a string, fallback to `1`"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "push.rs": [
        {
            "commit": "d672ad3f76e9cf8437fbe58fb82791e4212382c8",
            "timestamp": "2024-01-01T16:01:57+01:00",
            "author": "THONY",
            "commit_message": "US or EU Data Region Selection (#3752)\n\n* add selection of data region for push\r\n\r\n* fix cargo check + rewrite config + add check url\r\n\r\n* fix clippy error\r\n\r\n* add comment in .env.template, adapt config.rs\r\n\r\n* Update .env.template\r\n\r\nCo-authored-by: William Desportes <williamdes@wdes.fr>\r\n\r\n* Update .env.template\r\n\r\nCo-authored-by: William Desportes <williamdes@wdes.fr>\r\n\r\n* Revert \"Update .env.template\"\r\n\r\nThis reverts commit 5bed974ba7b9f481792d2228834585f053d47dc3.\r\n\r\n* Revert \"Update .env.template\"\r\n\r\nThis reverts commit 0760eff95dfaf2a9cf97bb25f6cf7660bdf55173.\r\n\r\n* fix /connect/token to push identity\r\n\r\n* fix /connect/token to push identity\r\n\r\n* Fixed formatting when solving merge conflicts\r\n\r\n---------\r\n\r\nCo-authored-by: William Desportes <williamdes@wdes.fr>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 5,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "53": "    let res = match get_reqwest_client().post(\"https://identity.bitwarden.com/connect/token\").form(&params).send().await"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "3b283c289ebe254d0a1ab167682c006414bfa398",
            "timestamp": "2024-01-30T19:14:25+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "register missing push devices at login (#3792)\n\nsave the push token of new device even if push notifications are not\r\nenabled and provide a way to register the push device at login\r\n\r\nunregister device if there already is a push token saved unless the\r\nnew token has already been registered.\r\n\r\nalso the `unregister_push_device` function used the wrong argument\r\ncf. https://github.com/bitwarden/server/blob/08d380900b540f8d1a734c7abccaf80e59a91ced/src/Core/Services/Implementations/RelayPushRegistrationService.cs#L43",
            "additions": 28,
            "deletions": 9,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            93
                        ],
                        "comments": {
                            "92": "    // generate a random push_uuid so we know the device is registered"
                        },
                        "lines": [
                            "    device.push_uuid = Some(uuid::Uuid::new_v4().to_string());"
                        ]
                    },
                    {
                        "line_numbers": [
                            97
                        ],
                        "comments": {},
                        "lines": [
                            "        \"userId\": device.user_uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            104
                        ],
                        "comments": {},
                        "lines": [
                            "    let auth_push_token = get_auth_push_token().await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            107
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Err(e) = get_reqwest_client()"
                        ]
                    },
                    {
                        "line_numbers": [
                            115,
                            116,
                            117,
                            118,
                            119,
                            120,
                            121,
                            122,
                            123
                        ],
                        "comments": {},
                        "lines": [
                            "        .error_for_status()",
                            "    {",
                            "        err!(format!(\"An error occured while proceeding registration of a device: {e}\"));",
                            "    }",
                            "",
                            "    if let Err(e) = device.save(conn).await {",
                            "        err!(format!(\"An error occured while trying to save the (registered) device push uuid: {e}\"));",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            127,
                            128
                        ],
                        "comments": {},
                        "lines": [
                            "pub async fn unregister_push_device(push_uuid: Option<String>) -> EmptyResult {",
                            "    if !CONFIG.push_enabled() || push_uuid.is_none() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            136
                        ],
                        "comments": {},
                        "lines": [
                            "        .delete(CONFIG.push_relay_uri() + \"/push/\" + &push_uuid.unwrap())"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "92": "    // generate a random push_uuid so we know the device is registered"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "admin.rs": [
        {
            "commit": "569add453d5039e4a2930be9ce0759828e056c88",
            "timestamp": "2024-02-02T21:44:19+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Add Kubernetes environment detection (#4290)\n\nAlso check if we are running within a Kubernetes environment.\r\nThese do not always run using Docker or Podman of course.\r\n\r\nAlso renamed all the functions and variables to use `container` instead\r\nof `docker`.",
            "additions": 9,
            "deletions": 9,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            630
                        ],
                        "comments": {
                            "628": "            // Do not fetch the web-vault version when running within a container."
                        },
                        "lines": [
                            "            if running_within_container {"
                        ]
                    },
                    {
                        "line_numbers": [
                            684
                        ],
                        "comments": {},
                        "lines": [
                            "    let running_within_container = is_running_in_container();"
                        ]
                    },
                    {
                        "line_numbers": [
                            698
                        ],
                        "comments": {},
                        "lines": [
                            "        get_release_info(has_http_access, running_within_container).await;"
                        ]
                    },
                    {
                        "line_numbers": [
                            713,
                            714
                        ],
                        "comments": {},
                        "lines": [
                            "        \"running_within_container\": running_within_container,",
                            "        \"container_base_image\": if running_within_container { container_base_image() } else { \"Not applicable\" },"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "628": "            // Do not fetch the web-vault version when running within a container."
            },
            "comment_deleted_diff": {
                "628": "            // Do not fetch the web-vault version when running within Docker."
            },
            "comment_modified_diff": {
                "628": "            // Do not fetch the web-vault version when running within Docker."
            }
        },
        {
            "commit": "035f694d2f94df5203bec6c0af951f78fcc888c2",
            "timestamp": "2024-07-12T22:33:11+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improved HTTP client (#4740)\n\n* Improved HTTP client\r\n\r\n* Change config compat to use auto, rename blacklist\r\n\r\n* Fix wrong doc references",
            "additions": 9,
            "deletions": 8,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {
                "602": "    let req = match make_http_request(Method::HEAD, \"https://github.com/dani-garcia/vaultwarden\") {"
            },
            "comment_deleted_diff": {
                "605": "    match http_access.head(\"https://github.com/dani-garcia/vaultwarden\").send().await {"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "e9acd8bd3c3142cccb021ab5759a8410ef335aaa",
            "timestamp": "2024-09-01T15:52:29+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Add a CLI feature to backup the SQLite DB (#4906)\n\n* Add a CLI feature to backup the SQLite DB\r\n\r\nMany users request to add the sqlite3 binary to the container image.\r\nThis isn't really ideal as that might bring in other dependencies and will only bloat the image.\r\nThere main reason is to create a backup of the database.\r\n\r\nWhile there already was a feature within the admin interface to do so (or by using the admin API call), this might not be easy.\r\n\r\nThis PR adds several ways to generate a backup.\r\n1. By calling the Vaultwarden binary with the `backup` command like:\r\n  - `/vaultwarden backup`\r\n  - `docker exec -it vaultwarden /vaultwarden backup`\r\n2. By sending the USR1 signal to the running process like:\r\n  - `kill -s USR1 $(pidof vaultwarden)\r\n  - `killall -s USR1 vaultwarden)\r\n\r\nThis should help users to more easily create backups of there SQLite database.\r\n\r\nAlso added the Web-Vault version number when using `-v/--version` to the output.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Spelling and small adjustments\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 11,
            "deletions": 21,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            698,
                            699
                        ],
                        "comments": {
                            "697": "    // Get current running versions"
                        },
                        "lines": [
                            "    let web_vault_version = get_web_vault_version();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            706
                        ],
                        "comments": {},
                        "lines": [
                            "        \"web_vault_version\": web_vault_version,"
                        ]
                    },
                    {
                        "line_numbers": [
                            755
                        ],
                        "comments": {},
                        "lines": [
                            "async fn backup_db(_token: AdminToken, mut conn: DbConn) -> ApiResult<String> {"
                        ]
                    },
                    {
                        "line_numbers": [
                            757,
                            758,
                            759,
                            760
                        ],
                        "comments": {},
                        "lines": [
                            "        match backup_database(&mut conn).await {",
                            "            Ok(f) => Ok(format!(\"Backup to '{f}' was successful\")),",
                            "            Err(e) => err!(format!(\"Backup was unsuccessful {e}\")),",
                            "        }"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            579,
                            580,
                            581,
                            582
                        ],
                        "comments": {
                            "578": "#[derive(Deserialize)]"
                        },
                        "lines": [
                            "struct WebVaultVersion {",
                            "    version: String,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            682,
                            683,
                            684,
                            685,
                            686,
                            687,
                            688,
                            689,
                            690,
                            691,
                            692,
                            693
                        ],
                        "comments": {},
                        "lines": [
                            "    // Get current running versions",
                            "    let web_vault_version: WebVaultVersion =",
                            "        match std::fs::read_to_string(format!(\"{}/{}\", CONFIG.web_vault_folder(), \"vw-version.json\")) {",
                            "            Ok(s) => serde_json::from_str(&s)?,",
                            "            _ => match std::fs::read_to_string(format!(\"{}/{}\", CONFIG.web_vault_folder(), \"version.json\")) {",
                            "                Ok(s) => serde_json::from_str(&s)?,",
                            "                _ => WebVaultVersion {",
                            "                    version: String::from(\"Version file missing\"),",
                            "                },",
                            "            },",
                            "        };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            719
                        ],
                        "comments": {},
                        "lines": [
                            "        \"web_vault_version\": web_vault_version.version.trim_start_matches('v'),"
                        ]
                    },
                    {
                        "line_numbers": [
                            768
                        ],
                        "comments": {},
                        "lines": [
                            "async fn backup_db(_token: AdminToken, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            770
                        ],
                        "comments": {},
                        "lines": [
                            "        backup_database(&mut conn).await"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "697": "    // Get current running versions"
            },
            "comment_deleted_diff": {
                "682": "    // Get current running versions"
            },
            "comment_modified_diff": {}
        }
    ],
    "events.rs": [
        {
            "commit": "2cbfe6fa5b1014bad6b844de8f2d3b5e1a1ea333",
            "timestamp": "2024-03-17T14:29:31+01:00",
            "author": "Krapp",
            "commit_message": "Fix comment in events.rs (#4408)\n\nI think\r\n` // Collection events`\r\nwas repeated twice",
            "additions": 1,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "292": "        // Cipher Events"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "292": "        // Cipher Events"
            },
            "comment_deleted_diff": {
                "292": "        // Collection Events"
            },
            "comment_modified_diff": {
                "292": "        // Collection Events"
            }
        }
    ],
    "organizations.rs": [
        {
            "commit": "2c36993792e187ba7517c7e691d67ac12645ea87",
            "timestamp": "2024-01-01T19:41:40+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "enforce 2FA policy on removal of second factor and login (#3803)\n\n* enforce 2fa policy on removal of second factor\r\n\r\nusers should be revoked when their second factors are removed.\r\n\r\nwe want to revoke users so they don't have to be invited again and\r\norganization admins and owners are aware that they no longer have\r\naccess.\r\n\r\nwe make an exception for non-confirmed users to speed up the invitation\r\nprocess as they would have to be restored before they can accept their\r\ninvitation or be confirmed.\r\n\r\nif email is enabled, invited users have to add a second factor before\r\nthey can accept the invitation to an organization with 2fa policy.\r\nand if it is not enabled that check is done when confirming the user.\r\n\r\n* use &str instead of String in log_event()\r\n\r\n* enforce the 2fa policy on login\r\n\r\nif a user doesn't have a second factor check if they are in an\r\norganization that has the 2fa policy enabled to revoke their access",
            "additions": 35,
            "deletions": 58,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1702,
                            1703,
                            1704,
                            1705,
                            1706,
                            1707,
                            1708,
                            1709
                        ],
                        "comments": {
                            "1700": "    // When enabling the TwoFactorAuthentication policy, revoke all members that do not have 2FA"
                        },
                        "lines": [
                            "        two_factor::enforce_2fa_policy_for_org(",
                            "            org_id,",
                            "            &headers.user.uuid,",
                            "            headers.device.atype,",
                            "            &headers.ip.ip,",
                            "            &mut conn,",
                            "        )",
                            "        .await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1734
                        ],
                        "comments": {},
                        "lines": [
                            "                    &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1759
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1876
                        ],
                        "comments": {},
                        "lines": [
                            "                    &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1906
                        ],
                        "comments": {},
                        "lines": [
                            "                    &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1942
                        ],
                        "comments": {},
                        "lines": [
                            "                        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2055
                        ],
                        "comments": {},
                        "lines": [
                            "                &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2174
                        ],
                        "comments": {},
                        "lines": [
                            "                &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2303
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2340
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2373
                        ],
                        "comments": {},
                        "lines": [
                            "            &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2428
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2519
                        ],
                        "comments": {},
                        "lines": [
                            "            &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2597
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2652
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2741
                        ],
                        "comments": {},
                        "lines": [
                            "        &headers.user.uuid,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2868
                        ],
                        "comments": {},
                        "lines": [
                            "    log_event(log_id, org_user_id, org_id, &headers.user.uuid, headers.device.atype, &headers.ip.ip, &mut conn).await;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1700": "    // When enabling the TwoFactorAuthentication policy, revoke all members that do not have 2FA"
            },
            "comment_deleted_diff": {
                "1700": "    // When enabling the TwoFactorAuthentication policy, remove this org's members that do have 2FA",
                "1705": "            // Policy only applies to non-Owner/non-Admin members who have accepted joining the org",
                "1706": "            // Invited users still need to accept the invite and will get an error when they try to accept the invite."
            },
            "comment_modified_diff": {
                "1700": "    // When enabling the TwoFactorAuthentication policy, remove this org's members that do have 2FA"
            }
        },
        {
            "commit": "7c3cad197c9144977164d2b66e70c206b3b771d9",
            "timestamp": "2024-03-17T22:11:34+01:00",
            "author": "Matlink",
            "commit_message": "Fix #3624: fix manager permission within groups (#3754)\n\n* Fix #3624: fix manager permission within groups\r\n\r\n* Query returns UUID only\r\n\r\n* Fix issue when user is manager and in a group having access to all collections\r\n\r\n* optimize condition check\r\n\r\n* fix(groups): renaming and optimizations\r\n\r\n* fix: wrong organization group membership detection\r\n\r\n* Simplify group membership check\r\n\r\nCo-authored-by: Stefan Melmuk <509385+stefan0xC@users.noreply.github.com>\r\n\r\n* Remove unused statement\r\n\r\n* improve check if the user has access via groups\r\n\r\ninstead of returning the two lists of member ids and later checking if\r\nthey contain the uuid of the current user, we really only care if\r\nthe current user has full access via a group or if they have\r\naccess to a given collection via a group\r\n\r\n* improve comments for get_org_collections_details\r\n\r\n* small refactor to make it easier to review\r\n\r\n* fix(groups): query full access via group only when necessary\r\n\r\nCo-authored-by: Mathijs van Veluw <black.dex@gmail.com>\r\n\r\n* chore(fmt): apply rustfmt\r\n\r\n---------\r\n\r\nCo-authored-by: Stefan Melmuk <509385+stefan0xC@users.noreply.github.com>\r\nCo-authored-by: Stefan Melmuk <stefan.melmuk@gmail.com>\r\nCo-authored-by: Mathijs van Veluw <black.dex@gmail.com>",
            "additions": 26,
            "deletions": 18,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "323": "    // get all collection memberships for the current organization"
                        },
                        "lines": []
                    },
                    {
                        "line_numbers": [
                            327,
                            328,
                            329,
                            330
                        ],
                        "comments": {
                            "326": "    // check if current user has full access to the organization (either directly or via any group)"
                        },
                        "lines": [
                            "    let has_full_access_to_org = user_org.access_all",
                            "        || (CONFIG.org_groups_enabled()",
                            "            && GroupUser::has_full_access_by_member(org_id, &user_org.uuid, &mut conn).await);",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            333
                        ],
                        "comments": {},
                        "lines": [
                            "        let mut assigned = has_full_access_to_org;"
                        ]
                    },
                    {
                        "line_numbers": [
                            349,
                            350
                        ],
                        "comments": {},
                        "lines": [
                            "        if !assigned && CONFIG.org_groups_enabled() {",
                            "            assigned = GroupUser::has_access_to_collection_by_member(&col.uuid, &user_org.uuid, &mut conn).await;"
                        ]
                    },
                    {
                        "line_numbers": [
                            354,
                            355,
                            356,
                            357,
                            358,
                            359,
                            360,
                            361,
                            362,
                            363,
                            364,
                            365
                        ],
                        "comments": {},
                        "lines": [
                            "        let groups: Vec<Value> = if CONFIG.org_groups_enabled() {",
                            "            CollectionGroup::find_by_collection(&col.uuid, &mut conn)",
                            "                .await",
                            "                .iter()",
                            "                .map(|collection_group| {",
                            "                    SelectionReadOnly::to_collection_group_details_read_only(collection_group).to_json()",
                            "                })",
                            "                .collect()",
                            "        } else {",
                            "            Vec::with_capacity(0)",
                            "        };",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "323": "    // get all collection memberships for the current organization",
                "326": "    // check if current user has full access to the organization (either directly or via any group)",
                "332": "        // assigned indicates whether the current user has access to the given collection",
                "335": "        // get the users assigned directly to the given collection",
                "340": "                // check if the current user is assigned to this collection directly",
                "348": "        // check if the current user has access to the given collection via a group",
                "353": "        // get the group details for the given collection"
            },
            "comment_deleted_diff": {
                "335": "            // The Bitwarden clients seem to call this API regardless of whether groups are enabled,",
                "336": "            // so just act as if there are no groups.",
                "345": "                // Remember `user_uuid` is swapped here with the `user_org.uuid` with a join during the `CollectionUser::find_by_organization` call.",
                "346": "                // We check here if the current user is assigned to this collection or not."
            },
            "comment_modified_diff": {
                "335": "            // The Bitwarden clients seem to call this API regardless of whether groups are enabled,"
            }
        },
        {
            "commit": "9dcc738f856d818b261507376290c544bf712d47",
            "timestamp": "2024-04-27T22:09:00+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "improve access to collections via groups (#4441)\n\n* refactor get_org_collections_details\r\n\r\n* improve access to collection check\r\n\r\n* fix get_org_collection_detail too",
            "additions": 7,
            "deletions": 23,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            333,
                            334,
                            335,
                            336
                        ],
                        "comments": {
                            "332": "        // check whether the current user has access to the given collection"
                        },
                        "lines": [
                            "        let assigned = has_full_access_to_org",
                            "            || CollectionUser::has_access_to_collection_by_user(&col.uuid, &user_org.user_uuid, &mut conn).await",
                            "            || (CONFIG.org_groups_enabled()",
                            "                && GroupUser::has_access_to_collection_by_member(&col.uuid, &user_org.uuid, &mut conn).await);"
                        ]
                    },
                    {
                        "line_numbers": [
                            342
                        ],
                        "comments": {},
                        "lines": [
                            "            .map(|collection_user| SelectionReadOnly::to_collection_user_details_read_only(collection_user).to_json())"
                        ]
                    },
                    {
                        "line_numbers": [
                            676
                        ],
                        "comments": {},
                        "lines": [
                            "            let assigned = Collection::can_access_collection(&user_org, &collection.uuid, &mut conn).await;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "332": "        // check whether the current user has access to the given collection"
            },
            "comment_deleted_diff": {
                "332": "        // assigned indicates whether the current user has access to the given collection",
                "340": "                // check if the current user is assigned to this collection directly",
                "348": "        // check if the current user has access to the given collection via a group",
                "681": "                        // Remember `user_uuid` is swapped here with the `user_org.uuid` with a join during the `find_by_collection_swap_user_uuid_with_org_user_uuid` call.",
                "682": "                        // We check here if the current user is assigned to this collection or not."
            },
            "comment_modified_diff": {
                "332": "        // assigned indicates whether the current user has access to the given collection"
            }
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 389,
            "deletions": 379,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            115
                        ],
                        "comments": {
                            "111": "    plan_type: NumberOrString, // Ignored, always use the same plan"
                        },
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            117,
                            118
                        ],
                        "comments": {},
                        "lines": [
                            "    billing_email: String,",
                            "    name: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            122
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            124,
                            125,
                            126,
                            127
                        ],
                        "comments": {},
                        "lines": [
                            "    name: String,",
                            "    groups: Vec<NewCollectionObjectData>,",
                            "    users: Vec<NewCollectionObjectData>,",
                            "    external_id: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            131
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            133,
                            134,
                            135
                        ],
                        "comments": {},
                        "lines": [
                            "    hide_passwords: bool,",
                            "    id: String,",
                            "    read_only: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            139
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            141,
                            142
                        ],
                        "comments": {},
                        "lines": [
                            "    encrypted_private_key: String,",
                            "    public_key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            146
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            148
                        ],
                        "comments": {},
                        "lines": [
                            "    ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            152
                        ],
                        "comments": {},
                        "lines": [
                            "async fn create_organization(headers: Headers, data: Json<OrgData>, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            162,
                            163,
                            164,
                            165
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgData = data.into_inner();",
                            "    let (private_key, public_key) = if data.keys.is_some() {",
                            "        let keys: OrgKeyData = data.keys.unwrap();",
                            "        (Some(keys.encrypted_private_key), Some(keys.public_key))"
                        ]
                    },
                    {
                        "line_numbers": [
                            170
                        ],
                        "comments": {},
                        "lines": [
                            "    let org = Organization::new(data.name, data.billing_email, private_key, public_key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            172
                        ],
                        "comments": {},
                        "lines": [
                            "    let collection = Collection::new(org.uuid.clone(), data.collection_name, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            174
                        ],
                        "comments": {},
                        "lines": [
                            "    user_org.akey = data.key;"
                        ]
                    },
                    {
                        "line_numbers": [
                            189
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            193
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            206
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            252
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrganizationUpdateData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            262
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrganizationUpdateData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            265
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrganizationUpdateData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            272,
                            273
                        ],
                        "comments": {},
                        "lines": [
                            "    org.name = data.name;",
                            "    org.billing_email = data.billing_email;"
                        ]
                    },
                    {
                        "line_numbers": [
                            295
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\":"
                        ]
                    },
                    {
                        "line_numbers": [
                            300,
                            301
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            308,
                            309,
                            310
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": _get_org_collections(org_id, &mut conn).await,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            359,
                            360,
                            361,
                            362
                        ],
                        "comments": {},
                        "lines": [
                            "        json_object[\"assigned\"] = json!(assigned);",
                            "        json_object[\"users\"] = json!(users);",
                            "        json_object[\"groups\"] = json!(groups);",
                            "        json_object[\"object\"] = json!(\"collectionAccessDetails\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            367,
                            368,
                            369
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": data,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            381
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<NewCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            384
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: NewCollectionData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            391
                        ],
                        "comments": {},
                        "lines": [
                            "    let collection = Collection::new(org.uuid, data.name, data.external_id);"
                        ]
                    },
                    {
                        "line_numbers": [
                            405,
                            406
                        ],
                        "comments": {},
                        "lines": [
                            "    for group in data.groups {",
                            "        CollectionGroup::new(collection.uuid.clone(), group.id, group.read_only, group.hide_passwords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            411,
                            412
                        ],
                        "comments": {},
                        "lines": [
                            "    for user in data.users {",
                            "        let org_user = match UserOrganization::find_by_uuid(&user.id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            421
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionUser::save(&org_user.user_uuid, &collection.uuid, user.read_only, user.hide_passwords, &mut conn)"
                        ]
                    },
                    {
                        "line_numbers": [
                            437
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<NewCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            448
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<NewCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            451
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: NewCollectionData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            467,
                            468
                        ],
                        "comments": {},
                        "lines": [
                            "    collection.name = data.name;",
                            "    collection.external_id = match data.external_id {"
                        ]
                    },
                    {
                        "line_numbers": [
                            488,
                            489
                        ],
                        "comments": {},
                        "lines": [
                            "    for group in data.groups {",
                            "        CollectionGroup::new(String::from(col_id), group.id, group.read_only, group.hide_passwords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            496,
                            497
                        ],
                        "comments": {},
                        "lines": [
                            "    for user in data.users {",
                            "        let org_user = match UserOrganization::find_by_uuid(&user.id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            506
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionUser::save(&org_user.user_uuid, col_id, user.read_only, user.hide_passwords, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            592
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            594,
                            595,
                            596,
                            597
                        ],
                        "comments": {},
                        "lines": [
                            "    #[allow(dead_code)]",
                            "    id: String,",
                            "    #[allow(dead_code)]",
                            "    org_id: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            605
                        ],
                        "comments": {},
                        "lines": [
                            "    _data: Json<DeleteCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            612
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            614
                        ],
                        "comments": {},
                        "lines": [
                            "    ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            621
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<BulkCollectionIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            624
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: BulkCollectionIds = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            626
                        ],
                        "comments": {},
                        "lines": [
                            "    let collections = data.ids;"
                        ]
                    },
                    {
                        "line_numbers": [
                            681,
                            682,
                            683,
                            684
                        ],
                        "comments": {},
                        "lines": [
                            "            json_object[\"assigned\"] = json!(assigned);",
                            "            json_object[\"users\"] = json!(users);",
                            "            json_object[\"groups\"] = json!(groups);",
                            "            json_object[\"object\"] = json!(\"collectionAccessDetails\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            716
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Vec<CollectionData>>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            729,
                            730
                        ],
                        "comments": {},
                        "lines": [
                            "    for d in data.iter() {",
                            "        let user = match UserOrganization::find_by_uuid(&d.id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            739
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionUser::save(&user.user_uuid, coll_id, d.read_only, d.hide_passwords, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            754,
                            755,
                            756
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": _get_org_details(&data.organization_id, &headers.host, &headers.user.uuid, &mut conn).await,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            800,
                            801,
                            802
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": users_json,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            807,
                            808
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_org_keys(org_id: &str, data: Json<OrgKeyData>, _headers: AdminHeaders, mut conn: DbConn) -> JsonResult {",
                            "    let data: OrgKeyData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            820,
                            821
                        ],
                        "comments": {},
                        "lines": [
                            "    org.private_key = Some(data.encrypted_private_key);",
                            "    org.public_key = Some(data.public_key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            826,
                            827,
                            828
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"organizationKeys\",",
                            "        \"publicKey\": org.public_key,",
                            "        \"privateKey\": org.private_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            833
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            835,
                            836,
                            837
                        ],
                        "comments": {},
                        "lines": [
                            "    id: String,",
                            "    read_only: bool,",
                            "    hide_passwords: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            841
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            843,
                            844,
                            845,
                            846,
                            847
                        ],
                        "comments": {},
                        "lines": [
                            "    emails: Vec<String>,",
                            "    groups: Vec<String>,",
                            "    r#type: NumberOrString,",
                            "    collections: Option<Vec<CollectionData>>,",
                            "    access_all: Option<bool>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            851,
                            852
                        ],
                        "comments": {},
                        "lines": [
                            "async fn send_invite(org_id: &str, data: Json<InviteData>, headers: AdminHeaders, mut conn: DbConn) -> EmptyResult {",
                            "    let data: InviteData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            854
                        ],
                        "comments": {},
                        "lines": [
                            "    let new_type = match UserOrgType::from_str(&data.r#type.into_string()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            863
                        ],
                        "comments": {},
                        "lines": [
                            "    for email in data.emails.iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            899
                        ],
                        "comments": {},
                        "lines": [
                            "        let access_all = data.access_all.unwrap_or(false);"
                        ]
                    },
                    {
                        "line_numbers": [
                            906,
                            907
                        ],
                        "comments": {},
                        "lines": [
                            "            for col in data.collections.iter().flatten() {",
                            "                match Collection::find_by_uuid_and_org(&col.id, org_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            910,
                            911,
                            912,
                            913,
                            914,
                            915,
                            916,
                            917
                        ],
                        "comments": {},
                        "lines": [
                            "                        CollectionUser::save(",
                            "                            &user.uuid,",
                            "                            &collection.uuid,",
                            "                            col.read_only,",
                            "                            col.hide_passwords,",
                            "                            &mut conn,",
                            "                        )",
                            "                        .await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            925
                        ],
                        "comments": {},
                        "lines": [
                            "        for group in data.groups.iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            965
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            969
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            972
                        ],
                        "comments": {},
                        "lines": [
                            "    for org_user_id in data.ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            980,
                            981,
                            982
                        ],
                        "comments": {},
                        "lines": [
                            "                \"object\": \"OrganizationBulkConfirmResponseModel\",",
                            "                \"id\": org_user_id,",
                            "                \"error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            988,
                            989,
                            990
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": bulk_response,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1046
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1048,
                            1049
                        ],
                        "comments": {},
                        "lines": [
                            "    token: String,",
                            "    reset_password_key: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1053
                        ],
                        "comments": {},
                        "lines": [
                            "async fn accept_invite(org_id: &str, _org_user_id: &str, data: Json<AcceptData>, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1055,
                            1056
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: AcceptData = data.into_inner();",
                            "    let claims = decode_invite(&data.token)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1073
                        ],
                        "comments": {},
                        "lines": [
                            "                if data.reset_password_key.is_none() && master_password_required {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1098
                        ],
                        "comments": {},
                        "lines": [
                            "                    user_org.reset_password_key = data.reset_password_key;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1127,
                            1128,
                            1129,
                            1130,
                            1131,
                            1132,
                            1133,
                            1134,
                            1135,
                            1136,
                            1137,
                            1138,
                            1139
                        ],
                        "comments": {},
                        "lines": [
                            "#[derive(Deserialize)]",
                            "#[serde(rename_all = \"camelCase\")]",
                            "struct ConfirmData {",
                            "    id: Option<String>,",
                            "    key: Option<String>,",
                            "}",
                            "",
                            "#[derive(Deserialize)]",
                            "#[serde(rename_all = \"camelCase\")]",
                            "struct BulkConfirmData {",
                            "    keys: Option<Vec<ConfirmData>>,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1143
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<BulkConfirmData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1148
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1151
                        ],
                        "comments": {},
                        "lines": [
                            "    match data.keys {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1154,
                            1155,
                            1156
                        ],
                        "comments": {},
                        "lines": [
                            "                let org_user_id = invite.id.unwrap_or_default();",
                            "                let user_key = invite.key.unwrap_or_default();",
                            "                let err_msg = match _confirm_invite(org_id, &org_user_id, &user_key, &headers, &mut conn, &nt).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1163,
                            1164,
                            1165
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"object\": \"OrganizationBulkConfirmResponseModel\",",
                            "                        \"id\": org_user_id,",
                            "                        \"error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            1174,
                            1175,
                            1176
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": bulk_response,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1184
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<ConfirmData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1189,
                            1190,
                            1191
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner();",
                            "    let user_key = data.key.unwrap_or_default();",
                            "    _confirm_invite(org_id, org_user_id, &user_key, &headers, &mut conn, &nt).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            1294
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1296,
                            1297,
                            1298,
                            1299
                        ],
                        "comments": {},
                        "lines": [
                            "    r#type: NumberOrString,",
                            "    collections: Option<Vec<CollectionData>>,",
                            "    groups: Option<Vec<String>>,",
                            "    access_all: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1306
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<EditUserData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1317
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<EditUserData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1321
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: EditUserData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1323
                        ],
                        "comments": {},
                        "lines": [
                            "    let new_type = match UserOrgType::from_str(&data.r#type.into_string()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1372
                        ],
                        "comments": {},
                        "lines": [
                            "    user_to_edit.access_all = data.access_all;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1381,
                            1382,
                            1383
                        ],
                        "comments": {},
                        "lines": [
                            "    if !data.access_all {",
                            "        for col in data.collections.iter().flatten() {",
                            "            match Collection::find_by_uuid_and_org(&col.id, org_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1389,
                            1390
                        ],
                        "comments": {},
                        "lines": [
                            "                        col.read_only,",
                            "                        col.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1401
                        ],
                        "comments": {},
                        "lines": [
                            "    for group in data.groups.iter().flatten() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1423
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1428
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1431
                        ],
                        "comments": {},
                        "lines": [
                            "    for org_user_id in data.ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1439,
                            1440,
                            1441
                        ],
                        "comments": {},
                        "lines": [
                            "                \"object\": \"OrganizationBulkConfirmResponseModel\",",
                            "                \"id\": org_user_id,",
                            "                \"error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            1447,
                            1448,
                            1449
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": bulk_response,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1519
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1523
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1529
                        ],
                        "comments": {},
                        "lines": [
                            "    for user_org_id in data.ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1534,
                            1535,
                            1536,
                            1537
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"object\": \"organizationUserPublicKeyResponseModel\",",
                            "                        \"id\": user_org_id,",
                            "                        \"userId\": user.uuid,",
                            "                        \"key\": user.public_key"
                        ]
                    },
                    {
                        "line_numbers": [
                            1547,
                            1548,
                            1549
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": bulk_response,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1557
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1559,
                            1560,
                            1561
                        ],
                        "comments": {},
                        "lines": [
                            "    ciphers: Vec<CipherData>,",
                            "    collections: Vec<NewCollectionData>,",
                            "    collection_relationships: Vec<RelationsData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1565
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1568
                        ],
                        "comments": {},
                        "lines": [
                            "    key: usize,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1570
                        ],
                        "comments": {},
                        "lines": [
                            "    value: usize,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1576
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<ImportData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1581
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ImportData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1588
                        ],
                        "comments": {},
                        "lines": [
                            "    Cipher::validate_notes(&data.ciphers)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1591,
                            1592
                        ],
                        "comments": {},
                        "lines": [
                            "    for coll in data.collections {",
                            "        let collection = Collection::new(org_id.clone(), coll.name, coll.external_id);"
                        ]
                    },
                    {
                        "line_numbers": [
                            1602,
                            1603
                        ],
                        "comments": {},
                        "lines": [
                            "    for relation in data.collection_relationships {",
                            "        relations.push((relation.key, relation.value));"
                        ]
                    },
                    {
                        "line_numbers": [
                            1609,
                            1610
                        ],
                        "comments": {},
                        "lines": [
                            "    for cipher_data in data.ciphers {",
                            "        let mut cipher = Cipher::new(cipher_data.r#type, cipher_data.name.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            1637,
                            1638,
                            1639
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": policies_json,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1661,
                            1662,
                            1663
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": policies_json,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1788,
                            1789,
                            1790,
                            1791,
                            1792,
                            1793,
                            1794,
                            1795,
                            1796,
                            1797
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"list\",",
                            "        \"data\": [{",
                            "            \"object\": \"plan\",",
                            "            \"type\": 0,",
                            "            \"product\": 0,",
                            "            \"name\": \"Free\",",
                            "            \"nameLocalizationKey\": \"planNameFree\",",
                            "            \"bitwardenProduct\": 0,",
                            "            \"maxUsers\": 0,",
                            "            \"descriptionLocalizationKey\": \"planDescFree\""
                        ]
                    },
                    {
                        "line_numbers": [
                            1799,
                            1800,
                            1801,
                            1802,
                            1803,
                            1804,
                            1805,
                            1806
                        ],
                        "comments": {},
                        "lines": [
                            "            \"object\": \"plan\",",
                            "            \"type\": 0,",
                            "            \"product\": 1,",
                            "            \"name\": \"Free\",",
                            "            \"nameLocalizationKey\": \"planNameFree\",",
                            "            \"bitwardenProduct\": 1,",
                            "            \"maxUsers\": 0,",
                            "            \"descriptionLocalizationKey\": \"planDescFree\""
                        ]
                    },
                    {
                        "line_numbers": [
                            1808
                        ],
                        "comments": {},
                        "lines": [
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1825,
                            1826,
                            1827
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"list\",",
                            "        \"data\": [],",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1832
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1834
                        ],
                        "comments": {},
                        "lines": [
                            "    #[allow(dead_code)]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1836
                        ],
                        "comments": {
                            "1835": "    name: String, // \"GroupName\""
                        },
                        "lines": [
                            "    #[allow(dead_code)]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1838
                        ],
                        "comments": {
                            "1837": "    external_id: String, // \"cn=GroupName,ou=Groups,dc=example,dc=com\""
                        },
                        "lines": [
                            "    #[allow(dead_code)]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1843
                        ],
                        "comments": {
                            "1839": "    users: Vec<String>, // [\"uid=user,ou=People,dc=example,dc=com\"]"
                        },
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1848
                        ],
                        "comments": {},
                        "lines": [
                            "    deleted: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1852
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1855,
                            1856,
                            1857
                        ],
                        "comments": {},
                        "lines": [
                            "    groups: Vec<OrgImportGroupData>,",
                            "    overwrite_existing: bool,",
                            "    users: Vec<OrgImportUserData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1861,
                            1862
                        ],
                        "comments": {},
                        "lines": [
                            "async fn import(org_id: &str, data: Json<OrgImportData>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            1876,
                            1877
                        ],
                        "comments": {},
                        "lines": [
                            "    for user_data in &data.users {",
                            "        if user_data.deleted {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1879
                        ],
                        "comments": {},
                        "lines": [
                            "            if let Some(user_org) = UserOrganization::find_by_email_and_org(&user_data.email, org_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1895,
                            1896
                        ],
                        "comments": {},
                        "lines": [
                            "        } else if UserOrganization::find_by_email_and_org(&user_data.email, org_id, &mut conn).await.is_none() {",
                            "            if let Some(user) = User::find_by_mail(&user_data.email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1928
                        ],
                        "comments": {},
                        "lines": [
                            "                        &user_data.email,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1942
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.overwrite_existing {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1945
                        ],
                        "comments": {},
                        "lines": [
                            "                if !data.users.iter().any(|u| u.email == user_email) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1981
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrgBulkRevokeData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1998,
                            1999,
                            2000,
                            2001,
                            2002,
                            2003
                        ],
                        "comments": {},
                        "lines": [
                            "#[derive(Deserialize, Debug)]",
                            "#[serde(rename_all = \"camelCase\")]",
                            "struct OrgBulkRevokeData {",
                            "    ids: Option<Vec<String>>,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            2007
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrgBulkRevokeData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2011
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2014
                        ],
                        "comments": {},
                        "lines": [
                            "    match data.ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2017
                        ],
                        "comments": {},
                        "lines": [
                            "                let err_msg = match _revoke_organization_user(org_id, &org_user_id, &headers, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2024,
                            2025,
                            2026
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"object\": \"OrganizationUserBulkResponseModel\",",
                            "                        \"id\": org_user_id,",
                            "                        \"error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            2035,
                            2036,
                            2037
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": bulk_response,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            2096
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2116
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2120
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2134,
                            2135,
                            2136
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"object\": \"OrganizationUserBulkResponseModel\",",
                            "                        \"id\": org_user_id,",
                            "                        \"error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            2145,
                            2146,
                            2147
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": bulk_response,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            2221,
                            2222,
                            2223
                        ],
                        "comments": {},
                        "lines": [
                            "        \"data\": groups,",
                            "        \"object\": \"list\",",
                            "        \"continuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2228
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            2230,
                            2231,
                            2232,
                            2233,
                            2234
                        ],
                        "comments": {},
                        "lines": [
                            "    name: String,",
                            "    access_all: Option<bool>,",
                            "    external_id: Option<String>,",
                            "    collections: Vec<SelectionReadOnly>,",
                            "    users: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2241,
                            2242,
                            2243
                        ],
                        "comments": {},
                        "lines": [
                            "            self.name.clone(),",
                            "            self.access_all.unwrap_or(false),",
                            "            self.external_id.clone(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            2248,
                            2249
                        ],
                        "comments": {},
                        "lines": [
                            "        group.name.clone_from(&self.name);",
                            "        group.access_all = self.access_all.unwrap_or(false);"
                        ]
                    },
                    {
                        "line_numbers": [
                            2258
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            2260,
                            2261,
                            2262
                        ],
                        "comments": {},
                        "lines": [
                            "    id: String,",
                            "    read_only: bool,",
                            "    hide_passwords: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2267
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionGroup::new(self.id.clone(), groups_uuid, self.read_only, self.hide_passwords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            2272,
                            2273,
                            2274
                        ],
                        "comments": {},
                        "lines": [
                            "            id: collection_group.groups_uuid.clone(),",
                            "            read_only: collection_group.read_only,",
                            "            hide_passwords: collection_group.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2280,
                            2281,
                            2282
                        ],
                        "comments": {},
                        "lines": [
                            "            id: collection_user.user_uuid.clone(),",
                            "            read_only: collection_user.read_only,",
                            "            hide_passwords: collection_user.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2295
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<GroupRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2303
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_groups(org_id: &str, headers: AdminHeaders, data: Json<GroupRequest>, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2308
                        ],
                        "comments": {},
                        "lines": [
                            "    let group_request = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2322
                        ],
                        "comments": {},
                        "lines": [
                            "    add_update_group(group, group_request.collections, group_request.users, org_id, &headers, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            2329
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<GroupRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2342
                        ],
                        "comments": {},
                        "lines": [
                            "    let group_request = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2359
                        ],
                        "comments": {},
                        "lines": [
                            "    add_update_group(updated_group, group_request.collections, group_request.users, org_id, &headers, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            2394,
                            2395,
                            2396,
                            2397,
                            2398
                        ],
                        "comments": {},
                        "lines": [
                            "        \"id\": group.uuid,",
                            "        \"organizationId\": group.organizations_uuid,",
                            "        \"name\": group.name,",
                            "        \"accessAll\": group.access_all,",
                            "        \"externalId\": group.external_id"
                        ]
                    },
                    {
                        "line_numbers": [
                            2453
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2461
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2463
                        ],
                        "comments": {},
                        "lines": [
                            "    for group_id in data.ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2508
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<Vec<String>>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2560
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            2562
                        ],
                        "comments": {},
                        "lines": [
                            "    group_ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2569
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrganizationUserUpdateGroupsRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2580
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrganizationUserUpdateGroupsRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2599,
                            2600
                        ],
                        "comments": {},
                        "lines": [
                            "    let assigned_group_ids = data.into_inner();",
                            "    for assigned_group_id in assigned_group_ids.group_ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2675
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            2677,
                            2678,
                            2679
                        ],
                        "comments": {},
                        "lines": [
                            "    reset_password_key: Option<String>,",
                            "    master_password_hash: Option<String>,",
                            "    otp: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2683
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            2685,
                            2686
                        ],
                        "comments": {},
                        "lines": [
                            "    new_master_password_hash: String,",
                            "    key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2697,
                            2698,
                            2699
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"organizationKeys\",",
                            "        \"publicKey\": org.public_key,",
                            "        \"privateKey\": org.private_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2708
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrganizationUserResetPasswordRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2742
                        ],
                        "comments": {},
                        "lines": [
                            "    let reset_request = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2745
                        ],
                        "comments": {},
                        "lines": [
                            "    user.set_password(reset_request.new_master_password_hash.as_str(), Some(reset_request.key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            2790,
                            2791,
                            2792,
                            2793,
                            2794,
                            2795,
                            2796
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"organizationUserResetPasswordDetails\",",
                            "        \"kdf\":user.client_kdf_type,",
                            "        \"kdfIterations\":user.client_kdf_iter,",
                            "        \"kdfMemory\":user.client_kdf_memory,",
                            "        \"kdfParallelism\":user.client_kdf_parallelism,",
                            "        \"resetPasswordKey\":org_user.reset_password_key,",
                            "        \"encryptedPrivateKey\":org.private_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2844
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<OrganizationUserResetPasswordEnrollmentRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2854
                        ],
                        "comments": {},
                        "lines": [
                            "    let reset_request = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2856,
                            2857
                        ],
                        "comments": {},
                        "lines": [
                            "    if reset_request.reset_password_key.is_none()",
                            "        && OrgPolicy::org_is_reset_password_auto_enroll(org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            2862
                        ],
                        "comments": {},
                        "lines": [
                            "    if reset_request.reset_password_key.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2864,
                            2865
                        ],
                        "comments": {},
                        "lines": [
                            "            master_password_hash: reset_request.master_password_hash,",
                            "            otp: reset_request.otp,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2871
                        ],
                        "comments": {},
                        "lines": [
                            "    org_user.reset_password_key = reset_request.reset_password_key;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2935
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2940
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            2964,
                            2965,
                            2966
                        ],
                        "comments": {},
                        "lines": [
                            "      \"apiKey\": org_api_key.api_key,",
                            "      \"revisionDate\": crate::util::format_date(&org_api_key.revision_date),",
                            "      \"object\": \"apiKey\","
                        ]
                    },
                    {
                        "line_numbers": [
                            2971
                        ],
                        "comments": {},
                        "lines": [
                            "async fn api_key(org_id: &str, data: Json<PasswordOrOtpData>, headers: AdminHeaders, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2978
                        ],
                        "comments": {},
                        "lines": [
                            "    data: Json<PasswordOrOtpData>,"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111
                        ],
                        "comments": {
                            "103": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "    BillingEmail: String,",
                            "    CollectionName: String,",
                            "    Key: String,",
                            "    Name: String,",
                            "    Keys: Option<OrgKeyData>,",
                            "    #[serde(rename = \"PlanType\")]",
                            "    _PlanType: NumberOrString, // Ignored, always use the same plan"
                        ]
                    },
                    {
                        "line_numbers": [
                            117,
                            118
                        ],
                        "comments": {},
                        "lines": [
                            "    BillingEmail: String,",
                            "    Name: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            124,
                            125,
                            126,
                            127
                        ],
                        "comments": {},
                        "lines": [
                            "    Name: String,",
                            "    Groups: Vec<NewCollectionObjectData>,",
                            "    Users: Vec<NewCollectionObjectData>,",
                            "    ExternalId: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            133,
                            134,
                            135
                        ],
                        "comments": {},
                        "lines": [
                            "    HidePasswords: bool,",
                            "    Id: String,",
                            "    ReadOnly: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            141,
                            142
                        ],
                        "comments": {},
                        "lines": [
                            "    EncryptedPrivateKey: String,",
                            "    PublicKey: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            148
                        ],
                        "comments": {},
                        "lines": [
                            "    Ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            152
                        ],
                        "comments": {},
                        "lines": [
                            "async fn create_organization(headers: Headers, data: JsonUpcase<OrgData>, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            162,
                            163,
                            164,
                            165
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgData = data.into_inner().data;",
                            "    let (private_key, public_key) = if data.Keys.is_some() {",
                            "        let keys: OrgKeyData = data.Keys.unwrap();",
                            "        (Some(keys.EncryptedPrivateKey), Some(keys.PublicKey))"
                        ]
                    },
                    {
                        "line_numbers": [
                            170
                        ],
                        "comments": {},
                        "lines": [
                            "    let org = Organization::new(data.Name, data.BillingEmail, private_key, public_key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            172
                        ],
                        "comments": {},
                        "lines": [
                            "    let collection = Collection::new(org.uuid.clone(), data.CollectionName, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            174
                        ],
                        "comments": {},
                        "lines": [
                            "    user_org.akey = data.Key;"
                        ]
                    },
                    {
                        "line_numbers": [
                            189
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            193
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            206
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            252
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrganizationUpdateData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            262
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrganizationUpdateData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            265
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrganizationUpdateData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            272,
                            273
                        ],
                        "comments": {},
                        "lines": [
                            "    org.name = data.Name;",
                            "    org.billing_email = data.BillingEmail;"
                        ]
                    },
                    {
                        "line_numbers": [
                            295
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\":"
                        ]
                    },
                    {
                        "line_numbers": [
                            300,
                            301
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            308,
                            309,
                            310
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": _get_org_collections(org_id, &mut conn).await,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            359,
                            360,
                            361,
                            362
                        ],
                        "comments": {},
                        "lines": [
                            "        json_object[\"Assigned\"] = json!(assigned);",
                            "        json_object[\"Users\"] = json!(users);",
                            "        json_object[\"Groups\"] = json!(groups);",
                            "        json_object[\"Object\"] = json!(\"collectionAccessDetails\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            367,
                            368,
                            369
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": data,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            381
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<NewCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            384
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: NewCollectionData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            391
                        ],
                        "comments": {},
                        "lines": [
                            "    let collection = Collection::new(org.uuid, data.Name, data.ExternalId);"
                        ]
                    },
                    {
                        "line_numbers": [
                            405,
                            406
                        ],
                        "comments": {},
                        "lines": [
                            "    for group in data.Groups {",
                            "        CollectionGroup::new(collection.uuid.clone(), group.Id, group.ReadOnly, group.HidePasswords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            411,
                            412
                        ],
                        "comments": {},
                        "lines": [
                            "    for user in data.Users {",
                            "        let org_user = match UserOrganization::find_by_uuid(&user.Id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            421
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionUser::save(&org_user.user_uuid, &collection.uuid, user.ReadOnly, user.HidePasswords, &mut conn)"
                        ]
                    },
                    {
                        "line_numbers": [
                            437
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<NewCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            448
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<NewCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            451
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: NewCollectionData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            467,
                            468
                        ],
                        "comments": {},
                        "lines": [
                            "    collection.name = data.Name;",
                            "    collection.external_id = match data.ExternalId {"
                        ]
                    },
                    {
                        "line_numbers": [
                            488,
                            489
                        ],
                        "comments": {},
                        "lines": [
                            "    for group in data.Groups {",
                            "        CollectionGroup::new(String::from(col_id), group.Id, group.ReadOnly, group.HidePasswords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            496,
                            497
                        ],
                        "comments": {},
                        "lines": [
                            "    for user in data.Users {",
                            "        let org_user = match UserOrganization::find_by_uuid(&user.Id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            506
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionUser::save(&org_user.user_uuid, col_id, user.ReadOnly, user.HidePasswords, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            594,
                            595
                        ],
                        "comments": {},
                        "lines": [
                            "    Id: String,",
                            "    OrgId: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            603
                        ],
                        "comments": {},
                        "lines": [
                            "    _data: JsonUpcase<DeleteCollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            612
                        ],
                        "comments": {},
                        "lines": [
                            "    Ids: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            619
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<BulkCollectionIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            622
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: BulkCollectionIds = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            624
                        ],
                        "comments": {},
                        "lines": [
                            "    let collections = data.Ids;"
                        ]
                    },
                    {
                        "line_numbers": [
                            679,
                            680,
                            681,
                            682
                        ],
                        "comments": {},
                        "lines": [
                            "            json_object[\"Assigned\"] = json!(assigned);",
                            "            json_object[\"Users\"] = json!(users);",
                            "            json_object[\"Groups\"] = json!(groups);",
                            "            json_object[\"Object\"] = json!(\"collectionAccessDetails\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            714
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcaseVec<CollectionData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            727,
                            728
                        ],
                        "comments": {},
                        "lines": [
                            "    for d in data.iter().map(|d| &d.data) {",
                            "        let user = match UserOrganization::find_by_uuid(&d.Id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            737
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionUser::save(&user.user_uuid, coll_id, d.ReadOnly, d.HidePasswords, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            752,
                            753,
                            754
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": _get_org_details(&data.organization_id, &headers.host, &headers.user.uuid, &mut conn).await,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            798,
                            799,
                            800
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": users_json,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            805,
                            806,
                            807,
                            808,
                            809,
                            810,
                            811
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_org_keys(",
                            "    org_id: &str,",
                            "    data: JsonUpcase<OrgKeyData>,",
                            "    _headers: AdminHeaders,",
                            "    mut conn: DbConn,",
                            ") -> JsonResult {",
                            "    let data: OrgKeyData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            823,
                            824
                        ],
                        "comments": {},
                        "lines": [
                            "    org.private_key = Some(data.EncryptedPrivateKey);",
                            "    org.public_key = Some(data.PublicKey);"
                        ]
                    },
                    {
                        "line_numbers": [
                            829,
                            830,
                            831
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"organizationKeys\",",
                            "        \"PublicKey\": org.public_key,",
                            "        \"PrivateKey\": org.private_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            838,
                            839,
                            840
                        ],
                        "comments": {},
                        "lines": [
                            "    Id: String,",
                            "    ReadOnly: bool,",
                            "    HidePasswords: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            846,
                            847,
                            848,
                            849,
                            850
                        ],
                        "comments": {},
                        "lines": [
                            "    Emails: Vec<String>,",
                            "    Groups: Vec<String>,",
                            "    Type: NumberOrString,",
                            "    Collections: Option<Vec<CollectionData>>,",
                            "    AccessAll: Option<bool>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            854,
                            855,
                            856,
                            857,
                            858,
                            859,
                            860
                        ],
                        "comments": {},
                        "lines": [
                            "async fn send_invite(",
                            "    org_id: &str,",
                            "    data: JsonUpcase<InviteData>,",
                            "    headers: AdminHeaders,",
                            "    mut conn: DbConn,",
                            ") -> EmptyResult {",
                            "    let data: InviteData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            862
                        ],
                        "comments": {},
                        "lines": [
                            "    let new_type = match UserOrgType::from_str(&data.Type.into_string()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            871
                        ],
                        "comments": {},
                        "lines": [
                            "    for email in data.Emails.iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            907
                        ],
                        "comments": {},
                        "lines": [
                            "        let access_all = data.AccessAll.unwrap_or(false);"
                        ]
                    },
                    {
                        "line_numbers": [
                            914,
                            915
                        ],
                        "comments": {},
                        "lines": [
                            "            for col in data.Collections.iter().flatten() {",
                            "                match Collection::find_by_uuid_and_org(&col.Id, org_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            918,
                            919
                        ],
                        "comments": {},
                        "lines": [
                            "                        CollectionUser::save(&user.uuid, &collection.uuid, col.ReadOnly, col.HidePasswords, &mut conn)",
                            "                            .await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            927
                        ],
                        "comments": {},
                        "lines": [
                            "        for group in data.Groups.iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            967
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            971
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            974
                        ],
                        "comments": {},
                        "lines": [
                            "    for org_user_id in data.Ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            982,
                            983,
                            984
                        ],
                        "comments": {},
                        "lines": [
                            "                \"Object\": \"OrganizationBulkConfirmResponseModel\",",
                            "                \"Id\": org_user_id,",
                            "                \"Error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            990,
                            991,
                            992
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": bulk_response,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1050,
                            1051
                        ],
                        "comments": {},
                        "lines": [
                            "    Token: String,",
                            "    ResetPasswordKey: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1055,
                            1056,
                            1057,
                            1058,
                            1059,
                            1060
                        ],
                        "comments": {},
                        "lines": [
                            "async fn accept_invite(",
                            "    org_id: &str,",
                            "    _org_user_id: &str,",
                            "    data: JsonUpcase<AcceptData>,",
                            "    mut conn: DbConn,",
                            ") -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1062,
                            1063
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: AcceptData = data.into_inner().data;",
                            "    let claims = decode_invite(&data.Token)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1080
                        ],
                        "comments": {},
                        "lines": [
                            "                if data.ResetPasswordKey.is_none() && master_password_required {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1105
                        ],
                        "comments": {},
                        "lines": [
                            "                    user_org.reset_password_key = data.ResetPasswordKey;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1137
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1142
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1145
                        ],
                        "comments": {},
                        "lines": [
                            "    match data[\"Keys\"].as_array() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1148,
                            1149,
                            1150
                        ],
                        "comments": {},
                        "lines": [
                            "                let org_user_id = invite[\"Id\"].as_str().unwrap_or_default();",
                            "                let user_key = invite[\"Key\"].as_str().unwrap_or_default();",
                            "                let err_msg = match _confirm_invite(org_id, org_user_id, user_key, &headers, &mut conn, &nt).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1157,
                            1158,
                            1159
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"Object\": \"OrganizationBulkConfirmResponseModel\",",
                            "                        \"Id\": org_user_id,",
                            "                        \"Error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            1168,
                            1169,
                            1170
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": bulk_response,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1178
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1183,
                            1184,
                            1185
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner().data;",
                            "    let user_key = data[\"Key\"].as_str().unwrap_or_default();",
                            "    _confirm_invite(org_id, org_user_id, user_key, &headers, &mut conn, &nt).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            1290,
                            1291,
                            1292,
                            1293
                        ],
                        "comments": {},
                        "lines": [
                            "    Type: NumberOrString,",
                            "    Collections: Option<Vec<CollectionData>>,",
                            "    Groups: Option<Vec<String>>,",
                            "    AccessAll: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1300
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<EditUserData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1311
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<EditUserData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1315
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: EditUserData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1317
                        ],
                        "comments": {},
                        "lines": [
                            "    let new_type = match UserOrgType::from_str(&data.Type.into_string()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1366
                        ],
                        "comments": {},
                        "lines": [
                            "    user_to_edit.access_all = data.AccessAll;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1375,
                            1376,
                            1377
                        ],
                        "comments": {},
                        "lines": [
                            "    if !data.AccessAll {",
                            "        for col in data.Collections.iter().flatten() {",
                            "            match Collection::find_by_uuid_and_org(&col.Id, org_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1383,
                            1384
                        ],
                        "comments": {},
                        "lines": [
                            "                        col.ReadOnly,",
                            "                        col.HidePasswords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1395
                        ],
                        "comments": {},
                        "lines": [
                            "    for group in data.Groups.iter().flatten() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1417
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1422
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1425
                        ],
                        "comments": {},
                        "lines": [
                            "    for org_user_id in data.Ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1433,
                            1434,
                            1435
                        ],
                        "comments": {},
                        "lines": [
                            "                \"Object\": \"OrganizationBulkConfirmResponseModel\",",
                            "                \"Id\": org_user_id,",
                            "                \"Error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            1441,
                            1442,
                            1443
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": bulk_response,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1513
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1517
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1523
                        ],
                        "comments": {},
                        "lines": [
                            "    for user_org_id in data.Ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1528,
                            1529,
                            1530,
                            1531
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"Object\": \"organizationUserPublicKeyResponseModel\",",
                            "                        \"Id\": user_org_id,",
                            "                        \"UserId\": user.uuid,",
                            "                        \"Key\": user.public_key"
                        ]
                    },
                    {
                        "line_numbers": [
                            1541,
                            1542,
                            1543
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": bulk_response,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1553,
                            1554,
                            1555
                        ],
                        "comments": {},
                        "lines": [
                            "    Ciphers: Vec<CipherData>,",
                            "    Collections: Vec<NewCollectionData>,",
                            "    CollectionRelationships: Vec<RelationsData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1562
                        ],
                        "comments": {},
                        "lines": [
                            "    Key: usize,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1564
                        ],
                        "comments": {},
                        "lines": [
                            "    Value: usize,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1570
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<ImportData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1575
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ImportData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1582
                        ],
                        "comments": {},
                        "lines": [
                            "    Cipher::validate_notes(&data.Ciphers)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1585,
                            1586
                        ],
                        "comments": {},
                        "lines": [
                            "    for coll in data.Collections {",
                            "        let collection = Collection::new(org_id.clone(), coll.Name, coll.ExternalId);"
                        ]
                    },
                    {
                        "line_numbers": [
                            1596,
                            1597
                        ],
                        "comments": {},
                        "lines": [
                            "    for relation in data.CollectionRelationships {",
                            "        relations.push((relation.Key, relation.Value));"
                        ]
                    },
                    {
                        "line_numbers": [
                            1603,
                            1604
                        ],
                        "comments": {},
                        "lines": [
                            "    for cipher_data in data.Ciphers {",
                            "        let mut cipher = Cipher::new(cipher_data.Type, cipher_data.Name.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            1631,
                            1632,
                            1633
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": policies_json,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1655,
                            1656,
                            1657
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": policies_json,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1782,
                            1783,
                            1784,
                            1785,
                            1786,
                            1787,
                            1788,
                            1789,
                            1790,
                            1791
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"list\",",
                            "        \"Data\": [{",
                            "            \"Object\": \"plan\",",
                            "            \"Type\": 0,",
                            "            \"Product\": 0,",
                            "            \"Name\": \"Free\",",
                            "            \"NameLocalizationKey\": \"planNameFree\",",
                            "            \"BitwardenProduct\": 0,",
                            "            \"MaxUsers\": 0,",
                            "            \"DescriptionLocalizationKey\": \"planDescFree\""
                        ]
                    },
                    {
                        "line_numbers": [
                            1793,
                            1794,
                            1795,
                            1796,
                            1797,
                            1798,
                            1799,
                            1800
                        ],
                        "comments": {},
                        "lines": [
                            "            \"Object\": \"plan\",",
                            "            \"Type\": 0,",
                            "            \"Product\": 1,",
                            "            \"Name\": \"Free\",",
                            "            \"NameLocalizationKey\": \"planNameFree\",",
                            "            \"BitwardenProduct\": 1,",
                            "            \"MaxUsers\": 0,",
                            "            \"DescriptionLocalizationKey\": \"planDescFree\""
                        ]
                    },
                    {
                        "line_numbers": [
                            1802
                        ],
                        "comments": {},
                        "lines": [
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1819,
                            1820,
                            1821
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"list\",",
                            "        \"Data\": [],",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            1828,
                            1829,
                            1830
                        ],
                        "comments": {},
                        "lines": [
                            "    Name: String,       // \"GroupName\"",
                            "    ExternalId: String, // \"cn=GroupName,ou=Groups,dc=example,dc=com\"",
                            "    Users: Vec<String>, // [\"uid=user,ou=People,dc=example,dc=com\"]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1836
                        ],
                        "comments": {},
                        "lines": [
                            "    Email: String, // \"user@maildomain.net\""
                        ]
                    },
                    {
                        "line_numbers": [
                            1838,
                            1839
                        ],
                        "comments": {},
                        "lines": [
                            "    ExternalId: String, // \"uid=user,ou=People,dc=example,dc=com\"",
                            "    Deleted: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1846,
                            1847,
                            1848
                        ],
                        "comments": {},
                        "lines": [
                            "    Groups: Vec<OrgImportGroupData>,",
                            "    OverwriteExisting: bool,",
                            "    Users: Vec<OrgImportUserData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1852,
                            1853
                        ],
                        "comments": {},
                        "lines": [
                            "async fn import(org_id: &str, data: JsonUpcase<OrgImportData>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1867,
                            1868
                        ],
                        "comments": {},
                        "lines": [
                            "    for user_data in &data.Users {",
                            "        if user_data.Deleted {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1870
                        ],
                        "comments": {},
                        "lines": [
                            "            if let Some(user_org) = UserOrganization::find_by_email_and_org(&user_data.Email, org_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1886,
                            1887
                        ],
                        "comments": {},
                        "lines": [
                            "        } else if UserOrganization::find_by_email_and_org(&user_data.Email, org_id, &mut conn).await.is_none() {",
                            "            if let Some(user) = User::find_by_mail(&user_data.Email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1919
                        ],
                        "comments": {},
                        "lines": [
                            "                        &user_data.Email,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1933
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.OverwriteExisting {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1936
                        ],
                        "comments": {},
                        "lines": [
                            "                if !data.Users.iter().any(|u| u.Email == user_email) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1972
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1992
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1996
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1999
                        ],
                        "comments": {},
                        "lines": [
                            "    match data[\"Ids\"].as_array() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2002,
                            2003
                        ],
                        "comments": {},
                        "lines": [
                            "                let org_user_id = org_user_id.as_str().unwrap_or_default();",
                            "                let err_msg = match _revoke_organization_user(org_id, org_user_id, &headers, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2010,
                            2011,
                            2012
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"Object\": \"OrganizationUserBulkResponseModel\",",
                            "                        \"Id\": org_user_id,",
                            "                        \"Error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            2021,
                            2022,
                            2023
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": bulk_response,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            2082
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2102
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<Value>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2106
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2120,
                            2121,
                            2122
                        ],
                        "comments": {},
                        "lines": [
                            "                        \"Object\": \"OrganizationUserBulkResponseModel\",",
                            "                        \"Id\": org_user_id,",
                            "                        \"Error\": err_msg"
                        ]
                    },
                    {
                        "line_numbers": [
                            2131,
                            2132,
                            2133
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": bulk_response,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null"
                        ]
                    },
                    {
                        "line_numbers": [
                            2207,
                            2208,
                            2209
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Data\": groups,",
                            "        \"Object\": \"list\",",
                            "        \"ContinuationToken\": null,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2216,
                            2217,
                            2218,
                            2219,
                            2220
                        ],
                        "comments": {},
                        "lines": [
                            "    Name: String,",
                            "    AccessAll: Option<bool>,",
                            "    ExternalId: Option<String>,",
                            "    Collections: Vec<SelectionReadOnly>,",
                            "    Users: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2227,
                            2228,
                            2229
                        ],
                        "comments": {},
                        "lines": [
                            "            self.Name.clone(),",
                            "            self.AccessAll.unwrap_or(false),",
                            "            self.ExternalId.clone(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            2234,
                            2235
                        ],
                        "comments": {},
                        "lines": [
                            "        group.name.clone_from(&self.Name);",
                            "        group.access_all = self.AccessAll.unwrap_or(false);"
                        ]
                    },
                    {
                        "line_numbers": [
                            2246,
                            2247,
                            2248
                        ],
                        "comments": {},
                        "lines": [
                            "    Id: String,",
                            "    ReadOnly: bool,",
                            "    HidePasswords: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2253
                        ],
                        "comments": {},
                        "lines": [
                            "        CollectionGroup::new(self.Id.clone(), groups_uuid, self.ReadOnly, self.HidePasswords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            2258,
                            2259,
                            2260
                        ],
                        "comments": {},
                        "lines": [
                            "            Id: collection_group.groups_uuid.clone(),",
                            "            ReadOnly: collection_group.read_only,",
                            "            HidePasswords: collection_group.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2266,
                            2267,
                            2268
                        ],
                        "comments": {},
                        "lines": [
                            "            Id: collection_user.user_uuid.clone(),",
                            "            ReadOnly: collection_user.read_only,",
                            "            HidePasswords: collection_user.hide_passwords,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2281
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<GroupRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2289,
                            2290,
                            2291,
                            2292,
                            2293,
                            2294
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_groups(",
                            "    org_id: &str,",
                            "    headers: AdminHeaders,",
                            "    data: JsonUpcase<GroupRequest>,",
                            "    mut conn: DbConn,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2299
                        ],
                        "comments": {},
                        "lines": [
                            "    let group_request = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2313
                        ],
                        "comments": {},
                        "lines": [
                            "    add_update_group(group, group_request.Collections, group_request.Users, org_id, &headers, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            2320
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<GroupRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2333
                        ],
                        "comments": {},
                        "lines": [
                            "    let group_request = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2350
                        ],
                        "comments": {},
                        "lines": [
                            "    add_update_group(updated_group, group_request.Collections, group_request.Users, org_id, &headers, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            2385,
                            2386,
                            2387,
                            2388,
                            2389
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Id\": group.uuid,",
                            "        \"OrganizationId\": group.organizations_uuid,",
                            "        \"Name\": group.name,",
                            "        \"AccessAll\": group.access_all,",
                            "        \"ExternalId\": group.external_id"
                        ]
                    },
                    {
                        "line_numbers": [
                            2444
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrgBulkIds>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2452
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: OrgBulkIds = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2454
                        ],
                        "comments": {},
                        "lines": [
                            "    for group_id in data.Ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2499
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonVec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2553
                        ],
                        "comments": {},
                        "lines": [
                            "    GroupIds: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2560
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrganizationUserUpdateGroupsRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2571
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrganizationUserUpdateGroupsRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2590,
                            2591
                        ],
                        "comments": {},
                        "lines": [
                            "    let assigned_group_ids = data.into_inner().data;",
                            "    for assigned_group_id in assigned_group_ids.GroupIds {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2668,
                            2669,
                            2670
                        ],
                        "comments": {},
                        "lines": [
                            "    ResetPasswordKey: Option<String>,",
                            "    MasterPasswordHash: Option<String>,",
                            "    Otp: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2676,
                            2677
                        ],
                        "comments": {},
                        "lines": [
                            "    NewMasterPasswordHash: String,",
                            "    Key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2688,
                            2689,
                            2690
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"organizationKeys\",",
                            "        \"PublicKey\": org.public_key,",
                            "        \"PrivateKey\": org.private_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2699
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrganizationUserResetPasswordRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2733
                        ],
                        "comments": {},
                        "lines": [
                            "    let reset_request = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2736
                        ],
                        "comments": {},
                        "lines": [
                            "    user.set_password(reset_request.NewMasterPasswordHash.as_str(), Some(reset_request.Key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            2781,
                            2782,
                            2783,
                            2784,
                            2785,
                            2786,
                            2787
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Object\": \"organizationUserResetPasswordDetails\",",
                            "        \"Kdf\":user.client_kdf_type,",
                            "        \"KdfIterations\":user.client_kdf_iter,",
                            "        \"KdfMemory\":user.client_kdf_memory,",
                            "        \"KdfParallelism\":user.client_kdf_parallelism,",
                            "        \"ResetPasswordKey\":org_user.reset_password_key,",
                            "        \"EncryptedPrivateKey\":org.private_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2835
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<OrganizationUserResetPasswordEnrollmentRequest>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2845
                        ],
                        "comments": {},
                        "lines": [
                            "    let reset_request = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2847
                        ],
                        "comments": {},
                        "lines": [
                            "    if reset_request.ResetPasswordKey.is_none() && OrgPolicy::org_is_reset_password_auto_enroll(org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            2852
                        ],
                        "comments": {},
                        "lines": [
                            "    if reset_request.ResetPasswordKey.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2854,
                            2855
                        ],
                        "comments": {},
                        "lines": [
                            "            MasterPasswordHash: reset_request.MasterPasswordHash,",
                            "            Otp: reset_request.Otp,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2861
                        ],
                        "comments": {},
                        "lines": [
                            "    org_user.reset_password_key = reset_request.ResetPasswordKey;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2925
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<PasswordOrOtpData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            2930
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            2954,
                            2955,
                            2956
                        ],
                        "comments": {},
                        "lines": [
                            "      \"ApiKey\": org_api_key.api_key,",
                            "      \"RevisionDate\": crate::util::format_date(&org_api_key.revision_date),",
                            "      \"Object\": \"apiKey\","
                        ]
                    },
                    {
                        "line_numbers": [
                            2961
                        ],
                        "comments": {},
                        "lines": [
                            "async fn api_key(org_id: &str, data: JsonUpcase<PasswordOrOtpData>, headers: AdminHeaders, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2968
                        ],
                        "comments": {},
                        "lines": [
                            "    data: JsonUpcase<PasswordOrOtpData>,"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "111": "    plan_type: NumberOrString, // Ignored, always use the same plan",
                "1835": "    name: String, // \"GroupName\"",
                "1837": "    external_id: String, // \"cn=GroupName,ou=Groups,dc=example,dc=com\"",
                "1839": "    users: Vec<String>, // [\"uid=user,ou=People,dc=example,dc=com\"]",
                "1845": "    email: String, // \"user@maildomain.net\"",
                "1847": "    external_id: String, // \"uid=user,ou=People,dc=example,dc=com\""
            },
            "comment_deleted_diff": {
                "111": "    _PlanType: NumberOrString, // Ignored, always use the same plan",
                "1828": "    Name: String,       // \"GroupName\"",
                "1829": "    ExternalId: String, // \"cn=GroupName,ou=Groups,dc=example,dc=com\"",
                "1830": "    Users: Vec<String>, // [\"uid=user,ou=People,dc=example,dc=com\"]",
                "1836": "    Email: String, // \"user@maildomain.net\"",
                "1838": "    ExternalId: String, // \"uid=user,ou=People,dc=example,dc=com\""
            },
            "comment_modified_diff": {
                "111": "    _PlanType: NumberOrString, // Ignored, always use the same plan"
            }
        },
        {
            "commit": "2e6a6fa39fb2efae7bc10edcbaaa4cd2059d5bcc",
            "timestamp": "2024-08-07T22:46:03+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update crates, web-vault and fixes (#4823)\n\n* Update crates, web-vault and fixes\r\n\r\n- Updated crates\r\n- Updated web-vault to v2024.6.2\r\n  This version is currently the latest version compatible with our API implementation.\r\n  For newer versions we need more code updates to make it compatible.\r\n  Thanks to @stefan0xC this version fixes #4628\r\n- Added a small fix to prevent errors in the Vaultwarden and Client logs.\r\n  The v2024.6.2 web-vault calls an endpoint with invalid arguments.\r\n  If this happens we ignore the call and just return an Ok.\r\n- Added the bulk-collection endpoint (Though not yet available in v2024.6.2)\r\n\r\nFixes #4628\r\n\r\n* Prevent bulk remove collections to work",
            "additions": 69,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1648,
                            1649,
                            1650,
                            1651
                        ],
                        "comments": {
                            "1646": "// This endpoint is only reachable via the organization view, therefor this endpoint is located here",
                            "1647": "// Also Bitwarden does not send out Notifications for these changes, it only does this for individual cipher collection updates"
                        },
                        "lines": [
                            "#[post(\"/ciphers/bulk-collections\", data = \"<data>\")]",
                            "async fn post_bulk_collections(data: Json<BulkCollectionsData>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data: BulkCollectionsData = data.into_inner();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1654,
                            1655,
                            1656,
                            1657
                        ],
                        "comments": {
                            "1652": "    // This feature does not seem to be active on all the clients",
                            "1653": "    // To prevent future issues, add a check to block a call when this is set to true"
                        },
                        "lines": [
                            "    if data.remove_collections {",
                            "        err!(\"Bulk removing of collections is not yet implemented\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1660,
                            1661,
                            1662,
                            1663,
                            1664,
                            1665,
                            1666,
                            1667,
                            1668,
                            1669,
                            1670,
                            1671,
                            1672
                        ],
                        "comments": {
                            "1658": "    // Get all the collection available to the user in one query",
                            "1659": "    // Also filter based upon the provided collections"
                        },
                        "lines": [
                            "    let user_collections: HashMap<String, Collection> =",
                            "        Collection::find_by_organization_and_user_uuid(&data.organization_id, &headers.user.uuid, &mut conn)",
                            "            .await",
                            "            .into_iter()",
                            "            .filter_map(|c| {",
                            "                if data.collection_ids.contains(&c.uuid) {",
                            "                    Some((c.uuid.clone(), c))",
                            "                } else {",
                            "                    None",
                            "                }",
                            "            })",
                            "            .collect();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1674,
                            1675,
                            1676,
                            1677,
                            1678,
                            1679,
                            1680,
                            1681
                        ],
                        "comments": {
                            "1673": "    // Verify if all the collections requested exists and are writeable for the user, else abort"
                        },
                        "lines": [
                            "    for collection_uuid in &data.collection_ids {",
                            "        match user_collections.get(collection_uuid) {",
                            "            Some(collection) if collection.is_writable_by_user(&headers.user.uuid, &mut conn).await => (),",
                            "            _ => err_code!(\"Resource not found\", \"User does not have access to a collection\", 404),",
                            "        }",
                            "    }",
                            "",
                            "    for cipher_id in data.cipher_ids.iter() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1684,
                            1685,
                            1686,
                            1687,
                            1688,
                            1689,
                            1690,
                            1691,
                            1692,
                            1693,
                            1694,
                            1695
                        ],
                        "comments": {
                            "1682": "        // Only act on existing cipher uuid's",
                            "1683": "        // Do not abort the operation just ignore it, it could be a cipher was just deleted for example"
                        },
                        "lines": [
                            "        if let Some(cipher) = Cipher::find_by_uuid_and_org(cipher_id, &data.organization_id, &mut conn).await {",
                            "            if cipher.is_write_accessible_to_user(&headers.user.uuid, &mut conn).await {",
                            "                for collection in &data.collection_ids {",
                            "                    CollectionCipher::save(&cipher.uuid, collection, &mut conn).await?;",
                            "                }",
                            "            }",
                            "        };",
                            "    }",
                            "",
                            "    Ok(())",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1713,
                            1714,
                            1715,
                            1716
                        ],
                        "comments": {},
                        "lines": [
                            "    if org_id == \"undefined\" && token == \"undefined\" {",
                            "        return Ok(Json(json!({})));",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1646": "// This endpoint is only reachable via the organization view, therefor this endpoint is located here",
                "1647": "// Also Bitwarden does not send out Notifications for these changes, it only does this for individual cipher collection updates",
                "1652": "    // This feature does not seem to be active on all the clients",
                "1653": "    // To prevent future issues, add a check to block a call when this is set to true",
                "1658": "    // Get all the collection available to the user in one query",
                "1659": "    // Also filter based upon the provided collections",
                "1673": "    // Verify if all the collections requested exists and are writeable for the user, else abort",
                "1682": "        // Only act on existing cipher uuid's",
                "1683": "        // Do not abort the operation just ignore it, it could be a cipher was just deleted for example",
                "1710": "    // web-vault 2024.6.2 seems to send these values and cause logs to output errors",
                "1711": "    // Catch this and prevent errors in the logs",
                "1712": "    // TODO: CleanUp after 2024.6.x is not used anymore."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "b557c117247b0def307623b22203bd09c89bf05f",
            "timestamp": "2024-08-11T19:39:56+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix data disclosure on organization endpoints (#4837)\n\n- All users were able to request organizational details from any org,\r\n  even if they were not a member (anymore).\r\n  Now it will check if that user is a member of the org or not.\r\n- The `/organization/<uuid>/keys` endpoint returned also the private keys.\r\n  This should not be the case. Also, according to the upstream server\r\n  code the endpoint changed, but the clients do not seem to use it.\r\n  I added it anyway just in case they will in the future.\r\n- Also require a valid login before being able to retreve those org\r\n  keys. Upstream does not do this, but i see no reason why not.\r\n\r\nFixes: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-39925",
            "additions": 24,
            "deletions": 7,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            2762,
                            2763
                        ],
                        "comments": {
                            "2759": "// Upstrem reports this is the renamed endpoint instead of `/keys`",
                            "2760": "// But the clients do not seem to use this at all",
                            "2761": "// Just add it here in case they will"
                        },
                        "lines": [
                            "#[get(\"/organizations/<org_id>/public-key\")]",
                            "async fn get_organization_public_key(org_id: &str, _headers: Headers, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2770
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"organizationPublicKey\","
                        ]
                    },
                    {
                        "line_numbers": [
                            2777,
                            2778,
                            2779,
                            2780,
                            2781
                        ],
                        "comments": {},
                        "lines": [
                            "#[get(\"/organizations/<org_id>/keys\")]",
                            "async fn get_organization_keys(org_id: &str, headers: Headers, conn: DbConn) -> JsonResult {",
                            "    get_organization_public_key(org_id, headers, conn).await",
                            "}",
                            ""
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            2752
                        ],
                        "comments": {
                            "2751": "#[get(\"/organizations/<org_id>/keys\")]"
                        },
                        "lines": [
                            "async fn get_organization_keys(org_id: &str, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            2759
                        ],
                        "comments": {},
                        "lines": [
                            "        \"object\": \"organizationKeys\","
                        ]
                    },
                    {
                        "line_numbers": [
                            2761
                        ],
                        "comments": {},
                        "lines": [
                            "        \"privateKey\": org.private_key,"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "2759": "// Upstrem reports this is the renamed endpoint instead of `/keys`",
                "2760": "// But the clients do not seem to use this at all",
                "2761": "// Just add it here in case they will",
                "2775": "// Obsolete - Renamed to public-key (2023.8), left for backwards compatibility with older clients",
                "2776": "// https://github.com/bitwarden/server/blob/25dc0c9178e3e3584074bbef0d4be827b7c89415/src/Api/AdminConsole/Controllers/OrganizationsController.cs#L463-L468"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "544b7229e8cc49436d3872ba2022e09231552fa7",
            "timestamp": "2024-08-30T21:37:59+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Allow enforcing Single Org with pw reset policy (#4903)\n\n* Allow enforcing Single Org with pw reset policy\r\n\r\nBitwarden only allows the Reset Password policy to be set when the Single Org policy is enabled already.\r\nThis PR adds a check so that this can be enforced when a config option is enabled.\r\n\r\nSince Vaultwarden encouraged to use multiple orgs when groups were not available yet we should not enable this by default now.\r\nThis might be something to do in the future.\r\n\r\nWhen enabled, it will prevent the Reset Password policy to be enabled if the Single Org policy is not enabled.\r\nIt will also prevent the Single Org policy to be disabled if the Reset Password policy is enabled.\r\n\r\nFixes #4855\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Removed some extra if checks\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 32,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1790,
                            1791,
                            1792,
                            1793,
                            1794,
                            1795,
                            1796,
                            1797,
                            1798,
                            1799,
                            1800,
                            1801,
                            1802
                        ],
                        "comments": {
                            "1785": "    // Bitwarden only allows the Reset Password policy when Single Org policy is enabled",
                            "1786": "    // Vaultwarden encouraged to use multiple orgs instead of groups because groups were not available in the past",
                            "1787": "    // Now that groups are available we can enforce this option when wanted.",
                            "1788": "    // We put this behind a config option to prevent breaking current installation.",
                            "1789": "    // Maybe we want to enable this by default in the future, but currently it is disabled by default."
                        },
                        "lines": [
                            "    if CONFIG.enforce_single_org_with_reset_pw_policy() {",
                            "        if pol_type_enum == OrgPolicyType::ResetPassword && data.enabled {",
                            "            let single_org_policy_enabled =",
                            "                match OrgPolicy::find_by_org_and_type(org_id, OrgPolicyType::SingleOrg, &mut conn).await {",
                            "                    Some(p) => p.enabled,",
                            "                    None => false,",
                            "                };",
                            "",
                            "            if !single_org_policy_enabled {",
                            "                err!(\"Single Organization policy is not enabled. It is mandatory for this policy to be enabled.\")",
                            "            }",
                            "        }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1804,
                            1805,
                            1806,
                            1807,
                            1808,
                            1809,
                            1810,
                            1811,
                            1812,
                            1813,
                            1814,
                            1815,
                            1816
                        ],
                        "comments": {
                            "1803": "        // Also prevent the Single Org Policy to be disabled if the Reset Password policy is enabled"
                        },
                        "lines": [
                            "        if pol_type_enum == OrgPolicyType::SingleOrg && !data.enabled {",
                            "            let reset_pw_policy_enabled =",
                            "                match OrgPolicy::find_by_org_and_type(org_id, OrgPolicyType::ResetPassword, &mut conn).await {",
                            "                    Some(p) => p.enabled,",
                            "                    None => false,",
                            "                };",
                            "",
                            "            if reset_pw_policy_enabled {",
                            "                err!(\"Account recovery policy is enabled. It is not allowed to disable this policy.\")",
                            "            }",
                            "        }",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1785": "    // Bitwarden only allows the Reset Password policy when Single Org policy is enabled",
                "1786": "    // Vaultwarden encouraged to use multiple orgs instead of groups because groups were not available in the past",
                "1787": "    // Now that groups are available we can enforce this option when wanted.",
                "1788": "    // We put this behind a config option to prevent breaking current installation.",
                "1789": "    // Maybe we want to enable this by default in the future, but currently it is disabled by default.",
                "1803": "        // Also prevent the Single Org Policy to be disabled if the Reset Password policy is enabled"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "cdfdc6ff4f61a7495cd70609c0d9098ff10b55a4",
            "timestamp": "2024-11-17T21:33:23+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix Org Import duplicate collections (#5200)\n\nThis fixes an issue with collections be duplicated same as was an issue with folders.\nAlso made some optimizations by using HashSet where possible and device the Vec/Hash capacity.\nAnd instead of passing objects only use the UUID which was the only value we needed.\n\nAlso found an issue with importing a personal export via the Org import where folders are used.\nSince Org's do not use folder we needed to clear those out, same as Bitwarden does.\n\nFixes #5193\n\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 21,
            "deletions": 18,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1618
                        ],
                        "comments": {
                            "1617": "    // Ciphers can be in multiple collections at the same time"
                        },
                        "lines": [
                            "    let mut relations = Vec::with_capacity(data.collection_relationships.len());"
                        ]
                    },
                    {
                        "line_numbers": [
                            1625,
                            1626
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut ciphers: Vec<String> = Vec::with_capacity(data.ciphers.len());",
                            "    for mut cipher_data in data.ciphers {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1628
                        ],
                        "comments": {
                            "1627": "        // Always clear folder_id's via an organization import"
                        },
                        "lines": [
                            "        cipher_data.folder_id = None;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1631
                        ],
                        "comments": {},
                        "lines": [
                            "        ciphers.push(cipher.uuid);"
                        ]
                    },
                    {
                        "line_numbers": [
                            1636,
                            1637
                        ],
                        "comments": {},
                        "lines": [
                            "        let cipher_id = &ciphers[cipher_index];",
                            "        let coll_id = &collections[coll_index];"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1617": "    // Ciphers can be in multiple collections at the same time",
                "1627": "        // Always clear folder_id's via an organization import"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "collection.rs": [
        {
            "commit": "1b801406d6bae8d9773e62d841bba362b7880fbb",
            "timestamp": "2024-01-25T22:02:07+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "prevent side effects if groups are disabled (#4265)",
            "additions": 127,
            "deletions": 74,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            215
                        ],
                        "comments": {
                            "213": "                    users_collections::user_uuid.eq(user_uuid).or( // Directly accessed collection",
                            "214": "                        users_organizations::access_all.eq(true) // access_all in Organization"
                        },
                        "lines": [
                            "                    ).or("
                        ]
                    },
                    {
                        "line_numbers": [
                            218,
                            219,
                            220,
                            221
                        ],
                        "comments": {
                            "216": "                        groups::access_all.eq(true) // access_all in groups",
                            "217": "                    ).or( // access via groups"
                        },
                        "lines": [
                            "                        groups_users::users_organizations_uuid.eq(users_organizations::uuid).and(",
                            "                            collections_groups::collections_uuid.is_not_null()",
                            "                        )",
                            "                    )"
                        ]
                    },
                    {
                        "line_numbers": [
                            223,
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236,
                            237,
                            238,
                            239,
                            240,
                            241
                        ],
                        "comments": {},
                        "lines": [
                            "                .select(collections::all_columns)",
                            "                .distinct()",
                            "                .load::<CollectionDb>(conn).expect(\"Error loading collections\").from_db()",
                            "            }}",
                            "        } else {",
                            "            db_run! { conn: {",
                            "                collections::table",
                            "                .left_join(users_collections::table.on(",
                            "                    users_collections::collection_uuid.eq(collections::uuid).and(",
                            "                        users_collections::user_uuid.eq(user_uuid.clone())",
                            "                    )",
                            "                ))",
                            "                .left_join(users_organizations::table.on(",
                            "                    collections::org_uuid.eq(users_organizations::org_uuid).and(",
                            "                        users_organizations::user_uuid.eq(user_uuid.clone())",
                            "                    )",
                            "                ))",
                            "                .filter(",
                            "                    users_organizations::status.eq(UserOrgStatus::Confirmed as i32)"
                        ]
                    },
                    {
                        "line_numbers": [
                            243
                        ],
                        "comments": {},
                        "lines": [
                            "                .filter("
                        ]
                    },
                    {
                        "line_numbers": [
                            248,
                            249,
                            250,
                            251,
                            252
                        ],
                        "comments": {
                            "244": "                    users_collections::user_uuid.eq(user_uuid).or( // Directly accessed collection",
                            "245": "                        users_organizations::access_all.eq(true) // access_all in Organization"
                        },
                        "lines": [
                            "                .select(collections::all_columns)",
                            "                .distinct()",
                            "                .load::<CollectionDb>(conn).expect(\"Error loading collections\").from_db()",
                            "            }}",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            308,
                            309,
                            310,
                            311,
                            312,
                            313
                        ],
                        "comments": {},
                        "lines": [
                            "        if CONFIG.org_groups_enabled() {",
                            "            db_run! { conn: {",
                            "                collections::table",
                            "                .left_join(users_collections::table.on(",
                            "                    users_collections::collection_uuid.eq(collections::uuid).and(",
                            "                        users_collections::user_uuid.eq(user_uuid.clone())"
                        ]
                    },
                    {
                        "line_numbers": [
                            315,
                            316,
                            317,
                            318,
                            319,
                            320,
                            321,
                            322,
                            323,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330,
                            331,
                            332,
                            333
                        ],
                        "comments": {},
                        "lines": [
                            "                ))",
                            "                .left_join(users_organizations::table.on(",
                            "                    collections::org_uuid.eq(users_organizations::org_uuid).and(",
                            "                        users_organizations::user_uuid.eq(user_uuid)",
                            "                    )",
                            "                ))",
                            "                .left_join(groups_users::table.on(",
                            "                    groups_users::users_organizations_uuid.eq(users_organizations::uuid)",
                            "                ))",
                            "                .left_join(groups::table.on(",
                            "                    groups::uuid.eq(groups_users::groups_uuid)",
                            "                ))",
                            "                .left_join(collections_groups::table.on(",
                            "                    collections_groups::groups_uuid.eq(groups_users::groups_uuid).and(",
                            "                        collections_groups::collections_uuid.eq(collections::uuid)",
                            "                    )",
                            "                ))",
                            "                .filter(collections::uuid.eq(uuid))",
                            "                .filter("
                        ]
                    },
                    {
                        "line_numbers": [
                            337
                        ],
                        "comments": {
                            "334": "                    users_collections::collection_uuid.eq(uuid).or( // Directly accessed collection",
                            "335": "                        users_organizations::access_all.eq(true).or( // access_all in Organization",
                            "336": "                            users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner"
                        },
                        "lines": [
                            "                    )).or("
                        ]
                    },
                    {
                        "line_numbers": [
                            340,
                            341,
                            342,
                            343,
                            344,
                            345,
                            346,
                            347,
                            348,
                            349,
                            350,
                            351,
                            352,
                            353,
                            354,
                            355,
                            356,
                            357,
                            358,
                            359,
                            360,
                            361,
                            362
                        ],
                        "comments": {
                            "338": "                        groups::access_all.eq(true) // access_all in groups",
                            "339": "                    ).or( // access via groups"
                        },
                        "lines": [
                            "                        groups_users::users_organizations_uuid.eq(users_organizations::uuid).and(",
                            "                            collections_groups::collections_uuid.is_not_null()",
                            "                        )",
                            "                    )",
                            "                ).select(collections::all_columns)",
                            "                .first::<CollectionDb>(conn).ok()",
                            "                .from_db()",
                            "            }}",
                            "        } else {",
                            "            db_run! { conn: {",
                            "                collections::table",
                            "                .left_join(users_collections::table.on(",
                            "                    users_collections::collection_uuid.eq(collections::uuid).and(",
                            "                        users_collections::user_uuid.eq(user_uuid.clone())",
                            "                    )",
                            "                ))",
                            "                .left_join(users_organizations::table.on(",
                            "                    collections::org_uuid.eq(users_organizations::org_uuid).and(",
                            "                        users_organizations::user_uuid.eq(user_uuid)",
                            "                    )",
                            "                ))",
                            "                .filter(collections::uuid.eq(uuid))",
                            "                .filter("
                        ]
                    },
                    {
                        "line_numbers": [
                            366,
                            367,
                            368,
                            369,
                            370,
                            371
                        ],
                        "comments": {
                            "363": "                    users_collections::collection_uuid.eq(uuid).or( // Directly accessed collection",
                            "364": "                        users_organizations::access_all.eq(true).or( // access_all in Organization",
                            "365": "                            users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner"
                        },
                        "lines": [
                            "                    ))",
                            "                ).select(collections::all_columns)",
                            "                .first::<CollectionDb>(conn).ok()",
                            "                .from_db()",
                            "            }}",
                            "        }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "213": "                    users_collections::user_uuid.eq(user_uuid).or( // Directly accessed collection",
                "214": "                        users_organizations::access_all.eq(true) // access_all in Organization",
                "216": "                        groups::access_all.eq(true) // access_all in groups",
                "217": "                    ).or( // access via groups",
                "244": "                    users_collections::user_uuid.eq(user_uuid).or( // Directly accessed collection",
                "245": "                        users_organizations::access_all.eq(true) // access_all in Organization",
                "334": "                    users_collections::collection_uuid.eq(uuid).or( // Directly accessed collection",
                "335": "                        users_organizations::access_all.eq(true).or( // access_all in Organization",
                "336": "                            users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                "338": "                        groups::access_all.eq(true) // access_all in groups",
                "339": "                    ).or( // access via groups",
                "363": "                    users_collections::collection_uuid.eq(uuid).or( // Directly accessed collection",
                "364": "                        users_organizations::access_all.eq(true).or( // access_all in Organization",
                "365": "                            users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner"
            },
            "comment_deleted_diff": {
                "211": "                users_collections::user_uuid.eq(user_uuid).or( // Directly accessed collection",
                "212": "                    users_organizations::access_all.eq(true) // access_all in Organization",
                "214": "                    groups::access_all.eq(true) // access_all in groups",
                "215": "                ).or( // access via groups",
                "305": "                users_collections::collection_uuid.eq(uuid).or( // Directly accessed collection",
                "306": "                    users_organizations::access_all.eq(true).or( // access_all in Organization",
                "307": "                        users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                "309": "                    groups::access_all.eq(true) // access_all in groups",
                "310": "                ).or( // access via groups"
            },
            "comment_modified_diff": {
                "214": "                    groups::access_all.eq(true) // access_all in groups"
            }
        },
        {
            "commit": "9dcc738f856d818b261507376290c544bf712d47",
            "timestamp": "2024-04-27T22:09:00+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "improve access to collections via groups (#4441)\n\n* refactor get_org_collections_details\r\n\r\n* improve access to collection check\r\n\r\n* fix get_org_collection_detail too",
            "additions": 14,
            "deletions": 12,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "255": "    // Check if a user has access to a specific collection",
                "256": "    // FIXME: This needs to be reviewed. The query used by `find_by_user_uuid` could be adjusted to filter when needed.",
                "257": "    //        For now this is a good solution without making to much changes."
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "fda77afc2a802f6e7607c19ad12b5f93520a688e",
            "timestamp": "2024-07-04T20:28:19+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "add group support for Cipher::get_collections() (#4592)\n\n* add group support for Cipher::get_collections()\r\n\r\njoin group infos assigned to a collection to check\r\nwhether user has been given access to all collections via any group\r\nor they have access to a specific collection via any group membership\r\n\r\n* fix Collection::is_writable_by_user()\r\n\r\nprevent side effects if groups are disabled\r\n\r\n* differentiate the /collection endpoints\r\n\r\n* return cipherDetails on post_collections_update()\r\n\r\n* add collections_v2 endpoint",
            "additions": 57,
            "deletions": 41,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            399
                        ],
                        "comments": {
                            "396": "                    .filter(users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                            "397": "                        .or(users_organizations::access_all.eq(true)) // access_all via membership",
                            "398": "                        .or(users_collections::collection_uuid.eq(&self.uuid) // write access given to collection"
                        },
                        "lines": [
                            "                            .and(users_collections::read_only.eq(false)))"
                        ]
                    },
                    {
                        "line_numbers": [
                            402
                        ],
                        "comments": {
                            "400": "                        .or(groups::access_all.eq(true)) // access_all via group",
                            "401": "                        .or(collections_groups::collections_uuid.is_not_null() // write access given via group"
                        },
                        "lines": [
                            "                            .and(collections_groups::read_only.eq(false)))"
                        ]
                    },
                    {
                        "line_numbers": [
                            404,
                            405,
                            406,
                            407,
                            408,
                            409,
                            410,
                            411,
                            412,
                            413,
                            414,
                            415,
                            416,
                            417,
                            418,
                            419,
                            420
                        ],
                        "comments": {},
                        "lines": [
                            "                    .count()",
                            "                    .first::<i64>(conn)",
                            "                    .ok()",
                            "                    .unwrap_or(0) != 0",
                            "            }}",
                            "        } else {",
                            "            db_run! { conn: {",
                            "                collections::table",
                            "                    .filter(collections::uuid.eq(&self.uuid))",
                            "                    .inner_join(users_organizations::table.on(",
                            "                        collections::org_uuid.eq(users_organizations::org_uuid)",
                            "                        .and(users_organizations::user_uuid.eq(user_uuid.clone()))",
                            "                    ))",
                            "                    .left_join(users_collections::table.on(",
                            "                        users_collections::collection_uuid.eq(collections::uuid)",
                            "                        .and(users_collections::user_uuid.eq(user_uuid))",
                            "                    ))"
                        ]
                    },
                    {
                        "line_numbers": [
                            424,
                            425,
                            426,
                            427,
                            428,
                            429,
                            430,
                            431
                        ],
                        "comments": {
                            "421": "                    .filter(users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                            "422": "                        .or(users_organizations::access_all.eq(true)) // access_all via membership",
                            "423": "                        .or(users_collections::collection_uuid.eq(&self.uuid) // write access given to collection"
                        },
                        "lines": [
                            "                            .and(users_collections::read_only.eq(false)))",
                            "                    )",
                            "                    .count()",
                            "                    .first::<i64>(conn)",
                            "                    .ok()",
                            "                    .unwrap_or(0) != 0",
                            "            }}",
                            "        }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "396": "                    .filter(users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                "397": "                        .or(users_organizations::access_all.eq(true)) // access_all via membership",
                "398": "                        .or(users_collections::collection_uuid.eq(&self.uuid) // write access given to collection",
                "400": "                        .or(groups::access_all.eq(true)) // access_all via group",
                "401": "                        .or(collections_groups::collections_uuid.is_not_null() // write access given via group",
                "421": "                    .filter(users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                "422": "                        .or(users_organizations::access_all.eq(true)) // access_all via membership",
                "423": "                        .or(users_collections::collection_uuid.eq(&self.uuid) // write access given to collection"
            },
            "comment_deleted_diff": {
                "399": "                users_collections::collection_uuid.eq(&self.uuid).and(users_collections::read_only.eq(false)).or(// Directly accessed collection",
                "400": "                    users_organizations::access_all.eq(true).or( // access_all in Organization",
                "401": "                        users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner",
                "403": "                    groups::access_all.eq(true) // access_all in groups",
                "404": "                ).or( // access via groups"
            },
            "comment_modified_diff": {
                "400": "                    users_organizations::access_all.eq(true).or( // access_all in Organization",
                "401": "                        users_organizations::atype.le(UserOrgType::Admin as i32) // Org admin or owner"
            }
        },
        {
            "commit": "9e26014b4df65acc44ee2c0e94fada0914843ec3",
            "timestamp": "2024-08-15T12:36:00+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix manager in web-vault v2024.6.2 for collections (#4860)\n\nThe web-vault v2024.6.2 we use needs some extra information to allow\r\nmanagers to actually be able to manage collections.\r\n\r\nThe v2024.6.2 web-vault has somewhat of a mixture of the newer roles and\r\nolder manager roles. To at least fix this for the web-vault we bundle\r\nthese changes will make the manager able to manage.\r\n\r\nFor future web-vaults we would need a lot more changes to be done to fix\r\nthis in a better way though.\r\n\r\nFixes #4844",
            "additions": 26,
            "deletions": 8,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            85,
                            86
                        ],
                        "comments": {
                            "83": "                // Only for Manager types Bitwarden returns true for the can_manage option",
                            "84": "                // Owners and Admins always have false, but they can manage all collections anyway"
                        },
                        "lines": [
                            "                Some(uo) if uo.has_full_access() => (false, false, uo.atype == UserOrgType::Manager),",
                            "                Some(uo) => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            88
                        ],
                        "comments": {
                            "87": "                    // Only let a manager manage collections when the have full read/write access"
                        },
                        "lines": [
                            "                    let is_manager = uo.atype == UserOrgType::Manager;"
                        ]
                    },
                    {
                        "line_numbers": [
                            90
                        ],
                        "comments": {},
                        "lines": [
                            "                        (uc.read_only, uc.hide_passwords, is_manager && !uc.read_only && !uc.hide_passwords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            92
                        ],
                        "comments": {},
                        "lines": [
                            "                        (cg.read_only, cg.hide_passwords, is_manager && !cg.read_only && !cg.hide_passwords)"
                        ]
                    },
                    {
                        "line_numbers": [
                            94
                        ],
                        "comments": {},
                        "lines": [
                            "                        (false, false, false)"
                        ]
                    },
                    {
                        "line_numbers": [
                            97
                        ],
                        "comments": {},
                        "lines": [
                            "                _ => (true, true, false),"
                        ]
                    },
                    {
                        "line_numbers": [
                            100,
                            101,
                            102,
                            103,
                            104,
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112,
                            113
                        ],
                        "comments": {},
                        "lines": [
                            "            match UserOrganization::find_confirmed_by_user_and_org(user_uuid, &self.org_uuid, conn).await {",
                            "                Some(ou) if ou.has_full_access() => (false, false, ou.atype == UserOrgType::Manager),",
                            "                Some(ou) => {",
                            "                    let is_manager = ou.atype == UserOrgType::Manager;",
                            "                    let read_only = !self.is_writable_by_user(user_uuid, conn).await;",
                            "                    let hide_passwords = self.hide_passwords_for_user(user_uuid, conn).await;",
                            "                    (read_only, hide_passwords, is_manager && !read_only && !hide_passwords)",
                            "                }",
                            "                _ => (",
                            "                    !self.is_writable_by_user(user_uuid, conn).await,",
                            "                    self.hide_passwords_for_user(user_uuid, conn).await,",
                            "                    false,",
                            "                ),",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            120
                        ],
                        "comments": {},
                        "lines": [
                            "        json_object[\"manage\"] = json!(can_manage);"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "83": "                // Only for Manager types Bitwarden returns true for the can_manage option",
                "84": "                // Owners and Admins always have false, but they can manage all collections anyway",
                "87": "                    // Only let a manager manage collections when the have full read/write access"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "ae6ed0ece8bae45e8ff0e4a473004b54db348e25",
            "timestamp": "2024-10-18T20:37:32+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix collection management and match some json output (#5095)\n\n- Fixed collection management to be usable from the Password Manager UI\r\n- Checked and brought in-to-sync with upstream several json responses\r\n- Fixed a small issue with the `fields` response when it was empty\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 3,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            85
                        ],
                        "comments": {
                            "84": "                // Owners and Admins always have true"
                        },
                        "lines": [
                            "                Some(uo) if uo.has_full_access() => (false, false, uo.atype >= UserOrgType::Manager),"
                        ]
                    },
                    {
                        "line_numbers": [
                            101
                        ],
                        "comments": {},
                        "lines": [
                            "                Some(ou) if ou.has_full_access() => (false, false, ou.atype >= UserOrgType::Manager),"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "84": "                // Owners and Admins always have true"
            },
            "comment_deleted_diff": {
                "84": "                // Owners and Admins always have false, but they can manage all collections anyway"
            },
            "comment_modified_diff": {
                "84": "                // Owners and Admins always have false, but they can manage all collections anyway"
            }
        }
    ],
    "accounts.rs": [
        {
            "commit": "3b283c289ebe254d0a1ab167682c006414bfa398",
            "timestamp": "2024-01-30T19:14:25+01:00",
            "author": "Stefan Melmuk",
            "commit_message": "register missing push devices at login (#3792)\n\nsave the push token of new device even if push notifications are not\r\nenabled and provide a way to register the push device at login\r\n\r\nunregister device if there already is a push token saved unless the\r\nnew token has already been registered.\r\n\r\nalso the `unregister_push_device` function used the wrong argument\r\ncf. https://github.com/bitwarden/server/blob/08d380900b540f8d1a734c7abccaf80e59a91ced/src/Core/Services/Implementations/RelayPushRegistrationService.cs#L43",
            "additions": 18,
            "deletions": 11,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            964
                        ],
                        "comments": {
                            "963": "    // if the device already has been registered"
                        },
                        "lines": [
                            "    if device.is_registered() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            966,
                            967,
                            968,
                            969
                        ],
                        "comments": {
                            "965": "        // check if the new token is the same as the registered token"
                        },
                        "lines": [
                            "        if device.push_token.is_some() && device.push_token.unwrap() == token.clone() {",
                            "            debug!(\"Device {} is already registered and token is the same\", uuid);",
                            "            return Ok(());",
                            "        } else {"
                        ]
                    },
                    {
                        "line_numbers": [
                            971,
                            972
                        ],
                        "comments": {
                            "970": "            // Try to unregister already registered device"
                        },
                        "lines": [
                            "            let _ = unregister_push_device(device.push_uuid).await;",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            974
                        ],
                        "comments": {
                            "973": "        // clear the push_uuid"
                        },
                        "lines": [
                            "        device.push_uuid = None;"
                        ]
                    },
                    {
                        "line_numbers": [
                            976
                        ],
                        "comments": {},
                        "lines": [
                            "    device.push_token = Some(token);"
                        ]
                    },
                    {
                        "line_numbers": [
                            980,
                            981
                        ],
                        "comments": {},
                        "lines": [
                            "",
                            "    register_push_device(&mut device, &mut conn).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            998
                        ],
                        "comments": {},
                        "lines": [
                            "        unregister_push_device(device.push_uuid).await?;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "963": "    // if the device already has been registered",
                "965": "        // check if the new token is the same as the registered token",
                "970": "            // Try to unregister already registered device",
                "973": "        // clear the push_uuid"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "e1a8df96dbadfbf5ad36ce9aa2f31f34396166c2",
            "timestamp": "2024-04-06T14:42:53+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update Key Rotation web-vault v2024.3.x (#4446)\n\nKey rotation was changed since 2024.1.x.\r\nMultiple other items were added to be rotated like password-reset and emergency-access data to be part of just one POST instead of having multiple.\r\n\r\nSee: https://github.com/dani-garcia/bw_web_builds/pull/157",
            "additions": 89,
            "deletions": 21,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            444
                        ],
                        "comments": {
                            "441": "    // There is a bug in 2024.3.x which adds a `null` item.",
                            "442": "    // To bypass this we allow a Option here, but skip it during the updates",
                            "443": "    // See: https://github.com/bitwarden/clients/issues/8453"
                        },
                        "lines": [
                            "    Id: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            448,
                            449,
                            450,
                            451,
                            452,
                            453,
                            454,
                            455,
                            456,
                            457,
                            458,
                            459,
                            460,
                            461
                        ],
                        "comments": {},
                        "lines": [
                            "#[derive(Deserialize)]",
                            "#[allow(non_snake_case)]",
                            "struct UpdateEmergencyAccessData {",
                            "    Id: String,",
                            "    KeyEncrypted: String,",
                            "}",
                            "",
                            "#[derive(Deserialize)]",
                            "#[allow(non_snake_case)]",
                            "struct UpdateResetPasswordData {",
                            "    OrganizationId: String,",
                            "    ResetPasswordKey: String,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            463
                        ],
                        "comments": {},
                        "lines": [
                            "use super::sends::{update_send_from_data, SendData};"
                        ]
                    },
                    {
                        "line_numbers": [
                            470,
                            471,
                            472
                        ],
                        "comments": {},
                        "lines": [
                            "    Sends: Vec<SendData>,",
                            "    EmergencyAccessKeys: Vec<UpdateEmergencyAccessData>,",
                            "    ResetPasswordKeys: Vec<UpdateResetPasswordData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            475
                        ],
                        "comments": {},
                        "lines": [
                            "    PrivateKey: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            499,
                            500,
                            501,
                            502,
                            503,
                            504,
                            505,
                            506,
                            507,
                            508,
                            509,
                            510,
                            511,
                            512,
                            513
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(folder_id) = folder_data.Id {",
                            "            let mut saved_folder = match Folder::find_by_uuid(&folder_id, &mut conn).await {",
                            "                Some(folder) => folder,",
                            "                None => err!(\"Folder doesn't exist\"),",
                            "            };",
                            "",
                            "            if &saved_folder.user_uuid != user_uuid {",
                            "                err!(\"The folder is not owned by the user\")",
                            "            }",
                            "",
                            "            saved_folder.name = folder_data.Name;",
                            "            saved_folder.save(&mut conn).await?",
                            "        }",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            515,
                            516,
                            517,
                            518,
                            519
                        ],
                        "comments": {
                            "514": "    // Update emergency access data"
                        },
                        "lines": [
                            "    for emergency_access_data in data.EmergencyAccessKeys {",
                            "        let mut saved_emergency_access = match EmergencyAccess::find_by_uuid(&emergency_access_data.Id, &mut conn).await",
                            "        {",
                            "            Some(emergency_access) => emergency_access,",
                            "            None => err!(\"Emergency access doesn't exist\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            522,
                            523
                        ],
                        "comments": {},
                        "lines": [
                            "        if &saved_emergency_access.grantor_uuid != user_uuid {",
                            "            err!(\"The emergency access is not owned by the user\")"
                        ]
                    },
                    {
                        "line_numbers": [
                            526,
                            527,
                            528,
                            529
                        ],
                        "comments": {},
                        "lines": [
                            "        saved_emergency_access.key_encrypted = Some(emergency_access_data.KeyEncrypted);",
                            "        saved_emergency_access.save(&mut conn).await?",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            531,
                            532,
                            533,
                            534,
                            535,
                            536,
                            537,
                            538,
                            539,
                            540,
                            541,
                            542,
                            543
                        ],
                        "comments": {
                            "530": "    // Update reset password data"
                        },
                        "lines": [
                            "    for reset_password_data in data.ResetPasswordKeys {",
                            "        let mut user_org =",
                            "            match UserOrganization::find_by_user_and_org(user_uuid, &reset_password_data.OrganizationId, &mut conn)",
                            "                .await",
                            "            {",
                            "                Some(reset_password) => reset_password,",
                            "                None => err!(\"Reset password doesn't exist\"),",
                            "            };",
                            "",
                            "        user_org.reset_password_key = Some(reset_password_data.ResetPasswordKey);",
                            "        user_org.save(&mut conn).await?",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            545,
                            546,
                            547,
                            548,
                            549,
                            550,
                            551
                        ],
                        "comments": {
                            "544": "    // Update send data"
                        },
                        "lines": [
                            "    for send_data in data.Sends {",
                            "        let mut send = match Send::find_by_uuid(send_data.Id.as_ref().unwrap(), &mut conn).await {",
                            "            Some(send) => send,",
                            "            None => err!(\"Send doesn't exist\"),",
                            "        };",
                            "",
                            "        update_send_from_data(&mut send, send_data, &headers, &mut conn, &nt, UpdateType::None).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            558,
                            559,
                            560,
                            561,
                            562
                        ],
                        "comments": {},
                        "lines": [
                            "        if cipher_data.OrganizationId.is_none() {",
                            "            let mut saved_cipher = match Cipher::find_by_uuid(cipher_data.Id.as_ref().unwrap(), &mut conn).await {",
                            "                Some(cipher) => cipher,",
                            "                None => err!(\"Cipher doesn't exist\"),",
                            "            };"
                        ]
                    },
                    {
                        "line_numbers": [
                            564,
                            565,
                            566
                        ],
                        "comments": {},
                        "lines": [
                            "            if saved_cipher.user_uuid.as_ref().unwrap() != user_uuid {",
                            "                err!(\"The cipher is not owned by the user\")",
                            "            }"
                        ]
                    },
                    {
                        "line_numbers": [
                            571,
                            572,
                            573
                        ],
                        "comments": {},
                        "lines": [
                            "            update_cipher_from_data(&mut saved_cipher, cipher_data, &headers, false, &mut conn, &nt, UpdateType::None)",
                            "                .await?",
                            "        }"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "441": "    // There is a bug in 2024.3.x which adds a `null` item.",
                "442": "    // To bypass this we allow a Option here, but skip it during the updates",
                "443": "    // See: https://github.com/bitwarden/clients/issues/8453",
                "480": "    // TODO: See if we can wrap everything within a SQL Transaction. If something fails it should revert everything.",
                "497": "        // Skip `null` folder id entries.",
                "498": "        // See: https://github.com/bitwarden/clients/issues/8453",
                "514": "    // Update emergency access data",
                "530": "    // Update reset password data",
                "544": "    // Update send data",
                "568": "            // Prevent triggering cipher updates via WebSockets by settings UpdateType::None",
                "569": "            // The user sessions are invalidated because all the ciphers were re-encrypted and thus triggering an update could cause issues.",
                "570": "            // We force the users to logout after the user has been saved to try and prevent these issues."
            },
            "comment_deleted_diff": {
                "501": "        // Prevent triggering cipher updates via WebSockets by settings UpdateType::None",
                "502": "        // The user sessions are invalidated because all the ciphers were re-encrypted and thus triggering an update could cause issues.",
                "503": "        // We force the users to logout after the user has been saved to try and prevent these issues."
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "e9aa5a545eda43e2e868f76115a3cc9c13d4cc30",
            "timestamp": "2024-04-27T22:16:05+02:00",
            "author": "Stefan Melmuk",
            "commit_message": "fix emergency access invites (#4337)\n\n* fix emergency access invites with no mail\r\n\r\nwhen mail is disabled instead of accepting emergency access for all\r\ninvited users automatically, we only accept if the user already exists\r\n\r\non registration of a new account any open emergency access invitations\r\nwill be accepted, if mail is disabled\r\n\r\nalso prevent invited emergency access contacts to register if emergency\r\naccess is disabled (this is only relevant for when mail is enabled, if\r\nmail is disabled they should have an Invitation entry)\r\n\r\n* delete emergency access invitations\r\n\r\nif an invited user is deleted in the /admin panel their emergency\r\naccess invitation will remain in the database which causes\r\nthe to_json_grantee_details fn to panic\r\n\r\n* improve missing emergency access grantees\r\n\r\ninstead of returning an empty emergency access contact the entry should\r\nnot be added to the list. also the error handling can be improved a bit.",
            "additions": 10,
            "deletions": 2,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            234,
                            235,
                            236,
                            237,
                            238,
                            239
                        ],
                        "comments": {
                            "233": "    // accept any open emergency access invitations"
                        },
                        "lines": [
                            "    if !CONFIG.mail_enabled() && CONFIG.emergency_access_allowed() {",
                            "        for mut emergency_invite in EmergencyAccess::find_all_invited_by_grantee_email(&user.email, &mut conn).await {",
                            "            let _ = emergency_invite.accept_invite(&user.uuid, &user.email, &mut conn).await;",
                            "        }",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "233": "    // accept any open emergency access invitations"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "9555ac7bb84c213221b157448f39a0b3fa521dbc",
            "timestamp": "2024-05-25T15:29:58+02:00",
            "author": "Timshel",
            "commit_message": "Remove compatibility route (#4578)",
            "additions": 4,
            "deletions": 12,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": [
                    {
                        "line_numbers": [
                            984,
                            985
                        ],
                        "comments": {
                            "983": "#[get(\"/devices/knowndevice/<email>/<uuid>\")]"
                        },
                        "lines": [
                            "async fn get_known_device_from_path(email: &str, uuid: &str, mut conn: DbConn) -> JsonResult {",
                            "    // This endpoint doesn't have auth header"
                        ]
                    },
                    {
                        "line_numbers": [
                            987,
                            988
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(user) = User::find_by_mail(email, &mut conn).await {",
                            "        result = Device::find_by_uuid_and_user(uuid, &user.uuid, &mut conn).await.is_some();"
                        ]
                    },
                    {
                        "line_numbers": [
                            994,
                            995,
                            996,
                            997
                        ],
                        "comments": {},
                        "lines": [
                            "async fn get_known_device(device: KnownDevice, conn: DbConn) -> JsonResult {",
                            "    get_known_device_from_path(&device.email, &device.uuid, conn).await",
                            "}",
                            ""
                        ]
                    }
                ]
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "982": "// This variant is deprecated: https://github.com/bitwarden/server/pull/2682",
                "985": "    // This endpoint doesn't have auth header"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 232,
            "deletions": 247,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            255
                        ],
                        "comments": {
                            "253": "    // culture: String, // Ignored, always use en-US",
                            "254": "    // masterPasswordHint: Option<String>, // Ignored, has been moved to ChangePassData"
                        },
                        "lines": [
                            "    name: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            259
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_profile(data: Json<ProfileData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            264,
                            265
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_profile(data: Json<ProfileData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: ProfileData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            269
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.name.len() > 50 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            274
                        ],
                        "comments": {},
                        "lines": [
                            "    user.name = data.name;"
                        ]
                    },
                    {
                        "line_numbers": [
                            281
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            283
                        ],
                        "comments": {},
                        "lines": [
                            "    avatar_color: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            287,
                            288
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_avatar(data: Json<AvatarData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: AvatarData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            293
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(color) = &data.avatar_color {"
                        ]
                    },
                    {
                        "line_numbers": [
                            300
                        ],
                        "comments": {},
                        "lines": [
                            "    user.avatar_color = data.avatar_color;"
                        ]
                    },
                    {
                        "line_numbers": [
                            315,
                            316,
                            317
                        ],
                        "comments": {},
                        "lines": [
                            "        \"userId\": user.uuid,",
                            "        \"publicKey\": user.public_key,",
                            "        \"object\":\"userKey\""
                        ]
                    },
                    {
                        "line_numbers": [
                            322,
                            323
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_keys(data: Json<KeysData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: KeysData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            327,
                            328
                        ],
                        "comments": {},
                        "lines": [
                            "    user.private_key = Some(data.encrypted_private_key);",
                            "    user.public_key = Some(data.public_key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            333,
                            334,
                            335
                        ],
                        "comments": {},
                        "lines": [
                            "        \"privateKey\": user.private_key,",
                            "        \"publicKey\": user.public_key,",
                            "        \"object\":\"keys\""
                        ]
                    },
                    {
                        "line_numbers": [
                            340
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            342,
                            343,
                            344,
                            345
                        ],
                        "comments": {},
                        "lines": [
                            "    master_password_hash: String,",
                            "    new_master_password_hash: String,",
                            "    master_password_hint: Option<String>,",
                            "    key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            349,
                            350
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_password(data: Json<ChangePassData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {",
                            "    let data: ChangePassData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            353
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            357
                        ],
                        "comments": {},
                        "lines": [
                            "    user.password_hint = clean_password_hint(&data.master_password_hint);"
                        ]
                    },
                    {
                        "line_numbers": [
                            364,
                            365
                        ],
                        "comments": {},
                        "lines": [
                            "        &data.new_master_password_hash,",
                            "        Some(data.key),"
                        ]
                    },
                    {
                        "line_numbers": [
                            381
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            383,
                            384,
                            385,
                            386
                        ],
                        "comments": {},
                        "lines": [
                            "    kdf: i32,",
                            "    kdf_iterations: i32,",
                            "    kdf_memory: Option<i32>,",
                            "    kdf_parallelism: Option<i32>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            388,
                            389,
                            390
                        ],
                        "comments": {},
                        "lines": [
                            "    master_password_hash: String,",
                            "    new_master_password_hash: String,",
                            "    key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            394,
                            395
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_kdf(data: Json<ChangeKdfData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {",
                            "    let data: ChangeKdfData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            398
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            402
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.kdf == UserKdfType::Pbkdf2 as i32 && data.kdf_iterations < 100_000 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            406,
                            407
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.kdf == UserKdfType::Argon2id as i32 {",
                            "        if data.kdf_iterations < 1 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            410
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(m) = data.kdf_memory {"
                        ]
                    },
                    {
                        "line_numbers": [
                            414
                        ],
                        "comments": {},
                        "lines": [
                            "            user.client_kdf_memory = data.kdf_memory;"
                        ]
                    },
                    {
                        "line_numbers": [
                            418
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(p) = data.kdf_parallelism {"
                        ]
                    },
                    {
                        "line_numbers": [
                            422
                        ],
                        "comments": {},
                        "lines": [
                            "            user.client_kdf_parallelism = data.kdf_parallelism;"
                        ]
                    },
                    {
                        "line_numbers": [
                            430,
                            431,
                            432
                        ],
                        "comments": {},
                        "lines": [
                            "    user.client_kdf_iter = data.kdf_iterations;",
                            "    user.client_kdf_type = data.kdf;",
                            "    user.set_password(&data.new_master_password_hash, Some(data.key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            441
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            446,
                            447
                        ],
                        "comments": {},
                        "lines": [
                            "    id: Option<String>,",
                            "    name: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            451
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            453,
                            454
                        ],
                        "comments": {},
                        "lines": [
                            "    id: String,",
                            "    key_encrypted: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            458
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            460,
                            461
                        ],
                        "comments": {},
                        "lines": [
                            "    organization_id: String,",
                            "    reset_password_key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            468
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            470,
                            471,
                            472,
                            473,
                            474,
                            475,
                            476,
                            477
                        ],
                        "comments": {},
                        "lines": [
                            "    ciphers: Vec<CipherData>,",
                            "    folders: Vec<UpdateFolderData>,",
                            "    sends: Vec<SendData>,",
                            "    emergency_access_keys: Vec<UpdateEmergencyAccessData>,",
                            "    reset_password_keys: Vec<UpdateResetPasswordData>,",
                            "    key: String,",
                            "    master_password_hash: String,",
                            "    private_key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            481
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_rotatekey(data: Json<KeyData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            483
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: KeyData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            485
                        ],
                        "comments": {},
                        "lines": [
                            "    if !headers.user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            493
                        ],
                        "comments": {},
                        "lines": [
                            "    Cipher::validate_notes(&data.ciphers)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            498
                        ],
                        "comments": {},
                        "lines": [
                            "    for folder_data in data.folders {"
                        ]
                    },
                    {
                        "line_numbers": [
                            501
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(folder_id) = folder_data.id {"
                        ]
                    },
                    {
                        "line_numbers": [
                            511
                        ],
                        "comments": {},
                        "lines": [
                            "            saved_folder.name = folder_data.name;"
                        ]
                    },
                    {
                        "line_numbers": [
                            517,
                            518
                        ],
                        "comments": {},
                        "lines": [
                            "    for emergency_access_data in data.emergency_access_keys {",
                            "        let mut saved_emergency_access = match EmergencyAccess::find_by_uuid(&emergency_access_data.id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            528
                        ],
                        "comments": {},
                        "lines": [
                            "        saved_emergency_access.key_encrypted = Some(emergency_access_data.key_encrypted);"
                        ]
                    },
                    {
                        "line_numbers": [
                            533
                        ],
                        "comments": {},
                        "lines": [
                            "    for reset_password_data in data.reset_password_keys {"
                        ]
                    },
                    {
                        "line_numbers": [
                            535
                        ],
                        "comments": {},
                        "lines": [
                            "            match UserOrganization::find_by_user_and_org(user_uuid, &reset_password_data.organization_id, &mut conn)"
                        ]
                    },
                    {
                        "line_numbers": [
                            542
                        ],
                        "comments": {},
                        "lines": [
                            "        user_org.reset_password_key = Some(reset_password_data.reset_password_key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            547,
                            548
                        ],
                        "comments": {},
                        "lines": [
                            "    for send_data in data.sends {",
                            "        let mut send = match Send::find_by_uuid(send_data.id.as_ref().unwrap(), &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            559,
                            560,
                            561
                        ],
                        "comments": {},
                        "lines": [
                            "    for cipher_data in data.ciphers {",
                            "        if cipher_data.organization_id.is_none() {",
                            "            let mut saved_cipher = match Cipher::find_by_uuid(cipher_data.id.as_ref().unwrap(), &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            581,
                            582
                        ],
                        "comments": {},
                        "lines": [
                            "    user.akey = data.key;",
                            "    user.private_key = Some(data.private_key);"
                        ]
                    },
                    {
                        "line_numbers": [
                            596,
                            597
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_sstamp(data: Json<PasswordOrOtpData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {",
                            "    let data: PasswordOrOtpData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            612
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            614,
                            615
                        ],
                        "comments": {},
                        "lines": [
                            "    master_password_hash: String,",
                            "    new_email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            619
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_email_token(data: Json<EmailTokenData>, headers: Headers, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            624
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: EmailTokenData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            627
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            631
                        ],
                        "comments": {},
                        "lines": [
                            "    if User::find_by_mail(&data.new_email, &mut conn).await.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            635
                        ],
                        "comments": {},
                        "lines": [
                            "    if !CONFIG.is_email_domain_allowed(&data.new_email) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            642
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Err(e) = mail::send_change_email(&data.new_email, &token).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            646
                        ],
                        "comments": {},
                        "lines": [
                            "        debug!(\"Email change request for user ({}) to email ({}) with token ({})\", user.uuid, data.new_email, token);"
                        ]
                    },
                    {
                        "line_numbers": [
                            649
                        ],
                        "comments": {},
                        "lines": [
                            "    user.email_new = Some(data.new_email);"
                        ]
                    },
                    {
                        "line_numbers": [
                            655
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            657,
                            658
                        ],
                        "comments": {},
                        "lines": [
                            "    master_password_hash: String,",
                            "    new_email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            660,
                            661,
                            662
                        ],
                        "comments": {},
                        "lines": [
                            "    key: String,",
                            "    new_master_password_hash: String,",
                            "    token: NumberOrString,"
                        ]
                    },
                    {
                        "line_numbers": [
                            666
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_email(data: Json<ChangeEmailData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            671
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ChangeEmailData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            674
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            678
                        ],
                        "comments": {},
                        "lines": [
                            "    if User::find_by_mail(&data.new_email, &mut conn).await.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            684
                        ],
                        "comments": {},
                        "lines": [
                            "            if val != &data.new_email {"
                        ]
                    },
                    {
                        "line_numbers": [
                            695
                        ],
                        "comments": {},
                        "lines": [
                            "                if *val != data.token.into_string() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            706
                        ],
                        "comments": {},
                        "lines": [
                            "    user.email = data.new_email;"
                        ]
                    },
                    {
                        "line_numbers": [
                            710
                        ],
                        "comments": {},
                        "lines": [
                            "    user.set_password(&data.new_master_password_hash, Some(data.key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            735
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            737,
                            738
                        ],
                        "comments": {},
                        "lines": [
                            "    user_id: String,",
                            "    token: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            742,
                            743
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_verify_email_token(data: Json<VerifyEmailTokenData>, mut conn: DbConn) -> EmptyResult {",
                            "    let data: VerifyEmailTokenData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            745
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut user = match User::find_by_uuid(&data.user_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            750
                        ],
                        "comments": {},
                        "lines": [
                            "    let claims = match decode_verify_email(&data.token) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            768
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            770
                        ],
                        "comments": {},
                        "lines": [
                            "    email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            774,
                            775
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_delete_recover(data: Json<DeleteRecoverData>, mut conn: DbConn) -> EmptyResult {",
                            "    let data: DeleteRecoverData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            778
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(user) = User::find_by_mail(&data.email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            794
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            796,
                            797
                        ],
                        "comments": {},
                        "lines": [
                            "    user_id: String,",
                            "    token: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            801,
                            802
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_delete_recover_token(data: Json<DeleteRecoverTokenData>, mut conn: DbConn) -> EmptyResult {",
                            "    let data: DeleteRecoverTokenData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            804
                        ],
                        "comments": {},
                        "lines": [
                            "    let user = match User::find_by_uuid(&data.user_id, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            809
                        ],
                        "comments": {},
                        "lines": [
                            "    let claims = match decode_delete(&data.token) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            820
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_delete_account(data: Json<PasswordOrOtpData>, headers: Headers, conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            825,
                            826
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_account(data: Json<PasswordOrOtpData>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data: PasswordOrOtpData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            841
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            843
                        ],
                        "comments": {},
                        "lines": [
                            "    email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            847
                        ],
                        "comments": {},
                        "lines": [
                            "async fn password_hint(data: Json<PasswordHintData>, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            854,
                            855
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordHintData = data.into_inner();",
                            "    let email = &data.email;"
                        ]
                    },
                    {
                        "line_numbers": [
                            889
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            891
                        ],
                        "comments": {},
                        "lines": [
                            "    email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            895
                        ],
                        "comments": {},
                        "lines": [
                            "async fn prelogin(data: Json<PreloginData>, conn: DbConn) -> Json<Value> {"
                        ]
                    },
                    {
                        "line_numbers": [
                            899,
                            900
                        ],
                        "comments": {},
                        "lines": [
                            "pub async fn _prelogin(data: Json<PreloginData>, mut conn: DbConn) -> Json<Value> {",
                            "    let data: PreloginData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            902
                        ],
                        "comments": {},
                        "lines": [
                            "    let (kdf_type, kdf_iter, kdf_mem, kdf_para) = match User::find_by_mail(&data.email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            908,
                            909,
                            910,
                            911
                        ],
                        "comments": {},
                        "lines": [
                            "        \"kdf\": kdf_type,",
                            "        \"kdfIterations\": kdf_iter,",
                            "        \"kdfMemory\": kdf_mem,",
                            "        \"kdfParallelism\": kdf_para,"
                        ]
                    },
                    {
                        "line_numbers": [
                            919
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            921
                        ],
                        "comments": {},
                        "lines": [
                            "    master_password_hash: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            925,
                            926
                        ],
                        "comments": {},
                        "lines": [
                            "fn verify_password(data: Json<SecretVerificationRequest>, headers: Headers) -> EmptyResult {",
                            "    let data: SecretVerificationRequest = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            929
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            936
                        ],
                        "comments": {},
                        "lines": [
                            "async fn _api_key(data: Json<PasswordOrOtpData>, rotate: bool, headers: Headers, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            939
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            950,
                            951,
                            952
                        ],
                        "comments": {},
                        "lines": [
                            "      \"apiKey\": user.api_key,",
                            "      \"revisionDate\": format_date(&user.updated_at),",
                            "      \"object\": \"apiKey\","
                        ]
                    },
                    {
                        "line_numbers": [
                            957
                        ],
                        "comments": {},
                        "lines": [
                            "async fn api_key(data: Json<PasswordOrOtpData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            962
                        ],
                        "comments": {},
                        "lines": [
                            "async fn rotate_api_key(data: Json<PasswordOrOtpData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1016
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1018
                        ],
                        "comments": {},
                        "lines": [
                            "    push_token: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1022
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_device_token(uuid: &str, data: Json<PushToken>, headers: Headers, conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1027,
                            1028,
                            1029
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_device_token(uuid: &str, data: Json<PushToken>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data = data.into_inner();",
                            "    let token = data.push_token;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1084
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1086,
                            1087
                        ],
                        "comments": {},
                        "lines": [
                            "    access_code: String,",
                            "    device_identifier: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1089
                        ],
                        "comments": {},
                        "lines": [
                            "    public_key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1112
                        ],
                        "comments": {},
                        "lines": [
                            "        data.device_identifier.clone(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1115,
                            1116
                        ],
                        "comments": {},
                        "lines": [
                            "        data.access_code,",
                            "        data.public_key,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1120
                        ],
                        "comments": {},
                        "lines": [
                            "    nt.send_auth_request(&user.uuid, &auth_request.uuid, &data.device_identifier, &mut conn).await;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1166
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            1168
                        ],
                        "comments": {},
                        "lines": [
                            "    device_identifier: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1170,
                            1171
                        ],
                        "comments": {},
                        "lines": [
                            "    master_password_hash: Option<String>,",
                            "    request_approved: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1190
                        ],
                        "comments": {},
                        "lines": [
                            "    auth_request.approved = Some(data.request_approved);"
                        ]
                    },
                    {
                        "line_numbers": [
                            1192,
                            1193
                        ],
                        "comments": {},
                        "lines": [
                            "    auth_request.master_password_hash = data.master_password_hash;",
                            "    auth_request.response_device_id = Some(data.device_identifier.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            1198
                        ],
                        "comments": {},
                        "lines": [
                            "        nt.send_auth_response(&auth_request.user_uuid, &auth_request.uuid, data.device_identifier, &mut conn).await;"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            68,
                            69,
                            70,
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78
                        ],
                        "comments": {
                            "65": "#[derive(Deserialize, Debug)]",
                            "66": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "    Email: String,",
                            "    Kdf: Option<i32>,",
                            "    KdfIterations: Option<i32>,",
                            "    KdfMemory: Option<i32>,",
                            "    KdfParallelism: Option<i32>,",
                            "    Key: String,",
                            "    Keys: Option<KeysData>,",
                            "    MasterPasswordHash: String,",
                            "    MasterPasswordHint: Option<String>,",
                            "    Name: Option<String>,",
                            "    Token: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            80
                        ],
                        "comments": {},
                        "lines": [
                            "    OrganizationUserId: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            86,
                            87
                        ],
                        "comments": {},
                        "lines": [
                            "    EncryptedPrivateKey: String,",
                            "    PublicKey: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            122
                        ],
                        "comments": {},
                        "lines": [
                            "async fn register(data: JsonUpcase<RegisterData>, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            126,
                            127,
                            128
                        ],
                        "comments": {},
                        "lines": [
                            "pub async fn _register(data: JsonUpcase<RegisterData>, mut conn: DbConn) -> JsonResult {",
                            "    let data: RegisterData = data.into_inner().data;",
                            "    let email = data.Email.to_lowercase();"
                        ]
                    },
                    {
                        "line_numbers": [
                            132
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(ref name) = data.Name {"
                        ]
                    },
                    {
                        "line_numbers": [
                            140
                        ],
                        "comments": {},
                        "lines": [
                            "    let password_hint = clean_password_hint(&data.MasterPasswordHint);"
                        ]
                    },
                    {
                        "line_numbers": [
                            151
                        ],
                        "comments": {},
                        "lines": [
                            "            if let Some(token) = data.Token {"
                        ]
                    },
                    {
                        "line_numbers": [
                            191
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(client_kdf_type) = data.Kdf {"
                        ]
                    },
                    {
                        "line_numbers": [
                            195
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(client_kdf_iter) = data.KdfIterations {"
                        ]
                    },
                    {
                        "line_numbers": [
                            199,
                            200
                        ],
                        "comments": {},
                        "lines": [
                            "    user.client_kdf_memory = data.KdfMemory;",
                            "    user.client_kdf_parallelism = data.KdfParallelism;"
                        ]
                    },
                    {
                        "line_numbers": [
                            202
                        ],
                        "comments": {},
                        "lines": [
                            "    user.set_password(&data.MasterPasswordHash, Some(data.Key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            206
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(name) = data.Name {"
                        ]
                    },
                    {
                        "line_numbers": [
                            210,
                            211,
                            212
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(keys) = data.Keys {",
                            "        user.private_key = Some(keys.EncryptedPrivateKey);",
                            "        user.public_key = Some(keys.PublicKey);"
                        ]
                    },
                    {
                        "line_numbers": [
                            225
                        ],
                        "comments": {},
                        "lines": [
                            "        if verified_by_invite && is_email_2fa_required(data.OrganizationUserId, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            240,
                            241
                        ],
                        "comments": {},
                        "lines": [
                            "      \"Object\": \"register\",",
                            "      \"CaptchaBypassToken\": \"\","
                        ]
                    },
                    {
                        "line_numbers": [
                            253,
                            254,
                            255
                        ],
                        "comments": {},
                        "lines": [
                            "    // Culture: String, // Ignored, always use en-US",
                            "    // MasterPasswordHint: Option<String>, // Ignored, has been moved to ChangePassData",
                            "    Name: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            259
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_profile(data: JsonUpcase<ProfileData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            264,
                            265
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_profile(data: JsonUpcase<ProfileData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: ProfileData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            269
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.Name.len() > 50 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            274
                        ],
                        "comments": {},
                        "lines": [
                            "    user.name = data.Name;"
                        ]
                    },
                    {
                        "line_numbers": [
                            283
                        ],
                        "comments": {},
                        "lines": [
                            "    AvatarColor: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            287,
                            288
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_avatar(data: JsonUpcase<AvatarData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: AvatarData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            293
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some(color) = &data.AvatarColor {"
                        ]
                    },
                    {
                        "line_numbers": [
                            300
                        ],
                        "comments": {},
                        "lines": [
                            "    user.avatar_color = data.AvatarColor;"
                        ]
                    },
                    {
                        "line_numbers": [
                            315,
                            316,
                            317
                        ],
                        "comments": {},
                        "lines": [
                            "        \"UserId\": user.uuid,",
                            "        \"PublicKey\": user.public_key,",
                            "        \"Object\":\"userKey\""
                        ]
                    },
                    {
                        "line_numbers": [
                            322,
                            323
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_keys(data: JsonUpcase<KeysData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: KeysData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            327,
                            328
                        ],
                        "comments": {},
                        "lines": [
                            "    user.private_key = Some(data.EncryptedPrivateKey);",
                            "    user.public_key = Some(data.PublicKey);"
                        ]
                    },
                    {
                        "line_numbers": [
                            333,
                            334,
                            335
                        ],
                        "comments": {},
                        "lines": [
                            "        \"PrivateKey\": user.private_key,",
                            "        \"PublicKey\": user.public_key,",
                            "        \"Object\":\"keys\""
                        ]
                    },
                    {
                        "line_numbers": [
                            342,
                            343,
                            344,
                            345
                        ],
                        "comments": {},
                        "lines": [
                            "    MasterPasswordHash: String,",
                            "    NewMasterPasswordHash: String,",
                            "    MasterPasswordHint: Option<String>,",
                            "    Key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            349,
                            350,
                            351,
                            352,
                            353,
                            354,
                            355
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_password(",
                            "    data: JsonUpcase<ChangePassData>,",
                            "    headers: Headers,",
                            "    mut conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> EmptyResult {",
                            "    let data: ChangePassData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            358
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            362
                        ],
                        "comments": {},
                        "lines": [
                            "    user.password_hint = clean_password_hint(&data.MasterPasswordHint);"
                        ]
                    },
                    {
                        "line_numbers": [
                            369,
                            370
                        ],
                        "comments": {},
                        "lines": [
                            "        &data.NewMasterPasswordHash,",
                            "        Some(data.Key),"
                        ]
                    },
                    {
                        "line_numbers": [
                            388,
                            389,
                            390,
                            391
                        ],
                        "comments": {},
                        "lines": [
                            "    Kdf: i32,",
                            "    KdfIterations: i32,",
                            "    KdfMemory: Option<i32>,",
                            "    KdfParallelism: Option<i32>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            393,
                            394,
                            395
                        ],
                        "comments": {},
                        "lines": [
                            "    MasterPasswordHash: String,",
                            "    NewMasterPasswordHash: String,",
                            "    Key: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            399,
                            400
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_kdf(data: JsonUpcase<ChangeKdfData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {",
                            "    let data: ChangeKdfData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            403
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            407
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.Kdf == UserKdfType::Pbkdf2 as i32 && data.KdfIterations < 100_000 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            411,
                            412
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.Kdf == UserKdfType::Argon2id as i32 {",
                            "        if data.KdfIterations < 1 {"
                        ]
                    },
                    {
                        "line_numbers": [
                            415
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(m) = data.KdfMemory {"
                        ]
                    },
                    {
                        "line_numbers": [
                            419
                        ],
                        "comments": {},
                        "lines": [
                            "            user.client_kdf_memory = data.KdfMemory;"
                        ]
                    },
                    {
                        "line_numbers": [
                            423
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(p) = data.KdfParallelism {"
                        ]
                    },
                    {
                        "line_numbers": [
                            427
                        ],
                        "comments": {},
                        "lines": [
                            "            user.client_kdf_parallelism = data.KdfParallelism;"
                        ]
                    },
                    {
                        "line_numbers": [
                            435,
                            436,
                            437
                        ],
                        "comments": {},
                        "lines": [
                            "    user.client_kdf_iter = data.KdfIterations;",
                            "    user.client_kdf_type = data.Kdf;",
                            "    user.set_password(&data.NewMasterPasswordHash, Some(data.Key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            451,
                            452
                        ],
                        "comments": {},
                        "lines": [
                            "    Id: Option<String>,",
                            "    Name: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            458,
                            459
                        ],
                        "comments": {},
                        "lines": [
                            "    Id: String,",
                            "    KeyEncrypted: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            465,
                            466
                        ],
                        "comments": {},
                        "lines": [
                            "    OrganizationId: String,",
                            "    ResetPasswordKey: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            475,
                            476,
                            477,
                            478,
                            479,
                            480,
                            481,
                            482
                        ],
                        "comments": {},
                        "lines": [
                            "    Ciphers: Vec<CipherData>,",
                            "    Folders: Vec<UpdateFolderData>,",
                            "    Sends: Vec<SendData>,",
                            "    EmergencyAccessKeys: Vec<UpdateEmergencyAccessData>,",
                            "    ResetPasswordKeys: Vec<UpdateResetPasswordData>,",
                            "    Key: String,",
                            "    MasterPasswordHash: String,",
                            "    PrivateKey: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            486
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_rotatekey(data: JsonUpcase<KeyData>, headers: Headers, mut conn: DbConn, nt: Notify<'_>) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            488
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: KeyData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            490
                        ],
                        "comments": {},
                        "lines": [
                            "    if !headers.user.check_valid_password(&data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            498
                        ],
                        "comments": {},
                        "lines": [
                            "    Cipher::validate_notes(&data.Ciphers)?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            503
                        ],
                        "comments": {},
                        "lines": [
                            "    for folder_data in data.Folders {"
                        ]
                    },
                    {
                        "line_numbers": [
                            506
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(folder_id) = folder_data.Id {"
                        ]
                    },
                    {
                        "line_numbers": [
                            516
                        ],
                        "comments": {},
                        "lines": [
                            "            saved_folder.name = folder_data.Name;"
                        ]
                    },
                    {
                        "line_numbers": [
                            522,
                            523
                        ],
                        "comments": {},
                        "lines": [
                            "    for emergency_access_data in data.EmergencyAccessKeys {",
                            "        let mut saved_emergency_access = match EmergencyAccess::find_by_uuid(&emergency_access_data.Id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            533
                        ],
                        "comments": {},
                        "lines": [
                            "        saved_emergency_access.key_encrypted = Some(emergency_access_data.KeyEncrypted);"
                        ]
                    },
                    {
                        "line_numbers": [
                            538
                        ],
                        "comments": {},
                        "lines": [
                            "    for reset_password_data in data.ResetPasswordKeys {"
                        ]
                    },
                    {
                        "line_numbers": [
                            540
                        ],
                        "comments": {},
                        "lines": [
                            "            match UserOrganization::find_by_user_and_org(user_uuid, &reset_password_data.OrganizationId, &mut conn)"
                        ]
                    },
                    {
                        "line_numbers": [
                            547
                        ],
                        "comments": {},
                        "lines": [
                            "        user_org.reset_password_key = Some(reset_password_data.ResetPasswordKey);"
                        ]
                    },
                    {
                        "line_numbers": [
                            552,
                            553
                        ],
                        "comments": {},
                        "lines": [
                            "    for send_data in data.Sends {",
                            "        let mut send = match Send::find_by_uuid(send_data.Id.as_ref().unwrap(), &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            564,
                            565,
                            566
                        ],
                        "comments": {},
                        "lines": [
                            "    for cipher_data in data.Ciphers {",
                            "        if cipher_data.OrganizationId.is_none() {",
                            "            let mut saved_cipher = match Cipher::find_by_uuid(cipher_data.Id.as_ref().unwrap(), &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            586,
                            587
                        ],
                        "comments": {},
                        "lines": [
                            "    user.akey = data.Key;",
                            "    user.private_key = Some(data.PrivateKey);"
                        ]
                    },
                    {
                        "line_numbers": [
                            601,
                            602,
                            603,
                            604,
                            605,
                            606,
                            607
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_sstamp(",
                            "    data: JsonUpcase<PasswordOrOtpData>,",
                            "    headers: Headers,",
                            "    mut conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> EmptyResult {",
                            "    let data: PasswordOrOtpData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            624,
                            625
                        ],
                        "comments": {},
                        "lines": [
                            "    MasterPasswordHash: String,",
                            "    NewEmail: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            629
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_email_token(data: JsonUpcase<EmailTokenData>, headers: Headers, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            634
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: EmailTokenData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            637
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            641
                        ],
                        "comments": {},
                        "lines": [
                            "    if User::find_by_mail(&data.NewEmail, &mut conn).await.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            645
                        ],
                        "comments": {},
                        "lines": [
                            "    if !CONFIG.is_email_domain_allowed(&data.NewEmail) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            652
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Err(e) = mail::send_change_email(&data.NewEmail, &token).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            656
                        ],
                        "comments": {},
                        "lines": [
                            "        debug!(\"Email change request for user ({}) to email ({}) with token ({})\", user.uuid, data.NewEmail, token);"
                        ]
                    },
                    {
                        "line_numbers": [
                            659
                        ],
                        "comments": {},
                        "lines": [
                            "    user.email_new = Some(data.NewEmail);"
                        ]
                    },
                    {
                        "line_numbers": [
                            667,
                            668
                        ],
                        "comments": {},
                        "lines": [
                            "    MasterPasswordHash: String,",
                            "    NewEmail: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            670,
                            671,
                            672
                        ],
                        "comments": {},
                        "lines": [
                            "    Key: String,",
                            "    NewMasterPasswordHash: String,",
                            "    Token: NumberOrString,"
                        ]
                    },
                    {
                        "line_numbers": [
                            676,
                            677,
                            678,
                            679,
                            680,
                            681
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_email(",
                            "    data: JsonUpcase<ChangeEmailData>,",
                            "    headers: Headers,",
                            "    mut conn: DbConn,",
                            "    nt: Notify<'_>,",
                            ") -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            686
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: ChangeEmailData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            689
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            693
                        ],
                        "comments": {},
                        "lines": [
                            "    if User::find_by_mail(&data.NewEmail, &mut conn).await.is_some() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            699
                        ],
                        "comments": {},
                        "lines": [
                            "            if val != &data.NewEmail {"
                        ]
                    },
                    {
                        "line_numbers": [
                            710
                        ],
                        "comments": {},
                        "lines": [
                            "                if *val != data.Token.into_string() {"
                        ]
                    },
                    {
                        "line_numbers": [
                            721
                        ],
                        "comments": {},
                        "lines": [
                            "    user.email = data.NewEmail;"
                        ]
                    },
                    {
                        "line_numbers": [
                            725
                        ],
                        "comments": {},
                        "lines": [
                            "    user.set_password(&data.NewMasterPasswordHash, Some(data.Key), true, None);"
                        ]
                    },
                    {
                        "line_numbers": [
                            752,
                            753
                        ],
                        "comments": {},
                        "lines": [
                            "    UserId: String,",
                            "    Token: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            757,
                            758
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_verify_email_token(data: JsonUpcase<VerifyEmailTokenData>, mut conn: DbConn) -> EmptyResult {",
                            "    let data: VerifyEmailTokenData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            760
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut user = match User::find_by_uuid(&data.UserId, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            765
                        ],
                        "comments": {},
                        "lines": [
                            "    let claims = match decode_verify_email(&data.Token) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            785
                        ],
                        "comments": {},
                        "lines": [
                            "    Email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            789,
                            790
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_delete_recover(data: JsonUpcase<DeleteRecoverData>, mut conn: DbConn) -> EmptyResult {",
                            "    let data: DeleteRecoverData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            793
                        ],
                        "comments": {},
                        "lines": [
                            "        if let Some(user) = User::find_by_mail(&data.Email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            811,
                            812
                        ],
                        "comments": {},
                        "lines": [
                            "    UserId: String,",
                            "    Token: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            816,
                            817
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_delete_recover_token(data: JsonUpcase<DeleteRecoverTokenData>, mut conn: DbConn) -> EmptyResult {",
                            "    let data: DeleteRecoverTokenData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            819
                        ],
                        "comments": {},
                        "lines": [
                            "    let user = match User::find_by_uuid(&data.UserId, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            824
                        ],
                        "comments": {},
                        "lines": [
                            "    let claims = match decode_delete(&data.Token) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            835
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_delete_account(data: JsonUpcase<PasswordOrOtpData>, headers: Headers, conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            840,
                            841
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_account(data: JsonUpcase<PasswordOrOtpData>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data: PasswordOrOtpData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            858
                        ],
                        "comments": {},
                        "lines": [
                            "    Email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            862
                        ],
                        "comments": {},
                        "lines": [
                            "async fn password_hint(data: JsonUpcase<PasswordHintData>, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            869,
                            870
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordHintData = data.into_inner().data;",
                            "    let email = &data.Email;"
                        ]
                    },
                    {
                        "line_numbers": [
                            906
                        ],
                        "comments": {},
                        "lines": [
                            "    Email: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            910
                        ],
                        "comments": {},
                        "lines": [
                            "async fn prelogin(data: JsonUpcase<PreloginData>, conn: DbConn) -> Json<Value> {"
                        ]
                    },
                    {
                        "line_numbers": [
                            914,
                            915
                        ],
                        "comments": {},
                        "lines": [
                            "pub async fn _prelogin(data: JsonUpcase<PreloginData>, mut conn: DbConn) -> Json<Value> {",
                            "    let data: PreloginData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            917
                        ],
                        "comments": {},
                        "lines": [
                            "    let (kdf_type, kdf_iter, kdf_mem, kdf_para) = match User::find_by_mail(&data.Email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            923,
                            924,
                            925,
                            926
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Kdf\": kdf_type,",
                            "        \"KdfIterations\": kdf_iter,",
                            "        \"KdfMemory\": kdf_mem,",
                            "        \"KdfParallelism\": kdf_para,"
                        ]
                    },
                    {
                        "line_numbers": [
                            936
                        ],
                        "comments": {},
                        "lines": [
                            "    MasterPasswordHash: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            940,
                            941
                        ],
                        "comments": {},
                        "lines": [
                            "fn verify_password(data: JsonUpcase<SecretVerificationRequest>, headers: Headers) -> EmptyResult {",
                            "    let data: SecretVerificationRequest = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            944
                        ],
                        "comments": {},
                        "lines": [
                            "    if !user.check_valid_password(&data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            951
                        ],
                        "comments": {},
                        "lines": [
                            "async fn _api_key(data: JsonUpcase<PasswordOrOtpData>, rotate: bool, headers: Headers, mut conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            954
                        ],
                        "comments": {},
                        "lines": [
                            "    let data: PasswordOrOtpData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            965,
                            966,
                            967
                        ],
                        "comments": {},
                        "lines": [
                            "      \"ApiKey\": user.api_key,",
                            "      \"RevisionDate\": format_date(&user.updated_at),",
                            "      \"Object\": \"apiKey\","
                        ]
                    },
                    {
                        "line_numbers": [
                            972
                        ],
                        "comments": {},
                        "lines": [
                            "async fn api_key(data: JsonUpcase<PasswordOrOtpData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            977
                        ],
                        "comments": {},
                        "lines": [
                            "async fn rotate_api_key(data: JsonUpcase<PasswordOrOtpData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1033
                        ],
                        "comments": {},
                        "lines": [
                            "    PushToken: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1037
                        ],
                        "comments": {},
                        "lines": [
                            "async fn post_device_token(uuid: &str, data: JsonUpcase<PushToken>, headers: Headers, conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1042,
                            1043,
                            1044
                        ],
                        "comments": {},
                        "lines": [
                            "async fn put_device_token(uuid: &str, data: JsonUpcase<PushToken>, headers: Headers, mut conn: DbConn) -> EmptyResult {",
                            "    let data = data.into_inner().data;",
                            "    let token = data.PushToken;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1101,
                            1102
                        ],
                        "comments": {},
                        "lines": [
                            "    accessCode: String,",
                            "    deviceIdentifier: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1104
                        ],
                        "comments": {},
                        "lines": [
                            "    publicKey: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1127
                        ],
                        "comments": {},
                        "lines": [
                            "        data.deviceIdentifier.clone(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1130,
                            1131
                        ],
                        "comments": {},
                        "lines": [
                            "        data.accessCode,",
                            "        data.publicKey,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1135
                        ],
                        "comments": {},
                        "lines": [
                            "    nt.send_auth_request(&user.uuid, &auth_request.uuid, &data.deviceIdentifier, &mut conn).await;"
                        ]
                    },
                    {
                        "line_numbers": [
                            1183
                        ],
                        "comments": {},
                        "lines": [
                            "    deviceIdentifier: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1185,
                            1186
                        ],
                        "comments": {},
                        "lines": [
                            "    masterPasswordHash: Option<String>,",
                            "    requestApproved: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1205
                        ],
                        "comments": {},
                        "lines": [
                            "    auth_request.approved = Some(data.requestApproved);"
                        ]
                    },
                    {
                        "line_numbers": [
                            1207,
                            1208
                        ],
                        "comments": {},
                        "lines": [
                            "    auth_request.master_password_hash = data.masterPasswordHash;",
                            "    auth_request.response_device_id = Some(data.deviceIdentifier.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            1213
                        ],
                        "comments": {},
                        "lines": [
                            "        nt.send_auth_response(&auth_request.user_uuid, &auth_request.uuid, data.deviceIdentifier, &mut conn).await;"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "253": "    // culture: String, // Ignored, always use en-US",
                "254": "    // masterPasswordHint: Option<String>, // Ignored, has been moved to ChangePassData"
            },
            "comment_deleted_diff": {
                "253": "    // Culture: String, // Ignored, always use en-US",
                "254": "    // MasterPasswordHint: Option<String>, // Ignored, has been moved to ChangePassData"
            },
            "comment_modified_diff": {
                "253": "    // Culture: String, // Ignored, always use en-US",
                "254": "    // MasterPasswordHint: Option<String>, // Ignored, has been moved to ChangePassData"
            }
        },
        {
            "commit": "20d9e885bfcd7df7828d92c6e59ed5fe7b40a879",
            "timestamp": "2024-11-10T23:56:19+01:00",
            "author": "BlackDex",
            "commit_message": "Update crates and fix several issues\n\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 89,
            "deletions": 87,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1093
                        ],
                        "comments": {
                            "1085": "    // Not used for now",
                            "1086": "    // #[serde(alias = \"type\")]",
                            "1087": "    // _type: i32,"
                        },
                        "lines": [
                            "    client_headers: ClientHeaders,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1101
                        ],
                        "comments": {},
                        "lines": [
                            "        None => err!(\"AuthRequest doesn't exist\", \"User not found\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1105,
                            1106,
                            1107,
                            1108,
                            1109
                        ],
                        "comments": {},
                        "lines": [
                            "    match Device::find_by_uuid_and_user(&data.device_identifier, &user.uuid, &mut conn).await {",
                            "        Some(device) if device.atype == client_headers.device_type => {}",
                            "        _ => err!(\"AuthRequest doesn't exist\", \"Device verification failed\"),",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1113,
                            1114
                        ],
                        "comments": {},
                        "lines": [
                            "        client_headers.device_type,",
                            "        client_headers.ip.ip.to_string(),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1129
                        ],
                        "comments": {},
                        "lines": [
                            "        \"creationDate\": format_date(&auth_request.creation_date),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1138,
                            1139,
                            1140,
                            1141,
                            1142
                        ],
                        "comments": {},
                        "lines": [
                            "async fn get_auth_request(uuid: &str, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    if headers.user.uuid != uuid {",
                            "        err!(\"AuthRequest doesn't exist\", \"User uuid's do not match\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1145
                        ],
                        "comments": {},
                        "lines": [
                            "        None => err!(\"AuthRequest doesn't exist\", \"Record not found\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1148,
                            1149,
                            1150,
                            1151,
                            1152,
                            1153,
                            1154,
                            1155,
                            1156,
                            1157,
                            1158,
                            1159,
                            1160,
                            1161,
                            1162
                        ],
                        "comments": {},
                        "lines": [
                            "    let response_date_utc = auth_request.response_date.map(|response_date| format_date(&response_date));",
                            "",
                            "    Ok(Json(json!({",
                            "        \"id\": uuid,",
                            "        \"publicKey\": auth_request.public_key,",
                            "        \"requestDeviceType\": DeviceType::from_i32(auth_request.device_type).to_string(),",
                            "        \"requestIpAddress\": auth_request.request_ip,",
                            "        \"key\": auth_request.enc_key,",
                            "        \"masterPasswordHash\": auth_request.master_password_hash,",
                            "        \"creationDate\": format_date(&auth_request.creation_date),",
                            "        \"responseDate\": response_date_utc,",
                            "        \"requestApproved\": auth_request.approved,",
                            "        \"origin\": CONFIG.domain_origin(),",
                            "        \"object\":\"auth-request\"",
                            "    })))"
                        ]
                    },
                    {
                        "line_numbers": [
                            1178
                        ],
                        "comments": {},
                        "lines": [
                            "    headers: Headers,"
                        ]
                    },
                    {
                        "line_numbers": [
                            1186
                        ],
                        "comments": {},
                        "lines": [
                            "        None => err!(\"AuthRequest doesn't exist\", \"Record not found\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1189,
                            1190,
                            1191,
                            1192
                        ],
                        "comments": {},
                        "lines": [
                            "    if headers.user.uuid != auth_request.user_uuid {",
                            "        err!(\"AuthRequest doesn't exist\", \"User uuid's do not match\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            1204,
                            1205,
                            1206,
                            1207,
                            1208,
                            1209,
                            1210,
                            1211,
                            1212,
                            1213,
                            1214,
                            1215,
                            1216,
                            1217,
                            1218
                        ],
                        "comments": {},
                        "lines": [
                            "    let response_date_utc = auth_request.response_date.map(|response_date| format_date(&response_date));",
                            "",
                            "    Ok(Json(json!({",
                            "        \"id\": uuid,",
                            "        \"publicKey\": auth_request.public_key,",
                            "        \"requestDeviceType\": DeviceType::from_i32(auth_request.device_type).to_string(),",
                            "        \"requestIpAddress\": auth_request.request_ip,",
                            "        \"key\": auth_request.enc_key,",
                            "        \"masterPasswordHash\": auth_request.master_password_hash,",
                            "        \"creationDate\": format_date(&auth_request.creation_date),",
                            "        \"responseDate\": response_date_utc,",
                            "        \"requestApproved\": auth_request.approved,",
                            "        \"origin\": CONFIG.domain_origin(),",
                            "        \"object\":\"auth-request\"",
                            "    })))"
                        ]
                    },
                    {
                        "line_numbers": [
                            1222,
                            1223,
                            1224,
                            1225,
                            1226,
                            1227
                        ],
                        "comments": {},
                        "lines": [
                            "async fn get_auth_request_response(",
                            "    uuid: &str,",
                            "    code: &str,",
                            "    client_headers: ClientHeaders,",
                            "    mut conn: DbConn,",
                            ") -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            1230
                        ],
                        "comments": {},
                        "lines": [
                            "        None => err!(\"AuthRequest doesn't exist\", \"User not found\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            1233,
                            1234,
                            1235,
                            1236,
                            1237
                        ],
                        "comments": {},
                        "lines": [
                            "    if auth_request.device_type != client_headers.device_type",
                            "        && auth_request.request_ip != client_headers.ip.ip.to_string()",
                            "        && !auth_request.check_access_code(code)",
                            "    {",
                            "        err!(\"AuthRequest doesn't exist\", \"Invalid device, IP or code\")"
                        ]
                    },
                    {
                        "line_numbers": [
                            1240,
                            1241,
                            1242,
                            1243,
                            1244,
                            1245,
                            1246,
                            1247,
                            1248,
                            1249,
                            1250,
                            1251,
                            1252,
                            1253,
                            1254
                        ],
                        "comments": {},
                        "lines": [
                            "    let response_date_utc = auth_request.response_date.map(|response_date| format_date(&response_date));",
                            "",
                            "    Ok(Json(json!({",
                            "        \"id\": uuid,",
                            "        \"publicKey\": auth_request.public_key,",
                            "        \"requestDeviceType\": DeviceType::from_i32(auth_request.device_type).to_string(),",
                            "        \"requestIpAddress\": auth_request.request_ip,",
                            "        \"key\": auth_request.enc_key,",
                            "        \"masterPasswordHash\": auth_request.master_password_hash,",
                            "        \"creationDate\": format_date(&auth_request.creation_date),",
                            "        \"responseDate\": response_date_utc,",
                            "        \"requestApproved\": auth_request.approved,",
                            "        \"origin\": CONFIG.domain_origin(),",
                            "        \"object\":\"auth-request\"",
                            "    })))"
                        ]
                    },
                    {
                        "line_numbers": [
                            1266
                        ],
                        "comments": {},
                        "lines": [
                            "            let response_date_utc = request.response_date.map(|response_date| format_date(&response_date));"
                        ]
                    },
                    {
                        "line_numbers": [
                            1275
                        ],
                        "comments": {},
                        "lines": [
                            "                \"creationDate\": format_date(&request.creation_date),"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1085": "    // Not used for now",
                "1086": "    // #[serde(alias = \"type\")]",
                "1087": "    // _type: i32,",
                "1104": "    // Validate device uuid and type"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "37c14c3c69b244ec50f5c62b4c9260171607c1d8",
            "timestamp": "2024-11-11T20:13:02+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "More authrequest fixes (#5176)",
            "additions": 13,
            "deletions": 10,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            1204
                        ],
                        "comments": {
                            "1203": "        // If denied, there's no reason to keep the request"
                        },
                        "lines": [
                            "        auth_request.delete(&mut conn).await?;"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "1203": "        // If denied, there's no reason to keep the request"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "2393c3f3c08f451a04643fd9fed5027f491dc12d",
            "timestamp": "2024-11-15T18:38:16+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Support SSH keys on desktop 2024.12 (#5187)\n\n* Support SSH keys on desktop 2024.12\n\n* Document flags in .env.template\n\n* Validate key rotation contents",
            "additions": 87,
            "deletions": 24,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            491,
                            492,
                            493,
                            494,
                            495,
                            496,
                            497,
                            498,
                            499,
                            500,
                            501
                        ],
                        "comments": {
                            "490": "    // Check that we're correctly rotating all the user's ciphers"
                        },
                        "lines": [
                            "    let existing_cipher_ids = existing_ciphers.iter().map(|c| c.uuid.as_str()).collect::<HashSet<_>>();",
                            "    let provided_cipher_ids = data",
                            "        .ciphers",
                            "        .iter()",
                            "        .filter(|c| c.organization_id.is_none())",
                            "        .filter_map(|c| c.id.as_deref())",
                            "        .collect::<HashSet<_>>();",
                            "    if !provided_cipher_ids.is_superset(&existing_cipher_ids) {",
                            "        err!(\"All existing ciphers must be included in the rotation\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            503,
                            504,
                            505,
                            506,
                            507,
                            508
                        ],
                        "comments": {
                            "502": "    // Check that we're correctly rotating all the user's folders"
                        },
                        "lines": [
                            "    let existing_folder_ids = existing_folders.iter().map(|f| f.uuid.as_str()).collect::<HashSet<_>>();",
                            "    let provided_folder_ids = data.folders.iter().filter_map(|f| f.id.as_deref()).collect::<HashSet<_>>();",
                            "    if !provided_folder_ids.is_superset(&existing_folder_ids) {",
                            "        err!(\"All existing folders must be included in the rotation\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            510,
                            511,
                            512,
                            513,
                            514,
                            515,
                            516,
                            517
                        ],
                        "comments": {
                            "509": "    // Check that we're correctly rotating all the user's emergency access keys"
                        },
                        "lines": [
                            "    let existing_emergency_access_ids =",
                            "        existing_emergency_access.iter().map(|ea| ea.uuid.as_str()).collect::<HashSet<_>>();",
                            "    let provided_emergency_access_ids =",
                            "        data.emergency_access_keys.iter().map(|ea| ea.id.as_str()).collect::<HashSet<_>>();",
                            "    if !provided_emergency_access_ids.is_superset(&existing_emergency_access_ids) {",
                            "        err!(\"All existing emergency access keys must be included in the rotation\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            519,
                            520,
                            521,
                            522,
                            523,
                            524,
                            525
                        ],
                        "comments": {
                            "518": "    // Check that we're correctly rotating all the user's reset password keys"
                        },
                        "lines": [
                            "    let existing_reset_password_ids = existing_user_orgs.iter().map(|uo| uo.org_uuid.as_str()).collect::<HashSet<_>>();",
                            "    let provided_reset_password_ids =",
                            "        data.reset_password_keys.iter().map(|rp| rp.organization_id.as_str()).collect::<HashSet<_>>();",
                            "    if !provided_reset_password_ids.is_superset(&existing_reset_password_ids) {",
                            "        err!(\"All existing reset password keys must be included in the rotation\")",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            527,
                            528,
                            529,
                            530,
                            531,
                            532,
                            533,
                            534,
                            535
                        ],
                        "comments": {
                            "526": "    // Check that we're correctly rotating all the user's sends"
                        },
                        "lines": [
                            "    let existing_send_ids = existing_sends.iter().map(|s| s.uuid.as_str()).collect::<HashSet<_>>();",
                            "    let provided_send_ids = data.sends.iter().filter_map(|s| s.id.as_deref()).collect::<HashSet<_>>();",
                            "    if !provided_send_ids.is_superset(&existing_send_ids) {",
                            "        err!(\"All existing sends must be included in the rotation\")",
                            "    }",
                            "",
                            "    Ok(())",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            554,
                            555,
                            556,
                            557,
                            558
                        ],
                        "comments": {},
                        "lines": [
                            "",
                            "    let mut existing_ciphers = Cipher::find_owned_by_user(user_uuid, &mut conn).await;",
                            "    let mut existing_folders = Folder::find_by_user(user_uuid, &mut conn).await;",
                            "    let mut existing_emergency_access = EmergencyAccess::find_all_by_grantor_uuid(user_uuid, &mut conn).await;",
                            "    let mut existing_user_orgs = UserOrganization::find_by_user(user_uuid, &mut conn).await;"
                        ]
                    },
                    {
                        "line_numbers": [
                            560,
                            561,
                            562,
                            563,
                            564,
                            565,
                            566,
                            567,
                            568,
                            569,
                            570,
                            571
                        ],
                        "comments": {
                            "559": "    // We only rotate the reset password key if it is set."
                        },
                        "lines": [
                            "    existing_user_orgs.retain(|uo| uo.reset_password_key.is_some());",
                            "    let mut existing_sends = Send::find_by_user(user_uuid, &mut conn).await;",
                            "",
                            "    validate_keydata(",
                            "        &data,",
                            "        &existing_ciphers,",
                            "        &existing_folders,",
                            "        &existing_emergency_access,",
                            "        &existing_user_orgs,",
                            "        &existing_sends,",
                            "    )?;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            577
                        ],
                        "comments": {},
                        "lines": [
                            "            let saved_folder = match existing_folders.iter_mut().find(|f| f.uuid == folder_id) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            589,
                            590
                        ],
                        "comments": {},
                        "lines": [
                            "        let saved_emergency_access =",
                            "            match existing_emergency_access.iter_mut().find(|ea| ea.uuid == emergency_access_data.id) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            601,
                            602,
                            603,
                            604,
                            605
                        ],
                        "comments": {},
                        "lines": [
                            "        let user_org = match existing_user_orgs.iter_mut().find(|uo| uo.org_uuid == reset_password_data.organization_id)",
                            "        {",
                            "            Some(reset_password) => reset_password,",
                            "            None => err!(\"Reset password doesn't exist\"),",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            613
                        ],
                        "comments": {},
                        "lines": [
                            "        let send = match existing_sends.iter_mut().find(|s| &s.uuid == send_data.id.as_ref().unwrap()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            618
                        ],
                        "comments": {},
                        "lines": [
                            "        update_send_from_data(send, send_data, &headers, &mut conn, &nt, UpdateType::None).await?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            626
                        ],
                        "comments": {},
                        "lines": [
                            "            let saved_cipher = match existing_ciphers.iter_mut().find(|c| &c.uuid == cipher_data.id.as_ref().unwrap()) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            634
                        ],
                        "comments": {},
                        "lines": [
                            "            update_cipher_from_data(saved_cipher, cipher_data, &headers, None, &mut conn, &nt, UpdateType::None).await?"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "490": "    // Check that we're correctly rotating all the user's ciphers",
                "502": "    // Check that we're correctly rotating all the user's folders",
                "509": "    // Check that we're correctly rotating all the user's emergency access keys",
                "518": "    // Check that we're correctly rotating all the user's reset password keys",
                "526": "    // Check that we're correctly rotating all the user's sends",
                "553": "    // TODO: Ideally we'd do everything after this point in a single transaction.",
                "559": "    // We only rotate the reset password key if it is set."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "down.sql": [],
    "up.sql": [],
    "sends.rs": [
        {
            "commit": "e1a8df96dbadfbf5ad36ce9aa2f31f34396166c2",
            "timestamp": "2024-04-06T14:42:53+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update Key Rotation web-vault v2024.3.x (#4446)\n\nKey rotation was changed since 2024.1.x.\r\nMultiple other items were added to be rotated like password-reset and emergency-access data to be part of just one POST instead of having multiple.\r\n\r\nSee: https://github.com/dani-garcia/bw_web_builds/pull/157",
            "additions": 28,
            "deletions": 17,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            70
                        ],
                        "comments": {
                            "69": "    // Used for key rotations"
                        },
                        "lines": [
                            "    pub Id: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            555,
                            556,
                            557,
                            558,
                            559,
                            560,
                            561,
                            562,
                            563,
                            564,
                            565,
                            566,
                            567
                        ],
                        "comments": {},
                        "lines": [
                            "    update_send_from_data(&mut send, data, &headers, &mut conn, &nt, UpdateType::SyncSendUpdate).await?;",
                            "",
                            "    Ok(Json(send.to_json()))",
                            "}",
                            "",
                            "pub async fn update_send_from_data(",
                            "    send: &mut Send,",
                            "    data: SendData,",
                            "    headers: &Headers,",
                            "    conn: &mut DbConn,",
                            "    nt: &Notify<'_>,",
                            "    ut: UpdateType,",
                            ") -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            576,
                            577,
                            578,
                            579,
                            580,
                            581
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.DeletionDate > Utc::now() + TimeDelta::try_days(31).unwrap() {",
                            "        err!(",
                            "            \"You cannot have a Send with a deletion date that far into the future. Adjust the Deletion Date to a value less than 31 days from now and try again.\"",
                            "        );",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            611,
                            612,
                            613,
                            614,
                            615
                        ],
                        "comments": {},
                        "lines": [
                            "    send.save(conn).await?;",
                            "    if ut != UpdateType::None {",
                            "        nt.send_send_update(ut, send, &send.update_users_revision(conn).await, &headers.device.uuid, conn).await;",
                            "    }",
                            "    Ok(())"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "69": "    // Used for key rotations"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "c28246cf34bcf1f4ecfbfde88e5d6655a44ebcb7",
            "timestamp": "2024-07-31T15:24:15+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Secure send file uploads (#4810)\n\nCurrently there are no checks done during the actual upload of the file of a send item.\r\nThis PR adds several checks to make sure it only accepts the correct uploads.",
            "additions": 51,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            378,
                            379,
                            380,
                            381
                        ],
                        "comments": {
                            "360": "// https://github.com/bitwarden/server/blob/66f95d1c443490b653e5a15d32977e2f5a3f9e32/src/Api/Tools/Controllers/SendsController.cs#L250"
                        },
                        "lines": [
                            "    if send.atype != SendType::File as i32 {",
                            "        err!(\"Send is not a file type send.\");",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            383
                        ],
                        "comments": {},
                        "lines": [
                            "        err!(\"Sends are only supported for users at the moment.\")"
                        ]
                    },
                    {
                        "line_numbers": [
                            385
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            387,
                            388,
                            389,
                            390,
                            391,
                            392,
                            393,
                            394,
                            395,
                            396,
                            397,
                            398,
                            399,
                            400,
                            401,
                            402,
                            403,
                            404,
                            405,
                            406,
                            407,
                            408,
                            409,
                            410,
                            411,
                            412,
                            413,
                            414,
                            415,
                            416
                        ],
                        "comments": {},
                        "lines": [
                            "        err!(\"Send doesn't belong to user.\");",
                            "    }",
                            "",
                            "    let Ok(send_data) = serde_json::from_str::<SendFileData>(&send.data) else {",
                            "        err!(\"Unable to decode send data as json.\")",
                            "    };",
                            "",
                            "    match data.data.raw_name() {",
                            "        Some(raw_file_name) if raw_file_name.dangerous_unsafe_unsanitized_raw() == send_data.fileName => (),",
                            "        Some(raw_file_name) => err!(",
                            "            \"Send file name does not match.\",",
                            "            format!(",
                            "                \"Expected file name '{}' got '{}'\",",
                            "                send_data.fileName,",
                            "                raw_file_name.dangerous_unsafe_unsanitized_raw()",
                            "            )",
                            "        ),",
                            "        _ => err!(\"Send file name does not match or is not provided.\"),",
                            "    }",
                            "",
                            "    if file_id != send_data.id {",
                            "        err!(\"Send file does not match send data.\", format!(\"Expected id {} got {file_id}\", send_data.id));",
                            "    }",
                            "",
                            "    let Some(size) = data.data.len().to_u64() else {",
                            "        err!(\"Send file size overflow.\");",
                            "    };",
                            "",
                            "    if size != send_data.size {",
                            "        err!(\"Send file size does not match.\", format!(\"Expected a file size of {} got {size}\", send_data.size));"
                        ]
                    },
                    {
                        "line_numbers": [
                            421
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            423,
                            424,
                            425,
                            426
                        ],
                        "comments": {
                            "422": "    // Check if the file already exists, if that is the case do not overwrite it"
                        },
                        "lines": [
                            "    if tokio::fs::metadata(&file_path).await.is_ok() {",
                            "        err!(\"Send file has already been uploaded.\", format!(\"File {file_path:?} already exists\"))",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "360": "// https://github.com/bitwarden/server/blob/66f95d1c443490b653e5a15d32977e2f5a3f9e32/src/Api/Tools/Controllers/SendsController.cs#L250",
                "422": "    // Check if the file already exists, if that is the case do not overwrite it"
            },
            "comment_deleted_diff": {
                "352": "// https://github.com/bitwarden/server/blob/d0c793c95181dfb1b447eb450f85ba0bfd7ef643/src/Api/Controllers/SendsController.cs#L243"
            },
            "comment_modified_diff": {}
        }
    ],
    "authenticator.rs": [
        {
            "commit": "d86c4f2c23bc0cad8f709ffe83933c7d8d9dc70f",
            "timestamp": "2024-03-17T14:28:10+01:00",
            "author": "one230six",
            "commit_message": "Signed-off-by: one230six <723682061@qq.com> (#4422)\n\nSigned-off-by: one230six <723682061@qq.com>",
            "additions": 1,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "159": "        // Check the given code equals the generated and if the time_step is larger then the one last used."
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "159": "        // Check the given code equals the generated and if the time_step is larger then the one last used."
            },
            "comment_deleted_diff": {
                "159": "        // Check the the given code equals the generated and if the time_step is larger then the one last used."
            },
            "comment_modified_diff": {
                "159": "        // Check the the given code equals the generated and if the time_step is larger then the one last used."
            }
        }
    ],
    "webauthn.rs": [
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 74,
            "deletions": 86,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            163,
                            164,
                            165,
                            166
                        ],
                        "comments": {
                            "162": "    id: NumberOrString, // 1..5"
                        },
                        "lines": [
                            "    name: String,",
                            "    device_response: RegisterPublicKeyCredentialCopy,",
                            "    master_password_hash: Option<String>,",
                            "    otp: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            170
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            172,
                            173,
                            174,
                            175
                        ],
                        "comments": {},
                        "lines": [
                            "    pub id: String,",
                            "    pub raw_id: Base64UrlSafeData,",
                            "    pub response: AuthenticatorAttestationResponseRawCopy,",
                            "    pub r#type: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            180
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            182,
                            183,
                            184,
                            185
                        ],
                        "comments": {},
                        "lines": [
                            "    #[serde(rename = \"AttestationObject\", alias = \"attestationObject\")]",
                            "    pub attestation_object: Base64UrlSafeData,",
                            "    #[serde(rename = \"clientDataJson\", alias = \"clientDataJSON\")]",
                            "    pub client_data_json: Base64UrlSafeData,"
                        ]
                    },
                    {
                        "line_numbers": [
                            191,
                            192
                        ],
                        "comments": {},
                        "lines": [
                            "            id: r.id,",
                            "            raw_id: r.raw_id,"
                        ]
                    },
                    {
                        "line_numbers": [
                            194,
                            195
                        ],
                        "comments": {},
                        "lines": [
                            "                attestation_object: r.response.attestation_object,",
                            "                client_data_json: r.response.client_data_json,"
                        ]
                    },
                    {
                        "line_numbers": [
                            197
                        ],
                        "comments": {},
                        "lines": [
                            "            type_: r.r#type,"
                        ]
                    },
                    {
                        "line_numbers": [
                            203
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            205,
                            206,
                            207,
                            208,
                            209
                        ],
                        "comments": {},
                        "lines": [
                            "    pub id: String,",
                            "    pub raw_id: Base64UrlSafeData,",
                            "    pub response: AuthenticatorAssertionResponseRawCopy,",
                            "    pub extensions: Option<AuthenticationExtensionsClientOutputs>,",
                            "    pub r#type: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            214
                        ],
                        "comments": {},
                        "lines": [
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            216,
                            217,
                            218,
                            219,
                            220
                        ],
                        "comments": {},
                        "lines": [
                            "    pub authenticator_data: Base64UrlSafeData,",
                            "    #[serde(rename = \"clientDataJson\", alias = \"clientDataJSON\")]",
                            "    pub client_data_json: Base64UrlSafeData,",
                            "    pub signature: Base64UrlSafeData,",
                            "    pub user_handle: Option<Base64UrlSafeData>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            226,
                            227
                        ],
                        "comments": {},
                        "lines": [
                            "            id: r.id,",
                            "            raw_id: r.raw_id,"
                        ]
                    },
                    {
                        "line_numbers": [
                            229,
                            230,
                            231,
                            232
                        ],
                        "comments": {},
                        "lines": [
                            "                authenticator_data: r.response.authenticator_data,",
                            "                client_data_json: r.response.client_data_json,",
                            "                signature: r.response.signature,",
                            "                user_handle: r.response.user_handle,"
                        ]
                    },
                    {
                        "line_numbers": [
                            234,
                            235
                        ],
                        "comments": {},
                        "lines": [
                            "            extensions: r.extensions,",
                            "            type_: r.r#type,"
                        ]
                    },
                    {
                        "line_numbers": [
                            241,
                            242
                        ],
                        "comments": {},
                        "lines": [
                            "async fn activate_webauthn(data: Json<EnableWebauthnData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: EnableWebauthnData = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            246,
                            247
                        ],
                        "comments": {},
                        "lines": [
                            "        master_password_hash: data.master_password_hash,",
                            "        otp: data.otp,"
                        ]
                    },
                    {
                        "line_numbers": [
                            265
                        ],
                        "comments": {},
                        "lines": [
                            "        WebauthnConfig::load().register_credential(&data.device_response.into(), &state, |_| Ok(false))?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            270,
                            271
                        ],
                        "comments": {},
                        "lines": [
                            "        id: data.id.into_i32()?,",
                            "        name: data.name,"
                        ]
                    },
                    {
                        "line_numbers": [
                            287,
                            288,
                            289
                        ],
                        "comments": {},
                        "lines": [
                            "        \"enabled\": true,",
                            "        \"keys\": keys_json,",
                            "        \"object\": \"twoFactorU2f\""
                        ]
                    },
                    {
                        "line_numbers": [
                            294
                        ],
                        "comments": {},
                        "lines": [
                            "async fn activate_webauthn_put(data: Json<EnableWebauthnData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            298,
                            299
                        ],
                        "comments": {},
                        "lines": [
                            "#[derive(Debug, Deserialize)]",
                            "#[serde(rename_all = \"camelCase\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            301,
                            302
                        ],
                        "comments": {},
                        "lines": [
                            "    id: NumberOrString,",
                            "    master_password_hash: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            306,
                            307,
                            308
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_webauthn(data: Json<DeleteU2FData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let id = data.id.into_i32()?;",
                            "    if !headers.user.check_valid_password(&data.master_password_hash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            349,
                            350,
                            351
                        ],
                        "comments": {},
                        "lines": [
                            "        \"enabled\": true,",
                            "        \"keys\": keys_json,",
                            "        \"object\": \"twoFactorU2f\""
                        ]
                    },
                    {
                        "line_numbers": [
                            404,
                            405
                        ],
                        "comments": {},
                        "lines": [
                            "    let rsp: PublicKeyCredentialCopy = serde_json::from_str(response)?;",
                            "    let rsp: PublicKeyCredential = rsp.into();"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            166,
                            167,
                            168,
                            169,
                            170
                        ],
                        "comments": {
                            "164": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "    Id: NumberOrString, // 1..5",
                            "    Name: String,",
                            "    DeviceResponse: RegisterPublicKeyCredentialCopy,",
                            "    MasterPasswordHash: Option<String>,",
                            "    Otp: Option<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            173
                        ],
                        "comments": {},
                        "lines": [
                            "// This is copied from RegisterPublicKeyCredential to change the Response objects casing"
                        ]
                    },
                    {
                        "line_numbers": [
                            177,
                            178,
                            179,
                            180
                        ],
                        "comments": {},
                        "lines": [
                            "    pub Id: String,",
                            "    pub RawId: Base64UrlSafeData,",
                            "    pub Response: AuthenticatorAttestationResponseRawCopy,",
                            "    pub Type: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            187,
                            188
                        ],
                        "comments": {},
                        "lines": [
                            "    pub AttestationObject: Base64UrlSafeData,",
                            "    pub ClientDataJson: Base64UrlSafeData,"
                        ]
                    },
                    {
                        "line_numbers": [
                            194,
                            195
                        ],
                        "comments": {},
                        "lines": [
                            "            id: r.Id,",
                            "            raw_id: r.RawId,"
                        ]
                    },
                    {
                        "line_numbers": [
                            197,
                            198
                        ],
                        "comments": {},
                        "lines": [
                            "                attestation_object: r.Response.AttestationObject,",
                            "                client_data_json: r.Response.ClientDataJson,"
                        ]
                    },
                    {
                        "line_numbers": [
                            200
                        ],
                        "comments": {},
                        "lines": [
                            "            type_: r.Type,"
                        ]
                    },
                    {
                        "line_numbers": [
                            205
                        ],
                        "comments": {},
                        "lines": [
                            "// This is copied from PublicKeyCredential to change the Response objects casing"
                        ]
                    },
                    {
                        "line_numbers": [
                            209,
                            210,
                            211,
                            212,
                            213
                        ],
                        "comments": {},
                        "lines": [
                            "    pub Id: String,",
                            "    pub RawId: Base64UrlSafeData,",
                            "    pub Response: AuthenticatorAssertionResponseRawCopy,",
                            "    pub Extensions: Option<AuthenticationExtensionsClientOutputsCopy>,",
                            "    pub Type: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            220,
                            221,
                            222,
                            223,
                            224,
                            225
                        ],
                        "comments": {},
                        "lines": [
                            "    pub AuthenticatorData: Base64UrlSafeData,",
                            "    pub ClientDataJson: Base64UrlSafeData,",
                            "    pub Signature: Base64UrlSafeData,",
                            "    pub UserHandle: Option<Base64UrlSafeData>,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            228,
                            229,
                            230
                        ],
                        "comments": {
                            "226": "#[derive(Debug, Deserialize)]",
                            "227": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "pub struct AuthenticationExtensionsClientOutputsCopy {",
                            "    #[serde(default)]",
                            "    pub Appid: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            236,
                            237
                        ],
                        "comments": {},
                        "lines": [
                            "            id: r.Id,",
                            "            raw_id: r.RawId,"
                        ]
                    },
                    {
                        "line_numbers": [
                            239,
                            240,
                            241,
                            242
                        ],
                        "comments": {},
                        "lines": [
                            "                authenticator_data: r.Response.AuthenticatorData,",
                            "                client_data_json: r.Response.ClientDataJson,",
                            "                signature: r.Response.Signature,",
                            "                user_handle: r.Response.UserHandle,"
                        ]
                    },
                    {
                        "line_numbers": [
                            244,
                            245,
                            246,
                            247
                        ],
                        "comments": {},
                        "lines": [
                            "            extensions: r.Extensions.map(|e| AuthenticationExtensionsClientOutputs {",
                            "                appid: e.Appid,",
                            "            }),",
                            "            type_: r.Type,"
                        ]
                    },
                    {
                        "line_numbers": [
                            253,
                            254
                        ],
                        "comments": {},
                        "lines": [
                            "async fn activate_webauthn(data: JsonUpcase<EnableWebauthnData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let data: EnableWebauthnData = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            258,
                            259
                        ],
                        "comments": {},
                        "lines": [
                            "        MasterPasswordHash: data.MasterPasswordHash,",
                            "        Otp: data.Otp,"
                        ]
                    },
                    {
                        "line_numbers": [
                            277
                        ],
                        "comments": {},
                        "lines": [
                            "        WebauthnConfig::load().register_credential(&data.DeviceResponse.into(), &state, |_| Ok(false))?;"
                        ]
                    },
                    {
                        "line_numbers": [
                            282,
                            283
                        ],
                        "comments": {},
                        "lines": [
                            "        id: data.Id.into_i32()?,",
                            "        name: data.Name,"
                        ]
                    },
                    {
                        "line_numbers": [
                            299,
                            300,
                            301
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Enabled\": true,",
                            "        \"Keys\": keys_json,",
                            "        \"Object\": \"twoFactorU2f\""
                        ]
                    },
                    {
                        "line_numbers": [
                            306
                        ],
                        "comments": {},
                        "lines": [
                            "async fn activate_webauthn_put(data: JsonUpcase<EnableWebauthnData>, headers: Headers, conn: DbConn) -> JsonResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            313,
                            314
                        ],
                        "comments": {},
                        "lines": [
                            "    Id: NumberOrString,",
                            "    MasterPasswordHash: String,"
                        ]
                    },
                    {
                        "line_numbers": [
                            318,
                            319,
                            320
                        ],
                        "comments": {},
                        "lines": [
                            "async fn delete_webauthn(data: JsonUpcase<DeleteU2FData>, headers: Headers, mut conn: DbConn) -> JsonResult {",
                            "    let id = data.data.Id.into_i32()?;",
                            "    if !headers.user.check_valid_password(&data.data.MasterPasswordHash) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            361,
                            362,
                            363
                        ],
                        "comments": {},
                        "lines": [
                            "        \"Enabled\": true,",
                            "        \"Keys\": keys_json,",
                            "        \"Object\": \"twoFactorU2f\""
                        ]
                    },
                    {
                        "line_numbers": [
                            416,
                            417
                        ],
                        "comments": {},
                        "lines": [
                            "    let rsp: crate::util::UpCase<PublicKeyCredentialCopy> = serde_json::from_str(response)?;",
                            "    let rsp: PublicKeyCredential = rsp.data.into();"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "162": "    id: NumberOrString, // 1..5"
            },
            "comment_deleted_diff": {
                "166": "    Id: NumberOrString, // 1..5",
                "173": "// This is copied from RegisterPublicKeyCredential to change the Response objects casing",
                "205": "// This is copied from PublicKeyCredential to change the Response objects casing"
            },
            "comment_modified_diff": {}
        }
    ],
    "attachment.rs": [],
    "send.rs": [
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 48,
            "deletions": 43,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            130,
                            131,
                            132
                        ],
                        "comments": {
                            "129": "        // Mobile clients expect size to be a string instead of a number"
                        },
                        "lines": [
                            "        if let Some(size) = data.get(\"size\").and_then(|v| v.as_i64()) {",
                            "            data[\"size\"] = Value::String(size.to_string());",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            135,
                            136,
                            137,
                            138,
                            139,
                            140,
                            141,
                            142,
                            143,
                            144,
                            145,
                            146,
                            147,
                            148,
                            149,
                            150,
                            151,
                            152,
                            153,
                            154
                        ],
                        "comments": {},
                        "lines": [
                            "            \"id\": self.uuid,",
                            "            \"accessId\": BASE64URL_NOPAD.encode(Uuid::parse_str(&self.uuid).unwrap_or_default().as_bytes()),",
                            "            \"type\": self.atype,",
                            "",
                            "            \"name\": self.name,",
                            "            \"notes\": self.notes,",
                            "            \"text\": if self.atype == SendType::Text as i32 { Some(&data) } else { None },",
                            "            \"file\": if self.atype == SendType::File as i32 { Some(&data) } else { None },",
                            "",
                            "            \"key\": self.akey,",
                            "            \"maxAccessCount\": self.max_access_count,",
                            "            \"accessCount\": self.access_count,",
                            "            \"password\": self.password_hash.as_deref().map(|h| BASE64URL_NOPAD.encode(h)),",
                            "            \"disabled\": self.disabled,",
                            "            \"hideEmail\": self.hide_email,",
                            "",
                            "            \"revisionDate\": format_date(&self.revision_date),",
                            "            \"expirationDate\": self.expiration_date.as_ref().map(format_date),",
                            "            \"deletionDate\": format_date(&self.deletion_date),",
                            "            \"object\": \"send\","
                        ]
                    },
                    {
                        "line_numbers": [
                            161,
                            162
                        ],
                        "comments": {},
                        "lines": [
                            "        let mut data = serde_json::from_str::<LowerCase<Value>>(&self.data).map(|d| d.data).unwrap_or_default();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            164,
                            165,
                            166
                        ],
                        "comments": {
                            "163": "        // Mobile clients expect size to be a string instead of a number"
                        },
                        "lines": [
                            "        if let Some(size) = data.get(\"size\").and_then(|v| v.as_i64()) {",
                            "            data[\"size\"] = Value::String(size.to_string());",
                            "        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            169,
                            170
                        ],
                        "comments": {},
                        "lines": [
                            "            \"id\": self.uuid,",
                            "            \"type\": self.atype,"
                        ]
                    },
                    {
                        "line_numbers": [
                            172,
                            173,
                            174
                        ],
                        "comments": {},
                        "lines": [
                            "            \"name\": self.name,",
                            "            \"text\": if self.atype == SendType::Text as i32 { Some(&data) } else { None },",
                            "            \"file\": if self.atype == SendType::File as i32 { Some(&data) } else { None },"
                        ]
                    },
                    {
                        "line_numbers": [
                            176,
                            177,
                            178
                        ],
                        "comments": {},
                        "lines": [
                            "            \"expirationDate\": self.expiration_date.as_ref().map(format_date),",
                            "            \"creatorIdentifier\": self.creator_identifier(conn).await,",
                            "            \"object\": \"send-access\","
                        ]
                    },
                    {
                        "line_numbers": [
                            305
                        ],
                        "comments": {},
                        "lines": [
                            "        #[derive(serde::Deserialize)]"
                        ]
                    },
                    {
                        "line_numbers": [
                            307,
                            308
                        ],
                        "comments": {},
                        "lines": [
                            "            #[serde(rename = \"size\", alias = \"Size\")]",
                            "            size: NumberOrString,"
                        ]
                    },
                    {
                        "line_numbers": [
                            314,
                            315,
                            316
                        ],
                        "comments": {},
                        "lines": [
                            "                if let Ok(size) =",
                            "                    serde_json::from_str::<FileData>(&send.data).map_err(Into::into).and_then(|d| d.size.into_i64())",
                            "                {"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "129": "        // Mobile clients expect size to be a string instead of a number",
                "163": "        // Mobile clients expect size to be a string instead of a number"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "schema.rs": [],
    "main.rs": [
        {
            "commit": "a1fbd6d72917c0435da28b7f21c2f23aecc008b5",
            "timestamp": "2024-03-17T15:11:20+01:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improve JWT key initialization and avoid saving public key (#4085)",
            "additions": 1,
            "deletions": 26,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "448": "    // If the RSA keys don't exist, try to create them"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "27dc67fadd3d45b9f7d8d37407cef9453b8f5802",
            "timestamp": "2024-04-27T20:25:34+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Implement custom DNS resolver (#3988)",
            "additions": 3,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [],
                        "comments": {
                            "214": "    // Depending on the main log level we either want to disable or enable logging for hickory.",
                            "215": "    // Else if there are timeouts it will clutter the logs since hickory uses warn for this."
                        },
                        "lines": []
                    },
                    {
                        "line_numbers": [],
                        "comments": {
                            "269": "        // Variable level for hickory used by reqwest"
                        },
                        "lines": []
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "214": "    // Depending on the main log level we either want to disable or enable logging for hickory.",
                "215": "    // Else if there are timeouts it will clutter the logs since hickory uses warn for this.",
                "269": "        // Variable level for hickory used by reqwest"
            },
            "comment_deleted_diff": {
                "214": "    // Depending on the main log level we either want to disable or enable logging for trust-dns.",
                "215": "    // Else if there are timeouts it will clutter the logs since trust-dns uses warn for this.",
                "269": "        // Variable level for trust-dns used by reqwest"
            },
            "comment_modified_diff": {
                "214": "    // Depending on the main log level we either want to disable or enable logging for trust-dns.",
                "215": "    // Else if there are timeouts it will clutter the logs since trust-dns uses warn for this.",
                "269": "        // Variable level for trust-dns used by reqwest"
            }
        },
        {
            "commit": "de66e56b6c951192bcb47987b34ac21e2bcea43a",
            "timestamp": "2024-07-24T16:49:03+02:00",
            "author": "Timshel",
            "commit_message": "Allow to override log level for specific target (#4305)",
            "additions": 82,
            "deletions": 40,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            272,
                            273,
                            274,
                            275,
                            276,
                            277,
                            278
                        ],
                        "comments": {
                            "270": "    // Enable smtp debug logging only specifically for smtp when need.",
                            "271": "    // This can contain sensitive information we do not want in the default debug/trace logging."
                        },
                        "lines": [
                            "    let smtp_log_level = if CONFIG.smtp_debug() {",
                            "        log::LevelFilter::Debug",
                            "    } else {",
                            "        log::LevelFilter::Off",
                            "    };",
                            "",
                            "    let mut default_levels = HashMap::from(["
                        ]
                    },
                    {
                        "line_numbers": [
                            280
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"rustls::session\", log::LevelFilter::Off),"
                        ]
                    },
                    {
                        "line_numbers": [
                            282
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"hyper::server\", log::LevelFilter::Warn),"
                        ]
                    },
                    {
                        "line_numbers": [
                            284,
                            285,
                            286,
                            287,
                            288
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"_\", rocket_underscore_level),",
                            "        (\"rocket::response::responder::_\", rocket_underscore_level),",
                            "        (\"rocket::server::_\", rocket_underscore_level),",
                            "        (\"vaultwarden::api::admin::_\", rocket_underscore_level),",
                            "        (\"vaultwarden::api::notifications::_\", rocket_underscore_level),"
                        ]
                    },
                    {
                        "line_numbers": [
                            290,
                            291,
                            292,
                            293,
                            294,
                            295,
                            296,
                            297
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"rocket::launch\", log::LevelFilter::Error),",
                            "        (\"rocket::launch_\", log::LevelFilter::Error),",
                            "        (\"rocket::rocket\", log::LevelFilter::Warn),",
                            "        (\"rocket::server\", log::LevelFilter::Warn),",
                            "        (\"rocket::fairing::fairings\", log::LevelFilter::Warn),",
                            "        (\"rocket::shield::shield\", log::LevelFilter::Warn),",
                            "        (\"hyper::proto\", log::LevelFilter::Off),",
                            "        (\"hyper::client\", log::LevelFilter::Off),"
                        ]
                    },
                    {
                        "line_numbers": [
                            299
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"handlebars::render\", handlebars_level),"
                        ]
                    },
                    {
                        "line_numbers": [
                            301
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"cookie_store\", log::LevelFilter::Off),"
                        ]
                    },
                    {
                        "line_numbers": [
                            303,
                            304,
                            305
                        ],
                        "comments": {},
                        "lines": [
                            "        (\"hickory_resolver::name_server::name_server\", hickory_level),",
                            "        (\"hickory_proto::xfer\", hickory_level),",
                            "        (\"diesel_logger\", diesel_logger_level),"
                        ]
                    },
                    {
                        "line_numbers": [
                            307,
                            308,
                            309,
                            310,
                            311,
                            312
                        ],
                        "comments": {
                            "306": "        // SMTP"
                        },
                        "lines": [
                            "        (\"lettre::transport::smtp\", smtp_log_level),",
                            "    ]);",
                            "",
                            "    for (path, level) in levels_override.into_iter() {",
                            "        let _ = default_levels.insert(path, level);",
                            "    }"
                        ]
                    },
                    {
                        "line_numbers": [
                            314
                        ],
                        "comments": {},
                        "lines": [
                            "    if Some(&log::LevelFilter::Debug) == default_levels.get(\"lettre::transport::smtp\") {"
                        ]
                    },
                    {
                        "line_numbers": [
                            319,
                            320,
                            321,
                            322,
                            323,
                            324
                        ],
                        "comments": {},
                        "lines": [
                            "    }",
                            "",
                            "    let mut logger = fern::Dispatch::new().level(level).chain(std::io::stdout());",
                            "",
                            "    for (path, level) in default_levels {",
                            "        logger = logger.level_for(path.to_string(), level);"
                        ]
                    },
                    {
                        "line_numbers": [
                            361,
                            362,
                            363
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Err(err) = logger.apply() {",
                            "        err!(format!(\"Failed to activate logger: {err}\"))",
                            "    }"
                        ]
                    },
                    {
                        "line_numbers": [
                            401
                        ],
                        "comments": {},
                        "lines": [
                            "    Ok(level)"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "270": "    // Enable smtp debug logging only specifically for smtp when need.",
                "271": "    // This can contain sensitive information we do not want in the default debug/trace logging.",
                "306": "        // SMTP"
            },
            "comment_deleted_diff": {
                "275": "    // Enable smtp debug logging only specifically for smtp when need.",
                "276": "    // This can contain sensitive information we do not want in the default debug/trace logging."
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "b4b2701905752f90080dd46ba10a90c5c584a38e",
            "timestamp": "2024-07-24T16:50:35+02:00",
            "author": "0x0fbc",
            "commit_message": "Add support for MFA with Duo's Universal Prompt (#4637)\n\n* Add initial working Duo Universal Prompt support.\r\n\r\n* Add db schema and models for Duo 2FA state storage\r\n\r\n* store duo states in the database and validate during authentication\r\n\r\n* cleanup & comments\r\n\r\n* bump state/nonce length\r\n\r\n* replace stray use of TimeDelta\r\n\r\n* more cleanup\r\n\r\n* bind Duo oauth flow to device id, drop redundant device type handling\r\n\r\n* drop redundant alphanum string generation code\r\n\r\n* error handling cleanup\r\n\r\n* directly use JWT_VALIDITY_SECS constant instead of copying it to DuoClient instances\r\n\r\n* remove redundant explicit returns, rustfmt\r\n\r\n* rearrange constants, update comments, error message\r\n\r\n* override charset on duo state column to ascii for mysql\r\n\r\n* Reduce twofactor_duo_ctx state/nonce column size in postgres and maria\r\n\r\n* Add fixes suggested by clippy\r\n\r\n* rustfmt\r\n\r\n* Update to use the make_http_request\r\n\r\n* Don't handle OrganizationDuo\r\n\r\n* move Duo API endpoint fmt strings out of macros and into format! calls\r\n\r\n* Add missing indentation\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>\r\n\r\n* remove redundant expiry check when purging Duo contexts\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 8,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            631,
                            632,
                            633,
                            634,
                            635,
                            636
                        ],
                        "comments": {
                            "630": "            // Clean unused, expired Duo authentication contexts."
                        },
                        "lines": [
                            "            if !CONFIG.duo_context_purge_schedule().is_empty() && CONFIG._enable_duo() && !CONFIG.duo_use_iframe() {",
                            "                sched.add(Job::new(CONFIG.duo_context_purge_schedule().parse().unwrap(), || {",
                            "                    runtime.spawn(purge_duo_contexts(pool.clone()));",
                            "                }));",
                            "            }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "630": "            // Clean unused, expired Duo authentication contexts."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "e9acd8bd3c3142cccb021ab5759a8410ef335aaa",
            "timestamp": "2024-09-01T15:52:29+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Add a CLI feature to backup the SQLite DB (#4906)\n\n* Add a CLI feature to backup the SQLite DB\r\n\r\nMany users request to add the sqlite3 binary to the container image.\r\nThis isn't really ideal as that might bring in other dependencies and will only bloat the image.\r\nThere main reason is to create a backup of the database.\r\n\r\nWhile there already was a feature within the admin interface to do so (or by using the admin API call), this might not be easy.\r\n\r\nThis PR adds several ways to generate a backup.\r\n1. By calling the Vaultwarden binary with the `backup` command like:\r\n  - `/vaultwarden backup`\r\n  - `docker exec -it vaultwarden /vaultwarden backup`\r\n2. By sending the USR1 signal to the running process like:\r\n  - `kill -s USR1 $(pidof vaultwarden)\r\n  - `killall -s USR1 vaultwarden)\r\n\r\nThis should help users to more easily create backups of there SQLite database.\r\n\r\nAlso added the Web-Vault version number when using `-v/--version` to the output.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Spelling and small adjustments\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 60,
            "deletions": 5,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            210,
                            211,
                            212,
                            213,
                            214,
                            215,
                            216,
                            217,
                            218,
                            219,
                            220,
                            221,
                            222
                        ],
                        "comments": {
                            "209": "            // Establish a connection to the sqlite database"
                        },
                        "lines": [
                            "            let mut conn = diesel::sqlite::SqliteConnection::establish(&url)?;",
                            "            let backup_file = backup_sqlite_database(&mut conn)?;",
                            "            Ok(backup_file)",
                            "        } else {",
                            "            err_silent!(\"The database type is not SQLite. Backups only works for SQLite databases\")",
                            "        }",
                            "    }",
                            "    #[cfg(not(sqlite))]",
                            "    {",
                            "        err_silent!(\"The 'sqlite' feature is not enabled. Backups only works for SQLite databases\")",
                            "    }",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            388
                        ],
                        "comments": {},
                        "lines": [
                            "            const SIGHUP: i32 = SignalKind::hangup().as_raw_value();"
                        ]
                    },
                    {
                        "line_numbers": [
                            602,
                            603,
                            604,
                            605,
                            606
                        ],
                        "comments": {},
                        "lines": [
                            "    #[cfg(unix)]",
                            "    {",
                            "        tokio::spawn(async move {",
                            "            let mut signal_user1 = tokio::signal::unix::signal(SignalKind::user_defined1()).unwrap();",
                            "            loop {"
                        ]
                    },
                    {
                        "line_numbers": [
                            609,
                            610,
                            611,
                            612,
                            613,
                            614,
                            615,
                            616,
                            617
                        ],
                        "comments": {
                            "607": "                // If we need more signals to act upon, we might want to use select! here.",
                            "608": "                // With only one item to listen for this is enough."
                        },
                        "lines": [
                            "                let _ = signal_user1.recv().await;",
                            "                match backup_sqlite() {",
                            "                    Ok(f) => info!(\"Backup to '{f}' was successful\"),",
                            "                    Err(e) => error!(\"Backup failed. {e:?}\"),",
                            "                }",
                            "            }",
                            "        });",
                            "    }",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "209": "            // Establish a connection to the sqlite database",
                "607": "                // If we need more signals to act upon, we might want to use select! here.",
                "608": "                // With only one item to listen for this is enough."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "admin_diagnostics.js": [],
    "diagnostics.hbs": [],
    "release.yml": [],
    "web.rs": [
        {
            "commit": "294b429436a1159ddb9b796b583fa79a9d04ef87",
            "timestamp": "2024-11-11T20:14:04+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Add dynamic CSS support (#4940)\n\n* Add dynamic CSS support\r\n\r\nTogether with https://github.com/dani-garcia/bw_web_builds/pull/180 this PR will add support for dynamic CSS changes.\r\n\r\nFor example, we could hide the register link if signups are not allowed.\r\nIn the future show or hide the SSO button depending on if it is enabled or not.\r\n\r\nThere also is a special `user.vaultwarden.scss` file so that users can add custom CSS without the need to modify the default (static) changes.\r\nThis will prevent future changes from not being applied and still have the custom user changes to be added.\r\n\r\nAlso added a special redirect when someone goes directly to `/index.html` as that might cause issues with loading other scripts and files.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Add versions and fallback to built-in\r\n\r\n- Add both Vaultwarden and web-vault versions to the css_options.\r\n- Fallback to the inner templates if rendering or compiling the scss fails.\r\n  This ensures the basics are always working even if someone breaks the templates.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Fix fallback code to actually work\r\n\r\nThe fallback now works by using an alternative `reg!` macro.\r\nThis adds an extra template register which prefixes the template with `fallback_`.\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Updated the wiki link in the user template\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 100,
            "deletions": 3,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70,
                            71,
                            72,
                            73
                        ],
                        "comments": {
                            "57": "    // Configure the web-vault version as an integer so it can be used as a comparison smaller or greater then.",
                            "58": "    // The default is based upon the version since this feature is added."
                        },
                        "lines": [
                            "    static WEB_VAULT_VERSION: Lazy<u32> = Lazy::new(|| {",
                            "        let re = regex::Regex::new(r\"(\\d{4})\\.(\\d{1,2})\\.(\\d{1,2})\").unwrap();",
                            "        let vault_version = get_web_vault_version();",
                            "",
                            "        let (major, minor, patch) = match re.captures(&vault_version) {",
                            "            Some(c) if c.len() == 4 => (",
                            "                c.get(1).unwrap().as_str().parse().unwrap(),",
                            "                c.get(2).unwrap().as_str().parse().unwrap(),",
                            "                c.get(3).unwrap().as_str().parse().unwrap(),",
                            "            ),",
                            "            _ => (2024, 6, 2),",
                            "        };",
                            "        format!(\"{major}{minor:02}{patch:02}\").parse::<u32>().unwrap()",
                            "    });",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84,
                            85,
                            86,
                            87,
                            88,
                            89,
                            90,
                            91,
                            92,
                            93,
                            94,
                            95,
                            96,
                            97,
                            98,
                            99,
                            100,
                            101,
                            102,
                            103,
                            104
                        ],
                        "comments": {
                            "74": "    // Configure the Vaultwarden version as an integer so it can be used as a comparison smaller or greater then.",
                            "75": "    // The default is based upon the version since this feature is added."
                        },
                        "lines": [
                            "    static VW_VERSION: Lazy<u32> = Lazy::new(|| {",
                            "        let re = regex::Regex::new(r\"(\\d{1})\\.(\\d{1,2})\\.(\\d{1,2})\").unwrap();",
                            "        let vw_version = crate::VERSION.unwrap_or(\"1.32.1\");",
                            "",
                            "        let (major, minor, patch) = match re.captures(vw_version) {",
                            "            Some(c) if c.len() == 4 => (",
                            "                c.get(1).unwrap().as_str().parse().unwrap(),",
                            "                c.get(2).unwrap().as_str().parse().unwrap(),",
                            "                c.get(3).unwrap().as_str().parse().unwrap(),",
                            "            ),",
                            "            _ => (1, 32, 1),",
                            "        };",
                            "        format!(\"{major}{minor:02}{patch:02}\").parse::<u32>().unwrap()",
                            "    });",
                            "",
                            "    let css_options = json!({",
                            "        \"web_vault_version\": *WEB_VAULT_VERSION,",
                            "        \"vw_version\": *VW_VERSION,",
                            "        \"signup_disabled\": !CONFIG.signups_allowed() && CONFIG.signups_domains_whitelist().is_empty(),",
                            "        \"mail_enabled\": CONFIG.mail_enabled(),",
                            "        \"yubico_enabled\": CONFIG._enable_yubico() && (CONFIG.yubico_client_id().is_some() == CONFIG.yubico_secret_key().is_some()),",
                            "        \"emergency_access_allowed\": CONFIG.emergency_access_allowed(),",
                            "        \"sends_allowed\": CONFIG.sends_allowed(),",
                            "        \"load_user_scss\": true,",
                            "    });",
                            "",
                            "    let scss = match CONFIG.render_template(\"scss/vaultwarden.scss\", &css_options) {",
                            "        Ok(t) => t,",
                            "        Err(e) => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112,
                            113,
                            114,
                            115,
                            116,
                            117,
                            118
                        ],
                        "comments": {
                            "105": "            // Something went wrong loading the template. Use the fallback"
                        },
                        "lines": [
                            "            warn!(\"Loading scss/vaultwarden.scss.hbs or scss/user.vaultwarden.scss.hbs failed. {e}\");",
                            "            CONFIG",
                            "                .render_fallback_template(\"scss/vaultwarden.scss\", &css_options)",
                            "                .expect(\"Fallback scss/vaultwarden.scss.hbs to render\")",
                            "        }",
                            "    };",
                            "",
                            "    let css = match grass_compiler::from_string(",
                            "        scss,",
                            "        &grass_compiler::Options::default().style(grass_compiler::OutputStyle::Compressed),",
                            "    ) {",
                            "        Ok(css) => css,",
                            "        Err(e) => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            120,
                            121,
                            122,
                            123,
                            124,
                            125,
                            126,
                            127,
                            128,
                            129,
                            130,
                            131,
                            132,
                            133
                        ],
                        "comments": {
                            "119": "            // Something went wrong compiling the scss. Use the fallback"
                        },
                        "lines": [
                            "            warn!(\"Compiling the Vaultwarden SCSS styles failed. {e}\");",
                            "            let mut css_options = css_options;",
                            "            css_options[\"load_user_scss\"] = json!(false);",
                            "            let scss = CONFIG",
                            "                .render_fallback_template(\"scss/vaultwarden.scss\", &css_options)",
                            "                .expect(\"Fallback scss/vaultwarden.scss.hbs to render\");",
                            "            grass_compiler::from_string(",
                            "                scss,",
                            "                &grass_compiler::Options::default().style(grass_compiler::OutputStyle::Compressed),",
                            "            )",
                            "            .expect(\"SCSS to compile\")",
                            "        }",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            135,
                            136,
                            137
                        ],
                        "comments": {
                            "134": "    // Cache for one day should be enough and not too much"
                        },
                        "lines": [
                            "    Cached::ttl(Css(css), 86_400, false)",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            145,
                            146,
                            147,
                            148,
                            149
                        ],
                        "comments": {},
                        "lines": [
                            "#[get(\"/index.html\")]",
                            "fn web_index_direct() -> Redirect {",
                            "    Redirect::to(format!(\"{}/\", CONFIG.domain_path()))",
                            "}",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "57": "    // Configure the web-vault version as an integer so it can be used as a comparison smaller or greater then.",
                "58": "    // The default is based upon the version since this feature is added.",
                "74": "    // Configure the Vaultwarden version as an integer so it can be used as a comparison smaller or greater then.",
                "75": "    // The default is based upon the version since this feature is added.",
                "105": "            // Something went wrong loading the template. Use the fallback",
                "119": "            // Something went wrong compiling the scss. Use the fallback",
                "134": "    // Cache for one day should be enough and not too much",
                "143": "// Make sure that `/index.html` redirect to actual domain path.",
                "144": "// If not, this might cause issues with the web-vault"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "bootstrap.bundle.js": [],
    "bootstrap.css": [],
    "datatables.css": [],
    "datatables.js": [],
    "jquery-3.7.1.slim.js": [],
    "organizations.hbs": [],
    "users.hbs": [],
    "global_domains.py": [],
    "error.rs": [
        {
            "commit": "035f694d2f94df5203bec6c0af951f78fcc888c2",
            "timestamp": "2024-07-12T22:33:11+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improved HTTP client (#4740)\n\n* Improved HTTP client\r\n\r\n* Change config compat to use auto, rename blacklist\r\n\r\n* Fix wrong doc references",
            "additions": 5,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            74,
                            75
                        ],
                        "comments": {
                            "73": "    // Used in our custom http client to handle non-global IPs and blocked domains"
                        },
                        "lines": [
                            "    CustomHttpClient(CustomHttpClientError): _has_source, _api_error,",
                            ""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "73": "    // Used in our custom http client to handle non-global IPs and blocked domains"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "change_email.hbs": [],
    "change_email.html.hbs": [],
    "two_factor.rs": [
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 6,
            "deletions": 6,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            65,
                            66,
                            67
                        ],
                        "comments": {
                            "58": "            \"key\": \"\", // This key and value vary",
                            "59": "            \"Oobject\": \"twoFactorAuthenticator\" // This value varies"
                        },
                        "lines": [
                            "            \"enabled\": self.enabled,",
                            "            \"type\": self.atype,",
                            "            \"object\": \"twoFactorProvider\""
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "58": "            \"key\": \"\", // This key and value vary",
                "59": "            \"Oobject\": \"twoFactorAuthenticator\" // This value varies"
            },
            "comment_deleted_diff": {
                "58": "            \"Key\": \"\", // This key and value vary",
                "59": "            \"Object\": \"twoFactorAuthenticator\" // This value varies"
            },
            "comment_modified_diff": {
                "58": "            \"Key\": \"\", // This key and value vary",
                "59": "            \"Object\": \"twoFactorAuthenticator\" // This value varies"
            }
        }
    ],
    "group.rs": [],
    "email.rs": [
        {
            "commit": "b27e6e30c9687d41e5596be73346ce0ed626068d",
            "timestamp": "2024-07-17T16:20:54+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Fix Email 2FA login on native app (#4762)",
            "additions": 3,
            "deletions": 0,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            28
                        ],
                        "comments": {
                            "27": "    // DeviceIdentifier: String, // Currently not used"
                        },
                        "lines": [
                            "    #[serde(alias = \"Email\")]"
                        ]
                    },
                    {
                        "line_numbers": [
                            30
                        ],
                        "comments": {},
                        "lines": [
                            "    #[serde(alias = \"MasterPasswordHash\")]"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "27": "    // DeviceIdentifier: String, // Currently not used"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "org_policy.rs": [],
    "public.rs": [
        {
            "commit": "753a9e0baee3ba3e7b4e05f18d3259e010b68d62",
            "timestamp": "2024-05-19T20:33:31+02:00",
            "author": "FDHoho007",
            "commit_message": "Fix public api for domains with path prefix (#4500)",
            "additions": 2,
            "deletions": 6,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            220
                        ],
                        "comments": {
                            "219": "        // Check if claims.iss is domain|claims.scope[0]"
                        },
                        "lines": [
                            "        let complete_host = format!(\"{}|{}\", CONFIG.domain_origin(), claims.scope[0]);"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "219": "        // Check if claims.iss is domain|claims.scope[0]"
            },
            "comment_deleted_diff": {
                "219": "        // Check if claims.iss is host|claims.scope[0]"
            },
            "comment_modified_diff": {
                "219": "        // Check if claims.iss is host|claims.scope[0]"
            }
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Change API and structs to camelCase (#4386)\n\n* Change API inputs/outputs and structs to camelCase\r\n\r\n* Fix fields and password history\r\n\r\n* Use convert_json_key_lcase_first\r\n\r\n* Make sends lowercase\r\n\r\n* Update admin and templates\r\n\r\n* Update org revoke\r\n\r\n* Fix sends expecting size to be a string on mobile\r\n\r\n* Convert two-factor providers to string",
            "additions": 38,
            "deletions": 33,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            47
                        ],
                        "comments": {
                            "43": "    // largeImport: bool, // For now this will not be used, upstream uses this to prevent syncs of more then 2000 users or groups without the flag set."
                        },
                        "lines": [
                            "async fn ldap_import(data: Json<OrgImportData>, token: PublicToken, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            52
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner();"
                        ]
                    },
                    {
                        "line_numbers": [
                            54,
                            55
                        ],
                        "comments": {},
                        "lines": [
                            "    for user_data in &data.members {",
                            "        if user_data.deleted {"
                        ]
                    },
                    {
                        "line_numbers": [
                            58
                        ],
                        "comments": {},
                        "lines": [
                            "                UserOrganization::find_by_email_and_org(&user_data.email, &org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            76
                        ],
                        "comments": {},
                        "lines": [
                            "                let ext_modified = user_org.set_external_id(Some(user_data.external_id.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            83
                        ],
                        "comments": {},
                        "lines": [
                            "            UserOrganization::find_by_email_and_org(&user_data.email, &org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            86
                        ],
                        "comments": {},
                        "lines": [
                            "            let ext_modified = user_org.set_external_id(Some(user_data.external_id.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            92
                        ],
                        "comments": {},
                        "lines": [
                            "            let user = match User::find_by_mail(&user_data.email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            96
                        ],
                        "comments": {},
                        "lines": [
                            "                    let mut new_user = User::new(user_data.email.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            113
                        ],
                        "comments": {},
                        "lines": [
                            "            new_org_user.set_external_id(Some(user_data.external_id.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            127
                        ],
                        "comments": {},
                        "lines": [
                            "                    &user_data.email,"
                        ]
                    },
                    {
                        "line_numbers": [
                            140,
                            141
                        ],
                        "comments": {},
                        "lines": [
                            "        for group_data in &data.groups {",
                            "            let group_uuid = match Group::find_by_external_id_and_org(&group_data.external_id, &org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            145,
                            146,
                            147,
                            148,
                            149,
                            150
                        ],
                        "comments": {},
                        "lines": [
                            "                    let mut group = Group::new(",
                            "                        org_id.clone(),",
                            "                        group_data.name.clone(),",
                            "                        false,",
                            "                        Some(group_data.external_id.clone()),",
                            "                    );"
                        ]
                    },
                    {
                        "line_numbers": [
                            158
                        ],
                        "comments": {},
                        "lines": [
                            "            for ext_id in &group_data.member_external_ids {"
                        ]
                    },
                    {
                        "line_numbers": [
                            171
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.overwrite_existing {"
                        ]
                    },
                    {
                        "line_numbers": [
                            173
                        ],
                        "comments": {},
                        "lines": [
                            "        let sync_members: HashSet<String> = data.members.into_iter().map(|m| m.external_id).collect();"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            23,
                            24,
                            25
                        ],
                        "comments": {
                            "21": "#[allow(non_snake_case)]"
                        },
                        "lines": [
                            "    Name: String,",
                            "    ExternalId: String,",
                            "    MemberExternalIds: Vec<String>,"
                        ]
                    },
                    {
                        "line_numbers": [
                            31,
                            32,
                            33
                        ],
                        "comments": {},
                        "lines": [
                            "    Email: String,",
                            "    ExternalId: String,",
                            "    Deleted: bool,"
                        ]
                    },
                    {
                        "line_numbers": [
                            39,
                            40,
                            41,
                            42
                        ],
                        "comments": {},
                        "lines": [
                            "    Groups: Vec<OrgImportGroupData>,",
                            "    Members: Vec<OrgImportUserData>,",
                            "    OverwriteExisting: bool,",
                            "    // LargeImport: bool, // For now this will not be used, upstream uses this to prevent syncs of more then 2000 users or groups without the flag set."
                        ]
                    },
                    {
                        "line_numbers": [
                            46
                        ],
                        "comments": {},
                        "lines": [
                            "async fn ldap_import(data: JsonUpcase<OrgImportData>, token: PublicToken, mut conn: DbConn) -> EmptyResult {"
                        ]
                    },
                    {
                        "line_numbers": [
                            51
                        ],
                        "comments": {},
                        "lines": [
                            "    let data = data.into_inner().data;"
                        ]
                    },
                    {
                        "line_numbers": [
                            53,
                            54
                        ],
                        "comments": {},
                        "lines": [
                            "    for user_data in &data.Members {",
                            "        if user_data.Deleted {"
                        ]
                    },
                    {
                        "line_numbers": [
                            57
                        ],
                        "comments": {},
                        "lines": [
                            "                UserOrganization::find_by_email_and_org(&user_data.Email, &org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            75
                        ],
                        "comments": {},
                        "lines": [
                            "                let ext_modified = user_org.set_external_id(Some(user_data.ExternalId.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            82
                        ],
                        "comments": {},
                        "lines": [
                            "            UserOrganization::find_by_email_and_org(&user_data.Email, &org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            85
                        ],
                        "comments": {},
                        "lines": [
                            "            let ext_modified = user_org.set_external_id(Some(user_data.ExternalId.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            91
                        ],
                        "comments": {},
                        "lines": [
                            "            let user = match User::find_by_mail(&user_data.Email, &mut conn).await {"
                        ]
                    },
                    {
                        "line_numbers": [
                            95
                        ],
                        "comments": {},
                        "lines": [
                            "                    let mut new_user = User::new(user_data.Email.clone());"
                        ]
                    },
                    {
                        "line_numbers": [
                            112
                        ],
                        "comments": {},
                        "lines": [
                            "            new_org_user.set_external_id(Some(user_data.ExternalId.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            126
                        ],
                        "comments": {},
                        "lines": [
                            "                    &user_data.Email,"
                        ]
                    },
                    {
                        "line_numbers": [
                            139,
                            140
                        ],
                        "comments": {},
                        "lines": [
                            "        for group_data in &data.Groups {",
                            "            let group_uuid = match Group::find_by_external_id_and_org(&group_data.ExternalId, &org_id, &mut conn).await"
                        ]
                    },
                    {
                        "line_numbers": [
                            144,
                            145
                        ],
                        "comments": {},
                        "lines": [
                            "                    let mut group =",
                            "                        Group::new(org_id.clone(), group_data.Name.clone(), false, Some(group_data.ExternalId.clone()));"
                        ]
                    },
                    {
                        "line_numbers": [
                            153
                        ],
                        "comments": {},
                        "lines": [
                            "            for ext_id in &group_data.MemberExternalIds {"
                        ]
                    },
                    {
                        "line_numbers": [
                            166
                        ],
                        "comments": {},
                        "lines": [
                            "    if data.OverwriteExisting {"
                        ]
                    },
                    {
                        "line_numbers": [
                            168
                        ],
                        "comments": {},
                        "lines": [
                            "        let sync_members: HashSet<String> = data.Members.into_iter().map(|m| m.ExternalId).collect();"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "43": "    // largeImport: bool, // For now this will not be used, upstream uses this to prevent syncs of more then 2000 users or groups without the flag set."
            },
            "comment_deleted_diff": {
                "42": "    // LargeImport: bool, // For now this will not be used, upstream uses this to prevent syncs of more then 2000 users or groups without the flag set."
            },
            "comment_modified_diff": {}
        }
    ],
    "protected_actions.rs": [],
    "auth_request.rs": [
        {
            "commit": "1e4275518757ce2f5945c0907be8be62ea9a09b0",
            "timestamp": "2024-03-19T19:47:30+01:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Update chrono and sqlite (#4436)\n\n- Updated sqlite crate\r\n- Updated chrono crate\r\n\r\nThe latter needed a lot of changes done, mostly `Duration` to `TimeDelta`.\r\nAnd some changes on how to use Naive.",
            "additions": 1,
            "deletions": 1,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {
                "143": "        let expiry_time = Utc::now().naive_utc() - chrono::TimeDelta::try_minutes(5).unwrap(); //after 5 minutes, clients reject the request"
            },
            "comment_deleted_diff": {
                "143": "        let expiry_time = Utc::now().naive_utc() - chrono::Duration::minutes(5); //after 5 minutes, clients reject the request"
            },
            "comment_modified_diff": {
                "143": "        let expiry_time = Utc::now().naive_utc() - chrono::Duration::minutes(5); //after 5 minutes, clients reject the request"
            }
        }
    ],
    "event.rs": [],
    "user.rs": [],
    "icons.rs": [
        {
            "commit": "27dc67fadd3d45b9f7d8d37407cef9453b8f5802",
            "timestamp": "2024-04-27T20:25:34+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Implement custom DNS resolver (#3988)",
            "additions": 85,
            "deletions": 237,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            153,
                            154
                        ],
                        "comments": {
                            "152": "    // Compiled domain blacklist"
                        },
                        "lines": [
                            "    static COMPILED_BLACKLIST: Mutex<Option<(String, Regex)>> = Mutex::new(None);",
                            "    let mut guard = COMPILED_BLACKLIST.lock().unwrap();"
                        ]
                    },
                    {
                        "line_numbers": [
                            157,
                            158,
                            159
                        ],
                        "comments": {},
                        "lines": [
                            "    if let Some((value, regex)) = &*guard {",
                            "        if value == &config_blacklist {",
                            "            return regex.is_match(domain);"
                        ]
                    },
                    {
                        "line_numbers": [
                            164,
                            165,
                            166
                        ],
                        "comments": {},
                        "lines": [
                            "    let regex = Regex::new(&config_blacklist).unwrap();",
                            "    let is_match = regex.is_match(domain);",
                            "    *guard = Some((config_blacklist, regex));"
                        ]
                    },
                    {
                        "line_numbers": [
                            168
                        ],
                        "comments": {},
                        "lines": [
                            "    is_match"
                        ]
                    },
                    {
                        "line_numbers": [
                            200,
                            201,
                            202,
                            203,
                            204
                        ],
                        "comments": {},
                        "lines": [
                            "            if let Some(error) = CustomResolverError::downcast_ref(&e) {",
                            "                warn!(\"{error}\");",
                            "                return None;",
                            "            }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            355,
                            356
                        ],
                        "comments": {},
                        "lines": [
                            "    let resp = match get_page(&ssldomain).await {",
                            "        Err(e) if CustomResolverError::downcast_ref(&e).is_none() => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            358,
                            359
                        ],
                        "comments": {
                            "357": "            // If we get an error that is not caused by the blacklist, we retry with HTTP"
                        },
                        "lines": [
                            "            match get_page(&httpdomain).await {",
                            "                mut sub_resp @ Err(_) => {"
                        ]
                    },
                    {
                        "line_numbers": [
                            361,
                            362,
                            363,
                            364,
                            365,
                            366,
                            367,
                            368,
                            369,
                            370,
                            371,
                            372,
                            373,
                            374,
                            375
                        ],
                        "comments": {
                            "360": "                    // When the domain is not an IP, and has more then one dot, remove all subdomains."
                        },
                        "lines": [
                            "                    let is_ip = domain.parse::<IpAddr>();",
                            "                    if is_ip.is_err() && domain.matches('.').count() > 1 {",
                            "                        let mut domain_parts = domain.split('.');",
                            "                        let base_domain = format!(",
                            "                            \"{base}.{tld}\",",
                            "                            tld = domain_parts.next_back().unwrap(),",
                            "                            base = domain_parts.next_back().unwrap()",
                            "                        );",
                            "                        if is_valid_domain(&base_domain) {",
                            "                            let sslbase = format!(\"https://{base_domain}\");",
                            "                            let httpbase = format!(\"http://{base_domain}\");",
                            "                            debug!(\"[get_icon_url]: Trying without subdomains '{base_domain}'\");",
                            "",
                            "                            sub_resp = get_page(&sslbase).or_else(|_| get_page(&httpbase)).await;",
                            "                        }"
                        ]
                    },
                    {
                        "line_numbers": [
                            378,
                            379,
                            380,
                            381,
                            382,
                            383
                        ],
                        "comments": {},
                        "lines": [
                            "                    } else if is_ip.is_err() && domain.matches('.').count() < 2 {",
                            "                        let www_domain = format!(\"www.{domain}\");",
                            "                        if is_valid_domain(&www_domain) {",
                            "                            let sslwww = format!(\"https://{www_domain}\");",
                            "                            let httpwww = format!(\"http://{www_domain}\");",
                            "                            debug!(\"[get_icon_url]: Trying with www. prefix '{www_domain}'\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            385,
                            386,
                            387,
                            388
                        ],
                        "comments": {},
                        "lines": [
                            "                            sub_resp = get_page(&sslwww).or_else(|_| get_page(&httpwww)).await;",
                            "                        }",
                            "                    }",
                            "                    sub_resp"
                        ]
                    },
                    {
                        "line_numbers": [
                            390
                        ],
                        "comments": {},
                        "lines": [
                            "                res => res,"
                        ]
                    },
                    {
                        "line_numbers": [
                            393
                        ],
                        "comments": {},
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            395
                        ],
                        "comments": {
                            "394": "        // If we get a result or a blacklist error, just continue"
                        },
                        "lines": [
                            "        res => res,"
                        ]
                    },
                    {
                        "line_numbers": [
                            447
                        ],
                        "comments": {},
                        "lines": [
                            "    Ok(client.send().await?.error_for_status()?)"
                        ]
                    },
                    {
                        "line_numbers": [
                            565,
                            566
                        ],
                        "comments": {},
                        "lines": [
                            "            let res = get_page_with_referer(&icon.href, &icon_result.referer).await?;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            568
                        ],
                        "comments": {
                            "567": "            buffer = stream_to_bytes_limit(res, 5120 * 1024).await?; // 5120KB/5MB for each icon max (Same as icons.bitwarden.net)"
                        },
                        "lines": [
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            570,
                            571,
                            572,
                            573,
                            574,
                            575,
                            576,
                            577
                        ],
                        "comments": {
                            "569": "            // Check if the icon type is allowed, else try an icon from the list."
                        },
                        "lines": [
                            "            icon_type = get_icon_type(&buffer);",
                            "            if icon_type.is_none() {",
                            "                buffer.clear();",
                            "                debug!(\"Icon from {}, is not a valid image type\", icon.href);",
                            "                continue;",
                            "            }",
                            "            info!(\"Downloaded icon from {}\", icon.href);",
                            "            break;"
                        ]
                    }
                ],
                "deleted": [
                    {
                        "line_numbers": [
                            107,
                            108,
                            109,
                            110
                        ],
                        "comments": {
                            "106": "#[get(\"/<domain>/icon.png\")]"
                        },
                        "lines": [
                            "async fn icon_external(domain: &str) -> Option<Redirect> {",
                            "    icon_redirect(domain, &CONFIG._icon_service_url()).await",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            169,
                            170,
                            171
                        ],
                        "comments": {},
                        "lines": [
                            "/// TODO: This is extracted from IpAddr::is_global, which is unstable:",
                            "/// https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html#method.is_global",
                            "/// Remove once https://github.com/rust-lang/rust/issues/27709 is merged"
                        ]
                    },
                    {
                        "line_numbers": [
                            174,
                            175,
                            176,
                            177,
                            178,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185,
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192,
                            193,
                            194,
                            195,
                            196,
                            197,
                            198,
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208
                        ],
                        "comments": {
                            "172": "#[allow(clippy::nonminimal_bool)]",
                            "173": "#[cfg(not(feature = \"unstable\"))]"
                        },
                        "lines": [
                            "fn is_global(ip: IpAddr) -> bool {",
                            "    match ip {",
                            "        IpAddr::V4(ip) => {",
                            "            // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two",
                            "            // globally routable addresses in the 192.0.0.0/24 range.",
                            "            if u32::from(ip) == 0xc0000009 || u32::from(ip) == 0xc000000a {",
                            "                return true;",
                            "            }",
                            "            !ip.is_private()",
                            "            && !ip.is_loopback()",
                            "            && !ip.is_link_local()",
                            "            && !ip.is_broadcast()",
                            "            && !ip.is_documentation()",
                            "            && !(ip.octets()[0] == 100 && (ip.octets()[1] & 0b1100_0000 == 0b0100_0000))",
                            "            && !(ip.octets()[0] == 192 && ip.octets()[1] == 0 && ip.octets()[2] == 0)",
                            "            && !(ip.octets()[0] & 240 == 240 && !ip.is_broadcast())",
                            "            && !(ip.octets()[0] == 198 && (ip.octets()[1] & 0xfe) == 18)",
                            "            // Make sure the address is not in 0.0.0.0/8",
                            "            && ip.octets()[0] != 0",
                            "        }",
                            "        IpAddr::V6(ip) => {",
                            "            if ip.is_multicast() && ip.segments()[0] & 0x000f == 14 {",
                            "                true",
                            "            } else {",
                            "                !ip.is_multicast()",
                            "                    && !ip.is_loopback()",
                            "                    && !((ip.segments()[0] & 0xffc0) == 0xfe80)",
                            "                    && !((ip.segments()[0] & 0xfe00) == 0xfc00)",
                            "                    && !ip.is_unspecified()",
                            "                    && !((ip.segments()[0] == 0x2001) && (ip.segments()[1] == 0xdb8))",
                            "            }",
                            "        }",
                            "    }",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            210,
                            211,
                            212,
                            213,
                            214,
                            215,
                            216,
                            217,
                            218,
                            219,
                            220
                        ],
                        "comments": {
                            "209": "#[cfg(feature = \"unstable\")]"
                        },
                        "lines": [
                            "fn is_global(ip: IpAddr) -> bool {",
                            "    ip.is_global()",
                            "}",
                            "",
                            "/// These are some tests to check that the implementations match",
                            "/// The IPv4 can be all checked in 5 mins or so and they are correct as of nightly 2020-07-11",
                            "/// The IPV6 can't be checked in a reasonable time, so we check  about ten billion random ones, so far correct",
                            "/// Note that the is_global implementation is subject to change as new IP RFCs are created",
                            "///",
                            "/// To run while showing progress output:",
                            "/// cargo test --features sqlite,unstable -- --nocapture --ignored"
                        ]
                    },
                    {
                        "line_numbers": [
                            223,
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236,
                            237,
                            238,
                            239,
                            240,
                            241,
                            242,
                            243,
                            244,
                            245,
                            246,
                            247,
                            248,
                            249,
                            250,
                            251,
                            252,
                            253,
                            254,
                            255,
                            256,
                            257,
                            258,
                            259,
                            260,
                            261,
                            262,
                            263,
                            264,
                            265,
                            266,
                            267
                        ],
                        "comments": {
                            "221": "#[cfg(test)]",
                            "222": "#[cfg(feature = \"unstable\")]"
                        },
                        "lines": [
                            "mod tests {",
                            "    use super::*;",
                            "",
                            "    #[test]",
                            "    #[ignore]",
                            "    fn test_ipv4_global() {",
                            "        for a in 0..u8::MAX {",
                            "            println!(\"Iter: {}/255\", a);",
                            "            for b in 0..u8::MAX {",
                            "                for c in 0..u8::MAX {",
                            "                    for d in 0..u8::MAX {",
                            "                        let ip = IpAddr::V4(std::net::Ipv4Addr::new(a, b, c, d));",
                            "                        assert_eq!(ip.is_global(), is_global(ip))",
                            "                    }",
                            "                }",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    #[test]",
                            "    #[ignore]",
                            "    fn test_ipv6_global() {",
                            "        use ring::rand::{SecureRandom, SystemRandom};",
                            "        let mut v = [0u8; 16];",
                            "        let rand = SystemRandom::new();",
                            "        for i in 0..1_000 {",
                            "            println!(\"Iter: {}/1_000\", i);",
                            "            for _ in 0..10_000_000 {",
                            "                rand.fill(&mut v).expect(\"Error generating random values\");",
                            "                let ip = IpAddr::V6(std::net::Ipv6Addr::new(",
                            "                    (v[14] as u16) << 8 | v[15] as u16,",
                            "                    (v[12] as u16) << 8 | v[13] as u16,",
                            "                    (v[10] as u16) << 8 | v[11] as u16,",
                            "                    (v[8] as u16) << 8 | v[9] as u16,",
                            "                    (v[6] as u16) << 8 | v[7] as u16,",
                            "                    (v[4] as u16) << 8 | v[5] as u16,",
                            "                    (v[2] as u16) << 8 | v[3] as u16,",
                            "                    (v[0] as u16) << 8 | v[1] as u16,",
                            "                ));",
                            "                assert_eq!(ip.is_global(), is_global(ip))",
                            "            }",
                            "        }",
                            "    }",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            269,
                            270,
                            271,
                            272,
                            273,
                            274
                        ],
                        "comments": {
                            "268": "#[derive(Clone)]"
                        },
                        "lines": [
                            "enum DomainBlacklistReason {",
                            "    Regex,",
                            "    IP,",
                            "}",
                            "",
                            "use cached::proc_macro::cached;"
                        ]
                    },
                    {
                        "line_numbers": [
                            276,
                            277,
                            278,
                            279,
                            280,
                            281,
                            282,
                            283,
                            284,
                            285,
                            286,
                            287,
                            288,
                            289,
                            290,
                            291,
                            292,
                            293
                        ],
                        "comments": {
                            "275": "#[cached(key = \"String\", convert = r#\"{ domain.to_string() }\"#, size = 16, time = 60)]"
                        },
                        "lines": [
                            "async fn check_domain_blacklist_reason(domain: &str) -> Option<DomainBlacklistReason> {",
                            "    // First check the blacklist regex if there is a match.",
                            "    // This prevents the blocked domain(s) from being leaked via a DNS lookup.",
                            "    if let Some(blacklist) = CONFIG.icon_blacklist_regex() {",
                            "        // Use the pre-generate Regex stored in a Lazy HashMap if there's one, else generate it.",
                            "        let is_match = if let Some(regex) = ICON_BLACKLIST_REGEX.get(&blacklist) {",
                            "            regex.is_match(domain)",
                            "        } else {",
                            "            // Clear the current list if the previous key doesn't exists.",
                            "            // To prevent growing of the HashMap after someone has changed it via the admin interface.",
                            "            if ICON_BLACKLIST_REGEX.len() >= 1 {",
                            "                ICON_BLACKLIST_REGEX.clear();",
                            "            }",
                            "",
                            "            // Generate the regex to store in too the Lazy Static HashMap.",
                            "            let blacklist_regex = Regex::new(&blacklist).unwrap();",
                            "            let is_match = blacklist_regex.is_match(domain);",
                            "            ICON_BLACKLIST_REGEX.insert(blacklist.clone(), blacklist_regex);"
                        ]
                    },
                    {
                        "line_numbers": [
                            295,
                            296
                        ],
                        "comments": {},
                        "lines": [
                            "            is_match",
                            "        };"
                        ]
                    },
                    {
                        "line_numbers": [
                            298,
                            299,
                            300
                        ],
                        "comments": {},
                        "lines": [
                            "        if is_match {",
                            "            debug!(\"Blacklisted domain: {} matched ICON_BLACKLIST_REGEX\", domain);",
                            "            return Some(DomainBlacklistReason::Regex);"
                        ]
                    },
                    {
                        "line_numbers": [
                            304,
                            305,
                            306,
                            307,
                            308,
                            309,
                            310,
                            311,
                            312,
                            313
                        ],
                        "comments": {},
                        "lines": [
                            "    if CONFIG.icon_blacklist_non_global_ips() {",
                            "        if let Ok(s) = lookup_host((domain, 0)).await {",
                            "            for addr in s {",
                            "                if !is_global(addr.ip()) {",
                            "                    debug!(\"IP {} for domain '{}' is not a global IP!\", addr.ip(), domain);",
                            "                    return Some(DomainBlacklistReason::IP);",
                            "                }",
                            "            }",
                            "        }",
                            "    }"
                        ]
                    },
                    {
                        "line_numbers": [
                            315
                        ],
                        "comments": {},
                        "lines": [
                            "    None"
                        ]
                    },
                    {
                        "line_numbers": [
                            494,
                            495,
                            496,
                            497,
                            498,
                            499,
                            500,
                            501,
                            502,
                            503,
                            504,
                            505,
                            506,
                            507,
                            508,
                            509,
                            510,
                            511,
                            512,
                            513,
                            514,
                            515
                        ],
                        "comments": {},
                        "lines": [
                            "    // First check the domain as given during the request for both HTTPS and HTTP.",
                            "    let resp = match get_page(&ssldomain).or_else(|_| get_page(&httpdomain)).await {",
                            "        Ok(c) => Ok(c),",
                            "        Err(e) => {",
                            "            let mut sub_resp = Err(e);",
                            "",
                            "            // When the domain is not an IP, and has more then one dot, remove all subdomains.",
                            "            let is_ip = domain.parse::<IpAddr>();",
                            "            if is_ip.is_err() && domain.matches('.').count() > 1 {",
                            "                let mut domain_parts = domain.split('.');",
                            "                let base_domain = format!(",
                            "                    \"{base}.{tld}\",",
                            "                    tld = domain_parts.next_back().unwrap(),",
                            "                    base = domain_parts.next_back().unwrap()",
                            "                );",
                            "                if is_valid_domain(&base_domain) {",
                            "                    let sslbase = format!(\"https://{base_domain}\");",
                            "                    let httpbase = format!(\"http://{base_domain}\");",
                            "                    debug!(\"[get_icon_url]: Trying without subdomains '{base_domain}'\");",
                            "",
                            "                    sub_resp = get_page(&sslbase).or_else(|_| get_page(&httpbase)).await;",
                            "                }"
                        ]
                    },
                    {
                        "line_numbers": [
                            517,
                            518,
                            519,
                            520,
                            521,
                            522,
                            523
                        ],
                        "comments": {},
                        "lines": [
                            "            // When the domain is not an IP, and has less then 2 dots, try to add www. infront of it.",
                            "            } else if is_ip.is_err() && domain.matches('.').count() < 2 {",
                            "                let www_domain = format!(\"www.{domain}\");",
                            "                if is_valid_domain(&www_domain) {",
                            "                    let sslwww = format!(\"https://{www_domain}\");",
                            "                    let httpwww = format!(\"http://{www_domain}\");",
                            "                    debug!(\"[get_icon_url]: Trying with www. prefix '{www_domain}'\");"
                        ]
                    },
                    {
                        "line_numbers": [
                            525
                        ],
                        "comments": {},
                        "lines": [
                            "                    sub_resp = get_page(&sslwww).or_else(|_| get_page(&httpwww)).await;"
                        ]
                    },
                    {
                        "line_numbers": [
                            528
                        ],
                        "comments": {},
                        "lines": [
                            "            sub_resp"
                        ]
                    },
                    {
                        "line_numbers": [
                            576,
                            577,
                            578,
                            579,
                            580,
                            581
                        ],
                        "comments": {},
                        "lines": [
                            "    match check_domain_blacklist_reason(url::Url::parse(url).unwrap().host_str().unwrap_or_default()).await {",
                            "        Some(DomainBlacklistReason::Regex) => warn!(\"Favicon '{}' is from a blacklisted domain!\", url),",
                            "        Some(DomainBlacklistReason::IP) => warn!(\"Favicon '{}' is hosted on a non-global IP!\", url),",
                            "        None => (),",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            587,
                            588,
                            589,
                            590
                        ],
                        "comments": {},
                        "lines": [
                            "    match client.send().await {",
                            "        Ok(c) => c.error_for_status().map_err(Into::into),",
                            "        Err(e) => err_silent!(format!(\"{e}\")),",
                            "    }"
                        ]
                    },
                    {
                        "line_numbers": [
                            673,
                            674,
                            675,
                            676,
                            677,
                            678
                        ],
                        "comments": {},
                        "lines": [
                            "    match check_domain_blacklist_reason(domain).await {",
                            "        Some(DomainBlacklistReason::Regex) => err_silent!(\"Domain is blacklisted\", domain),",
                            "        Some(DomainBlacklistReason::IP) => err_silent!(\"Host resolves to a non-global IP\", domain),",
                            "        None => (),",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            714,
                            715,
                            716,
                            717,
                            718,
                            719,
                            720,
                            721,
                            722,
                            723,
                            724,
                            725,
                            726,
                            727,
                            728,
                            729
                        ],
                        "comments": {},
                        "lines": [
                            "            match get_page_with_referer(&icon.href, &icon_result.referer).await {",
                            "                Ok(res) => {",
                            "                    buffer = stream_to_bytes_limit(res, 5120 * 1024).await?; // 5120KB/5MB for each icon max (Same as icons.bitwarden.net)",
                            "",
                            "                    // Check if the icon type is allowed, else try an icon from the list.",
                            "                    icon_type = get_icon_type(&buffer);",
                            "                    if icon_type.is_none() {",
                            "                        buffer.clear();",
                            "                        debug!(\"Icon from {}, is not a valid image type\", icon.href);",
                            "                        continue;",
                            "                    }",
                            "                    info!(\"Downloaded icon from {}\", icon.href);",
                            "                    break;",
                            "                }",
                            "                Err(e) => debug!(\"{:?}\", e),",
                            "            };"
                        ]
                    }
                ]
            },
            "comment_added_diff": {
                "152": "    // Compiled domain blacklist",
                "156": "    // If the stored regex is up to date, use it",
                "163": "    // If we don't have a regex stored, or it's not up to date, recreate it",
                "198": "            // If this error comes from the custom resolver, this means this is a blacklisted domain",
                "199": "            // or non global IP, don't save the miss file in this case to avoid leaking it",
                "354": "    // First check the domain as given during the request for HTTPS.",
                "357": "            // If we get an error that is not caused by the blacklist, we retry with HTTP",
                "360": "                    // When the domain is not an IP, and has more then one dot, remove all subdomains.",
                "370": "                            let sslbase = format!(\"https://{base_domain}\");",
                "371": "                            let httpbase = format!(\"http://{base_domain}\");",
                "377": "                    // When the domain is not an IP, and has less then 2 dots, try to add www. infront of it.",
                "381": "                            let sslwww = format!(\"https://{www_domain}\");",
                "382": "                            let httpwww = format!(\"http://{www_domain}\");",
                "394": "        // If we get a result or a blacklist error, just continue",
                "567": "            buffer = stream_to_bytes_limit(res, 5120 * 1024).await?; // 5120KB/5MB for each icon max (Same as icons.bitwarden.net)",
                "569": "            // Check if the icon type is allowed, else try an icon from the list."
            },
            "comment_deleted_diff": {
                "67": "                .pool_max_idle_per_host(5) // Configure the Hyper Pool to only have max 5 idle connections",
                "68": "                .pool_idle_timeout(pool_idle_timeout) // Configure the Hyper Pool to timeout after 10 seconds",
                "80": "// Special HashMap which holds the user defined Regex to speedup matching the regex.",
                "169": "/// TODO: This is extracted from IpAddr::is_global, which is unstable:",
                "170": "/// https://doc.rust-lang.org/nightly/std/net/enum.IpAddr.html#method.is_global",
                "171": "/// Remove once https://github.com/rust-lang/rust/issues/27709 is merged",
                "177": "            // check if this address is 192.0.0.9 or 192.0.0.10. These addresses are the only two",
                "178": "            // globally routable addresses in the 192.0.0.0/24 range.",
                "191": "            // Make sure the address is not in 0.0.0.0/8",
                "214": "/// These are some tests to check that the implementations match",
                "215": "/// The IPv4 can be all checked in 5 mins or so and they are correct as of nightly 2020-07-11",
                "216": "/// The IPV6 can't be checked in a reasonable time, so we check  about ten billion random ones, so far correct",
                "217": "/// Note that the is_global implementation is subject to change as new IP RFCs are created",
                "218": "///",
                "219": "/// To run while showing progress output:",
                "220": "/// cargo test --features sqlite,unstable -- --nocapture --ignored",
                "277": "    // First check the blacklist regex if there is a match.",
                "278": "    // This prevents the blocked domain(s) from being leaked via a DNS lookup.",
                "280": "        // Use the pre-generate Regex stored in a Lazy HashMap if there's one, else generate it.",
                "284": "            // Clear the current list if the previous key doesn't exists.",
                "285": "            // To prevent growing of the HashMap after someone has changed it via the admin interface.",
                "290": "            // Generate the regex to store in too the Lazy Static HashMap.",
                "494": "    // First check the domain as given during the request for both HTTPS and HTTP.",
                "500": "            // When the domain is not an IP, and has more then one dot, remove all subdomains.",
                "510": "                    let sslbase = format!(\"https://{base_domain}\");",
                "511": "                    let httpbase = format!(\"http://{base_domain}\");",
                "517": "            // When the domain is not an IP, and has less then 2 dots, try to add www. infront of it.",
                "521": "                    let sslwww = format!(\"https://{www_domain}\");",
                "522": "                    let httpwww = format!(\"http://{www_domain}\");",
                "716": "                    buffer = stream_to_bytes_limit(res, 5120 * 1024).await?; // 5120KB/5MB for each icon max (Same as icons.bitwarden.net)",
                "718": "                    // Check if the icon type is allowed, else try an icon from the list."
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "035f694d2f94df5203bec6c0af951f78fcc888c2",
            "timestamp": "2024-07-12T22:33:11+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improved HTTP client (#4740)\n\n* Improved HTTP client\r\n\r\n* Change config compat to use auto, rename blacklist\r\n\r\n* Fix wrong doc references",
            "additions": 17,
            "deletions": 31,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            186
                        ],
                        "comments": {
                            "184": "            // If this error comes from the custom resolver, this means this is a blocked domain"
                        },
                        "lines": [
                            "            if let Some(error) = CustomHttpClientError::downcast_ref(&e) {"
                        ]
                    },
                    {
                        "line_numbers": [
                            342
                        ],
                        "comments": {},
                        "lines": [
                            "        Err(e) if CustomHttpClientError::downcast_ref(&e).is_none() => {"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "184": "            // If this error comes from the custom resolver, this means this is a blocked domain"
            },
            "comment_deleted_diff": {
                "152": "    // Compiled domain blacklist",
                "156": "    // If the stored regex is up to date, use it",
                "163": "    // If we don't have a regex stored, or it's not up to date, recreate it",
                "198": "            // If this error comes from the custom resolver, this means this is a blacklisted domain"
            },
            "comment_modified_diff": {}
        },
        {
            "commit": "040e2a7bb0f2cc5012d46ca99283cf21fa06ed1a",
            "timestamp": "2024-09-23T20:25:32+02:00",
            "author": "Mathijs van Veluw",
            "commit_message": "Add extra linting (#4977)\n\n* Add extra linting\r\n\r\nAdded extra linting for some code styles.\r\nAlso added the Rust Edition 2024 lints.\r\n\r\nCloses #4974\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n* Adjusted according to comments\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 10,
            "deletions": 10,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "473": "        // Change priority by file extension"
            },
            "comment_modified_diff": {}
        }
    ],
    "yubikey.rs": [],
    "jdenticon-3.3.0.js": [],
    "hadolint.yml": [],
    "trivy.yml": [],
    "folders.rs": [],
    "duo.rs": [
        {
            "commit": "3466a8040e33c8ac359fed99f3542ed5ed6603fa",
            "timestamp": "2024-08-17T22:48:59+02:00",
            "author": "Timshel",
            "commit_message": "Remove unecessary email normalization (#4840)",
            "additions": 0,
            "deletions": 4,
            "change_type": "MODIFY",
            "diff": {
                "added": [],
                "deleted": []
            },
            "comment_added_diff": {},
            "comment_deleted_diff": {
                "284": "    // email is as entered by the user, so it needs to be normalized before",
                "285": "    // comparison with auth_user below."
            },
            "comment_modified_diff": {}
        }
    ],
    "folder.rs": [],
    "global_domains.json": [],
    "http_client.rs": [
        {
            "commit": "035f694d2f94df5203bec6c0af951f78fcc888c2",
            "timestamp": "2024-07-12T22:33:11+02:00",
            "author": "Daniel Garc\u00eda",
            "commit_message": "Improved HTTP client (#4740)\n\n* Improved HTTP client\r\n\r\n* Change config compat to use auto, rename blacklist\r\n\r\n* Fix wrong doc references",
            "additions": 246,
            "deletions": 0,
            "change_type": "ADD",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            89,
                            90,
                            91,
                            92,
                            93,
                            94
                        ],
                        "comments": {
                            "88": "    // If the stored regex is up to date, use it"
                        },
                        "lines": [
                            "    if let Some((value, regex)) = &*guard {",
                            "        if value == &block_regex {",
                            "            return regex.is_match(domain_or_ip);",
                            "        }",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            96,
                            97,
                            98,
                            99,
                            100,
                            101,
                            102,
                            103,
                            104,
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112,
                            113,
                            114,
                            115,
                            116,
                            117,
                            118,
                            119,
                            120,
                            121,
                            122,
                            123,
                            124,
                            125,
                            126,
                            127,
                            128,
                            129,
                            130,
                            131,
                            132,
                            133,
                            134,
                            135,
                            136,
                            137,
                            138,
                            139,
                            140,
                            141,
                            142,
                            143,
                            144,
                            145,
                            146,
                            147,
                            148,
                            149,
                            150,
                            151,
                            152,
                            153,
                            154,
                            155,
                            156,
                            157,
                            158,
                            159,
                            160,
                            161,
                            162,
                            163,
                            164,
                            165,
                            166,
                            167,
                            168,
                            169,
                            170,
                            171,
                            172,
                            173,
                            174,
                            175,
                            176,
                            177,
                            178,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185,
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192,
                            193,
                            194,
                            195,
                            196,
                            197,
                            198
                        ],
                        "comments": {
                            "95": "    // If we don't have a regex stored, or it's not up to date, recreate it"
                        },
                        "lines": [
                            "    let regex = Regex::new(&block_regex).unwrap();",
                            "    let is_match = regex.is_match(domain_or_ip);",
                            "    *guard = Some((block_regex, regex));",
                            "",
                            "    is_match",
                            "}",
                            "",
                            "fn should_block_host(host: Host<&str>) -> Result<(), CustomHttpClientError> {",
                            "    let (ip, host_str): (Option<IpAddr>, String) = match host {",
                            "        url::Host::Ipv4(ip) => (Some(ip.into()), ip.to_string()),",
                            "        url::Host::Ipv6(ip) => (Some(ip.into()), ip.to_string()),",
                            "        url::Host::Domain(d) => (None, d.to_string()),",
                            "    };",
                            "",
                            "    if let Some(ip) = ip {",
                            "        if should_block_ip(ip) {",
                            "            return Err(CustomHttpClientError::NonGlobalIp {",
                            "                domain: None,",
                            "                ip,",
                            "            });",
                            "        }",
                            "    }",
                            "",
                            "    if should_block_address_regex(&host_str) {",
                            "        return Err(CustomHttpClientError::Blocked {",
                            "            domain: host_str,",
                            "        });",
                            "    }",
                            "",
                            "    Ok(())",
                            "}",
                            "",
                            "#[derive(Debug, Clone)]",
                            "pub enum CustomHttpClientError {",
                            "    Blocked {",
                            "        domain: String,",
                            "    },",
                            "    NonGlobalIp {",
                            "        domain: Option<String>,",
                            "        ip: IpAddr,",
                            "    },",
                            "}",
                            "",
                            "impl CustomHttpClientError {",
                            "    pub fn downcast_ref(e: &dyn std::error::Error) -> Option<&Self> {",
                            "        let mut source = e.source();",
                            "",
                            "        while let Some(err) = source {",
                            "            source = err.source();",
                            "            if let Some(err) = err.downcast_ref::<CustomHttpClientError>() {",
                            "                return Some(err);",
                            "            }",
                            "        }",
                            "        None",
                            "    }",
                            "}",
                            "",
                            "impl fmt::Display for CustomHttpClientError {",
                            "    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                            "        match self {",
                            "            Self::Blocked {",
                            "                domain,",
                            "            } => write!(f, \"Blocked domain: {domain} matched HTTP_REQUEST_BLOCK_REGEX\"),",
                            "            Self::NonGlobalIp {",
                            "                domain: Some(domain),",
                            "                ip,",
                            "            } => write!(f, \"IP {ip} for domain '{domain}' is not a global IP!\"),",
                            "            Self::NonGlobalIp {",
                            "                domain: None,",
                            "                ip,",
                            "            } => write!(f, \"IP {ip} is not a global IP!\"),",
                            "        }",
                            "    }",
                            "}",
                            "",
                            "impl std::error::Error for CustomHttpClientError {}",
                            "",
                            "#[derive(Debug, Clone)]",
                            "enum CustomDnsResolver {",
                            "    Default(),",
                            "    Hickory(Arc<TokioAsyncResolver>),",
                            "}",
                            "type BoxError = Box<dyn std::error::Error + Send + Sync>;",
                            "",
                            "impl CustomDnsResolver {",
                            "    fn instance() -> Arc<Self> {",
                            "        static INSTANCE: Lazy<Arc<CustomDnsResolver>> = Lazy::new(CustomDnsResolver::new);",
                            "        Arc::clone(&*INSTANCE)",
                            "    }",
                            "",
                            "    fn new() -> Arc<Self> {",
                            "        match read_system_conf() {",
                            "            Ok((config, opts)) => {",
                            "                let resolver = TokioAsyncResolver::tokio(config.clone(), opts.clone());",
                            "                Arc::new(Self::Hickory(Arc::new(resolver)))",
                            "            }",
                            "            Err(e) => {",
                            "                warn!(\"Error creating Hickory resolver, falling back to default: {e:?}\");",
                            "                Arc::new(Self::Default())",
                            "            }",
                            "        }",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208,
                            209,
                            210,
                            211,
                            212,
                            213,
                            214,
                            215,
                            216,
                            217,
                            218,
                            219,
                            220,
                            221,
                            222,
                            223,
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235,
                            236,
                            237,
                            238,
                            239,
                            240,
                            241,
                            242,
                            243,
                            244,
                            245,
                            246
                        ],
                        "comments": {
                            "199": "    // Note that we get an iterator of addresses, but we only grab the first one for convenience"
                        },
                        "lines": [
                            "    async fn resolve_domain(&self, name: &str) -> Result<Option<SocketAddr>, BoxError> {",
                            "        pre_resolve(name)?;",
                            "",
                            "        let result = match self {",
                            "            Self::Default() => tokio::net::lookup_host(name).await?.next(),",
                            "            Self::Hickory(r) => r.lookup_ip(name).await?.iter().next().map(|a| SocketAddr::new(a, 0)),",
                            "        };",
                            "",
                            "        if let Some(addr) = &result {",
                            "            post_resolve(name, addr.ip())?;",
                            "        }",
                            "",
                            "        Ok(result)",
                            "    }",
                            "}",
                            "",
                            "fn pre_resolve(name: &str) -> Result<(), CustomHttpClientError> {",
                            "    if should_block_address(name) {",
                            "        return Err(CustomHttpClientError::Blocked {",
                            "            domain: name.to_string(),",
                            "        });",
                            "    }",
                            "",
                            "    Ok(())",
                            "}",
                            "",
                            "fn post_resolve(name: &str, ip: IpAddr) -> Result<(), CustomHttpClientError> {",
                            "    if should_block_ip(ip) {",
                            "        Err(CustomHttpClientError::NonGlobalIp {",
                            "            domain: Some(name.to_string()),",
                            "            ip,",
                            "        })",
                            "    } else {",
                            "        Ok(())",
                            "    }",
                            "}",
                            "",
                            "impl Resolve for CustomDnsResolver {",
                            "    fn resolve(&self, name: Name) -> Resolving {",
                            "        let this = self.clone();",
                            "        Box::pin(async move {",
                            "            let name = name.as_str();",
                            "            let result = this.resolve_domain(name).await?;",
                            "            Ok::<reqwest::dns::Addrs, _>(Box::new(result.into_iter()))",
                            "        })",
                            "    }",
                            "}"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "88": "    // If the stored regex is up to date, use it",
                "95": "    // If we don't have a regex stored, or it's not up to date, recreate it",
                "199": "    // Note that we get an iterator of addresses, but we only grab the first one for convenience"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "admin.js": [],
    "admin_settings.js": [],
    "admin_users.js": [],
    "duo_oidc.rs": [
        {
            "commit": "b4b2701905752f90080dd46ba10a90c5c584a38e",
            "timestamp": "2024-07-24T16:50:35+02:00",
            "author": "0x0fbc",
            "commit_message": "Add support for MFA with Duo's Universal Prompt (#4637)\n\n* Add initial working Duo Universal Prompt support.\r\n\r\n* Add db schema and models for Duo 2FA state storage\r\n\r\n* store duo states in the database and validate during authentication\r\n\r\n* cleanup & comments\r\n\r\n* bump state/nonce length\r\n\r\n* replace stray use of TimeDelta\r\n\r\n* more cleanup\r\n\r\n* bind Duo oauth flow to device id, drop redundant device type handling\r\n\r\n* drop redundant alphanum string generation code\r\n\r\n* error handling cleanup\r\n\r\n* directly use JWT_VALIDITY_SECS constant instead of copying it to DuoClient instances\r\n\r\n* remove redundant explicit returns, rustfmt\r\n\r\n* rearrange constants, update comments, error message\r\n\r\n* override charset on duo state column to ascii for mysql\r\n\r\n* Reduce twofactor_duo_ctx state/nonce column size in postgres and maria\r\n\r\n* Add fixes suggested by clippy\r\n\r\n* rustfmt\r\n\r\n* Update to use the make_http_request\r\n\r\n* Don't handle OrganizationDuo\r\n\r\n* move Duo API endpoint fmt strings out of macros and into format! calls\r\n\r\n* Add missing indentation\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>\r\n\r\n* remove redundant expiry check when purging Duo contexts\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 500,
            "deletions": 0,
            "change_type": "ADD",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            25,
                            26
                        ],
                        "comments": {
                            "22": "// The location on this service that Duo should redirect users to. For us, this is a bridge",
                            "23": "// built in to the Bitwarden clients.",
                            "24": "// See: https://github.com/bitwarden/clients/blob/main/apps/web/src/connectors/duo-redirect.ts"
                        },
                        "lines": [
                            "const DUO_REDIRECT_LOCATION: &str = \"duo-redirect-connector.html\";",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            28,
                            29
                        ],
                        "comments": {
                            "27": "// Number of seconds that a JWT we generate for Duo should be valid for."
                        },
                        "lines": [
                            "const JWT_VALIDITY_SECS: i64 = 300;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            31,
                            32
                        ],
                        "comments": {
                            "30": "// Number of seconds that a Duo context stored in the database should be valid for."
                        },
                        "lines": [
                            "const CTX_VALIDITY_SECS: i64 = 300;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            34,
                            35
                        ],
                        "comments": {
                            "33": "// Expected algorithm used by Duo to sign JWTs."
                        },
                        "lines": [
                            "const DUO_RESP_SIGNATURE_ALG: Algorithm = Algorithm::HS512;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            37,
                            38
                        ],
                        "comments": {
                            "36": "// Signature algorithm we're using to sign JWTs for Duo. Must be either HS512 or HS256."
                        },
                        "lines": [
                            "const JWT_SIGNATURE_ALG: Algorithm = Algorithm::HS512;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            42,
                            43
                        ],
                        "comments": {
                            "39": "// Size of random strings for state and nonce. Must be at least 16 characters and at most 1024 characters.",
                            "40": "// If increasing this above 64, also increase the size of the twofactor_duo_ctx.state and",
                            "41": "// twofactor_duo_ctx.nonce database columns for postgres and mariadb."
                        },
                        "lines": [
                            "const STATE_LENGTH: usize = 64;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54
                        ],
                        "comments": {
                            "44": "// client_assertion payload for health checks and obtaining MFA results."
                        },
                        "lines": [
                            "#[derive(Debug, Serialize, Deserialize)]",
                            "struct ClientAssertion {",
                            "    pub iss: String,",
                            "    pub sub: String,",
                            "    pub aud: String,",
                            "    pub exp: i64,",
                            "    pub jti: String,",
                            "    pub iat: i64,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            56,
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69
                        ],
                        "comments": {
                            "55": "// authorization request payload sent with clients to Duo for MFA"
                        },
                        "lines": [
                            "#[derive(Debug, Serialize, Deserialize)]",
                            "struct AuthorizationRequest {",
                            "    pub response_type: String,",
                            "    pub scope: String,",
                            "    pub exp: i64,",
                            "    pub client_id: String,",
                            "    pub redirect_uri: String,",
                            "    pub state: String,",
                            "    pub duo_uname: String,",
                            "    pub iss: String,",
                            "    pub aud: String,",
                            "    pub nonce: String,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82
                        ],
                        "comments": {
                            "70": "// Duo service health check responses"
                        },
                        "lines": [
                            "#[derive(Debug, Serialize, Deserialize)]",
                            "#[serde(untagged)]",
                            "enum HealthCheckResponse {",
                            "    HealthOK {",
                            "        stat: String,",
                            "    },",
                            "    HealthFail {",
                            "        message: String,",
                            "        message_detail: String,",
                            "    },",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            84,
                            85
                        ],
                        "comments": {
                            "83": "// Outer structure of response when exchanging authz code for MFA results"
                        },
                        "lines": [
                            "#[derive(Debug, Serialize, Deserialize)]",
                            "struct IdTokenResponse {"
                        ]
                    },
                    {
                        "line_numbers": [
                            87,
                            88,
                            89,
                            90,
                            91
                        ],
                        "comments": {
                            "86": "    id_token: String, // IdTokenClaims"
                        },
                        "lines": [
                            "    access_token: String,",
                            "    expires_in: i64,",
                            "    token_type: String,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            93,
                            94,
                            95,
                            96,
                            97,
                            98
                        ],
                        "comments": {
                            "92": "// Inner structure of IdTokenResponse.id_token"
                        },
                        "lines": [
                            "#[derive(Debug, Serialize, Deserialize)]",
                            "struct IdTokenClaims {",
                            "    preferred_username: String,",
                            "    nonce: String,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            101
                        ],
                        "comments": {
                            "99": "// Duo OIDC Authorization Client",
                            "100": "// See https://duo.com/docs/oauthapi"
                        },
                        "lines": [
                            "struct DuoClient {"
                        ]
                    },
                    {
                        "line_numbers": [
                            106,
                            107,
                            108
                        ],
                        "comments": {
                            "102": "    client_id: String,     // Duo Client ID (DuoData.ik)",
                            "103": "    client_secret: String, // Duo Client Secret (DuoData.sk)",
                            "104": "    api_host: String,      // Duo API hostname (DuoData.host)",
                            "105": "    redirect_uri: String,  // URL in this application clients should call for MFA verification"
                        },
                        "lines": [
                            "}",
                            "",
                            "impl DuoClient {"
                        ]
                    },
                    {
                        "line_numbers": [
                            110,
                            111,
                            112,
                            113,
                            114,
                            115,
                            116,
                            117,
                            118
                        ],
                        "comments": {
                            "109": "    // Construct a new DuoClient"
                        },
                        "lines": [
                            "    fn new(client_id: String, client_secret: String, api_host: String, redirect_uri: String) -> DuoClient {",
                            "        DuoClient {",
                            "            client_id,",
                            "            client_secret,",
                            "            api_host,",
                            "            redirect_uri,",
                            "        }",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            120,
                            121,
                            122,
                            123,
                            124,
                            125,
                            126,
                            127,
                            128,
                            129,
                            130,
                            131,
                            132,
                            133
                        ],
                        "comments": {
                            "119": "    // Generate a client assertion for health checks and authorization code exchange."
                        },
                        "lines": [
                            "    fn new_client_assertion(&self, url: &str) -> ClientAssertion {",
                            "        let now = Utc::now().timestamp();",
                            "        let jwt_id = crypto::get_random_string_alphanum(STATE_LENGTH);",
                            "",
                            "        ClientAssertion {",
                            "            iss: self.client_id.clone(),",
                            "            sub: self.client_id.clone(),",
                            "            aud: url.to_string(),",
                            "            exp: now + JWT_VALIDITY_SECS,",
                            "            jti: jwt_id,",
                            "            iat: now,",
                            "        }",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            135,
                            136,
                            137,
                            138,
                            139,
                            140,
                            141,
                            142,
                            143,
                            144,
                            145
                        ],
                        "comments": {
                            "134": "    // Given a serde-serializable struct, attempt to encode it as a JWT"
                        },
                        "lines": [
                            "    fn encode_duo_jwt<T: Serialize>(&self, jwt_payload: T) -> Result<String, Error> {",
                            "        match jsonwebtoken::encode(",
                            "            &Header::new(JWT_SIGNATURE_ALG),",
                            "            &jwt_payload,",
                            "            &EncodingKey::from_secret(self.client_secret.as_bytes()),",
                            "        ) {",
                            "            Ok(token) => Ok(token),",
                            "            Err(e) => err!(format!(\"Error encoding Duo JWT: {e:?}\")),",
                            "        }",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            149,
                            150,
                            151,
                            152,
                            153,
                            154,
                            155,
                            156,
                            157,
                            158,
                            159,
                            160,
                            161,
                            162,
                            163,
                            164,
                            165,
                            166,
                            167,
                            168,
                            169,
                            170,
                            171,
                            172,
                            173,
                            174,
                            175,
                            176,
                            177,
                            178,
                            179,
                            180,
                            181,
                            182,
                            183,
                            184,
                            185,
                            186,
                            187,
                            188,
                            189,
                            190,
                            191,
                            192,
                            193,
                            194
                        ],
                        "comments": {
                            "146": "    // \"required\" health check to verify the integration is configured and Duo's services",
                            "147": "    // are up.",
                            "148": "    // https://duo.com/docs/oauthapi#health-check"
                        },
                        "lines": [
                            "    async fn health_check(&self) -> Result<(), Error> {",
                            "        let health_check_url: String = format!(\"https://{}/oauth/v1/health_check\", self.api_host);",
                            "",
                            "        let jwt_payload = self.new_client_assertion(&health_check_url);",
                            "",
                            "        let token = match self.encode_duo_jwt(jwt_payload) {",
                            "            Ok(token) => token,",
                            "            Err(e) => return Err(e),",
                            "        };",
                            "",
                            "        let mut post_body = HashMap::new();",
                            "        post_body.insert(\"client_assertion\", token);",
                            "        post_body.insert(\"client_id\", self.client_id.clone());",
                            "",
                            "        let res = match make_http_request(reqwest::Method::POST, &health_check_url)?",
                            "            .header(header::USER_AGENT, \"vaultwarden:Duo/2.0 (Rust)\")",
                            "            .form(&post_body)",
                            "            .send()",
                            "            .await",
                            "        {",
                            "            Ok(r) => r,",
                            "            Err(e) => err!(format!(\"Error requesting Duo health check: {e:?}\")),",
                            "        };",
                            "",
                            "        let response: HealthCheckResponse = match res.json::<HealthCheckResponse>().await {",
                            "            Ok(r) => r,",
                            "            Err(e) => err!(format!(\"Duo health check response decode error: {e:?}\")),",
                            "        };",
                            "",
                            "        let health_stat: String = match response {",
                            "            HealthCheckResponse::HealthOK {",
                            "                stat,",
                            "            } => stat,",
                            "            HealthCheckResponse::HealthFail {",
                            "                message,",
                            "                message_detail,",
                            "            } => err!(format!(\"Duo health check FAIL response, msg: {}, detail: {}\", message, message_detail)),",
                            "        };",
                            "",
                            "        if health_stat != \"OK\" {",
                            "            err!(format!(\"Duo health check failed, got OK-like body with stat {health_stat}\"));",
                            "        }",
                            "",
                            "        Ok(())",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            198,
                            199,
                            200,
                            201,
                            202,
                            203,
                            204,
                            205,
                            206,
                            207,
                            208,
                            209,
                            210,
                            211,
                            212,
                            213,
                            214,
                            215,
                            216,
                            217,
                            218,
                            219,
                            220,
                            221,
                            222,
                            223,
                            224,
                            225,
                            226,
                            227,
                            228,
                            229,
                            230,
                            231,
                            232,
                            233,
                            234,
                            235
                        ],
                        "comments": {
                            "195": "    // Constructs the URL for the authorization request endpoint on Duo's service.",
                            "196": "    // Clients are sent here to continue authentication.",
                            "197": "    // https://duo.com/docs/oauthapi#authorization-request"
                        },
                        "lines": [
                            "    fn make_authz_req_url(&self, duo_username: &str, state: String, nonce: String) -> Result<String, Error> {",
                            "        let now = Utc::now().timestamp();",
                            "",
                            "        let jwt_payload = AuthorizationRequest {",
                            "            response_type: String::from(\"code\"),",
                            "            scope: String::from(\"openid\"),",
                            "            exp: now + JWT_VALIDITY_SECS,",
                            "            client_id: self.client_id.clone(),",
                            "            redirect_uri: self.redirect_uri.clone(),",
                            "            state,",
                            "            duo_uname: String::from(duo_username),",
                            "            iss: self.client_id.clone(),",
                            "            aud: format!(\"https://{}\", self.api_host),",
                            "            nonce,",
                            "        };",
                            "",
                            "        let token = match self.encode_duo_jwt(jwt_payload) {",
                            "            Ok(token) => token,",
                            "            Err(e) => return Err(e),",
                            "        };",
                            "",
                            "        let authz_endpoint = format!(\"https://{}/oauth/v1/authorize\", self.api_host);",
                            "        let mut auth_url = match Url::parse(authz_endpoint.as_str()) {",
                            "            Ok(url) => url,",
                            "            Err(e) => err!(format!(\"Error parsing Duo authorization URL: {e:?}\")),",
                            "        };",
                            "",
                            "        {",
                            "            let mut query_params = auth_url.query_pairs_mut();",
                            "            query_params.append_pair(\"response_type\", \"code\");",
                            "            query_params.append_pair(\"client_id\", self.client_id.as_str());",
                            "            query_params.append_pair(\"request\", token.as_str());",
                            "        }",
                            "",
                            "        let final_auth_url = auth_url.to_string();",
                            "        Ok(final_auth_url)",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            239,
                            240,
                            241,
                            242,
                            243,
                            244,
                            245,
                            246,
                            247,
                            248,
                            249,
                            250,
                            251,
                            252,
                            253,
                            254,
                            255,
                            256,
                            257,
                            258,
                            259,
                            260,
                            261
                        ],
                        "comments": {
                            "236": "    // Exchange the authorization code obtained from an access token provided by the user",
                            "237": "    // for the result of the MFA and validate.",
                            "238": "    // See: https://duo.com/docs/oauthapi#access-token (under Response Format)"
                        },
                        "lines": [
                            "    async fn exchange_authz_code_for_result(",
                            "        &self,",
                            "        duo_code: &str,",
                            "        duo_username: &str,",
                            "        nonce: &str,",
                            "    ) -> Result<(), Error> {",
                            "        if duo_code.is_empty() {",
                            "            err!(\"Empty Duo authorization code\")",
                            "        }",
                            "",
                            "        let token_url = format!(\"https://{}/oauth/v1/token\", self.api_host);",
                            "",
                            "        let jwt_payload = self.new_client_assertion(&token_url);",
                            "",
                            "        let token = match self.encode_duo_jwt(jwt_payload) {",
                            "            Ok(token) => token,",
                            "            Err(e) => return Err(e),",
                            "        };",
                            "",
                            "        let mut post_body = HashMap::new();",
                            "        post_body.insert(\"grant_type\", String::from(\"authorization_code\"));",
                            "        post_body.insert(\"code\", String::from(duo_code));",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            263,
                            264,
                            265,
                            266,
                            267,
                            268,
                            269,
                            270,
                            271,
                            272,
                            273,
                            274,
                            275,
                            276,
                            277,
                            278,
                            279,
                            280,
                            281,
                            282,
                            283,
                            284,
                            285,
                            286,
                            287,
                            288,
                            289,
                            290,
                            291,
                            292,
                            293,
                            294,
                            295,
                            296,
                            297,
                            298,
                            299,
                            300,
                            301,
                            302,
                            303,
                            304,
                            305,
                            306,
                            307,
                            308,
                            309,
                            310,
                            311,
                            312,
                            313,
                            314,
                            315,
                            316,
                            317,
                            318,
                            319,
                            320
                        ],
                        "comments": {
                            "262": "        // Must be the same URL that was supplied in the authorization request for the supplied duo_code"
                        },
                        "lines": [
                            "        post_body.insert(\"redirect_uri\", self.redirect_uri.clone());",
                            "",
                            "        post_body",
                            "            .insert(\"client_assertion_type\", String::from(\"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"));",
                            "        post_body.insert(\"client_assertion\", token);",
                            "",
                            "        let res = match make_http_request(reqwest::Method::POST, &token_url)?",
                            "            .header(header::USER_AGENT, \"vaultwarden:Duo/2.0 (Rust)\")",
                            "            .form(&post_body)",
                            "            .send()",
                            "            .await",
                            "        {",
                            "            Ok(r) => r,",
                            "            Err(e) => err!(format!(\"Error exchanging Duo code: {e:?}\")),",
                            "        };",
                            "",
                            "        let status_code = res.status();",
                            "        if status_code != StatusCode::OK {",
                            "            err!(format!(\"Failure response from Duo: {}\", status_code))",
                            "        }",
                            "",
                            "        let response: IdTokenResponse = match res.json::<IdTokenResponse>().await {",
                            "            Ok(r) => r,",
                            "            Err(e) => err!(format!(\"Error decoding ID token response: {e:?}\")),",
                            "        };",
                            "",
                            "        let mut validation = Validation::new(DUO_RESP_SIGNATURE_ALG);",
                            "        validation.set_required_spec_claims(&[\"exp\", \"aud\", \"iss\"]);",
                            "        validation.set_audience(&[&self.client_id]);",
                            "        validation.set_issuer(&[token_url.as_str()]);",
                            "",
                            "        let token_data = match jsonwebtoken::decode::<IdTokenClaims>(",
                            "            &response.id_token,",
                            "            &DecodingKey::from_secret(self.client_secret.as_bytes()),",
                            "            &validation,",
                            "        ) {",
                            "            Ok(c) => c,",
                            "            Err(e) => err!(format!(\"Failed to decode Duo token {e:?}\")),",
                            "        };",
                            "",
                            "        let matching_nonces = crypto::ct_eq(nonce, &token_data.claims.nonce);",
                            "        let matching_usernames = crypto::ct_eq(duo_username, &token_data.claims.preferred_username);",
                            "",
                            "        if !(matching_nonces && matching_usernames) {",
                            "            err!(\"Error validating Duo authorization, nonce or username mismatch.\")",
                            "        };",
                            "",
                            "        Ok(())",
                            "    }",
                            "}",
                            "",
                            "struct DuoAuthContext {",
                            "    pub state: String,",
                            "    pub user_email: String,",
                            "    pub nonce: String,",
                            "    pub exp: i64,",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            323,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330,
                            331,
                            332,
                            333
                        ],
                        "comments": {
                            "321": "// Given a state string, retrieve the associated Duo auth context and",
                            "322": "// delete the retrieved state from the database."
                        },
                        "lines": [
                            "async fn extract_context(state: &str, conn: &mut DbConn) -> Option<DuoAuthContext> {",
                            "    let ctx: TwoFactorDuoContext = match TwoFactorDuoContext::find_by_state(state, conn).await {",
                            "        Some(c) => c,",
                            "        None => return None,",
                            "    };",
                            "",
                            "    if ctx.exp < Utc::now().timestamp() {",
                            "        ctx.delete(conn).await.ok();",
                            "        return None;",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            336,
                            337,
                            338,
                            339,
                            340,
                            341,
                            342,
                            343,
                            344,
                            345,
                            346
                        ],
                        "comments": {
                            "334": "    // Copy the context data, so that we can delete the context from",
                            "335": "    // the database before returning."
                        },
                        "lines": [
                            "    let ret_ctx = DuoAuthContext {",
                            "        state: ctx.state.clone(),",
                            "        user_email: ctx.user_email.clone(),",
                            "        nonce: ctx.nonce.clone(),",
                            "        exp: ctx.exp,",
                            "    };",
                            "",
                            "    ctx.delete(conn).await.ok();",
                            "    Some(ret_ctx)",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            348,
                            349,
                            350,
                            351,
                            352,
                            353,
                            354,
                            355,
                            356
                        ],
                        "comments": {
                            "347": "// Task to clean up expired Duo authentication contexts that may have accumulated in the database."
                        },
                        "lines": [
                            "pub async fn purge_duo_contexts(pool: DbPool) {",
                            "    debug!(\"Purging Duo authentication contexts\");",
                            "    if let Ok(mut conn) = pool.get().await {",
                            "        TwoFactorDuoContext::purge_expired_duo_contexts(&mut conn).await;",
                            "    } else {",
                            "        error!(\"Failed to get DB connection while purging expired Duo authentications\")",
                            "    }",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            358
                        ],
                        "comments": {
                            "357": "// Construct the url that Duo should redirect users to."
                        },
                        "lines": [
                            "fn make_callback_url(client_name: &str) -> Result<String, Error> {"
                        ]
                    },
                    {
                        "line_numbers": [
                            360,
                            361,
                            362,
                            363,
                            364
                        ],
                        "comments": {
                            "359": "    // Get the location of this application as defined in the config."
                        },
                        "lines": [
                            "    let base = match Url::parse(CONFIG.domain().as_str()) {",
                            "        Ok(url) => url,",
                            "        Err(e) => err!(format!(\"Error parsing configured domain URL (check your domain configuration): {e:?}\")),",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            366,
                            367,
                            368,
                            369,
                            370
                        ],
                        "comments": {
                            "365": "    // Add the client redirect bridge location"
                        },
                        "lines": [
                            "    let mut callback = match base.join(DUO_REDIRECT_LOCATION) {",
                            "        Ok(url) => url,",
                            "        Err(e) => err!(format!(\"Error constructing Duo redirect URL (check your domain configuration): {e:?}\")),",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            373,
                            374,
                            375,
                            376,
                            377,
                            378,
                            379
                        ],
                        "comments": {
                            "371": "    // Add the 'client' string with the authenticating device type. The callback connector uses this",
                            "372": "    // information to figure out how it should handle certain clients."
                        },
                        "lines": [
                            "    {",
                            "        let mut query_params = callback.query_pairs_mut();",
                            "        query_params.append_pair(\"client\", client_name);",
                            "    }",
                            "    Ok(callback.to_string())",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            382,
                            383,
                            384,
                            385,
                            386,
                            387,
                            388,
                            389,
                            390,
                            391,
                            392,
                            393,
                            394,
                            395,
                            396,
                            397,
                            398,
                            399,
                            400,
                            401
                        ],
                        "comments": {
                            "380": "// Pre-redirect first stage of the Duo OIDC authentication flow.",
                            "381": "// Returns the \"AuthUrl\" that should be returned to clients for MFA."
                        },
                        "lines": [
                            "pub async fn get_duo_auth_url(",
                            "    email: &str,",
                            "    client_id: &str,",
                            "    device_identifier: &String,",
                            "    conn: &mut DbConn,",
                            ") -> Result<String, Error> {",
                            "    let (ik, sk, _, host) = get_duo_keys_email(email, conn).await?;",
                            "",
                            "    let callback_url = match make_callback_url(client_id) {",
                            "        Ok(url) => url,",
                            "        Err(e) => return Err(e),",
                            "    };",
                            "",
                            "    let client = DuoClient::new(ik, sk, host, callback_url);",
                            "",
                            "    match client.health_check().await {",
                            "        Ok(()) => {}",
                            "        Err(e) => return Err(e),",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            403,
                            404,
                            405
                        ],
                        "comments": {
                            "402": "    // Generate random OAuth2 state and OIDC Nonce"
                        },
                        "lines": [
                            "    let state: String = crypto::get_random_string_alphanum(STATE_LENGTH);",
                            "    let nonce: String = crypto::get_random_string_alphanum(STATE_LENGTH);",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            408,
                            409,
                            410,
                            411,
                            412,
                            413,
                            414,
                            415,
                            416
                        ],
                        "comments": {
                            "406": "    // Bind the nonce to the device that's currently authing by hashing the nonce and device id",
                            "407": "    // and sending the result as the OIDC nonce."
                        },
                        "lines": [
                            "    let d: Digest = digest(&SHA512_256, format!(\"{nonce}{device_identifier}\").as_bytes());",
                            "    let hash: String = HEXLOWER.encode(d.as_ref());",
                            "",
                            "    match TwoFactorDuoContext::save(state.as_str(), email, nonce.as_str(), CTX_VALIDITY_SECS, conn).await {",
                            "        Ok(()) => client.make_authz_req_url(email, state, hash),",
                            "        Err(e) => err!(format!(\"Error saving Duo authentication context: {e:?}\")),",
                            "    }",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            419,
                            420,
                            421,
                            422,
                            423,
                            424,
                            425,
                            426,
                            427
                        ],
                        "comments": {
                            "417": "// Post-redirect second stage of the Duo OIDC authentication flow.",
                            "418": "// Exchanges an authorization code for the MFA result with Duo's API and validates the result."
                        },
                        "lines": [
                            "pub async fn validate_duo_login(",
                            "    email: &str,",
                            "    two_factor_token: &str,",
                            "    client_id: &str,",
                            "    device_identifier: &str,",
                            "    conn: &mut DbConn,",
                            ") -> EmptyResult {",
                            "    let email = &email.to_lowercase();",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            429,
                            430,
                            431,
                            432,
                            433,
                            434,
                            435,
                            436,
                            437,
                            438,
                            439,
                            440,
                            441,
                            442,
                            443
                        ],
                        "comments": {
                            "428": "    // Result supplied to us by clients in the form \"<authz code>|<state>\""
                        },
                        "lines": [
                            "    let split: Vec<&str> = two_factor_token.split('|').collect();",
                            "    if split.len() != 2 {",
                            "        err!(",
                            "            \"Invalid response length\",",
                            "            ErrorEvent {",
                            "                event: EventType::UserFailedLogIn2fa",
                            "            }",
                            "        );",
                            "    }",
                            "",
                            "    let code = split[0];",
                            "    let state = split[1];",
                            "",
                            "    let (ik, sk, _, host) = get_duo_keys_email(email, conn).await?;",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            446,
                            447,
                            448,
                            449,
                            450,
                            451,
                            452,
                            453,
                            454,
                            455,
                            456,
                            457
                        ],
                        "comments": {
                            "444": "    // Get the context by the state reported by the client. If we don't have one,",
                            "445": "    // it means the context is either missing or expired."
                        },
                        "lines": [
                            "    let ctx = match extract_context(state, conn).await {",
                            "        Some(c) => c,",
                            "        None => {",
                            "            err!(",
                            "                \"Error validating duo authentication\",",
                            "                ErrorEvent {",
                            "                    event: EventType::UserFailedLogIn2fa",
                            "                }",
                            "            )",
                            "        }",
                            "    };",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            459,
                            460
                        ],
                        "comments": {
                            "458": "    // Context validation steps"
                        },
                        "lines": [
                            "    let matching_usernames = crypto::ct_eq(email, &ctx.user_email);",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            462,
                            463,
                            464,
                            465,
                            466,
                            467,
                            468,
                            469,
                            470,
                            471,
                            472,
                            473,
                            474,
                            475,
                            476,
                            477,
                            478,
                            479,
                            480,
                            481,
                            482,
                            483,
                            484,
                            485,
                            486,
                            487,
                            488,
                            489,
                            490,
                            491,
                            492,
                            493,
                            494,
                            495,
                            496,
                            497,
                            498,
                            499,
                            500
                        ],
                        "comments": {
                            "461": "    // Probably redundant, but we're double-checking them anyway."
                        },
                        "lines": [
                            "    let matching_states = crypto::ct_eq(state, &ctx.state);",
                            "    let unexpired_context = ctx.exp > Utc::now().timestamp();",
                            "",
                            "    if !(matching_usernames && matching_states && unexpired_context) {",
                            "        err!(",
                            "            \"Error validating duo authentication\",",
                            "            ErrorEvent {",
                            "                event: EventType::UserFailedLogIn2fa",
                            "            }",
                            "        )",
                            "    }",
                            "",
                            "    let callback_url = match make_callback_url(client_id) {",
                            "        Ok(url) => url,",
                            "        Err(e) => return Err(e),",
                            "    };",
                            "",
                            "    let client = DuoClient::new(ik, sk, host, callback_url);",
                            "",
                            "    match client.health_check().await {",
                            "        Ok(()) => {}",
                            "        Err(e) => return Err(e),",
                            "    };",
                            "",
                            "    let d: Digest = digest(&SHA512_256, format!(\"{}{}\", ctx.nonce, device_identifier).as_bytes());",
                            "    let hash: String = HEXLOWER.encode(d.as_ref());",
                            "",
                            "    match client.exchange_authz_code_for_result(code, email, hash.as_str()).await {",
                            "        Ok(_) => Ok(()),",
                            "        Err(_) => {",
                            "            err!(",
                            "                \"Error validating duo authentication\",",
                            "                ErrorEvent {",
                            "                    event: EventType::UserFailedLogIn2fa",
                            "                }",
                            "            )",
                            "        }",
                            "    }",
                            "}"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "22": "// The location on this service that Duo should redirect users to. For us, this is a bridge",
                "23": "// built in to the Bitwarden clients.",
                "24": "// See: https://github.com/bitwarden/clients/blob/main/apps/web/src/connectors/duo-redirect.ts",
                "27": "// Number of seconds that a JWT we generate for Duo should be valid for.",
                "30": "// Number of seconds that a Duo context stored in the database should be valid for.",
                "33": "// Expected algorithm used by Duo to sign JWTs.",
                "36": "// Signature algorithm we're using to sign JWTs for Duo. Must be either HS512 or HS256.",
                "39": "// Size of random strings for state and nonce. Must be at least 16 characters and at most 1024 characters.",
                "40": "// If increasing this above 64, also increase the size of the twofactor_duo_ctx.state and",
                "41": "// twofactor_duo_ctx.nonce database columns for postgres and mariadb.",
                "44": "// client_assertion payload for health checks and obtaining MFA results.",
                "55": "// authorization request payload sent with clients to Duo for MFA",
                "70": "// Duo service health check responses",
                "83": "// Outer structure of response when exchanging authz code for MFA results",
                "86": "    id_token: String, // IdTokenClaims",
                "92": "// Inner structure of IdTokenResponse.id_token",
                "99": "// Duo OIDC Authorization Client",
                "100": "// See https://duo.com/docs/oauthapi",
                "102": "    client_id: String,     // Duo Client ID (DuoData.ik)",
                "103": "    client_secret: String, // Duo Client Secret (DuoData.sk)",
                "104": "    api_host: String,      // Duo API hostname (DuoData.host)",
                "105": "    redirect_uri: String,  // URL in this application clients should call for MFA verification",
                "109": "    // Construct a new DuoClient",
                "119": "    // Generate a client assertion for health checks and authorization code exchange.",
                "134": "    // Given a serde-serializable struct, attempt to encode it as a JWT",
                "146": "    // \"required\" health check to verify the integration is configured and Duo's services",
                "147": "    // are up.",
                "148": "    // https://duo.com/docs/oauthapi#health-check",
                "150": "        let health_check_url: String = format!(\"https://{}/oauth/v1/health_check\", self.api_host);",
                "195": "    // Constructs the URL for the authorization request endpoint on Duo's service.",
                "196": "    // Clients are sent here to continue authentication.",
                "197": "    // https://duo.com/docs/oauthapi#authorization-request",
                "210": "            aud: format!(\"https://{}\", self.api_host),",
                "219": "        let authz_endpoint = format!(\"https://{}/oauth/v1/authorize\", self.api_host);",
                "236": "    // Exchange the authorization code obtained from an access token provided by the user",
                "237": "    // for the result of the MFA and validate.",
                "238": "    // See: https://duo.com/docs/oauthapi#access-token (under Response Format)",
                "249": "        let token_url = format!(\"https://{}/oauth/v1/token\", self.api_host);",
                "262": "        // Must be the same URL that was supplied in the authorization request for the supplied duo_code",
                "321": "// Given a state string, retrieve the associated Duo auth context and",
                "322": "// delete the retrieved state from the database.",
                "334": "    // Copy the context data, so that we can delete the context from",
                "335": "    // the database before returning.",
                "347": "// Task to clean up expired Duo authentication contexts that may have accumulated in the database.",
                "357": "// Construct the url that Duo should redirect users to.",
                "359": "    // Get the location of this application as defined in the config.",
                "365": "    // Add the client redirect bridge location",
                "371": "    // Add the 'client' string with the authenticating device type. The callback connector uses this",
                "372": "    // information to figure out how it should handle certain clients.",
                "380": "// Pre-redirect first stage of the Duo OIDC authentication flow.",
                "381": "// Returns the \"AuthUrl\" that should be returned to clients for MFA.",
                "402": "    // Generate random OAuth2 state and OIDC Nonce",
                "406": "    // Bind the nonce to the device that's currently authing by hashing the nonce and device id",
                "407": "    // and sending the result as the OIDC nonce.",
                "417": "// Post-redirect second stage of the Duo OIDC authentication flow.",
                "418": "// Exchanges an authorization code for the MFA result with Duo's API and validates the result.",
                "428": "    // Result supplied to us by clients in the form \"<authz code>|<state>\"",
                "444": "    // Get the context by the state reported by the client. If we don't have one,",
                "445": "    // it means the context is either missing or expired.",
                "458": "    // Context validation steps",
                "461": "    // Probably redundant, but we're double-checking them anyway."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "two_factor_duo_context.rs": [
        {
            "commit": "b4b2701905752f90080dd46ba10a90c5c584a38e",
            "timestamp": "2024-07-24T16:50:35+02:00",
            "author": "0x0fbc",
            "commit_message": "Add support for MFA with Duo's Universal Prompt (#4637)\n\n* Add initial working Duo Universal Prompt support.\r\n\r\n* Add db schema and models for Duo 2FA state storage\r\n\r\n* store duo states in the database and validate during authentication\r\n\r\n* cleanup & comments\r\n\r\n* bump state/nonce length\r\n\r\n* replace stray use of TimeDelta\r\n\r\n* more cleanup\r\n\r\n* bind Duo oauth flow to device id, drop redundant device type handling\r\n\r\n* drop redundant alphanum string generation code\r\n\r\n* error handling cleanup\r\n\r\n* directly use JWT_VALIDITY_SECS constant instead of copying it to DuoClient instances\r\n\r\n* remove redundant explicit returns, rustfmt\r\n\r\n* rearrange constants, update comments, error message\r\n\r\n* override charset on duo state column to ascii for mysql\r\n\r\n* Reduce twofactor_duo_ctx state/nonce column size in postgres and maria\r\n\r\n* Add fixes suggested by clippy\r\n\r\n* rustfmt\r\n\r\n* Update to use the make_http_request\r\n\r\n* Don't handle OrganizationDuo\r\n\r\n* move Duo API endpoint fmt strings out of macros and into format! calls\r\n\r\n* Add missing indentation\r\n\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>\r\n\r\n* remove redundant expiry check when purging Duo contexts\r\n\r\n---------\r\n\r\nCo-authored-by: BlackDex <black.dex@gmail.com>\r\nCo-authored-by: Daniel Garc\u00eda <dani-garcia@users.noreply.github.com>",
            "additions": 84,
            "deletions": 0,
            "change_type": "ADD",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            32,
                            33,
                            34,
                            35,
                            36,
                            37,
                            38,
                            39,
                            40,
                            41,
                            42,
                            43,
                            44,
                            45,
                            46,
                            47,
                            48,
                            49,
                            50,
                            51,
                            52,
                            53,
                            54,
                            55,
                            56,
                            57,
                            58,
                            59,
                            60,
                            61,
                            62,
                            63,
                            64,
                            65,
                            66,
                            67,
                            68,
                            69,
                            70,
                            71,
                            72,
                            73,
                            74,
                            75,
                            76,
                            77,
                            78,
                            79,
                            80,
                            81,
                            82,
                            83,
                            84
                        ],
                        "comments": {
                            "31": "        // A saved context should never be changed, only created or deleted."
                        },
                        "lines": [
                            "        let exists = Self::find_by_state(state, conn).await;",
                            "        if exists.is_some() {",
                            "            return Ok(());",
                            "        };",
                            "",
                            "        let exp = Utc::now().timestamp() + ttl;",
                            "",
                            "        db_run! {",
                            "            conn: {",
                            "                diesel::insert_into(twofactor_duo_ctx::table)",
                            "                    .values((",
                            "                        twofactor_duo_ctx::state.eq(state),",
                            "                        twofactor_duo_ctx::user_email.eq(user_email),",
                            "                        twofactor_duo_ctx::nonce.eq(nonce),",
                            "                        twofactor_duo_ctx::exp.eq(exp)",
                            "                ))",
                            "                .execute(conn)",
                            "                .map_res(\"Error saving context to twofactor_duo_ctx\")",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    pub async fn find_expired(conn: &mut DbConn) -> Vec<Self> {",
                            "        let now = Utc::now().timestamp();",
                            "        db_run! {",
                            "            conn: {",
                            "                twofactor_duo_ctx::table",
                            "                    .filter(twofactor_duo_ctx::exp.lt(now))",
                            "                    .load::<TwoFactorDuoContextDb>(conn)",
                            "                    .expect(\"Error finding expired contexts in twofactor_duo_ctx\")",
                            "                    .from_db()",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    pub async fn delete(&self, conn: &mut DbConn) -> EmptyResult {",
                            "        db_run! {",
                            "            conn: {",
                            "                diesel::delete(",
                            "                    twofactor_duo_ctx::table",
                            "                    .filter(twofactor_duo_ctx::state.eq(&self.state)))",
                            "                    .execute(conn)",
                            "                    .map_res(\"Error deleting from twofactor_duo_ctx\")",
                            "            }",
                            "        }",
                            "    }",
                            "",
                            "    pub async fn purge_expired_duo_contexts(conn: &mut DbConn) {",
                            "        for context in Self::find_expired(conn).await {",
                            "            context.delete(conn).await.ok();",
                            "        }",
                            "    }",
                            "}"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "31": "        // A saved context should never be changed, only created or deleted."
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        }
    ],
    "mail.rs": [
        {
            "commit": "248e561b3fe6a8172751374df980c6cd43c841d5",
            "timestamp": "2024-09-01T15:55:41+02:00",
            "author": "Timshel",
            "commit_message": "Add orgUserHasExistingUser parameters to org invite (#4827)",
            "additions": 30,
            "deletions": 11,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            271
                        ],
                        "comments": {
                            "270": "    // `url.Url` would place the anchor `#` after the query parameters"
                        },
                        "lines": [
                            "    let url = format!(\"{}/#/accept-organization/?{}\", CONFIG.domain(), query_string);"
                        ]
                    },
                    {
                        "line_numbers": [
                            275
                        ],
                        "comments": {},
                        "lines": [
                            "            \"url\": url,"
                        ]
                    },
                    {
                        "line_numbers": [
                            281
                        ],
                        "comments": {},
                        "lines": [
                            "    send_email(&user.email, &subject, body_html, body_text).await"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "247": "    let mut query = url::Url::parse(\"https://query.builder\").unwrap();",
                "270": "    // `url.Url` would place the anchor `#` after the query parameters"
            },
            "comment_deleted_diff": {},
            "comment_modified_diff": {}
        },
        {
            "commit": "20d9e885bfcd7df7828d92c6e59ed5fe7b40a879",
            "timestamp": "2024-11-10T23:56:19+01:00",
            "author": "BlackDex",
            "commit_message": "Update crates and fix several issues\n\nSigned-off-by: BlackDex <black.dex@gmail.com>",
            "additions": 48,
            "deletions": 9,
            "change_type": "MODIFY",
            "diff": {
                "added": [
                    {
                        "line_numbers": [
                            100,
                            101,
                            102,
                            103,
                            104,
                            105,
                            106,
                            107,
                            108,
                            109,
                            110,
                            111,
                            112,
                            113,
                            114,
                            115,
                            116,
                            117,
                            118,
                            119,
                            120
                        ],
                        "comments": {
                            "99": "// This will sanitize the string values by stripping all the html tags to prevent XSS and HTML Injections"
                        },
                        "lines": [
                            "fn sanitize_data(data: &mut serde_json::Value) {",
                            "    use regex::Regex;",
                            "    use std::sync::LazyLock;",
                            "    static RE: LazyLock<Regex> = LazyLock::new(|| Regex::new(r\"<[^>]+>\").unwrap());",
                            "",
                            "    match data {",
                            "        serde_json::Value::String(s) => *s = RE.replace_all(s, \"\").to_string(),",
                            "        serde_json::Value::Object(obj) => {",
                            "            for d in obj.values_mut() {",
                            "                sanitize_data(d);",
                            "            }",
                            "        }",
                            "        serde_json::Value::Array(arr) => {",
                            "            for d in arr.iter_mut() {",
                            "                sanitize_data(d);",
                            "            }",
                            "        }",
                            "        _ => {}",
                            "    }",
                            "}",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            122,
                            123
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut data = data;",
                            "    sanitize_data(&mut data);"
                        ]
                    },
                    {
                        "line_numbers": [
                            143,
                            144,
                            145,
                            146
                        ],
                        "comments": {},
                        "lines": [
                            "    if text_split.next().is_some() {",
                            "        err!(\"Template contains more than one body\");",
                            "    }",
                            ""
                        ]
                    },
                    {
                        "line_numbers": [
                            290
                        ],
                        "comments": {},
                        "lines": [
                            "        None => err!(\"Failed to build invite URL query parameters\"),"
                        ]
                    },
                    {
                        "line_numbers": [
                            298
                        ],
                        "comments": {},
                        "lines": [
                            "            \"url\": format!(\"{}/#/accept-organization/?{}\", CONFIG.domain(), query_string),"
                        ]
                    },
                    {
                        "line_numbers": [
                            323,
                            324,
                            325,
                            326,
                            327,
                            328,
                            329,
                            330,
                            331,
                            332,
                            333,
                            334,
                            335,
                            336
                        ],
                        "comments": {},
                        "lines": [
                            "    let mut query = url::Url::parse(\"https://query.builder\").unwrap();",
                            "    {",
                            "        let mut query_params = query.query_pairs_mut();",
                            "        query_params",
                            "            .append_pair(\"id\", emer_id)",
                            "            .append_pair(\"name\", grantor_name)",
                            "            .append_pair(\"email\", address)",
                            "            .append_pair(\"token\", &encode_jwt(&claims));",
                            "    }",
                            "",
                            "    let query_string = match query.query() {",
                            "        None => err!(\"Failed to build emergency invite URL query parameters\"),",
                            "        Some(query) => query,",
                            "    };"
                        ]
                    },
                    {
                        "line_numbers": [
                            342
                        ],
                        "comments": {},
                        "lines": [
                            "            \"url\": format!(\"{}/#/accept-emergency/?{query_string}\", CONFIG.domain()),"
                        ]
                    }
                ],
                "deleted": []
            },
            "comment_added_diff": {
                "99": "// This will sanitize the string values by stripping all the html tags to prevent XSS and HTML Injections",
                "297": "            // `url.Url` would place the anchor `#` after the query parameters",
                "322": "    // Build the query here to ensure proper escaping",
                "323": "    let mut query = url::Url::parse(\"https://query.builder\").unwrap();",
                "341": "            // `url.Url` would place the anchor `#` after the query parameters"
            },
            "comment_deleted_diff": {
                "266": "    // `url.Url` would place the anchor `#` after the query parameters"
            },
            "comment_modified_diff": {}
        }
    ],
    "send_org_invite.hbs": [],
    "send_org_invite.html.hbs": [],
    "two_factor_incomplete.rs": [],
    "incomplete_2fa_login.hbs": [],
    "incomplete_2fa_login.html.hbs": [],
    "new_device_logged_in.hbs": [],
    "new_device_logged_in.html.hbs": [],
    "send_emergency_access_invite.hbs": [],
    "send_emergency_access_invite.html.hbs": [],
    "user.vaultwarden.scss.hbs": [],
    "vaultwarden.scss.hbs": []
}