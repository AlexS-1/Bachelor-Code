[
    {
        "line": 11,
        "comment": "# Traverse through the commits in the repository\n# Only save commits, that contain at least one file of the format {language_file_extension}"
    },
    {
        "line": 21,
        "comment": "# Analyze each file modified in the commit"
    },
    {
        "line": 23,
        "comment": "# only store file data for Rust files"
    },
    {
        "line": 41,
        "comment": "# For added diff ispect lines filter out comments"
    },
    {
        "line": 52,
        "comment": "# For deleted diff ispect lines filter out comments"
    },
    {
        "line": 69,
        "comment": "# Generate keywords based on the commit message and type of changes\n# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)\n# Extract type of commit from commit message\n# file_data[\"activity\"] = extract_activity(commit.msg)"
    },
    {
        "line": 78,
        "comment": "# Determine basic keywords based on the commit message"
    },
    {
        "line": 91,
        "comment": "# Use commit message keywords to determine activity type"
    },
    {
        "line": 113,
        "comment": "# Set current line for each analysis"
    },
    {
        "line": 117,
        "comment": "# In case of a starting multiline comment start adding future lines without comment symbol "
    },
    {
        "line": 120,
        "comment": "# In case of comment add them to existing dict if they directly follow"
    },
    {
        "line": 132,
        "comment": "# or create new one"
    },
    {
        "line": 137,
        "comment": "# In case of no comment add lines to existing dict if line number directly follows"
    },
    {
        "line": 144,
        "comment": "# Or create new one"
    },
    {
        "line": 149,
        "comment": "# Disable multiline comments when symbol found"
    },
    {
        "line": 159,
        "comment": "# Store last modified timestamps for each line"
    },
    {
        "line": 162,
        "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])"
    },
    {
        "line": 164,
        "comment": "# Track modified lines"
    },
    {
        "line": 169,
        "comment": "# Compare with comments"
    },
    {
        "line": 187,
        "comment": "# Save the processed commit data to a JSON file"
    },
    {
        "line": 193,
        "comment": "# Create a new EventLog object"
    },
    {
        "line": 196,
        "comment": "# Iterate over each commit entry in the data"
    },
    {
        "line": 198,
        "comment": "# Create a trace for the file"
    },
    {
        "line": 203,
        "comment": "# Extract event attributes"
    },
    {
        "line": 217,
        "comment": "# Add the event to the trace"
    },
    {
        "line": 220,
        "comment": "# Add the trace to the log"
    },
    {
        "line": 226,
        "comment": "# Export the log to an XES file"
    },
    {
        "line": 230,
        "comment": "# Create the XES log from the commit data"
    },
    {
        "line": 233,
        "comment": "# Save the XES log to a file"
    },
    {
        "line": 238,
        "comment": "# Example repository URL"
    },
    {
        "line": 241,
        "comment": "# save_to_xes(commits_data, \"Data/commits_data.xes\")"
    },
    {
        "line": 249,
        "comment": "# Test case"
    }
]