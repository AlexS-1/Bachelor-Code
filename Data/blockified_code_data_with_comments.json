{
    "build/analysis.py": [
        {
            "commit": "5c23ad83451ad8bade1900f2f5ca41afdd3b4c71",
            "timestamp": "2024-11-23T21:32:59+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "1": "def analyse_diff_comments(data):",
                    "2": "    for file, commits in data.items():",
                    "3": "        for commit in commits:",
                    "4": "            no_change_comments = []",
                    "5": "            for i in range(len(commit[\"comments\"])):",
                    "6": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"added\"]]:",
                    "7": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                    "8": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"deleted\"]]:",
                    "9": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                    "10": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                    "11": "                        continue",
                    "12": "                    else:",
                    "13": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                    "14": "                        continue",
                    "15": "                no_change_comments.append(i)",
                    "16": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "17": "            shift = 0",
                    "18": "            for j in no_change_comments:",
                    "19": "                del commit[\"comments\"][j-shift]",
                    "20": "                shift += 1"
                },
                "deleted": {},
                "added-block": [
                    {
                        "1": "def analyse_diff_comments(data):",
                        "2": "    for file, commits in data.items():",
                        "3": "        for commit in commits:",
                        "4": "            no_change_comments = []",
                        "5": "            for i in range(len(commit[\"comments\"])):",
                        "6": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"added\"]]:",
                        "7": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "8": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"deleted\"]]:",
                        "9": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "10": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "11": "                        continue",
                        "12": "                    else:",
                        "13": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "14": "                        continue",
                        "15": "                no_change_comments.append(i)"
                    },
                    {
                        "16": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "17": "            shift = 0",
                        "18": "            for j in no_change_comments:",
                        "19": "                del commit[\"comments\"][j-shift]",
                        "20": "                shift += 1"
                    }
                ],
                "deleted-block": []
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "def analyse_diff_comments(data):",
                        "2": "    for file, commits in data.items():",
                        "3": "        for commit in commits:",
                        "4": "            no_change_comments = []",
                        "5": "            for i in range(len(commit[\"comments\"])):",
                        "6": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"added\"]]:",
                        "7": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "8": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"deleted\"]]:",
                        "9": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "10": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "11": "                        continue",
                        "12": "                    else:",
                        "13": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "14": "                        continue",
                        "15": "                no_change_comments.append(i)"
                    }
                },
                {
                    "code_lines": {
                        "16": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "17": "            shift = 0",
                        "18": "            for j in no_change_comments:",
                        "19": "                del commit[\"comments\"][j-shift]",
                        "20": "                shift += 1"
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "16": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "b10794953bf2b307859821a8354d3429d710e31b",
            "timestamp": "2024-11-24T18:37:49+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "6": "                for item in commit[\"diff\"][\"added\"]:",
                    "7": "                    if commit[\"comments\"][i][\"line\"] == item[0] :",
                    "8": "                        commit[\"comments\"][i][\"edit\"] = \"added\"",
                    "9": "                        break",
                    "10": "                continue",
                    "23": "                shift += 1",
                    "24": "",
                    "25": "def check_inline_comments(data):",
                    "26": "    return",
                    "27": "",
                    "28": "def blockify_comments(data):",
                    "29": "    for file, commits in data.items():",
                    "30": "        for commit in commits:",
                    "31": "            blocks = []",
                    "32": "            for line in commit[\"diff\"][\"added\"]:",
                    "33": "                # Add line to block, if line follows previous line of block",
                    "34": "                if len(blocks) > 0 and blocks[-1][\"lines\"][-1] + 1 == line[0]:",
                    "35": "                    break_outer = False",
                    "36": "                    comment = \"\"",
                    "37": "                    comment_position = -1",
                    "38": "                    edit = \"\"",
                    "39": "                    for item in commit[\"comments\"]:",
                    "40": "                        if line[0] == item[\"line\"]:",
                    "41": "                            comment = item[\"comment\"]",
                    "42": "                            comment_position = item[\"char_position_in_line\"]",
                    "43": "                            edit = item[\"edit\"]",
                    "44": "                            # Except when line is comment following source code, create new block",
                    "45": "                            if blocks[-1][\"comments\"][-1] == \"\":",
                    "46": "                                block = {",
                    "47": "                                    \"lines\": [line[0]],",
                    "48": "                                    \"contents\": [line[1]],",
                    "49": "                                    \"comments\": [comment],",
                    "50": "                                    \"comment_positions\": [comment_position],",
                    "51": "                                    \"edits\": [edit]",
                    "52": "                                }",
                    "53": "                                blocks.append(block)",
                    "54": "                                break_outer = True",
                    "55": "                    if break_outer:",
                    "56": "                        continue",
                    "57": "                    blocks[-1][\"lines\"].append(line[0])",
                    "58": "                    blocks[-1][\"contents\"].append(line[1])",
                    "59": "                    blocks[-1][\"comments\"].append(comment)",
                    "60": "                    blocks[-1][\"comment_positions\"].append(comment_position)",
                    "61": "                    blocks[-1][\"edits\"].append(edit)",
                    "62": "",
                    "63": "                # Create new block, otherwise",
                    "64": "                else:",
                    "65": "                    comment = \"\"",
                    "66": "                    comment_position = -1",
                    "67": "                    edit = \"\"",
                    "68": "                    for item in commit[\"comments\"]:",
                    "69": "                        if line[0] == item[\"line\"]:",
                    "70": "                            comment = item[\"comment\"]",
                    "71": "                            comment_position = item[\"char_position_in_line\"]",
                    "72": "                            edit = item[\"edit\"]",
                    "73": "                    block = {",
                    "74": "                        \"lines\": [line[0]],",
                    "75": "                        \"contents\": [line[1]],",
                    "76": "                        \"comments\": [comment],",
                    "77": "                        \"comment_positions\": [comment_position],",
                    "78": "                        \"edits\": [edit]",
                    "79": "                    }",
                    "80": "                    blocks.append(block)",
                    "81": "            commit[\"diff\"][\"block_diff\"] = blocks",
                    "82": "",
                    "83": "def extract_later_modified_comments(data):",
                    "84": "    analysis_results = []",
                    "85": "    for file, commits in data.items():",
                    "86": "        # Store last modified timestamps for each line",
                    "87": "        last_modified = {}",
                    "88": "        for commit in commits:",
                    "89": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "90": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])",
                    "91": "            # Track modified lines",
                    "92": "            for line in commit[\"diff\"][\"added\"]:",
                    "93": "                last_modified[line] = commit_time",
                    "94": "            # Compare with comments",
                    "95": "            for line in commit[\"comments\"]:",
                    "96": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                    "97": "                last_modified_lines = list(last_modified.keys())",
                    "98": "                if int(line) in last_modified_lines:",
                    "99": "                    for block in commit[\"diff\"][\"block_diff\"]:",
                    "100": "                        if line in block[\"comments\"] and len(block[\"lines\"]) == 0:",
                    "101": "                            if(comment_time > last_modified[int(line)]):",
                    "102": "                                analysis_results.append({",
                    "103": "                                    \"file\": file,",
                    "104": "                                    \"line\": int(line),",
                    "105": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                    "106": "                                    \"comment_time\": str(comment_time),",
                    "107": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                    "108": "                                })",
                    "109": "    return analysis_results"
                },
                "deleted": {
                    "6": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"added\"]]:",
                    "7": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                    "20": "                shift += 1"
                },
                "added-block": [
                    {
                        "6": "                for item in commit[\"diff\"][\"added\"]:",
                        "7": "                    if commit[\"comments\"][i][\"line\"] == item[0] :",
                        "8": "                        commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "9": "                        break",
                        "10": "                continue"
                    },
                    {
                        "23": "                shift += 1",
                        "24": "",
                        "25": "def check_inline_comments(data):",
                        "26": "    return",
                        "27": "",
                        "28": "def blockify_comments(data):",
                        "29": "    for file, commits in data.items():",
                        "30": "        for commit in commits:",
                        "31": "            blocks = []",
                        "32": "            for line in commit[\"diff\"][\"added\"]:"
                    },
                    {
                        "33": "                # Add line to block, if line follows previous line of block",
                        "34": "                if len(blocks) > 0 and blocks[-1][\"lines\"][-1] + 1 == line[0]:",
                        "35": "                    break_outer = False",
                        "36": "                    comment = \"\"",
                        "37": "                    comment_position = -1",
                        "38": "                    edit = \"\"",
                        "39": "                    for item in commit[\"comments\"]:",
                        "40": "                        if line[0] == item[\"line\"]:",
                        "41": "                            comment = item[\"comment\"]",
                        "42": "                            comment_position = item[\"char_position_in_line\"]",
                        "43": "                            edit = item[\"edit\"]"
                    },
                    {
                        "44": "                            # Except when line is comment following source code, create new block",
                        "45": "                            if blocks[-1][\"comments\"][-1] == \"\":",
                        "46": "                                block = {",
                        "47": "                                    \"lines\": [line[0]],",
                        "48": "                                    \"contents\": [line[1]],",
                        "49": "                                    \"comments\": [comment],",
                        "50": "                                    \"comment_positions\": [comment_position],",
                        "51": "                                    \"edits\": [edit]",
                        "52": "                                }",
                        "53": "                                blocks.append(block)",
                        "54": "                                break_outer = True",
                        "55": "                    if break_outer:",
                        "56": "                        continue",
                        "57": "                    blocks[-1][\"lines\"].append(line[0])",
                        "58": "                    blocks[-1][\"contents\"].append(line[1])",
                        "59": "                    blocks[-1][\"comments\"].append(comment)",
                        "60": "                    blocks[-1][\"comment_positions\"].append(comment_position)",
                        "61": "                    blocks[-1][\"edits\"].append(edit)",
                        "62": ""
                    },
                    {
                        "63": "                # Create new block, otherwise",
                        "64": "                else:",
                        "65": "                    comment = \"\"",
                        "66": "                    comment_position = -1",
                        "67": "                    edit = \"\"",
                        "68": "                    for item in commit[\"comments\"]:",
                        "69": "                        if line[0] == item[\"line\"]:",
                        "70": "                            comment = item[\"comment\"]",
                        "71": "                            comment_position = item[\"char_position_in_line\"]",
                        "72": "                            edit = item[\"edit\"]",
                        "73": "                    block = {",
                        "74": "                        \"lines\": [line[0]],",
                        "75": "                        \"contents\": [line[1]],",
                        "76": "                        \"comments\": [comment],",
                        "77": "                        \"comment_positions\": [comment_position],",
                        "78": "                        \"edits\": [edit]",
                        "79": "                    }",
                        "80": "                    blocks.append(block)",
                        "81": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "82": "",
                        "83": "def extract_later_modified_comments(data):",
                        "84": "    analysis_results = []",
                        "85": "    for file, commits in data.items():"
                    },
                    {
                        "86": "        # Store last modified timestamps for each line",
                        "87": "        last_modified = {}",
                        "88": "        for commit in commits:"
                    },
                    {
                        "89": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "90": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    {
                        "91": "            # Track modified lines",
                        "92": "            for line in commit[\"diff\"][\"added\"]:",
                        "93": "                last_modified[line] = commit_time"
                    },
                    {
                        "94": "            # Compare with comments",
                        "95": "            for line in commit[\"comments\"]:",
                        "96": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "97": "                last_modified_lines = list(last_modified.keys())",
                        "98": "                if int(line) in last_modified_lines:",
                        "99": "                    for block in commit[\"diff\"][\"block_diff\"]:",
                        "100": "                        if line in block[\"comments\"] and len(block[\"lines\"]) == 0:",
                        "101": "                            if(comment_time > last_modified[int(line)]):",
                        "102": "                                analysis_results.append({",
                        "103": "                                    \"file\": file,",
                        "104": "                                    \"line\": int(line),",
                        "105": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                        "106": "                                    \"comment_time\": str(comment_time),",
                        "107": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                        "108": "                                })",
                        "109": "    return analysis_results"
                    }
                ],
                "deleted-block": [
                    {
                        "6": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"added\"]]:",
                        "7": "                    commit[\"comments\"][i][\"edit\"] = \"added\""
                    },
                    {
                        "20": "                shift += 1"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "def analyse_diff_comments(data):",
                        "2": "    for file, commits in data.items():",
                        "3": "        for commit in commits:",
                        "4": "            no_change_comments = []",
                        "5": "            for i in range(len(commit[\"comments\"])):",
                        "6": "                for item in commit[\"diff\"][\"added\"]:",
                        "7": "                    if commit[\"comments\"][i][\"line\"] == item[0] :",
                        "8": "                        commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "9": "                        break",
                        "10": "                continue",
                        "11": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"deleted\"]]:",
                        "12": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "13": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "14": "                        continue",
                        "15": "                    else:",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "17": "                        continue",
                        "18": "                no_change_comments.append(i)"
                    }
                },
                {
                    "code_lines": {
                        "19": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "20": "            shift = 0",
                        "21": "            for j in no_change_comments:",
                        "22": "                del commit[\"comments\"][j-shift]",
                        "23": "                shift += 1",
                        "24": "",
                        "25": "def check_inline_comments(data):",
                        "26": "    return",
                        "27": "",
                        "28": "def blockify_comments(data):",
                        "29": "    for file, commits in data.items():",
                        "30": "        for commit in commits:",
                        "31": "            blocks = []",
                        "32": "            for line in commit[\"diff\"][\"added\"]:"
                    },
                    "comment_lines": {
                        "19": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "33": "                # Add line to block, if line follows previous line of block",
                        "34": "                if len(blocks) > 0 and blocks[-1][\"lines\"][-1] + 1 == line[0]:",
                        "35": "                    break_outer = False",
                        "36": "                    comment = \"\"",
                        "37": "                    comment_position = -1",
                        "38": "                    edit = \"\"",
                        "39": "                    for item in commit[\"comments\"]:",
                        "40": "                        if line[0] == item[\"line\"]:",
                        "41": "                            comment = item[\"comment\"]",
                        "42": "                            comment_position = item[\"char_position_in_line\"]",
                        "43": "                            edit = item[\"edit\"]"
                    },
                    "comment_lines": {
                        "33": {
                            "comment": "# Add line to block, if line follows previous line of block",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "                            # Except when line is comment following source code, create new block",
                        "45": "                            if blocks[-1][\"comments\"][-1] == \"\":",
                        "46": "                                block = {",
                        "47": "                                    \"lines\": [line[0]],",
                        "48": "                                    \"contents\": [line[1]],",
                        "49": "                                    \"comments\": [comment],",
                        "50": "                                    \"comment_positions\": [comment_position],",
                        "51": "                                    \"edits\": [edit]",
                        "52": "                                }",
                        "53": "                                blocks.append(block)",
                        "54": "                                break_outer = True",
                        "55": "                    if break_outer:   ",
                        "56": "                        continue",
                        "57": "                    blocks[-1][\"lines\"].append(line[0])",
                        "58": "                    blocks[-1][\"contents\"].append(line[1])",
                        "59": "                    blocks[-1][\"comments\"].append(comment)",
                        "60": "                    blocks[-1][\"comment_positions\"].append(comment_position)",
                        "61": "                    blocks[-1][\"edits\"].append(edit)",
                        "62": ""
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Except when line is comment following source code, create new block",
                            "char_position_in_line": 28,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "63": "                # Create new block, otherwise",
                        "64": "                else:",
                        "65": "                    comment = \"\"",
                        "66": "                    comment_position = -1",
                        "67": "                    edit = \"\"",
                        "68": "                    for item in commit[\"comments\"]:",
                        "69": "                        if line[0] == item[\"line\"]:",
                        "70": "                            comment = item[\"comment\"]",
                        "71": "                            comment_position = item[\"char_position_in_line\"]",
                        "72": "                            edit = item[\"edit\"]",
                        "73": "                    block = {",
                        "74": "                        \"lines\": [line[0]],",
                        "75": "                        \"contents\": [line[1]],",
                        "76": "                        \"comments\": [comment],",
                        "77": "                        \"comment_positions\": [comment_position],",
                        "78": "                        \"edits\": [edit]",
                        "79": "                    }",
                        "80": "                    blocks.append(block)",
                        "81": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "82": "",
                        "83": "def extract_later_modified_comments(data): ",
                        "84": "    analysis_results = []",
                        "85": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "63": {
                            "comment": "# Create new block, otherwise",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "86": "        # Store last modified timestamps for each line",
                        "87": "        last_modified = {}",
                        "88": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "86": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "89": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "90": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "89": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "91": "            # Track modified lines",
                        "92": "            for line in commit[\"diff\"][\"added\"]:",
                        "93": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "91": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "94": "            # Compare with comments",
                        "95": "            for line in commit[\"comments\"]:",
                        "96": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "97": "                last_modified_lines = list(last_modified.keys())",
                        "98": "                if int(line) in last_modified_lines:",
                        "99": "                    for block in commit[\"diff\"][\"block_diff\"]:",
                        "100": "                        if line in block[\"comments\"] and len(block[\"lines\"]) == 0:",
                        "101": "                            if(comment_time > last_modified[int(line)]):",
                        "102": "                                analysis_results.append({",
                        "103": "                                    \"file\": file,",
                        "104": "                                    \"line\": int(line),",
                        "105": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                        "106": "                                    \"comment_time\": str(comment_time),",
                        "107": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                        "108": "                                })",
                        "109": "    return analysis_results"
                    },
                    "comment_lines": {
                        "94": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "19": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "33": {
                    "comment": "# Add line to block, if line follows previous line of block",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "44": {
                    "comment": "# Except when line is comment following source code, create new block",
                    "char_position_in_line": 28,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "63": {
                    "comment": "# Create new block, otherwise",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "86": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "89": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "91": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "94": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "e20d03792161ba1b90725e6912b40275f06bf2da",
            "timestamp": "2024-11-25T02:54:47+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "1": "from datetime import datetime",
                    "2": "",
                    "8": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                    "9": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                    "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                    "28": "def blockify_comments2(data):",
                    "31": "            block_diff = []",
                    "32": "            for block in commit[\"diff\"][\"block_diff\"]:",
                    "33": "                block_dict = {}",
                    "34": "                for line in block:",
                    "36": "                        if int(line) == item[\"line\"]:",
                    "37": "                            comment_index = item[\"char_position_in_line\"]",
                    "38": "                            break",
                    "39": "                        else:",
                    "40": "                            comment_index = -1",
                    "41": "                    line_info = {",
                    "42": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                    "43": "                        \"comment_index\": comment_index",
                    "44": "                    }",
                    "45": "                    block_dict[line] = line_info",
                    "46": "                block_diff.append(block_dict)",
                    "47": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                    "49": "def blockify_comments(data):",
                    "50": "    for file, commits in data.items():",
                    "51": "        for commit in commits:",
                    "52": "            blocks = []",
                    "53": "            current_block = []",
                    "54": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                    "55": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                    "56": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                    "57": "                        blocks.append(current_block)",
                    "58": "                        current_block = []",
                    "59": "                    current_block.append(int(line))",
                    "61": "                    if current_block and int(line) != current_block[-1] + 1:",
                    "62": "                        blocks.append(current_block)",
                    "63": "                        current_block = []",
                    "64": "                    current_block.append(int(line))",
                    "65": "            if current_block:",
                    "66": "                blocks.append(current_block)",
                    "69": "def get_comment_lines(comments):",
                    "70": "    comment_lines = []",
                    "71": "    for comment in comments:",
                    "72": "        comment_lines.append(comment[\"line\"])",
                    "73": "    return comment_lines",
                    "74": "",
                    "75": "def get_diff_lines(diff):",
                    "76": "    diff_lines = []",
                    "77": "    for line in diff:",
                    "78": "        diff_lines.append(line[0])",
                    "79": "    return diff_lines",
                    "80": "",
                    "90": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                    "96": "                if str(line[\"line\"]) in last_modified_lines:",
                    "98": "                        # Where there are comment changes and no source code changes in block",
                    "99": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):",
                    "101": "                                for item in commit[\"comments\"]:",
                    "102": "                                    if line[\"line\"] == item[\"line\"]:",
                    "103": "                                        comment = item[\"comment\"]",
                    "104": "                                        break",
                    "107": "                                    \"line\": line[\"line\"],",
                    "108": "                                    \"comment\": comment,",
                    "110": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                    "112": "    return analysis_results",
                    "113": "",
                    "114": "def is_code_in_block(block):",
                    "115": "    for line in list(block.keys()):",
                    "116": "        if block[line][\"comment_index\"] == -1:",
                    "117": "            return True"
                },
                "deleted": {
                    "6": "                for item in commit[\"diff\"][\"added\"]:",
                    "7": "                    if commit[\"comments\"][i][\"line\"] == item[0] :",
                    "8": "                        commit[\"comments\"][i][\"edit\"] = \"added\"",
                    "9": "                        break",
                    "11": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"deleted\"]]:",
                    "28": "def blockify_comments(data):",
                    "31": "            blocks = []",
                    "32": "            for line in commit[\"diff\"][\"added\"]:",
                    "33": "                # Add line to block, if line follows previous line of block",
                    "34": "                if len(blocks) > 0 and blocks[-1][\"lines\"][-1] + 1 == line[0]:",
                    "35": "                    break_outer = False",
                    "36": "                    comment = \"\"",
                    "37": "                    comment_position = -1",
                    "38": "                    edit = \"\"",
                    "40": "                        if line[0] == item[\"line\"]:",
                    "41": "                            comment = item[\"comment\"]",
                    "42": "                            comment_position = item[\"char_position_in_line\"]",
                    "43": "                            edit = item[\"edit\"]",
                    "44": "                            # Except when line is comment following source code, create new block",
                    "45": "                            if blocks[-1][\"comments\"][-1] == \"\":",
                    "46": "                                block = {",
                    "47": "                                    \"lines\": [line[0]],",
                    "48": "                                    \"contents\": [line[1]],",
                    "49": "                                    \"comments\": [comment],",
                    "50": "                                    \"comment_positions\": [comment_position],",
                    "51": "                                    \"edits\": [edit]",
                    "52": "                                }",
                    "53": "                                blocks.append(block)",
                    "54": "                                break_outer = True",
                    "55": "                    if break_outer:",
                    "56": "                        continue",
                    "57": "                    blocks[-1][\"lines\"].append(line[0])",
                    "58": "                    blocks[-1][\"contents\"].append(line[1])",
                    "59": "                    blocks[-1][\"comments\"].append(comment)",
                    "60": "                    blocks[-1][\"comment_positions\"].append(comment_position)",
                    "61": "                    blocks[-1][\"edits\"].append(edit)",
                    "63": "                # Create new block, otherwise",
                    "65": "                    comment = \"\"",
                    "66": "                    comment_position = -1",
                    "67": "                    edit = \"\"",
                    "68": "                    for item in commit[\"comments\"]:",
                    "69": "                        if line[0] == item[\"line\"]:",
                    "70": "                            comment = item[\"comment\"]",
                    "71": "                            comment_position = item[\"char_position_in_line\"]",
                    "72": "                            edit = item[\"edit\"]",
                    "73": "                    block = {",
                    "74": "                        \"lines\": [line[0]],",
                    "75": "                        \"contents\": [line[1]],",
                    "76": "                        \"comments\": [comment],",
                    "77": "                        \"comment_positions\": [comment_position],",
                    "78": "                        \"edits\": [edit]",
                    "79": "                    }",
                    "80": "                    blocks.append(block)",
                    "92": "            for line in commit[\"diff\"][\"added\"]:",
                    "98": "                if int(line) in last_modified_lines:",
                    "100": "                        if line in block[\"comments\"] and len(block[\"lines\"]) == 0:",
                    "101": "                            if(comment_time > last_modified[int(line)]):",
                    "104": "                                    \"line\": int(line),",
                    "105": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                    "107": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                    "109": "    return analysis_results"
                },
                "added-block": [
                    {
                        "1": "from datetime import datetime",
                        "2": ""
                    },
                    {
                        "8": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "9": "                    commit[\"comments\"][i][\"edit\"] = \"added\""
                    },
                    {
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):"
                    },
                    {
                        "28": "def blockify_comments2(data):"
                    },
                    {
                        "31": "            block_diff = []",
                        "32": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "33": "                block_dict = {}",
                        "34": "                for line in block:"
                    },
                    {
                        "36": "                        if int(line) == item[\"line\"]:",
                        "37": "                            comment_index = item[\"char_position_in_line\"]",
                        "38": "                            break",
                        "39": "                        else:",
                        "40": "                            comment_index = -1",
                        "41": "                    line_info = {",
                        "42": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "43": "                        \"comment_index\": comment_index",
                        "44": "                    }",
                        "45": "                    block_dict[line] = line_info",
                        "46": "                block_diff.append(block_dict)",
                        "47": "            commit[\"diff\"][\"block_diff\"] = block_diff"
                    },
                    {
                        "49": "def blockify_comments(data):",
                        "50": "    for file, commits in data.items():",
                        "51": "        for commit in commits:",
                        "52": "            blocks = []",
                        "53": "            current_block = []",
                        "54": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "55": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "56": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "57": "                        blocks.append(current_block)",
                        "58": "                        current_block = []",
                        "59": "                    current_block.append(int(line))"
                    },
                    {
                        "61": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "62": "                        blocks.append(current_block)",
                        "63": "                        current_block = []",
                        "64": "                    current_block.append(int(line))",
                        "65": "            if current_block:",
                        "66": "                blocks.append(current_block)"
                    },
                    {
                        "69": "def get_comment_lines(comments):",
                        "70": "    comment_lines = []",
                        "71": "    for comment in comments:",
                        "72": "        comment_lines.append(comment[\"line\"])",
                        "73": "    return comment_lines",
                        "74": "",
                        "75": "def get_diff_lines(diff):",
                        "76": "    diff_lines = []",
                        "77": "    for line in diff:",
                        "78": "        diff_lines.append(line[0])",
                        "79": "    return diff_lines",
                        "80": ""
                    },
                    {
                        "90": "            for line in list(commit[\"diff\"][\"added\"].keys()):"
                    },
                    {
                        "96": "                if str(line[\"line\"]) in last_modified_lines:"
                    },
                    {
                        "98": "                        # Where there are comment changes and no source code changes in block",
                        "99": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):",
                        "101": "                                for item in commit[\"comments\"]:",
                        "102": "                                    if line[\"line\"] == item[\"line\"]:",
                        "103": "                                        comment = item[\"comment\"]",
                        "104": "                                        break"
                    },
                    {
                        "107": "                                    \"line\": line[\"line\"],",
                        "108": "                                    \"comment\": comment,"
                    },
                    {
                        "110": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])"
                    },
                    {
                        "112": "    return analysis_results",
                        "113": "",
                        "114": "def is_code_in_block(block):",
                        "115": "    for line in list(block.keys()):",
                        "116": "        if block[line][\"comment_index\"] == -1:",
                        "117": "            return True"
                    }
                ],
                "deleted-block": [
                    {
                        "6": "                for item in commit[\"diff\"][\"added\"]:",
                        "7": "                    if commit[\"comments\"][i][\"line\"] == item[0] :",
                        "8": "                        commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "9": "                        break"
                    },
                    {
                        "11": "                if commit[\"comments\"][i][\"line\"] in [item[0] for item in commit[\"diff\"][\"deleted\"]]:"
                    },
                    {
                        "28": "def blockify_comments(data):"
                    },
                    {
                        "31": "            blocks = []",
                        "32": "            for line in commit[\"diff\"][\"added\"]:",
                        "33": "                # Add line to block, if line follows previous line of block",
                        "34": "                if len(blocks) > 0 and blocks[-1][\"lines\"][-1] + 1 == line[0]:",
                        "35": "                    break_outer = False",
                        "36": "                    comment = \"\"",
                        "37": "                    comment_position = -1",
                        "38": "                    edit = \"\""
                    },
                    {
                        "40": "                        if line[0] == item[\"line\"]:",
                        "41": "                            comment = item[\"comment\"]",
                        "42": "                            comment_position = item[\"char_position_in_line\"]",
                        "43": "                            edit = item[\"edit\"]",
                        "44": "                            # Except when line is comment following source code, create new block",
                        "45": "                            if blocks[-1][\"comments\"][-1] == \"\":",
                        "46": "                                block = {",
                        "47": "                                    \"lines\": [line[0]],",
                        "48": "                                    \"contents\": [line[1]],",
                        "49": "                                    \"comments\": [comment],",
                        "50": "                                    \"comment_positions\": [comment_position],",
                        "51": "                                    \"edits\": [edit]",
                        "52": "                                }",
                        "53": "                                blocks.append(block)",
                        "54": "                                break_outer = True",
                        "55": "                    if break_outer:",
                        "56": "                        continue",
                        "57": "                    blocks[-1][\"lines\"].append(line[0])",
                        "58": "                    blocks[-1][\"contents\"].append(line[1])",
                        "59": "                    blocks[-1][\"comments\"].append(comment)",
                        "60": "                    blocks[-1][\"comment_positions\"].append(comment_position)",
                        "61": "                    blocks[-1][\"edits\"].append(edit)"
                    },
                    {
                        "63": "                # Create new block, otherwise"
                    },
                    {
                        "65": "                    comment = \"\"",
                        "66": "                    comment_position = -1",
                        "67": "                    edit = \"\"",
                        "68": "                    for item in commit[\"comments\"]:",
                        "69": "                        if line[0] == item[\"line\"]:",
                        "70": "                            comment = item[\"comment\"]",
                        "71": "                            comment_position = item[\"char_position_in_line\"]",
                        "72": "                            edit = item[\"edit\"]",
                        "73": "                    block = {",
                        "74": "                        \"lines\": [line[0]],",
                        "75": "                        \"contents\": [line[1]],",
                        "76": "                        \"comments\": [comment],",
                        "77": "                        \"comment_positions\": [comment_position],",
                        "78": "                        \"edits\": [edit]",
                        "79": "                    }",
                        "80": "                    blocks.append(block)"
                    },
                    {
                        "92": "            for line in commit[\"diff\"][\"added\"]:"
                    },
                    {
                        "98": "                if int(line) in last_modified_lines:"
                    },
                    {
                        "100": "                        if line in block[\"comments\"] and len(block[\"lines\"]) == 0:",
                        "101": "                            if(comment_time > last_modified[int(line)]):"
                    },
                    {
                        "104": "                                    \"line\": int(line),",
                        "105": "                                    \"comment\": commit[\"comment_added_diff\"][line],"
                    },
                    {
                        "107": "                                    \"last_code_change_time\": str(last_modified[int(line)])"
                    },
                    {
                        "109": "    return analysis_results"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime",
                        "2": "",
                        "3": "def analyse_diff_comments(data):",
                        "4": "    for file, commits in data.items():",
                        "5": "        for commit in commits:",
                        "6": "            no_change_comments = []",
                        "7": "            for i in range(len(commit[\"comments\"])):",
                        "8": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "9": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "10": "                continue",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "12": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "13": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "14": "                        continue",
                        "15": "                    else:",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "17": "                        continue",
                        "18": "                no_change_comments.append(i)"
                    }
                },
                {
                    "code_lines": {
                        "19": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "20": "            shift = 0",
                        "21": "            for j in no_change_comments:",
                        "22": "                del commit[\"comments\"][j-shift]",
                        "23": "                shift += 1",
                        "24": "",
                        "25": "def check_inline_comments(data):",
                        "26": "    return",
                        "27": "",
                        "28": "def blockify_comments2(data):",
                        "29": "    for file, commits in data.items():",
                        "30": "        for commit in commits:",
                        "31": "            block_diff = []",
                        "32": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "33": "                block_dict = {}",
                        "34": "                for line in block:",
                        "35": "                    for item in commit[\"comments\"]:",
                        "36": "                        if int(line) == item[\"line\"]:",
                        "37": "                            comment_index = item[\"char_position_in_line\"]",
                        "38": "                            break",
                        "39": "                        else:",
                        "40": "                            comment_index = -1",
                        "41": "                    line_info = {",
                        "42": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "43": "                        \"comment_index\": comment_index",
                        "44": "                    }",
                        "45": "                    block_dict[line] = line_info",
                        "46": "                block_diff.append(block_dict)",
                        "47": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "48": "",
                        "49": "def blockify_comments(data):",
                        "50": "    for file, commits in data.items():",
                        "51": "        for commit in commits:",
                        "52": "            blocks = []",
                        "53": "            current_block = []",
                        "54": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "55": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "56": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "57": "                        blocks.append(current_block)",
                        "58": "                        current_block = []",
                        "59": "                    current_block.append(int(line))",
                        "60": "                else:",
                        "61": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "62": "                        blocks.append(current_block)",
                        "63": "                        current_block = []",
                        "64": "                    current_block.append(int(line))",
                        "65": "            if current_block:",
                        "66": "                blocks.append(current_block)",
                        "67": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "68": "",
                        "69": "def get_comment_lines(comments):",
                        "70": "    comment_lines = []",
                        "71": "    for comment in comments:",
                        "72": "        comment_lines.append(comment[\"line\"])",
                        "73": "    return comment_lines",
                        "74": "",
                        "75": "def get_diff_lines(diff):",
                        "76": "    diff_lines = []",
                        "77": "    for line in diff:",
                        "78": "        diff_lines.append(line[0])",
                        "79": "    return diff_lines",
                        "80": "",
                        "81": "def extract_later_modified_comments(data): ",
                        "82": "    analysis_results = []",
                        "83": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "19": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "84": "        # Store last modified timestamps for each line",
                        "85": "        last_modified = {}",
                        "86": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "84": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "88": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "89": "            # Track modified lines",
                        "90": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "91": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "89": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Compare with comments",
                        "93": "            for line in commit[\"comments\"]:",
                        "94": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "95": "                last_modified_lines = list(last_modified.keys())",
                        "96": "                if str(line[\"line\"]) in last_modified_lines:",
                        "97": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "98": "                        # Where there are comment changes and no source code changes in block",
                        "99": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):",
                        "101": "                                for item in commit[\"comments\"]:",
                        "102": "                                    if line[\"line\"] == item[\"line\"]:",
                        "103": "                                        comment = item[\"comment\"]",
                        "104": "                                        break",
                        "105": "                                analysis_results.append({",
                        "106": "                                    \"file\": file,",
                        "107": "                                    \"line\": line[\"line\"],",
                        "108": "                                    \"comment\": comment,",
                        "109": "                                    \"comment_time\": str(comment_time),",
                        "110": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "111": "                                })",
                        "112": "    return analysis_results",
                        "113": "",
                        "114": "def is_code_in_block(block):",
                        "115": "    for line in list(block.keys()):",
                        "116": "        if block[line][\"comment_index\"] == -1:",
                        "117": "            return True "
                    },
                    "comment_lines": {
                        "98": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        },
                        "99": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "19": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "84": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "89": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "92": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "98": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "99": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "6f599e9f229a41cfe89bc628bb60c7565944a0ad",
            "timestamp": "2024-11-25T11:26:40+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "117": "            return True",
                    "118": "",
                    "119": "def clean(data):",
                    "120": "    clean_data = []",
                    "121": "    for i in range(len(data)):",
                    "122": "        item = {",
                    "123": "            \"file\": data[i][\"file\"],",
                    "124": "            \"line\": data[i][\"line\"],",
                    "125": "            \"comment\": data[i][\"comment\"],",
                    "126": "            \"comment_time\": data[i][\"comment_time\"],",
                    "127": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                    "128": "        }",
                    "129": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                    "130": "            clean_data.append(item)",
                    "131": "    return clean_data",
                    "132": "",
                    "133": "def is_equal(d1,d2):",
                    "134": "    d1_k = list(d1.keys())",
                    "135": "    d2_k = list(d2.keys())",
                    "136": "    for i in d1_k:",
                    "137": "        if d1[i] != d2[i]:",
                    "138": "            return False",
                    "139": "    return True"
                },
                "deleted": {
                    "117": "            return True"
                },
                "added-block": [
                    {
                        "117": "            return True",
                        "118": "",
                        "119": "def clean(data):",
                        "120": "    clean_data = []",
                        "121": "    for i in range(len(data)):",
                        "122": "        item = {",
                        "123": "            \"file\": data[i][\"file\"],",
                        "124": "            \"line\": data[i][\"line\"],",
                        "125": "            \"comment\": data[i][\"comment\"],",
                        "126": "            \"comment_time\": data[i][\"comment_time\"],",
                        "127": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "128": "        }",
                        "129": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "130": "            clean_data.append(item)",
                        "131": "    return clean_data",
                        "132": "",
                        "133": "def is_equal(d1,d2):",
                        "134": "    d1_k = list(d1.keys())",
                        "135": "    d2_k = list(d2.keys())",
                        "136": "    for i in d1_k:",
                        "137": "        if d1[i] != d2[i]:",
                        "138": "            return False",
                        "139": "    return True"
                    }
                ],
                "deleted-block": [
                    {
                        "117": "            return True"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime",
                        "2": "",
                        "3": "def analyse_diff_comments(data):",
                        "4": "    for file, commits in data.items():",
                        "5": "        for commit in commits:",
                        "6": "            no_change_comments = []",
                        "7": "            for i in range(len(commit[\"comments\"])):",
                        "8": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "9": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "10": "                continue",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "12": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "13": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "14": "                        continue",
                        "15": "                    else:",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "17": "                        continue",
                        "18": "                no_change_comments.append(i)"
                    }
                },
                {
                    "code_lines": {
                        "19": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "20": "            shift = 0",
                        "21": "            for j in no_change_comments:",
                        "22": "                del commit[\"comments\"][j-shift]",
                        "23": "                shift += 1",
                        "24": "",
                        "25": "def check_inline_comments(data):",
                        "26": "    return",
                        "27": "",
                        "28": "def blockify_comments2(data):",
                        "29": "    for file, commits in data.items():",
                        "30": "        for commit in commits:",
                        "31": "            block_diff = []",
                        "32": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "33": "                block_dict = {}",
                        "34": "                for line in block:",
                        "35": "                    for item in commit[\"comments\"]:",
                        "36": "                        if int(line) == item[\"line\"]:",
                        "37": "                            comment_index = item[\"char_position_in_line\"]",
                        "38": "                            break",
                        "39": "                        else:",
                        "40": "                            comment_index = -1",
                        "41": "                    line_info = {",
                        "42": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "43": "                        \"comment_index\": comment_index",
                        "44": "                    }",
                        "45": "                    block_dict[line] = line_info",
                        "46": "                block_diff.append(block_dict)",
                        "47": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "48": "",
                        "49": "def blockify_comments(data):",
                        "50": "    for file, commits in data.items():",
                        "51": "        for commit in commits:",
                        "52": "            blocks = []",
                        "53": "            current_block = []",
                        "54": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "55": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "56": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "57": "                        blocks.append(current_block)",
                        "58": "                        current_block = []",
                        "59": "                    current_block.append(int(line))",
                        "60": "                else:",
                        "61": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "62": "                        blocks.append(current_block)",
                        "63": "                        current_block = []",
                        "64": "                    current_block.append(int(line))",
                        "65": "            if current_block:",
                        "66": "                blocks.append(current_block)",
                        "67": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "68": "",
                        "69": "def get_comment_lines(comments):",
                        "70": "    comment_lines = []",
                        "71": "    for comment in comments:",
                        "72": "        comment_lines.append(comment[\"line\"])",
                        "73": "    return comment_lines",
                        "74": "",
                        "75": "def get_diff_lines(diff):",
                        "76": "    diff_lines = []",
                        "77": "    for line in diff:",
                        "78": "        diff_lines.append(line[0])",
                        "79": "    return diff_lines",
                        "80": "",
                        "81": "def extract_later_modified_comments(data): ",
                        "82": "    analysis_results = []",
                        "83": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "19": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "84": "        # Store last modified timestamps for each line",
                        "85": "        last_modified = {}",
                        "86": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "84": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "88": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "89": "            # Track modified lines",
                        "90": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "91": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "89": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Compare with comments",
                        "93": "            for line in commit[\"comments\"]:",
                        "94": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "95": "                last_modified_lines = list(last_modified.keys())",
                        "96": "                if str(line[\"line\"]) in last_modified_lines:",
                        "97": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "98": "                        # Where there are comment changes and no source code changes in block",
                        "99": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):",
                        "101": "                                for item in commit[\"comments\"]:",
                        "102": "                                    if line[\"line\"] == item[\"line\"]:",
                        "103": "                                        comment = item[\"comment\"]",
                        "104": "                                        break",
                        "105": "                                analysis_results.append({",
                        "106": "                                    \"file\": file,",
                        "107": "                                    \"line\": line[\"line\"],",
                        "108": "                                    \"comment\": comment,",
                        "109": "                                    \"comment_time\": str(comment_time),",
                        "110": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "111": "                                })",
                        "112": "    return analysis_results",
                        "113": "",
                        "114": "def is_code_in_block(block):",
                        "115": "    for line in list(block.keys()):",
                        "116": "        if block[line][\"comment_index\"] == -1:",
                        "117": "            return True ",
                        "118": "",
                        "119": "def clean(data):",
                        "120": "    clean_data = []",
                        "121": "    for i in range(len(data)):",
                        "122": "        item = {",
                        "123": "            \"file\": data[i][\"file\"],",
                        "124": "            \"line\": data[i][\"line\"],",
                        "125": "            \"comment\": data[i][\"comment\"],",
                        "126": "            \"comment_time\": data[i][\"comment_time\"],",
                        "127": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "128": "        }",
                        "129": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "130": "            clean_data.append(item)",
                        "131": "    return clean_data",
                        "132": "",
                        "133": "def is_equal(d1,d2):",
                        "134": "    d1_k = list(d1.keys())",
                        "135": "    d2_k = list(d2.keys())",
                        "136": "    for i in d1_k:",
                        "137": "        if d1[i] != d2[i]:",
                        "138": "            return False",
                        "139": "    return True"
                    },
                    "comment_lines": {
                        "98": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "99": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "19": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "84": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "89": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "92": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "98": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "ca64e3c56b1e147cafb1af0d143d4f60f04cfbe2",
            "timestamp": "2024-11-28T10:16:59+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "1": "from datetime import datetime, timedelta",
                    "139": "    return True",
                    "140": "",
                    "141": "def average_comment_update_time(data):",
                    "142": "    datetime_pairs = []",
                    "143": "    for file in data:",
                    "144": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                    "145": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                    "146": "        datetime_pairs.append((start, end))",
                    "147": "    durations = [end - start for start, end in datetime_pairs]",
                    "148": "    total_duration = sum(durations, timedelta(0))",
                    "149": "    average_duration = total_duration / len(durations)",
                    "150": "    return average_duration"
                },
                "deleted": {
                    "1": "from datetime import datetime",
                    "139": "    return True"
                },
                "added-block": [
                    {
                        "1": "from datetime import datetime, timedelta"
                    },
                    {
                        "139": "    return True",
                        "140": "",
                        "141": "def average_comment_update_time(data):",
                        "142": "    datetime_pairs = []",
                        "143": "    for file in data:",
                        "144": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "145": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "146": "        datetime_pairs.append((start, end))",
                        "147": "    durations = [end - start for start, end in datetime_pairs]",
                        "148": "    total_duration = sum(durations, timedelta(0))",
                        "149": "    average_duration = total_duration / len(durations)",
                        "150": "    return average_duration"
                    }
                ],
                "deleted-block": [
                    {
                        "1": "from datetime import datetime"
                    },
                    {
                        "139": "    return True"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime, timedelta",
                        "2": "",
                        "3": "def analyse_diff_comments(data):",
                        "4": "    for file, commits in data.items():",
                        "5": "        for commit in commits:",
                        "6": "            no_change_comments = []",
                        "7": "            for i in range(len(commit[\"comments\"])):",
                        "8": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "9": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "10": "                continue",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "12": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "13": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "14": "                        continue",
                        "15": "                    else:",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "17": "                        continue",
                        "18": "                no_change_comments.append(i)"
                    }
                },
                {
                    "code_lines": {
                        "19": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "20": "            shift = 0",
                        "21": "            for j in no_change_comments:",
                        "22": "                del commit[\"comments\"][j-shift]",
                        "23": "                shift += 1",
                        "24": "",
                        "25": "def check_inline_comments(data):",
                        "26": "    return",
                        "27": "",
                        "28": "def blockify_comments2(data):",
                        "29": "    for file, commits in data.items():",
                        "30": "        for commit in commits:",
                        "31": "            block_diff = []",
                        "32": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "33": "                block_dict = {}",
                        "34": "                for line in block:",
                        "35": "                    for item in commit[\"comments\"]:",
                        "36": "                        if int(line) == item[\"line\"]:",
                        "37": "                            comment_index = item[\"char_position_in_line\"]",
                        "38": "                            break",
                        "39": "                        else:",
                        "40": "                            comment_index = -1",
                        "41": "                    line_info = {",
                        "42": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "43": "                        \"comment_index\": comment_index",
                        "44": "                    }",
                        "45": "                    block_dict[line] = line_info",
                        "46": "                block_diff.append(block_dict)",
                        "47": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "48": "",
                        "49": "def blockify_comments(data):",
                        "50": "    for file, commits in data.items():",
                        "51": "        for commit in commits:",
                        "52": "            blocks = []",
                        "53": "            current_block = []",
                        "54": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "55": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "56": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "57": "                        blocks.append(current_block)",
                        "58": "                        current_block = []",
                        "59": "                    current_block.append(int(line))",
                        "60": "                else:",
                        "61": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "62": "                        blocks.append(current_block)",
                        "63": "                        current_block = []",
                        "64": "                    current_block.append(int(line))",
                        "65": "            if current_block:",
                        "66": "                blocks.append(current_block)",
                        "67": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "68": "",
                        "69": "def get_comment_lines(comments):",
                        "70": "    comment_lines = []",
                        "71": "    for comment in comments:",
                        "72": "        comment_lines.append(comment[\"line\"])",
                        "73": "    return comment_lines",
                        "74": "",
                        "75": "def get_diff_lines(diff):",
                        "76": "    diff_lines = []",
                        "77": "    for line in diff:",
                        "78": "        diff_lines.append(line[0])",
                        "79": "    return diff_lines",
                        "80": "",
                        "81": "def extract_later_modified_comments(data): ",
                        "82": "    analysis_results = []",
                        "83": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "19": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "84": "        # Store last modified timestamps for each line",
                        "85": "        last_modified = {}",
                        "86": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "84": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "88": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "89": "            # Track modified lines",
                        "90": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "91": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "89": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Compare with comments",
                        "93": "            for line in commit[\"comments\"]:",
                        "94": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "95": "                last_modified_lines = list(last_modified.keys())",
                        "96": "                if str(line[\"line\"]) in last_modified_lines:",
                        "97": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "98": "                        # Where there are comment changes and no source code changes in block",
                        "99": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):",
                        "101": "                                for item in commit[\"comments\"]:",
                        "102": "                                    if line[\"line\"] == item[\"line\"]:",
                        "103": "                                        comment = item[\"comment\"]",
                        "104": "                                        break",
                        "105": "                                analysis_results.append({",
                        "106": "                                    \"file\": file,",
                        "107": "                                    \"line\": line[\"line\"],",
                        "108": "                                    \"comment\": comment,",
                        "109": "                                    \"comment_time\": str(comment_time),",
                        "110": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "111": "                                })",
                        "112": "    return analysis_results",
                        "113": "",
                        "114": "def is_code_in_block(block):",
                        "115": "    for line in list(block.keys()):",
                        "116": "        if block[line][\"comment_index\"] == -1:",
                        "117": "            return True ",
                        "118": "",
                        "119": "def clean(data):",
                        "120": "    clean_data = []",
                        "121": "    for i in range(len(data)):",
                        "122": "        item = {",
                        "123": "            \"file\": data[i][\"file\"],",
                        "124": "            \"line\": data[i][\"line\"],",
                        "125": "            \"comment\": data[i][\"comment\"],",
                        "126": "            \"comment_time\": data[i][\"comment_time\"],",
                        "127": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "128": "        }",
                        "129": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "130": "            clean_data.append(item)",
                        "131": "    return clean_data",
                        "132": "",
                        "133": "def is_equal(d1,d2):",
                        "134": "    d1_k = list(d1.keys())",
                        "135": "    d2_k = list(d2.keys())",
                        "136": "    for i in d1_k:",
                        "137": "        if d1[i] != d2[i]:",
                        "138": "            return False",
                        "139": "    return True",
                        "140": "",
                        "141": "def average_comment_update_time(data):",
                        "142": "    datetime_pairs = []",
                        "143": "    for file in data:",
                        "144": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "145": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "146": "        datetime_pairs.append((start, end))",
                        "147": "    durations = [end - start for start, end in datetime_pairs]",
                        "148": "    total_duration = sum(durations, timedelta(0))",
                        "149": "    average_duration = total_duration / len(durations)",
                        "150": "    return average_duration"
                    },
                    "comment_lines": {
                        "98": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "99": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "19": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "84": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "89": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "92": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "98": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "2": "import tokenize",
                    "3": "from io import StringIO",
                    "6": "    \"\"\" some test docstring \"\"\"",
                    "99": "                # TODO investigate why line is null",
                    "100": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:",
                    "104": "                            if comment_time > last_modified[str(line[\"line\"])]:",
                    "109": "                                for commit2 in commits:",
                    "110": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                    "111": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                    "112": "                                        break",
                    "113": "                                    else:",
                    "114": "                                        content = \"PROBLEM\"",
                    "118": "                                    \"content\": content,",
                    "136": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
                    "162": "    return average_duration",
                    "163": "",
                    "164": "def classify_comments(data):",
                    "165": "    for comment in data:",
                    "166": "        line = comment[\"content\"]",
                    "167": "        comment_type = \"\"",
                    "168": "",
                    "169": "        # Tokenize the input code",
                    "170": "        tokens = tokenize.generate_tokens(StringIO(line).readline)",
                    "171": "        prev_token = None",
                    "172": "",
                    "173": "        for token in tokens:",
                    "174": "            token_type, token_string, start, end, line = token",
                    "175": "",
                    "176": "            if token_type == tokenize.COMMENT:",
                    "177": "                comment_text = token_string.lstrip(\"#\").strip()",
                    "178": "",
                    "179": "                # Check if inline",
                    "180": "                if prev_token and prev_token.type != tokenize.NL:",
                    "181": "                    comment_type = \"inline\"",
                    "182": "",
                    "183": "                # Check for block comments (multi-line consecutive)",
                    "184": "                elif comment_text and comment_text[0].isalpha():",
                    "185": "                    comment_type = \"block\"",
                    "186": "",
                    "187": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "188": "                elif is_potential_code(comment_text):",
                    "189": "                    comment_type = \"commented out\"",
                    "190": "",
                    "191": "                else:",
                    "192": "                    comment_type = \"normal annotation\"",
                    "193": "",
                    "194": "",
                    "195": "            elif token_type == tokenize.STRING:",
                    "196": "                # Check for docstring: string token at module, function, or class start",
                    "197": "                if prev_token and prev_token.type in {tokenize.DEDENT, tokenize.INDENT}:",
                    "198": "                    comment_type = \"documentation\"",
                    "199": "",
                    "200": "            prev_token = token",
                    "201": "",
                    "202": "        comment[\"comment_type\"] = comment_type",
                    "203": "",
                    "204": "    return data",
                    "205": "",
                    "206": "def is_potential_code(text):",
                    "207": "    try:",
                    "208": "        compile(text, \"<string>\", \"exec\")",
                    "209": "        return True",
                    "210": "    except SyntaxError:",
                    "211": "        return False"
                },
                "deleted": {
                    "96": "                if str(line[\"line\"]) in last_modified_lines:",
                    "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):",
                    "150": "    return average_duration"
                },
                "added-block": [
                    {
                        "2": "import tokenize",
                        "3": "from io import StringIO"
                    },
                    {
                        "6": "    \"\"\" some test docstring \"\"\""
                    },
                    {
                        "99": "                # TODO investigate why line is null",
                        "100": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:"
                    },
                    {
                        "104": "                            if comment_time > last_modified[str(line[\"line\"])]:"
                    },
                    {
                        "109": "                                for commit2 in commits:",
                        "110": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                        "111": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                        "112": "                                        break",
                        "113": "                                    else:",
                        "114": "                                        content = \"PROBLEM\""
                    },
                    {
                        "118": "                                    \"content\": content,"
                    },
                    {
                        "136": "            \"content\": data[i][\"content\"], # Cheeky inline comment"
                    },
                    {
                        "162": "    return average_duration",
                        "163": "",
                        "164": "def classify_comments(data):",
                        "165": "    for comment in data:",
                        "166": "        line = comment[\"content\"]",
                        "167": "        comment_type = \"\"",
                        "168": ""
                    },
                    {
                        "169": "        # Tokenize the input code",
                        "170": "        tokens = tokenize.generate_tokens(StringIO(line).readline)",
                        "171": "        prev_token = None",
                        "172": "",
                        "173": "        for token in tokens:",
                        "174": "            token_type, token_string, start, end, line = token",
                        "175": "",
                        "176": "            if token_type == tokenize.COMMENT:",
                        "177": "                comment_text = token_string.lstrip(\"#\").strip()",
                        "178": ""
                    },
                    {
                        "179": "                # Check if inline",
                        "180": "                if prev_token and prev_token.type != tokenize.NL:",
                        "181": "                    comment_type = \"inline\"",
                        "182": ""
                    },
                    {
                        "183": "                # Check for block comments (multi-line consecutive)",
                        "184": "                elif comment_text and comment_text[0].isalpha():",
                        "185": "                    comment_type = \"block\"",
                        "186": ""
                    },
                    {
                        "187": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "188": "                elif is_potential_code(comment_text):",
                        "189": "                    comment_type = \"commented out\"",
                        "190": "",
                        "191": "                else:",
                        "192": "                    comment_type = \"normal annotation\"",
                        "193": "",
                        "194": "",
                        "195": "            elif token_type == tokenize.STRING:"
                    },
                    {
                        "196": "                # Check for docstring: string token at module, function, or class start",
                        "197": "                if prev_token and prev_token.type in {tokenize.DEDENT, tokenize.INDENT}:",
                        "198": "                    comment_type = \"documentation\"",
                        "199": "",
                        "200": "            prev_token = token",
                        "201": "",
                        "202": "        comment[\"comment_type\"] = comment_type",
                        "203": "",
                        "204": "    return data",
                        "205": "",
                        "206": "def is_potential_code(text):",
                        "207": "    try:",
                        "208": "        compile(text, \"<string>\", \"exec\")",
                        "209": "        return True",
                        "210": "    except SyntaxError:",
                        "211": "        return False"
                    }
                ],
                "deleted-block": [
                    {
                        "96": "                if str(line[\"line\"]) in last_modified_lines:"
                    },
                    {
                        "100": "                            if(comment_time > last_modified[str(line[\"line\"])]):"
                    },
                    {
                        "150": "    return average_duration"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime, timedelta",
                        "2": "import tokenize",
                        "3": "from io import StringIO",
                        "4": "",
                        "5": "def analyse_diff_comments(data):"
                    }
                },
                {
                    "code_lines": {
                        "6": "    \"\"\" some test docstring \"\"\"",
                        "7": "    for file, commits in data.items():",
                        "8": "        for commit in commits:",
                        "9": "            no_change_comments = []",
                        "10": "            for i in range(len(commit[\"comments\"])):",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "12": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "13": "                continue",
                        "14": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "15": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "17": "                        continue",
                        "18": "                    else:",
                        "19": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "20": "                        continue",
                        "21": "                no_change_comments.append(i)"
                    },
                    "comment_lines": {
                        "6": {
                            "comment": "\"\"\" some test docstring \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "docstring"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "22": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "23": "            shift = 0",
                        "24": "            for j in no_change_comments:",
                        "25": "                del commit[\"comments\"][j-shift]",
                        "26": "                shift += 1",
                        "27": "",
                        "28": "def check_inline_comments(data):",
                        "29": "    return",
                        "30": "",
                        "31": "def blockify_comments2(data):",
                        "32": "    for file, commits in data.items():",
                        "33": "        for commit in commits:",
                        "34": "            block_diff = []",
                        "35": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "36": "                block_dict = {}",
                        "37": "                for line in block:",
                        "38": "                    for item in commit[\"comments\"]:",
                        "39": "                        if int(line) == item[\"line\"]:",
                        "40": "                            comment_index = item[\"char_position_in_line\"]",
                        "41": "                            break",
                        "42": "                        else:",
                        "43": "                            comment_index = -1",
                        "44": "                    line_info = {",
                        "45": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "46": "                        \"comment_index\": comment_index",
                        "47": "                    }",
                        "48": "                    block_dict[line] = line_info",
                        "49": "                block_diff.append(block_dict)",
                        "50": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "51": "",
                        "52": "def blockify_comments(data):",
                        "53": "    for file, commits in data.items():",
                        "54": "        for commit in commits:",
                        "55": "            blocks = []",
                        "56": "            current_block = []",
                        "57": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "58": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "59": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "60": "                        blocks.append(current_block)",
                        "61": "                        current_block = []",
                        "62": "                    current_block.append(int(line))",
                        "63": "                else:",
                        "64": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "65": "                        blocks.append(current_block)",
                        "66": "                        current_block = []",
                        "67": "                    current_block.append(int(line))",
                        "68": "            if current_block:",
                        "69": "                blocks.append(current_block)",
                        "70": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "71": "",
                        "72": "def get_comment_lines(comments):",
                        "73": "    comment_lines = []",
                        "74": "    for comment in comments:",
                        "75": "        comment_lines.append(comment[\"line\"])",
                        "76": "    return comment_lines",
                        "77": "",
                        "78": "def get_diff_lines(diff):",
                        "79": "    diff_lines = []",
                        "80": "    for line in diff:",
                        "81": "        diff_lines.append(line[0])",
                        "82": "    return diff_lines",
                        "83": "",
                        "84": "def extract_later_modified_comments(data): ",
                        "85": "    analysis_results = []",
                        "86": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "22": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "        # Store last modified timestamps for each line",
                        "88": "        last_modified = {}",
                        "89": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "90": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "91": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "90": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Track modified lines",
                        "93": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "94": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "95": "            # Compare with comments",
                        "96": "            for line in commit[\"comments\"]:",
                        "97": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "98": "                last_modified_lines = list(last_modified.keys())"
                    },
                    "comment_lines": {
                        "95": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "99": "                # TODO investigate why line is null",
                        "100": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:",
                        "101": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "99": {
                            "comment": "# TODO investigate why line is null",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "102": "                        # Where there are comment changes and no source code changes in block",
                        "103": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "104": "                            if comment_time > last_modified[str(line[\"line\"])]:",
                        "105": "                                for item in commit[\"comments\"]:",
                        "106": "                                    if line[\"line\"] == item[\"line\"]:",
                        "107": "                                        comment = item[\"comment\"]",
                        "108": "                                        break",
                        "109": "                                for commit2 in commits:",
                        "110": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                        "111": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                        "112": "                                        break",
                        "113": "                                    else:",
                        "114": "                                        content = \"PROBLEM\"",
                        "115": "                                analysis_results.append({",
                        "116": "                                    \"file\": file,",
                        "117": "                                    \"line\": line[\"line\"],",
                        "118": "                                    \"content\": content,",
                        "119": "                                    \"comment\": comment,",
                        "120": "                                    \"comment_time\": str(comment_time),",
                        "121": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "122": "                                })",
                        "123": "    return analysis_results",
                        "124": "",
                        "125": "def is_code_in_block(block):",
                        "126": "    for line in list(block.keys()):",
                        "127": "        if block[line][\"comment_index\"] == -1:",
                        "128": "            return True ",
                        "129": "",
                        "130": "def clean(data):",
                        "131": "    clean_data = []",
                        "132": "    for i in range(len(data)):",
                        "133": "        item = {",
                        "134": "            \"file\": data[i][\"file\"],",
                        "135": "            \"line\": data[i][\"line\"],"
                    },
                    "comment_lines": {
                        "102": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "103": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "136": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
                        "137": "            \"comment\": data[i][\"comment\"],",
                        "138": "            \"comment_time\": data[i][\"comment_time\"],",
                        "139": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "140": "        }",
                        "141": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "142": "            clean_data.append(item)",
                        "143": "    return clean_data",
                        "144": "",
                        "145": "def is_equal(d1,d2):",
                        "146": "    d1_k = list(d1.keys())",
                        "147": "    d2_k = list(d2.keys())",
                        "148": "    for i in d1_k:",
                        "149": "        if d1[i] != d2[i]:",
                        "150": "            return False",
                        "151": "    return True",
                        "152": "",
                        "153": "def average_comment_update_time(data):",
                        "154": "    datetime_pairs = []",
                        "155": "    for file in data:",
                        "156": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "157": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "158": "        datetime_pairs.append((start, end))",
                        "159": "    durations = [end - start for start, end in datetime_pairs]",
                        "160": "    total_duration = sum(durations, timedelta(0))",
                        "161": "    average_duration = total_duration / len(durations)",
                        "162": "    return average_duration",
                        "163": "",
                        "164": "def classify_comments(data):",
                        "165": "    for comment in data:",
                        "166": "        line = comment[\"content\"]",
                        "167": "        comment_type = \"\"",
                        "168": ""
                    },
                    "comment_lines": {
                        "136": {
                            "comment": "# Cheeky inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "169": "        # Tokenize the input code",
                        "170": "        tokens = tokenize.generate_tokens(StringIO(line).readline)",
                        "171": "        prev_token = None",
                        "172": "",
                        "173": "        for token in tokens:",
                        "174": "            token_type, token_string, start, end, line = token",
                        "175": "            ",
                        "176": "            if token_type == tokenize.COMMENT:",
                        "177": "                comment_text = token_string.lstrip(\"#\").strip()",
                        "178": ""
                    },
                    "comment_lines": {
                        "169": {
                            "comment": "# Tokenize the input code",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "179": "                # Check if inline",
                        "180": "                if prev_token and prev_token.type != tokenize.NL:",
                        "181": "                    comment_type = \"inline\"",
                        "182": "                "
                    },
                    "comment_lines": {
                        "179": {
                            "comment": "# Check if inline",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "183": "                # Check for block comments (multi-line consecutive)",
                        "184": "                elif comment_text and comment_text[0].isalpha():",
                        "185": "                    comment_type = \"block\"",
                        "186": ""
                    },
                    "comment_lines": {
                        "183": {
                            "comment": "# Check for block comments (multi-line consecutive)",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "187": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "188": "                elif is_potential_code(comment_text):",
                        "189": "                    comment_type = \"commented out\"",
                        "190": "                ",
                        "191": "                else:",
                        "192": "                    comment_type = \"normal annotation\"",
                        "193": "",
                        "194": "",
                        "195": "            elif token_type == tokenize.STRING:"
                    },
                    "comment_lines": {
                        "187": {
                            "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "196": "                # Check for docstring: string token at module, function, or class start",
                        "197": "                if prev_token and prev_token.type in {tokenize.DEDENT, tokenize.INDENT}:",
                        "198": "                    comment_type = \"documentation\"",
                        "199": "",
                        "200": "            prev_token = token",
                        "201": "",
                        "202": "        comment[\"comment_type\"] = comment_type",
                        "203": "        ",
                        "204": "    return data",
                        "205": "",
                        "206": "def is_potential_code(text):",
                        "207": "    try:",
                        "208": "        compile(text, \"<string>\", \"exec\")",
                        "209": "        return True",
                        "210": "    except SyntaxError:",
                        "211": "        return False"
                    },
                    "comment_lines": {
                        "196": {
                            "comment": "# Check for docstring: string token at module, function, or class start",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "6": {
                    "comment": "\"\"\" some test docstring \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "docstring"
                    ],
                    "edit": "added"
                },
                "22": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "90": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "92": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "95": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# TODO investigate why line is null",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "102": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "103": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                },
                "136": {
                    "comment": "# Cheeky inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "169": {
                    "comment": "# Tokenize the input code",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "179": {
                    "comment": "# Check if inline",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "183": {
                    "comment": "# Check for block comments (multi-line consecutive)",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "187": {
                    "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "196": {
                    "comment": "# Check for docstring: string token at module, function, or class start",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "22aa658dddb9457b7fae9f52febd52afdf2a413e",
            "timestamp": "2024-12-04T00:55:39+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "137": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
                    "181": "                # Check for block comments (multi-line consecutive)",
                    "182": "                elif comment_text and comment_text[0].isalpha():",
                    "183": "                    comment_type = \"block\""
                },
                "deleted": {
                    "137": "            \"comment\": data[i][\"comment\"],",
                    "168": "",
                    "172": "",
                    "175": "",
                    "178": "",
                    "182": "",
                    "183": "                # Check for block comments (multi-line consecutive)",
                    "184": "                elif comment_text and comment_text[0].isalpha():",
                    "185": "                    comment_type = \"block\"",
                    "186": "",
                    "190": "",
                    "193": "",
                    "194": "",
                    "199": "",
                    "201": "",
                    "203": ""
                },
                "added-block": [
                    {
                        "137": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment"
                    },
                    {
                        "181": "                # Check for block comments (multi-line consecutive)",
                        "182": "                elif comment_text and comment_text[0].isalpha():",
                        "183": "                    comment_type = \"block\""
                    }
                ],
                "deleted-block": [
                    {
                        "137": "            \"comment\": data[i][\"comment\"],"
                    },
                    {
                        "168": ""
                    },
                    {
                        "172": ""
                    },
                    {
                        "175": ""
                    },
                    {
                        "178": ""
                    },
                    {
                        "182": "",
                        "183": "                # Check for block comments (multi-line consecutive)",
                        "184": "                elif comment_text and comment_text[0].isalpha():",
                        "185": "                    comment_type = \"block\"",
                        "186": ""
                    },
                    {
                        "190": ""
                    },
                    {
                        "193": "",
                        "194": ""
                    },
                    {
                        "199": ""
                    },
                    {
                        "201": ""
                    },
                    {
                        "203": ""
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime, timedelta",
                        "2": "import tokenize",
                        "3": "from io import StringIO",
                        "4": "",
                        "5": "def analyse_diff_comments(data):"
                    }
                },
                {
                    "code_lines": {
                        "6": "    \"\"\" some test docstring \"\"\"",
                        "7": "    for file, commits in data.items():",
                        "8": "        for commit in commits:",
                        "9": "            no_change_comments = []",
                        "10": "            for i in range(len(commit[\"comments\"])):",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "12": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "13": "                continue",
                        "14": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "15": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "17": "                        continue",
                        "18": "                    else:",
                        "19": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "20": "                        continue",
                        "21": "                no_change_comments.append(i)"
                    },
                    "comment_lines": {
                        "6": {
                            "comment": "\"\"\" some test docstring \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "docstring"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "22": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "23": "            shift = 0",
                        "24": "            for j in no_change_comments:",
                        "25": "                del commit[\"comments\"][j-shift]",
                        "26": "                shift += 1",
                        "27": "",
                        "28": "def check_inline_comments(data):",
                        "29": "    return",
                        "30": "",
                        "31": "def blockify_comments2(data):",
                        "32": "    for file, commits in data.items():",
                        "33": "        for commit in commits:",
                        "34": "            block_diff = []",
                        "35": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "36": "                block_dict = {}",
                        "37": "                for line in block:",
                        "38": "                    for item in commit[\"comments\"]:",
                        "39": "                        if int(line) == item[\"line\"]:",
                        "40": "                            comment_index = item[\"char_position_in_line\"]",
                        "41": "                            break",
                        "42": "                        else:",
                        "43": "                            comment_index = -1",
                        "44": "                    line_info = {",
                        "45": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "46": "                        \"comment_index\": comment_index",
                        "47": "                    }",
                        "48": "                    block_dict[line] = line_info",
                        "49": "                block_diff.append(block_dict)",
                        "50": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "51": "",
                        "52": "def blockify_comments(data):",
                        "53": "    for file, commits in data.items():",
                        "54": "        for commit in commits:",
                        "55": "            blocks = []",
                        "56": "            current_block = []",
                        "57": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "58": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "59": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "60": "                        blocks.append(current_block)",
                        "61": "                        current_block = []",
                        "62": "                    current_block.append(int(line))",
                        "63": "                else:",
                        "64": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "65": "                        blocks.append(current_block)",
                        "66": "                        current_block = []",
                        "67": "                    current_block.append(int(line))",
                        "68": "            if current_block:",
                        "69": "                blocks.append(current_block)",
                        "70": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "71": "",
                        "72": "def get_comment_lines(comments):",
                        "73": "    comment_lines = []",
                        "74": "    for comment in comments:",
                        "75": "        comment_lines.append(comment[\"line\"])",
                        "76": "    return comment_lines",
                        "77": "",
                        "78": "def get_diff_lines(diff):",
                        "79": "    diff_lines = []",
                        "80": "    for line in diff:",
                        "81": "        diff_lines.append(line[0])",
                        "82": "    return diff_lines",
                        "83": "",
                        "84": "def extract_later_modified_comments(data): ",
                        "85": "    analysis_results = []",
                        "86": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "22": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "        # Store last modified timestamps for each line",
                        "88": "        last_modified = {}",
                        "89": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "90": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "91": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "90": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Track modified lines",
                        "93": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "94": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "95": "            # Compare with comments",
                        "96": "            for line in commit[\"comments\"]:",
                        "97": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "98": "                last_modified_lines = list(last_modified.keys())"
                    },
                    "comment_lines": {
                        "95": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "99": "                # TODO investigate why line is null",
                        "100": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:",
                        "101": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "99": {
                            "comment": "# TODO investigate why line is null",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "102": "                        # Where there are comment changes and no source code changes in block",
                        "103": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "104": "                            if comment_time > last_modified[str(line[\"line\"])]:",
                        "105": "                                for item in commit[\"comments\"]:",
                        "106": "                                    if line[\"line\"] == item[\"line\"]:",
                        "107": "                                        comment = item[\"comment\"]",
                        "108": "                                        break",
                        "109": "                                for commit2 in commits:",
                        "110": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                        "111": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                        "112": "                                        break",
                        "113": "                                    else:",
                        "114": "                                        content = \"PROBLEM\"",
                        "115": "                                analysis_results.append({",
                        "116": "                                    \"file\": file,",
                        "117": "                                    \"line\": line[\"line\"],",
                        "118": "                                    \"content\": content,",
                        "119": "                                    \"comment\": comment,",
                        "120": "                                    \"comment_time\": str(comment_time),",
                        "121": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "122": "                                })",
                        "123": "    return analysis_results",
                        "124": "",
                        "125": "def is_code_in_block(block):",
                        "126": "    for line in list(block.keys()):",
                        "127": "        if block[line][\"comment_index\"] == -1:",
                        "128": "            return True ",
                        "129": "",
                        "130": "def clean(data):",
                        "131": "    clean_data = []",
                        "132": "    for i in range(len(data)):",
                        "133": "        item = {",
                        "134": "            \"file\": data[i][\"file\"],",
                        "135": "            \"line\": data[i][\"line\"],"
                    },
                    "comment_lines": {
                        "102": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "103": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "136": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
                        "137": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
                        "138": "            \"comment_time\": data[i][\"comment_time\"],",
                        "139": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "140": "        }",
                        "141": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "142": "            clean_data.append(item)",
                        "143": "    return clean_data",
                        "144": "",
                        "145": "def is_equal(d1,d2):",
                        "146": "    d1_k = list(d1.keys())",
                        "147": "    d2_k = list(d2.keys())",
                        "148": "    for i in d1_k:",
                        "149": "        if d1[i] != d2[i]:",
                        "150": "            return False",
                        "151": "    return True",
                        "152": "",
                        "153": "def average_comment_update_time(data):",
                        "154": "    datetime_pairs = []",
                        "155": "    for file in data:",
                        "156": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "157": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "158": "        datetime_pairs.append((start, end))",
                        "159": "    durations = [end - start for start, end in datetime_pairs]",
                        "160": "    total_duration = sum(durations, timedelta(0))",
                        "161": "    average_duration = total_duration / len(durations)",
                        "162": "    return average_duration",
                        "163": "",
                        "164": "def classify_comments(data):",
                        "165": "    for comment in data:",
                        "166": "        line = comment[\"content\"]",
                        "167": "        comment_type = \"\""
                    },
                    "comment_lines": {
                        "136": {
                            "comment": "# Cheeky inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        },
                        "137": {
                            "comment": "# Cheeky 2 inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "168": "        # Tokenize the input code",
                        "169": "        tokens = tokenize.generate_tokens(StringIO(line).readline)",
                        "170": "        prev_token = None",
                        "171": "        for token in tokens:",
                        "172": "            token_type, token_string, start, end, line = token",
                        "173": "            if token_type == tokenize.COMMENT:",
                        "174": "                comment_text = token_string.lstrip(\"#\").strip()"
                    },
                    "comment_lines": {
                        "168": {
                            "comment": "# Tokenize the input code",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "175": "                # Check if inline",
                        "176": "                if prev_token and prev_token.type != tokenize.NL:",
                        "177": "                    comment_type = \"inline\""
                    },
                    "comment_lines": {
                        "175": {
                            "comment": "# Check if inline",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "178": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "179": "                elif is_potential_code(comment_text):",
                        "180": "                    comment_type = \"commented out\""
                    },
                    "comment_lines": {
                        "178": {
                            "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "181": "                # Check for block comments (multi-line consecutive)",
                        "182": "                elif comment_text and comment_text[0].isalpha():",
                        "183": "                    comment_type = \"block\"",
                        "184": "                else:",
                        "185": "                    comment_type = \"normal annotation\"",
                        "186": "            elif token_type == tokenize.STRING:"
                    },
                    "comment_lines": {
                        "181": {
                            "comment": "# Check for block comments (multi-line consecutive)",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "187": "                # Check for docstring: string token at module, function, or class start",
                        "188": "                if prev_token and prev_token.type in {tokenize.DEDENT, tokenize.INDENT}:",
                        "189": "                    comment_type = \"documentation\"",
                        "190": "            prev_token = token",
                        "191": "        comment[\"comment_type\"] = comment_type",
                        "192": "    return data",
                        "193": "",
                        "194": "def is_potential_code(text):",
                        "195": "    try:",
                        "196": "        compile(text, \"<string>\", \"exec\")",
                        "197": "        return True",
                        "198": "    except SyntaxError:",
                        "199": "        return False"
                    },
                    "comment_lines": {
                        "187": {
                            "comment": "# Check for docstring: string token at module, function, or class start",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "6": {
                    "comment": "\"\"\" some test docstring \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "docstring"
                    ]
                },
                "22": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "90": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "92": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "95": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# TODO investigate why line is null",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "102": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "103": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                },
                "136": {
                    "comment": "# Cheeky inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "137": {
                    "comment": "# Cheeky 2 inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "168": {
                    "comment": "# Tokenize the input code",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "175": {
                    "comment": "# Check if inline",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "178": {
                    "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "181": {
                    "comment": "# Check for block comments (multi-line consecutive)",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "187": {
                    "comment": "# Check for docstring: string token at module, function, or class start",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "76c0e457bfe78effef6b104d334eed6a7fa3e4e4",
            "timestamp": "2024-12-04T23:01:11+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "8": "        for commit in commits: #inline-test-comment",
                    "108": "                                        type = item[\"type\"]",
                    "121": "                                    \"type\": type,",
                    "140": "            \"type\": data[i][\"type\"],",
                    "158": "    if data == None: return",
                    "168": "def classify_comments(lines):",
                    "169": "        line_types = []",
                    "170": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "171": "        if is_potential_code(lines.lstrip(\"#\").strip()) and is_potential_code(lines.lstrip(\"\\\"\\\"\\\"\").strip()):",
                    "172": "            line_types.append(\"commented-out\")",
                    "173": "        # Check for block comments (multi-line consecutive)",
                    "174": "        if lines.find(\"\\n\") != -1:",
                    "175": "            line_types.append(\"block\")",
                    "176": "        # Check if text has docstring format with \"\"\"\" somewhere",
                    "177": "        if lines.find(\"\\\"\\\"\\\"\") != -1:",
                    "178": "            line_types.append(\"docstring\")",
                    "179": "        if len(line_types) == 0:",
                    "180": "            line_types.append(\"normal\")",
                    "181": "        return line_types",
                    "188": "        return False",
                    "189": "",
                    "190": "def classify_content(data):",
                    "191": "    for item in data:",
                    "192": "        if \"normal\" in item[\"type\"]:",
                    "193": "            line = item[\"content\"]",
                    "194": "            if bool(line.split(\"#\")[0].strip()) and is_potential_code(line.split(\"#\")[0]):",
                    "195": "                item[\"type\"].append(\"inline\")",
                    "196": "    return data"
                },
                "deleted": {
                    "8": "        for commit in commits:",
                    "164": "def classify_comments(data):",
                    "165": "    for comment in data:",
                    "166": "        line = comment[\"content\"]",
                    "167": "        comment_type = \"\"",
                    "168": "        # Tokenize the input code",
                    "169": "        tokens = tokenize.generate_tokens(StringIO(line).readline)",
                    "170": "        prev_token = None",
                    "171": "        for token in tokens:",
                    "172": "            token_type, token_string, start, end, line = token",
                    "173": "            if token_type == tokenize.COMMENT:",
                    "174": "                comment_text = token_string.lstrip(\"#\").strip()",
                    "175": "                # Check if inline",
                    "176": "                if prev_token and prev_token.type != tokenize.NL:",
                    "177": "                    comment_type = \"inline\"",
                    "178": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "179": "                elif is_potential_code(comment_text):",
                    "180": "                    comment_type = \"commented out\"",
                    "181": "                # Check for block comments (multi-line consecutive)",
                    "182": "                elif comment_text and comment_text[0].isalpha():",
                    "183": "                    comment_type = \"block\"",
                    "184": "                else:",
                    "185": "                    comment_type = \"normal annotation\"",
                    "186": "            elif token_type == tokenize.STRING:",
                    "187": "                # Check for docstring: string token at module, function, or class start",
                    "188": "                if prev_token and prev_token.type in {tokenize.DEDENT, tokenize.INDENT}:",
                    "189": "                    comment_type = \"documentation\"",
                    "190": "            prev_token = token",
                    "191": "        comment[\"comment_type\"] = comment_type",
                    "192": "    return data",
                    "199": "        return False"
                },
                "added-block": [
                    {
                        "8": "        for commit in commits: #inline-test-comment"
                    },
                    {
                        "108": "                                        type = item[\"type\"]"
                    },
                    {
                        "121": "                                    \"type\": type,"
                    },
                    {
                        "140": "            \"type\": data[i][\"type\"],"
                    },
                    {
                        "158": "    if data == None: return"
                    },
                    {
                        "168": "def classify_comments(lines):",
                        "169": "        line_types = []"
                    },
                    {
                        "170": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "171": "        if is_potential_code(lines.lstrip(\"#\").strip()) and is_potential_code(lines.lstrip(\"\\\"\\\"\\\"\").strip()):",
                        "172": "            line_types.append(\"commented-out\")"
                    },
                    {
                        "173": "        # Check for block comments (multi-line consecutive)",
                        "174": "        if lines.find(\"\\n\") != -1:",
                        "175": "            line_types.append(\"block\")"
                    },
                    {
                        "176": "        # Check if text has docstring format with \"\"\"\" somewhere",
                        "177": "        if lines.find(\"\\\"\\\"\\\"\") != -1:",
                        "178": "            line_types.append(\"docstring\")",
                        "179": "        if len(line_types) == 0:",
                        "180": "            line_types.append(\"normal\")",
                        "181": "        return line_types"
                    },
                    {
                        "188": "        return False",
                        "189": "",
                        "190": "def classify_content(data):",
                        "191": "    for item in data:",
                        "192": "        if \"normal\" in item[\"type\"]:",
                        "193": "            line = item[\"content\"]",
                        "194": "            if bool(line.split(\"#\")[0].strip()) and is_potential_code(line.split(\"#\")[0]):",
                        "195": "                item[\"type\"].append(\"inline\")",
                        "196": "    return data"
                    }
                ],
                "deleted-block": [
                    {
                        "8": "        for commit in commits:"
                    },
                    {
                        "164": "def classify_comments(data):",
                        "165": "    for comment in data:",
                        "166": "        line = comment[\"content\"]",
                        "167": "        comment_type = \"\"",
                        "168": "        # Tokenize the input code",
                        "169": "        tokens = tokenize.generate_tokens(StringIO(line).readline)"
                    },
                    {
                        "170": "        prev_token = None",
                        "171": "        for token in tokens:",
                        "172": "            token_type, token_string, start, end, line = token"
                    },
                    {
                        "173": "            if token_type == tokenize.COMMENT:",
                        "174": "                comment_text = token_string.lstrip(\"#\").strip()",
                        "175": "                # Check if inline"
                    },
                    {
                        "176": "                if prev_token and prev_token.type != tokenize.NL:",
                        "177": "                    comment_type = \"inline\"",
                        "178": "                # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "179": "                elif is_potential_code(comment_text):",
                        "180": "                    comment_type = \"commented out\"",
                        "181": "                # Check for block comments (multi-line consecutive)",
                        "182": "                elif comment_text and comment_text[0].isalpha():",
                        "183": "                    comment_type = \"block\"",
                        "184": "                else:",
                        "185": "                    comment_type = \"normal annotation\"",
                        "186": "            elif token_type == tokenize.STRING:",
                        "187": "                # Check for docstring: string token at module, function, or class start",
                        "188": "                if prev_token and prev_token.type in {tokenize.DEDENT, tokenize.INDENT}:",
                        "189": "                    comment_type = \"documentation\"",
                        "190": "            prev_token = token",
                        "191": "        comment[\"comment_type\"] = comment_type",
                        "192": "    return data"
                    },
                    {
                        "199": "        return False"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime, timedelta",
                        "2": "import tokenize",
                        "3": "from io import StringIO",
                        "4": "",
                        "5": "def analyse_diff_comments(data):"
                    }
                },
                {
                    "code_lines": {
                        "6": "    \"\"\" some test docstring \"\"\"",
                        "7": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "6": {
                            "comment": "\"\"\" some test docstring \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "docstring"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "        for commit in commits: #inline-test-comment",
                        "9": "            no_change_comments = []",
                        "10": "            for i in range(len(commit[\"comments\"])):",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "12": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "13": "                continue",
                        "14": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "15": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "17": "                        continue",
                        "18": "                    else:",
                        "19": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "20": "                        continue",
                        "21": "                no_change_comments.append(i)"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "#inline-test-comment",
                            "char_position_in_line": 31,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "22": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "23": "            shift = 0",
                        "24": "            for j in no_change_comments:",
                        "25": "                del commit[\"comments\"][j-shift]",
                        "26": "                shift += 1",
                        "27": "",
                        "28": "def check_inline_comments(data):",
                        "29": "    return",
                        "30": "",
                        "31": "def blockify_comments2(data):",
                        "32": "    for file, commits in data.items():",
                        "33": "        for commit in commits:",
                        "34": "            block_diff = []",
                        "35": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "36": "                block_dict = {}",
                        "37": "                for line in block:",
                        "38": "                    for item in commit[\"comments\"]:",
                        "39": "                        if int(line) == item[\"line\"]:",
                        "40": "                            comment_index = item[\"char_position_in_line\"]",
                        "41": "                            break",
                        "42": "                        else:",
                        "43": "                            comment_index = -1",
                        "44": "                    line_info = {",
                        "45": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "46": "                        \"comment_index\": comment_index",
                        "47": "                    }",
                        "48": "                    block_dict[line] = line_info",
                        "49": "                block_diff.append(block_dict)",
                        "50": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "51": "",
                        "52": "def blockify_comments(data):",
                        "53": "    for file, commits in data.items():",
                        "54": "        for commit in commits:",
                        "55": "            blocks = []",
                        "56": "            current_block = []",
                        "57": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "58": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "59": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "60": "                        blocks.append(current_block)",
                        "61": "                        current_block = []",
                        "62": "                    current_block.append(int(line))",
                        "63": "                else:",
                        "64": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "65": "                        blocks.append(current_block)",
                        "66": "                        current_block = []",
                        "67": "                    current_block.append(int(line))",
                        "68": "            if current_block:",
                        "69": "                blocks.append(current_block)",
                        "70": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "71": "",
                        "72": "def get_comment_lines(comments):",
                        "73": "    comment_lines = []",
                        "74": "    for comment in comments:",
                        "75": "        comment_lines.append(comment[\"line\"])",
                        "76": "    return comment_lines",
                        "77": "",
                        "78": "def get_diff_lines(diff):",
                        "79": "    diff_lines = []",
                        "80": "    for line in diff:",
                        "81": "        diff_lines.append(line[0])",
                        "82": "    return diff_lines",
                        "83": "",
                        "84": "def extract_later_modified_comments(data): ",
                        "85": "    analysis_results = []",
                        "86": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "22": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "        # Store last modified timestamps for each line",
                        "88": "        last_modified = {}",
                        "89": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "90": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "91": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "90": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Track modified lines",
                        "93": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "94": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "95": "            # Compare with comments",
                        "96": "            for line in commit[\"comments\"]:",
                        "97": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "98": "                last_modified_lines = list(last_modified.keys())"
                    },
                    "comment_lines": {
                        "95": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "99": "                # TODO investigate why line is null",
                        "100": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:",
                        "101": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "99": {
                            "comment": "# TODO investigate why line is null",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "102": "                        # Where there are comment changes and no source code changes in block",
                        "103": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "104": "                            if comment_time > last_modified[str(line[\"line\"])]:",
                        "105": "                                for item in commit[\"comments\"]:",
                        "106": "                                    if line[\"line\"] == item[\"line\"]:",
                        "107": "                                        comment = item[\"comment\"]",
                        "108": "                                        type = item[\"type\"]",
                        "109": "                                        break",
                        "110": "                                for commit2 in commits:",
                        "111": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                        "112": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                        "113": "                                        break",
                        "114": "                                    else:",
                        "115": "                                        content = \"PROBLEM\"",
                        "116": "                                analysis_results.append({",
                        "117": "                                    \"file\": file,",
                        "118": "                                    \"line\": line[\"line\"],",
                        "119": "                                    \"content\": content,",
                        "120": "                                    \"comment\": comment,",
                        "121": "                                    \"type\": type,",
                        "122": "                                    \"comment_time\": str(comment_time),",
                        "123": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "124": "                                })",
                        "125": "    return analysis_results",
                        "126": "",
                        "127": "def is_code_in_block(block):",
                        "128": "    for line in list(block.keys()):",
                        "129": "        if block[line][\"comment_index\"] == -1:",
                        "130": "            return True ",
                        "131": "",
                        "132": "def clean(data):",
                        "133": "    clean_data = []",
                        "134": "    for i in range(len(data)):",
                        "135": "        item = {",
                        "136": "            \"file\": data[i][\"file\"],",
                        "137": "            \"line\": data[i][\"line\"],"
                    },
                    "comment_lines": {
                        "102": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "103": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "138": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
                        "139": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
                        "140": "            \"type\": data[i][\"type\"],",
                        "141": "            \"comment_time\": data[i][\"comment_time\"],",
                        "142": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "143": "        }",
                        "144": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "145": "            clean_data.append(item)",
                        "146": "    return clean_data",
                        "147": "",
                        "148": "def is_equal(d1,d2):",
                        "149": "    d1_k = list(d1.keys())",
                        "150": "    d2_k = list(d2.keys())",
                        "151": "    for i in d1_k:",
                        "152": "        if d1[i] != d2[i]:",
                        "153": "            return False",
                        "154": "    return True",
                        "155": "",
                        "156": "def average_comment_update_time(data):",
                        "157": "    datetime_pairs = []",
                        "158": "    if data == None: return",
                        "159": "    for file in data:",
                        "160": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "161": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "162": "        datetime_pairs.append((start, end))",
                        "163": "    durations = [end - start for start, end in datetime_pairs]",
                        "164": "    total_duration = sum(durations, timedelta(0))",
                        "165": "    average_duration = total_duration / len(durations)",
                        "166": "    return average_duration",
                        "167": "",
                        "168": "def classify_comments(lines):",
                        "169": "        line_types = []"
                    },
                    "comment_lines": {
                        "138": {
                            "comment": "# Cheeky inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        },
                        "139": {
                            "comment": "# Cheeky 2 inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "170": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "171": "        if is_potential_code(lines.lstrip(\"#\").strip()) and is_potential_code(lines.lstrip(\"\\\"\\\"\\\"\").strip()):",
                        "172": "            line_types.append(\"commented-out\")"
                    },
                    "comment_lines": {
                        "170": {
                            "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "173": "        # Check for block comments (multi-line consecutive)",
                        "174": "        if lines.find(\"\\n\") != -1:",
                        "175": "            line_types.append(\"block\")"
                    },
                    "comment_lines": {
                        "173": {
                            "comment": "# Check for block comments (multi-line consecutive)",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "176": "        # Check if text has docstring format with \"\"\"\" somewhere",
                        "177": "        if lines.find(\"\\\"\\\"\\\"\") != -1:",
                        "178": "            line_types.append(\"docstring\")",
                        "179": "        if len(line_types) == 0:",
                        "180": "            line_types.append(\"normal\")",
                        "181": "        return line_types",
                        "182": "",
                        "183": "def is_potential_code(text):",
                        "184": "    try:",
                        "185": "        compile(text, \"<string>\", \"exec\")",
                        "186": "        return True",
                        "187": "    except SyntaxError:",
                        "188": "        return False",
                        "189": "",
                        "190": "def classify_content(data):",
                        "191": "    for item in data:",
                        "192": "        if \"normal\" in item[\"type\"]:",
                        "193": "            line = item[\"content\"]",
                        "194": "            if bool(line.split(\"#\")[0].strip()) and is_potential_code(line.split(\"#\")[0]):",
                        "195": "                item[\"type\"].append(\"inline\")",
                        "196": "    return data"
                    },
                    "comment_lines": {
                        "176": {
                            "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
                            "char_position_in_line": 8,
                            "type": [
                                "docstring"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "6": {
                    "comment": "\"\"\" some test docstring \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "docstring"
                    ]
                },
                "8": {
                    "comment": "#inline-test-comment",
                    "char_position_in_line": 31,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "22": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "90": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "92": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "95": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# TODO investigate why line is null",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "102": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "103": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                },
                "138": {
                    "comment": "# Cheeky inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "139": {
                    "comment": "# Cheeky 2 inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "170": {
                    "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "173": {
                    "comment": "# Check for block comments (multi-line consecutive)",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "176": {
                    "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
                    "char_position_in_line": 8,
                    "type": [
                        "docstring"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "0589247d57ea639c93f9f95ec960d8066be61de2",
            "timestamp": "2024-12-05T00:04:47+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "4": "import re",
                    "193": "        if \"normal\" or \"block\" in item[\"type\"]:",
                    "195": "            if line.find(\"#\") != -1 and line.split(\"#\")[0].strip() != \"\":",
                    "196": "                item[\"type\"] = [\"inline\"]"
                },
                "deleted": {
                    "192": "        if \"normal\" in item[\"type\"]:",
                    "194": "            if bool(line.split(\"#\")[0].strip()) and is_potential_code(line.split(\"#\")[0]):",
                    "195": "                item[\"type\"].append(\"inline\")"
                },
                "added-block": [
                    {
                        "4": "import re"
                    },
                    {
                        "193": "        if \"normal\" or \"block\" in item[\"type\"]:"
                    },
                    {
                        "195": "            if line.find(\"#\") != -1 and line.split(\"#\")[0].strip() != \"\":",
                        "196": "                item[\"type\"] = [\"inline\"]"
                    }
                ],
                "deleted-block": [
                    {
                        "192": "        if \"normal\" in item[\"type\"]:"
                    },
                    {
                        "194": "            if bool(line.split(\"#\")[0].strip()) and is_potential_code(line.split(\"#\")[0]):",
                        "195": "                item[\"type\"].append(\"inline\")"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime, timedelta",
                        "2": "import tokenize",
                        "3": "from io import StringIO",
                        "4": "import re",
                        "5": "",
                        "6": "def analyse_diff_comments(data):"
                    }
                },
                {
                    "code_lines": {
                        "7": "    \"\"\" some test docstring \"\"\"",
                        "8": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "\"\"\" some test docstring \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "docstring"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "9": "        for commit in commits: #inline-test-comment",
                        "10": "            no_change_comments = []",
                        "11": "            for i in range(len(commit[\"comments\"])):",
                        "12": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "13": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "14": "                continue",
                        "15": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "16": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "17": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "18": "                        continue",
                        "19": "                    else:",
                        "20": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "21": "                        continue",
                        "22": "                no_change_comments.append(i)"
                    },
                    "comment_lines": {
                        "9": {
                            "comment": "#inline-test-comment",
                            "char_position_in_line": 31,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "23": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "24": "            shift = 0",
                        "25": "            for j in no_change_comments:",
                        "26": "                del commit[\"comments\"][j-shift]",
                        "27": "                shift += 1",
                        "28": "",
                        "29": "def check_inline_comments(data):",
                        "30": "    return",
                        "31": "",
                        "32": "def blockify_comments2(data):",
                        "33": "    for file, commits in data.items():",
                        "34": "        for commit in commits:",
                        "35": "            block_diff = []",
                        "36": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "37": "                block_dict = {}",
                        "38": "                for line in block:",
                        "39": "                    for item in commit[\"comments\"]:",
                        "40": "                        if int(line) == item[\"line\"]:",
                        "41": "                            comment_index = item[\"char_position_in_line\"]",
                        "42": "                            break",
                        "43": "                        else:",
                        "44": "                            comment_index = -1",
                        "45": "                    line_info = {",
                        "46": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "47": "                        \"comment_index\": comment_index",
                        "48": "                    }",
                        "49": "                    block_dict[line] = line_info",
                        "50": "                block_diff.append(block_dict)",
                        "51": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "52": "",
                        "53": "def blockify_comments(data):",
                        "54": "    for file, commits in data.items():",
                        "55": "        for commit in commits:",
                        "56": "            blocks = []",
                        "57": "            current_block = []",
                        "58": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "59": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "60": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "61": "                        blocks.append(current_block)",
                        "62": "                        current_block = []",
                        "63": "                    current_block.append(int(line))",
                        "64": "                else:",
                        "65": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "66": "                        blocks.append(current_block)",
                        "67": "                        current_block = []",
                        "68": "                    current_block.append(int(line))",
                        "69": "            if current_block:",
                        "70": "                blocks.append(current_block)",
                        "71": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "72": "",
                        "73": "def get_comment_lines(comments):",
                        "74": "    comment_lines = []",
                        "75": "    for comment in comments:",
                        "76": "        comment_lines.append(comment[\"line\"])",
                        "77": "    return comment_lines",
                        "78": "",
                        "79": "def get_diff_lines(diff):",
                        "80": "    diff_lines = []",
                        "81": "    for line in diff:",
                        "82": "        diff_lines.append(line[0])",
                        "83": "    return diff_lines",
                        "84": "",
                        "85": "def extract_later_modified_comments(data): ",
                        "86": "    analysis_results = []",
                        "87": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "23": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "88": "        # Store last modified timestamps for each line",
                        "89": "        last_modified = {}",
                        "90": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "88": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "91": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "92": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "91": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "93": "            # Track modified lines",
                        "94": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "95": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "93": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "96": "            # Compare with comments",
                        "97": "            for line in commit[\"comments\"]:",
                        "98": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "99": "                last_modified_lines = list(last_modified.keys())"
                    },
                    "comment_lines": {
                        "96": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "100": "                # TODO investigate why line is null",
                        "101": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:",
                        "102": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "100": {
                            "comment": "# TODO investigate why line is null",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "103": "                        # Where there are comment changes and no source code changes in block",
                        "104": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "105": "                            if comment_time > last_modified[str(line[\"line\"])]:",
                        "106": "                                for item in commit[\"comments\"]:",
                        "107": "                                    if line[\"line\"] == item[\"line\"]:",
                        "108": "                                        comment = item[\"comment\"]",
                        "109": "                                        type = item[\"type\"]",
                        "110": "                                        break",
                        "111": "                                for commit2 in commits:",
                        "112": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                        "113": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                        "114": "                                        break",
                        "115": "                                    else:",
                        "116": "                                        content = \"PROBLEM\"",
                        "117": "                                analysis_results.append({",
                        "118": "                                    \"file\": file,",
                        "119": "                                    \"line\": line[\"line\"],",
                        "120": "                                    \"content\": content,",
                        "121": "                                    \"comment\": comment,",
                        "122": "                                    \"type\": type,",
                        "123": "                                    \"comment_time\": str(comment_time),",
                        "124": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "125": "                                })",
                        "126": "    return analysis_results",
                        "127": "",
                        "128": "def is_code_in_block(block):",
                        "129": "    for line in list(block.keys()):",
                        "130": "        if block[line][\"comment_index\"] == -1:",
                        "131": "            return True ",
                        "132": "",
                        "133": "def clean(data):",
                        "134": "    clean_data = []",
                        "135": "    for i in range(len(data)):",
                        "136": "        item = {",
                        "137": "            \"file\": data[i][\"file\"],",
                        "138": "            \"line\": data[i][\"line\"],"
                    },
                    "comment_lines": {
                        "103": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "104": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "139": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
                        "140": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
                        "141": "            \"type\": data[i][\"type\"],",
                        "142": "            \"comment_time\": data[i][\"comment_time\"],",
                        "143": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "144": "        }",
                        "145": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "146": "            clean_data.append(item)",
                        "147": "    return clean_data",
                        "148": "",
                        "149": "def is_equal(d1,d2):",
                        "150": "    d1_k = list(d1.keys())",
                        "151": "    d2_k = list(d2.keys())",
                        "152": "    for i in d1_k:",
                        "153": "        if d1[i] != d2[i]:",
                        "154": "            return False",
                        "155": "    return True",
                        "156": "",
                        "157": "def average_comment_update_time(data):",
                        "158": "    datetime_pairs = []",
                        "159": "    if data == None: return",
                        "160": "    for file in data:",
                        "161": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "162": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "163": "        datetime_pairs.append((start, end))",
                        "164": "    durations = [end - start for start, end in datetime_pairs]",
                        "165": "    total_duration = sum(durations, timedelta(0))",
                        "166": "    average_duration = total_duration / len(durations)",
                        "167": "    return average_duration",
                        "168": "",
                        "169": "def classify_comments(lines):",
                        "170": "        line_types = []"
                    },
                    "comment_lines": {
                        "139": {
                            "comment": "# Cheeky inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        },
                        "140": {
                            "comment": "# Cheeky 2 inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "171": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "172": "        if is_potential_code(lines.lstrip(\"#\").strip()) and is_potential_code(lines.lstrip(\"\\\"\\\"\\\"\").strip()):",
                        "173": "            line_types.append(\"commented-out\")"
                    },
                    "comment_lines": {
                        "171": {
                            "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "174": "        # Check for block comments (multi-line consecutive)",
                        "175": "        if lines.find(\"\\n\") != -1:",
                        "176": "            line_types.append(\"block\")"
                    },
                    "comment_lines": {
                        "174": {
                            "comment": "# Check for block comments (multi-line consecutive)",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "177": "        # Check if text has docstring format with \"\"\"\" somewhere",
                        "178": "        if lines.find(\"\\\"\\\"\\\"\") != -1:",
                        "179": "            line_types.append(\"docstring\")",
                        "180": "        if len(line_types) == 0:",
                        "181": "            line_types.append(\"normal\")",
                        "182": "        return line_types",
                        "183": "",
                        "184": "def is_potential_code(text):",
                        "185": "    try:",
                        "186": "        compile(text, \"<string>\", \"exec\")",
                        "187": "        return True",
                        "188": "    except SyntaxError:",
                        "189": "        return False",
                        "190": "",
                        "191": "def classify_content(data):",
                        "192": "    for item in data:",
                        "193": "        if \"normal\" or \"block\" in item[\"type\"]:",
                        "194": "            line = item[\"content\"]",
                        "195": "            if line.find(\"#\") != -1 and line.split(\"#\")[0].strip() != \"\":",
                        "196": "                item[\"type\"] = [\"inline\"]",
                        "197": "    return data"
                    },
                    "comment_lines": {
                        "177": {
                            "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
                            "char_position_in_line": 8,
                            "type": [
                                "docstring"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "7": {
                    "comment": "\"\"\" some test docstring \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "docstring"
                    ]
                },
                "9": {
                    "comment": "#inline-test-comment",
                    "char_position_in_line": 31,
                    "type": [
                        "commented-out"
                    ]
                },
                "23": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "88": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "91": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "93": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "96": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "100": {
                    "comment": "# TODO investigate why line is null",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "103": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "104": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                },
                "139": {
                    "comment": "# Cheeky inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "140": {
                    "comment": "# Cheeky 2 inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "171": {
                    "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "174": {
                    "comment": "# Check for block comments (multi-line consecutive)",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "177": {
                    "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
                    "char_position_in_line": 8,
                    "type": [
                        "docstring"
                    ]
                }
            }
        },
        {
            "commit": "2177350ff473ebba0adaed083fc557aacd9adebe",
            "timestamp": "2024-12-05T23:05:58+01:00",
            "author": "alexander.schranner",
            "filename": "build/analysis.py",
            "diff": {
                "added": {
                    "8": "        for commit in commits:",
                    "27": "    print(\"Finished\")",
                    "39": "                    comment_index = -1"
                },
                "deleted": {
                    "7": "    \"\"\" some test docstring \"\"\"",
                    "9": "        for commit in commits: #inline-test-comment",
                    "43": "                        else:",
                    "44": "                            comment_index = -1"
                },
                "added-block": [
                    {
                        "8": "        for commit in commits:"
                    },
                    {
                        "27": "    print(\"Finished\")"
                    },
                    {
                        "39": "                    comment_index = -1"
                    }
                ],
                "deleted-block": [
                    {
                        "7": "    \"\"\" some test docstring \"\"\""
                    },
                    {
                        "9": "        for commit in commits: #inline-test-comment"
                    },
                    {
                        "43": "                        else:",
                        "44": "                            comment_index = -1"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from datetime import datetime, timedelta",
                        "2": "import tokenize",
                        "3": "from io import StringIO",
                        "4": "import re",
                        "5": "",
                        "6": "def analyse_diff_comments(data):",
                        "7": "    for file, commits in data.items():",
                        "8": "        for commit in commits:",
                        "9": "            no_change_comments = []",
                        "10": "            for i in range(len(commit[\"comments\"])):",
                        "11": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"added\"].keys()):",
                        "12": "                    commit[\"comments\"][i][\"edit\"] = \"added\"",
                        "13": "                continue",
                        "14": "                if commit[\"comments\"][i][\"line\"] in list(commit[\"diff\"][\"deleted\"].keys()):",
                        "15": "                    if \"edit\" in list(commit[\"comments\"][i].keys()):",
                        "16": "                        commit[\"comments\"][i][\"edit\"] = \"modified\"",
                        "17": "                        continue",
                        "18": "                    else:",
                        "19": "                        commit[\"comments\"][i][\"edit\"] = \"deleted\"",
                        "20": "                        continue",
                        "21": "                no_change_comments.append(i)"
                    }
                },
                {
                    "code_lines": {
                        "22": "            # Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                        "23": "            shift = 0",
                        "24": "            for j in no_change_comments:",
                        "25": "                del commit[\"comments\"][j-shift]",
                        "26": "                shift += 1",
                        "27": "    print(\"Finished\")",
                        "28": "",
                        "29": "def check_inline_comments(data):",
                        "30": "    return",
                        "31": "",
                        "32": "def blockify_comments2(data):",
                        "33": "    for file, commits in data.items():",
                        "34": "        for commit in commits:",
                        "35": "            block_diff = []",
                        "36": "            for block in commit[\"diff\"][\"block_diff\"]:",
                        "37": "                block_dict = {}",
                        "38": "                for line in block:",
                        "39": "                    comment_index = -1",
                        "40": "                    for item in commit[\"comments\"]:",
                        "41": "                        if int(line) == item[\"line\"]:",
                        "42": "                            comment_index = item[\"char_position_in_line\"]",
                        "43": "                            break",
                        "44": "                    line_info = {",
                        "45": "                        \"content\": commit[\"diff\"][\"added\"][str(line)],",
                        "46": "                        \"comment_index\": comment_index",
                        "47": "                    }",
                        "48": "                    block_dict[line] = line_info",
                        "49": "                block_diff.append(block_dict)",
                        "50": "            commit[\"diff\"][\"block_diff\"] = block_diff",
                        "51": "",
                        "52": "def blockify_comments(data):",
                        "53": "    for file, commits in data.items():",
                        "54": "        for commit in commits:",
                        "55": "            blocks = []",
                        "56": "            current_block = []",
                        "57": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "58": "                if int(line) in get_comment_lines(commit[\"comments\"]):",
                        "59": "                    if current_block and current_block[-1] not in get_comment_lines(commit[\"comments\"]):",
                        "60": "                        blocks.append(current_block)",
                        "61": "                        current_block = []",
                        "62": "                    current_block.append(int(line))",
                        "63": "                else:",
                        "64": "                    if current_block and int(line) != current_block[-1] + 1:",
                        "65": "                        blocks.append(current_block)",
                        "66": "                        current_block = []",
                        "67": "                    current_block.append(int(line))",
                        "68": "            if current_block:",
                        "69": "                blocks.append(current_block)",
                        "70": "            commit[\"diff\"][\"block_diff\"] = blocks",
                        "71": "",
                        "72": "def get_comment_lines(comments):",
                        "73": "    comment_lines = []",
                        "74": "    for comment in comments:",
                        "75": "        comment_lines.append(comment[\"line\"])",
                        "76": "    return comment_lines",
                        "77": "",
                        "78": "def get_diff_lines(diff):",
                        "79": "    diff_lines = []",
                        "80": "    for line in diff:",
                        "81": "        diff_lines.append(line[0])",
                        "82": "    return diff_lines",
                        "83": "",
                        "84": "def extract_later_modified_comments(data): ",
                        "85": "    analysis_results = []",
                        "86": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "22": {
                            "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "87": "        # Store last modified timestamps for each line",
                        "88": "        last_modified = {}",
                        "89": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "87": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "90": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "91": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "90": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "92": "            # Track modified lines",
                        "93": "            for line in list(commit[\"diff\"][\"added\"].keys()):",
                        "94": "                last_modified[line] = commit_time"
                    },
                    "comment_lines": {
                        "92": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "95": "            # Compare with comments",
                        "96": "            for line in commit[\"comments\"]:",
                        "97": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "98": "                last_modified_lines = list(last_modified.keys())"
                    },
                    "comment_lines": {
                        "95": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "99": "                # TODO investigate why line is null",
                        "100": "                if line != \"null\" and str(line[\"line\"]) in last_modified_lines:",
                        "101": "                    for block in commit[\"diff\"][\"block_diff\"]:"
                    },
                    "comment_lines": {
                        "99": {
                            "comment": "# TODO investigate why line is null",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "102": "                        # Where there are comment changes and no source code changes in block",
                        "103": "                        if not is_code_in_block(block): # and block[line[\"line\"]][\"comment_index\"] != -1:",
                        "104": "                            if comment_time > last_modified[str(line[\"line\"])]:",
                        "105": "                                for item in commit[\"comments\"]:",
                        "106": "                                    if line[\"line\"] == item[\"line\"]:",
                        "107": "                                        comment = item[\"comment\"]",
                        "108": "                                        type = item[\"type\"]",
                        "109": "                                        break",
                        "110": "                                for commit2 in commits:",
                        "111": "                                    if datetime.fromisoformat(commit2[\"timestamp\"]) == comment_time:",
                        "112": "                                        content = commit2[\"source_code\"][str(line[\"line\"])]",
                        "113": "                                        break",
                        "114": "                                    else:",
                        "115": "                                        content = \"PROBLEM\"",
                        "116": "                                analysis_results.append({",
                        "117": "                                    \"file\": file,",
                        "118": "                                    \"line\": line[\"line\"],",
                        "119": "                                    \"content\": content,",
                        "120": "                                    \"comment\": comment,",
                        "121": "                                    \"type\": type,",
                        "122": "                                    \"comment_time\": str(comment_time),",
                        "123": "                                    \"last_code_change_time\": str(last_modified[str(line[\"line\"])])",
                        "124": "                                })",
                        "125": "    return analysis_results",
                        "126": "",
                        "127": "def is_code_in_block(block):",
                        "128": "    for line in list(block.keys()):",
                        "129": "        if block[line][\"comment_index\"] == -1:",
                        "130": "            return True ",
                        "131": "",
                        "132": "def clean(data):",
                        "133": "    clean_data = []",
                        "134": "    for i in range(len(data)):",
                        "135": "        item = {",
                        "136": "            \"file\": data[i][\"file\"],",
                        "137": "            \"line\": data[i][\"line\"],"
                    },
                    "comment_lines": {
                        "102": {
                            "comment": "# Where there are comment changes and no source code changes in block",
                            "char_position_in_line": 24,
                            "type": [
                                "normal"
                            ]
                        },
                        "103": {
                            "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                            "char_position_in_line": 56,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "138": "            \"content\": data[i][\"content\"], # Cheeky inline comment",
                        "139": "            \"comment\": data[i][\"comment\"], # Cheeky 2 inline comment",
                        "140": "            \"type\": data[i][\"type\"],",
                        "141": "            \"comment_time\": data[i][\"comment_time\"],",
                        "142": "            \"last_code_change_time\": data[i][\"last_code_change_time\"]",
                        "143": "        }",
                        "144": "        if len(data) > i + 1 and not is_equal(data[i], data[i+1]):",
                        "145": "            clean_data.append(item)",
                        "146": "    return clean_data",
                        "147": "",
                        "148": "def is_equal(d1,d2):",
                        "149": "    d1_k = list(d1.keys())",
                        "150": "    d2_k = list(d2.keys())",
                        "151": "    for i in d1_k:",
                        "152": "        if d1[i] != d2[i]:",
                        "153": "            return False",
                        "154": "    return True",
                        "155": "",
                        "156": "def average_comment_update_time(data):",
                        "157": "    datetime_pairs = []",
                        "158": "    if data == None: return",
                        "159": "    for file in data:",
                        "160": "        start = datetime.fromisoformat(file[\"last_code_change_time\"])",
                        "161": "        end = datetime.fromisoformat(file[\"comment_time\"])",
                        "162": "        datetime_pairs.append((start, end))",
                        "163": "    durations = [end - start for start, end in datetime_pairs]",
                        "164": "    total_duration = sum(durations, timedelta(0))",
                        "165": "    average_duration = total_duration / len(durations)",
                        "166": "    return average_duration",
                        "167": "",
                        "168": "def classify_comments(lines):",
                        "169": "        line_types = []"
                    },
                    "comment_lines": {
                        "138": {
                            "comment": "# Cheeky inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        },
                        "139": {
                            "comment": "# Cheeky 2 inline comment",
                            "char_position_in_line": 43,
                            "type": [
                                "block"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "170": "        # Check for commented-out code (basic heuristic: looks like valid Python code)",
                        "171": "        if is_potential_code(lines.lstrip(\"#\").strip()) and is_potential_code(lines.lstrip(\"\\\"\\\"\\\"\").strip()):",
                        "172": "            line_types.append(\"commented-out\")"
                    },
                    "comment_lines": {
                        "170": {
                            "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "173": "        # Check for block comments (multi-line consecutive)",
                        "174": "        if lines.find(\"\\n\") != -1:",
                        "175": "            line_types.append(\"block\")"
                    },
                    "comment_lines": {
                        "173": {
                            "comment": "# Check for block comments (multi-line consecutive)",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "176": "        # Check if text has docstring format with \"\"\"\" somewhere",
                        "177": "        if lines.find(\"\\\"\\\"\\\"\") != -1:",
                        "178": "            line_types.append(\"docstring\")",
                        "179": "        if len(line_types) == 0:",
                        "180": "            line_types.append(\"normal\")",
                        "181": "        return line_types",
                        "182": "",
                        "183": "def is_potential_code(text):",
                        "184": "    try:",
                        "185": "        compile(text, \"<string>\", \"exec\")",
                        "186": "        return True",
                        "187": "    except SyntaxError:",
                        "188": "        return False",
                        "189": "",
                        "190": "def classify_content(data):",
                        "191": "    for item in data:",
                        "192": "        if \"normal\" or \"block\" in item[\"type\"]:",
                        "193": "            line = item[\"content\"]",
                        "194": "            if line.find(\"#\") != -1 and line.split(\"#\")[0].strip() != \"\":",
                        "195": "                item[\"type\"] = [\"inline\"]",
                        "196": "    return data"
                    },
                    "comment_lines": {
                        "176": {
                            "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
                            "char_position_in_line": 8,
                            "type": [
                                "docstring"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "22": {
                    "comment": "# Ensure the gaps of deleted elements are artificially filled by increasing the shift",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "87": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "90": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "92": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "95": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# TODO investigate why line is null",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "102": {
                    "comment": "# Where there are comment changes and no source code changes in block",
                    "char_position_in_line": 24,
                    "type": [
                        "normal"
                    ]
                },
                "103": {
                    "comment": "# and block[line[\"line\"]][\"comment_index\"] != -1:",
                    "char_position_in_line": 56,
                    "type": [
                        "normal"
                    ]
                },
                "138": {
                    "comment": "# Cheeky inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "139": {
                    "comment": "# Cheeky 2 inline comment",
                    "char_position_in_line": 43,
                    "type": [
                        "block"
                    ]
                },
                "170": {
                    "comment": "# Check for commented-out code (basic heuristic: looks like valid Python code)",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "173": {
                    "comment": "# Check for block comments (multi-line consecutive)",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "176": {
                    "comment": "# Check if text has docstring format with \"\"\"\" somewhere",
                    "char_position_in_line": 8,
                    "type": [
                        "docstring"
                    ]
                }
            }
        }
    ],
    "main.py": [
        {
            "commit": "5c23ad83451ad8bade1900f2f5ca41afdd3b4c71",
            "timestamp": "2024-11-23T21:32:59+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments",
                    "15": "    # Convert repo URL to path by cloning repo",
                    "24": "    # # Paths",
                    "28": "    # # Setting different timeperiod",
                    "36": "",
                    "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "38": "        commits_data = json.load(json_file)",
                    "56": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                    "57": "        data = json.load(json_file)",
                    "58": "    analyse_diff_comments(data)",
                    "59": "    save_to_json(data, \"Exports/filtered_comments_data.json\")"
                },
                "deleted": {
                    "14": "     # Convert repo URL to path by cloning repo",
                    "23": "    # Paths",
                    "27": "    # Setting different timeperiod",
                    "40": "            commit_hash = commit[\"commit\"]",
                    "41": "            save_to_json(output, f\"Data/{commit_hash}.json\")",
                    "42": "            if output is None:",
                    "43": "                return",
                    "44": "",
                    "51": "",
                    "55": "            save_to_json(filtered_comments, f\"Exports/{commit_hash}.json\")",
                    "56": "",
                    "60": "",
                    "61": ""
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments"
                    },
                    {
                        "15": "    # Convert repo URL to path by cloning repo"
                    },
                    {
                        "24": "    # # Paths"
                    },
                    {
                        "28": "    # # Setting different timeperiod"
                    },
                    {
                        "36": "",
                        "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "38": "        commits_data = json.load(json_file)"
                    },
                    {
                        "56": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "57": "        data = json.load(json_file)",
                        "58": "    analyse_diff_comments(data)",
                        "59": "    save_to_json(data, \"Exports/filtered_comments_data.json\")"
                    }
                ],
                "deleted-block": [
                    {
                        "14": "     # Convert repo URL to path by cloning repo"
                    },
                    {
                        "23": "    # Paths"
                    },
                    {
                        "27": "    # Setting different timeperiod"
                    },
                    {
                        "40": "            commit_hash = commit[\"commit\"]",
                        "41": "            save_to_json(output, f\"Data/{commit_hash}.json\")",
                        "42": "            if output is None:",
                        "43": "                return"
                    },
                    {
                        "44": ""
                    },
                    {
                        "51": ""
                    },
                    {
                        "55": "            save_to_json(filtered_comments, f\"Exports/{commit_hash}.json\")",
                        "56": ""
                    },
                    {
                        "60": "",
                        "61": ""
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments",
                        "6": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "7": "# Import packages",
                        "8": "import os",
                        "9": "import json",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "from datetime import datetime, timezone",
                        "13": "",
                        "14": "def main():"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "15": "    # Convert repo URL to path by cloning repo",
                        "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\"",
                        "17": "",
                        "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "20": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "21": "",
                        "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "23": ""
                    },
                    "comment_lines": {
                        "15": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "    # # Paths",
                        "25": "    repo_path = clone_path",
                        "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "27": "    "
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "28": "    # # Setting different timeperiod",
                        "29": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "30": "    end_time = datetime.today().replace(microsecond=0)",
                        "31": "",
                        "32": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "33": "",
                        "34": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "35": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "36": "    ",
                        "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "38": "        commits_data = json.load(json_file)",
                        "39": "",
                        "40": "    for file, commits in commits_data.items():",
                        "41": "        for commit in commits:",
                        "42": "            tag = \"-target=\" + commit[\"commit\"]",
                        "43": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "28": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "            # Parse output as JSON",
                        "45": "            try:",
                        "46": "                comment_data = json.loads(output)",
                        "47": "            except json.JSONDecodeError as e:",
                        "48": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "49": "                return"
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "            # Filter comments by time",
                        "51": "            filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            commit[\"comments\"] = filtered_comments"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "53": "    # Save filtered comments on your system",
                        "54": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "55": "    shutil.rmtree(clone_path)",
                        "56": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "57": "        data = json.load(json_file)",
                        "58": "    analyse_diff_comments(data)",
                        "59": "    save_to_json(data, \"Exports/filtered_comments_data.json\")",
                        "60": "",
                        "61": "if __name__ == \"__main__\":",
                        "62": "    main()"
                    },
                    "comment_lines": {
                        "53": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "7": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "15": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "24": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "28": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "44": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "50": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "53": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "b10794953bf2b307859821a8354d3429d710e31b",
            "timestamp": "2024-11-24T18:37:49+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments",
                    "51": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "52": "            if commit[\"commit\"] == commit_hash:",
                    "53": "                commit[\"comments\"] = filtered_comments",
                    "54": "            else:",
                    "55": "                print(\"mismatch in commit and comment data\")",
                    "62": "    blockify_comments(data)",
                    "63": "    save_to_json(data, \"Exports/blockified_comments_data.json\")"
                },
                "deleted": {
                    "5": "from build.analysis import analyse_diff_comments",
                    "51": "            filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "52": "            commit[\"comments\"] = filtered_comments",
                    "59": "    save_to_json(data, \"Exports/filtered_comments_data.json\")"
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments"
                    },
                    {
                        "51": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            if commit[\"commit\"] == commit_hash:",
                        "53": "                commit[\"comments\"] = filtered_comments",
                        "54": "            else:",
                        "55": "                print(\"mismatch in commit and comment data\")"
                    },
                    {
                        "62": "    blockify_comments(data)",
                        "63": "    save_to_json(data, \"Exports/blockified_comments_data.json\")"
                    }
                ],
                "deleted-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments"
                    },
                    {
                        "51": "            filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            commit[\"comments\"] = filtered_comments"
                    },
                    {
                        "59": "    save_to_json(data, \"Exports/filtered_comments_data.json\")"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments",
                        "6": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "7": "# Import packages",
                        "8": "import os",
                        "9": "import json",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "from datetime import datetime, timezone",
                        "13": "",
                        "14": "def main():"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "15": "    # Convert repo URL to path by cloning repo",
                        "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\"",
                        "17": "",
                        "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "20": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "21": "",
                        "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "23": ""
                    },
                    "comment_lines": {
                        "15": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "    # # Paths",
                        "25": "    repo_path = clone_path",
                        "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "27": "    "
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "28": "    # # Setting different timeperiod",
                        "29": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "30": "    end_time = datetime.today().replace(microsecond=0)",
                        "31": "",
                        "32": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "33": "",
                        "34": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "35": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "36": "    ",
                        "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "38": "        commits_data = json.load(json_file)",
                        "39": "",
                        "40": "    for file, commits in commits_data.items():",
                        "41": "        for commit in commits:",
                        "42": "            tag = \"-target=\" + commit[\"commit\"]",
                        "43": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "28": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "            # Parse output as JSON",
                        "45": "            try:",
                        "46": "                comment_data = json.loads(output)",
                        "47": "            except json.JSONDecodeError as e:",
                        "48": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "49": "                return"
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "            # Filter comments by time",
                        "51": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            if commit[\"commit\"] == commit_hash:",
                        "53": "                commit[\"comments\"] = filtered_comments",
                        "54": "            else:",
                        "55": "                print(\"mismatch in commit and comment data\")"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "56": "    # Save filtered comments on your system",
                        "57": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "58": "    shutil.rmtree(clone_path)",
                        "59": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "60": "        data = json.load(json_file)",
                        "61": "    analyse_diff_comments(data)",
                        "62": "    blockify_comments(data)",
                        "63": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "64": "",
                        "65": "if __name__ == \"__main__\":",
                        "66": "    main()"
                    },
                    "comment_lines": {
                        "56": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "7": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "15": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "24": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "28": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "44": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "50": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "56": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "e20d03792161ba1b90725e6912b40275f06bf2da",
            "timestamp": "2024-11-25T02:54:47+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments",
                    "64": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                    "65": "        data = json.load(json_file)",
                    "66": "    blockify_comments2(data)",
                    "67": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                    "68": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                    "69": "        data = json.load(json_file)",
                    "70": "    d = extract_later_modified_comments(data)",
                    "71": "    save_to_json(d, \"Exports/analysis_results.json\")"
                },
                "deleted": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments",
                    "64": ""
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments"
                    },
                    {
                        "64": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "65": "        data = json.load(json_file)",
                        "66": "    blockify_comments2(data)",
                        "67": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "68": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "69": "        data = json.load(json_file)",
                        "70": "    d = extract_later_modified_comments(data)",
                        "71": "    save_to_json(d, \"Exports/analysis_results.json\")"
                    }
                ],
                "deleted-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments"
                    },
                    {
                        "64": ""
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments",
                        "6": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "7": "# Import packages",
                        "8": "import os",
                        "9": "import json",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "from datetime import datetime, timezone",
                        "13": "",
                        "14": "def main():"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "15": "    # Convert repo URL to path by cloning repo",
                        "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\"",
                        "17": "",
                        "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "20": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "21": "",
                        "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "23": ""
                    },
                    "comment_lines": {
                        "15": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "    # # Paths",
                        "25": "    repo_path = clone_path",
                        "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "27": "    "
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "28": "    # # Setting different timeperiod",
                        "29": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "30": "    end_time = datetime.today().replace(microsecond=0)",
                        "31": "",
                        "32": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "33": "",
                        "34": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "35": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "36": "    ",
                        "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "38": "        commits_data = json.load(json_file)",
                        "39": "",
                        "40": "    for file, commits in commits_data.items():",
                        "41": "        for commit in commits:",
                        "42": "            tag = \"-target=\" + commit[\"commit\"]",
                        "43": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "28": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "            # Parse output as JSON",
                        "45": "            try:",
                        "46": "                comment_data = json.loads(output)",
                        "47": "            except json.JSONDecodeError as e:",
                        "48": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "49": "                return"
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "            # Filter comments by time",
                        "51": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            if commit[\"commit\"] == commit_hash:",
                        "53": "                commit[\"comments\"] = filtered_comments",
                        "54": "            else:",
                        "55": "                print(\"mismatch in commit and comment data\")"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "56": "    # Save filtered comments on your system",
                        "57": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "58": "    shutil.rmtree(clone_path)",
                        "59": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "60": "        data = json.load(json_file)",
                        "61": "    analyse_diff_comments(data)",
                        "62": "    blockify_comments(data)",
                        "63": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "64": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "65": "        data = json.load(json_file)",
                        "66": "    blockify_comments2(data)",
                        "67": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "68": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "69": "        data = json.load(json_file)",
                        "70": "    d = extract_later_modified_comments(data)",
                        "71": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "72": "if __name__ == \"__main__\":",
                        "73": "    main()"
                    },
                    "comment_lines": {
                        "56": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "7": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "15": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "24": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "28": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "44": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "50": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "56": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "6f599e9f229a41cfe89bc628bb60c7565944a0ad",
            "timestamp": "2024-11-25T11:26:40+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean",
                    "16": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
                    "72": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                    "73": "        data = json.load(json_file)",
                    "74": "    d = clean(data)",
                    "75": "    save_to_json(d, \"Exports/analysis_results.json\")"
                },
                "deleted": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments",
                    "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\""
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean"
                    },
                    {
                        "16": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\""
                    },
                    {
                        "72": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "73": "        data = json.load(json_file)",
                        "74": "    d = clean(data)",
                        "75": "    save_to_json(d, \"Exports/analysis_results.json\")"
                    }
                ],
                "deleted-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments"
                    },
                    {
                        "16": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code.git\""
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean",
                        "6": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "7": "# Import packages",
                        "8": "import os",
                        "9": "import json",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "from datetime import datetime, timezone",
                        "13": "",
                        "14": "def main():"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "15": "    # Convert repo URL to path by cloning repo",
                        "16": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
                        "17": "",
                        "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "20": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "21": "",
                        "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "23": ""
                    },
                    "comment_lines": {
                        "15": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "    # # Paths",
                        "25": "    repo_path = clone_path",
                        "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "27": "    "
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "28": "    # # Setting different timeperiod",
                        "29": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "30": "    end_time = datetime.today().replace(microsecond=0)",
                        "31": "",
                        "32": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "33": "",
                        "34": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "35": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "36": "    ",
                        "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "38": "        commits_data = json.load(json_file)",
                        "39": "",
                        "40": "    for file, commits in commits_data.items():",
                        "41": "        for commit in commits:",
                        "42": "            tag = \"-target=\" + commit[\"commit\"]",
                        "43": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "28": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "            # Parse output as JSON",
                        "45": "            try:",
                        "46": "                comment_data = json.loads(output)",
                        "47": "            except json.JSONDecodeError as e:",
                        "48": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "49": "                return"
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "            # Filter comments by time",
                        "51": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            if commit[\"commit\"] == commit_hash:",
                        "53": "                commit[\"comments\"] = filtered_comments",
                        "54": "            else:",
                        "55": "                print(\"mismatch in commit and comment data\")"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "56": "    # Save filtered comments on your system",
                        "57": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "58": "    shutil.rmtree(clone_path)",
                        "59": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "60": "        data = json.load(json_file)",
                        "61": "    analyse_diff_comments(data)",
                        "62": "    blockify_comments(data)",
                        "63": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "64": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "65": "        data = json.load(json_file)",
                        "66": "    blockify_comments2(data)",
                        "67": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "68": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "69": "        data = json.load(json_file)",
                        "70": "    d = extract_later_modified_comments(data)",
                        "71": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "72": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "73": "        data = json.load(json_file)",
                        "74": "    d = clean(data)",
                        "75": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "76": "if __name__ == \"__main__\":",
                        "77": "    main()"
                    },
                    "comment_lines": {
                        "56": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "7": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "15": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "24": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "28": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "44": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "50": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "56": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "ca64e3c56b1e147cafb1af0d143d4f60f04cfbe2",
            "timestamp": "2024-11-28T10:16:59+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time",
                    "76": "    print(\"Average duration:\", average_comment_update_time(d))",
                    "77": ""
                },
                "deleted": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean"
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time"
                    },
                    {
                        "76": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "77": ""
                    }
                ],
                "deleted-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time",
                        "6": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "7": "# Import packages",
                        "8": "import os",
                        "9": "import json",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "from datetime import datetime, timezone",
                        "13": "",
                        "14": "def main():"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "15": "    # Convert repo URL to path by cloning repo",
                        "16": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
                        "17": "",
                        "18": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "19": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "20": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "21": "",
                        "22": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "23": ""
                    },
                    "comment_lines": {
                        "15": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "    # # Paths",
                        "25": "    repo_path = clone_path",
                        "26": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "27": "    "
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "28": "    # # Setting different timeperiod",
                        "29": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "30": "    end_time = datetime.today().replace(microsecond=0)",
                        "31": "",
                        "32": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "33": "",
                        "34": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "35": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "36": "    ",
                        "37": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "38": "        commits_data = json.load(json_file)",
                        "39": "",
                        "40": "    for file, commits in commits_data.items():",
                        "41": "        for commit in commits:",
                        "42": "            tag = \"-target=\" + commit[\"commit\"]",
                        "43": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "28": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "            # Parse output as JSON",
                        "45": "            try:",
                        "46": "                comment_data = json.loads(output)",
                        "47": "            except json.JSONDecodeError as e:",
                        "48": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "49": "                return"
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "            # Filter comments by time",
                        "51": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "52": "            if commit[\"commit\"] == commit_hash:",
                        "53": "                commit[\"comments\"] = filtered_comments",
                        "54": "            else:",
                        "55": "                print(\"mismatch in commit and comment data\")"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "56": "    # Save filtered comments on your system",
                        "57": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "58": "    shutil.rmtree(clone_path)",
                        "59": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "60": "        data = json.load(json_file)",
                        "61": "    analyse_diff_comments(data)",
                        "62": "    blockify_comments(data)",
                        "63": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "64": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "65": "        data = json.load(json_file)",
                        "66": "    blockify_comments2(data)",
                        "67": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "68": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "69": "        data = json.load(json_file)",
                        "70": "    d = extract_later_modified_comments(data)",
                        "71": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "72": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "73": "        data = json.load(json_file)",
                        "74": "    d = clean(data)",
                        "75": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "76": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "77": "",
                        "78": "if __name__ == \"__main__\":",
                        "79": "    main()"
                    },
                    "comment_lines": {
                        "56": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "7": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "15": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "24": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "28": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "44": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "50": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "56": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "39a855de8da8bde2a00bb031978e8a5bda2178ac",
            "timestamp": "2024-12-03T15:33:45+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "6": "from build.xes_conversion import convert_json_to_xes",
                    "78": "    convert_json_to_xes(d, 'output.xes')"
                },
                "deleted": {},
                "added-block": [
                    {
                        "6": "from build.xes_conversion import convert_json_to_xes"
                    },
                    {
                        "78": "    convert_json_to_xes(d, 'output.xes')"
                    }
                ],
                "deleted-block": []
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time",
                        "6": "from build.xes_conversion import convert_json_to_xes",
                        "7": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "# Import packages",
                        "9": "import os",
                        "10": "import json",
                        "11": "import subprocess",
                        "12": "import shutil",
                        "13": "from datetime import datetime, timezone",
                        "14": "",
                        "15": "def main():"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
                        "18": "",
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "22": "",
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "24": ""
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "28": "    "
                    },
                    "comment_lines": {
                        "25": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)",
                        "32": "",
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "34": "",
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "37": "    ",
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)",
                        "40": "",
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return"
                    },
                    "comment_lines": {
                        "45": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash:",
                        "54": "                commit[\"comments\"] = filtered_comments",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data\")"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "57": "    # Save filtered comments on your system",
                        "58": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "59": "    shutil.rmtree(clone_path)",
                        "60": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "61": "        data = json.load(json_file)",
                        "62": "    analyse_diff_comments(data)",
                        "63": "    blockify_comments(data)",
                        "64": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "65": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "66": "        data = json.load(json_file)",
                        "67": "    blockify_comments2(data)",
                        "68": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "69": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "70": "        data = json.load(json_file)",
                        "71": "    d = extract_later_modified_comments(data)",
                        "72": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "73": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "74": "        data = json.load(json_file)",
                        "75": "    d = clean(data)",
                        "76": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "77": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "78": "    convert_json_to_xes(d, 'output.xes')",
                        "79": "",
                        "80": "if __name__ == \"__main__\":",
                        "81": "    main()"
                    },
                    "comment_lines": {
                        "57": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "8": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "16": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "25": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "29": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "45": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "51": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "57": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "b47cc911aa41b4d19ef8edb2623063f5a615a0b1",
            "timestamp": "2024-12-03T15:46:08+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "78": "    convert_json_to_xes(d, 'Exports/output.xes')"
                },
                "deleted": {
                    "78": "    convert_json_to_xes(d, 'output.xes')"
                },
                "added-block": [
                    {
                        "78": "    convert_json_to_xes(d, 'Exports/output.xes')"
                    }
                ],
                "deleted-block": [
                    {
                        "78": "    convert_json_to_xes(d, 'output.xes')"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time",
                        "6": "from build.xes_conversion import convert_json_to_xes",
                        "7": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "# Import packages",
                        "9": "import os",
                        "10": "import json",
                        "11": "import subprocess",
                        "12": "import shutil",
                        "13": "from datetime import datetime, timezone",
                        "14": "",
                        "15": "def main():"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
                        "18": "",
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "22": "",
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "24": ""
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "28": "    "
                    },
                    "comment_lines": {
                        "25": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)",
                        "32": "",
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "34": "",
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "37": "    ",
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)",
                        "40": "",
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return"
                    },
                    "comment_lines": {
                        "45": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash:",
                        "54": "                commit[\"comments\"] = filtered_comments",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data\")"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "57": "    # Save filtered comments on your system",
                        "58": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "59": "    shutil.rmtree(clone_path)",
                        "60": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "61": "        data = json.load(json_file)",
                        "62": "    analyse_diff_comments(data)",
                        "63": "    blockify_comments(data)",
                        "64": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "65": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "66": "        data = json.load(json_file)",
                        "67": "    blockify_comments2(data)",
                        "68": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "69": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "70": "        data = json.load(json_file)",
                        "71": "    d = extract_later_modified_comments(data)",
                        "72": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "73": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "74": "        data = json.load(json_file)",
                        "75": "    d = clean(data)",
                        "76": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "77": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "78": "    convert_json_to_xes(d, 'Exports/output.xes')",
                        "79": "",
                        "80": "if __name__ == \"__main__\":",
                        "81": "    main()"
                    },
                    "comment_lines": {
                        "57": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "8": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "16": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "25": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "29": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "45": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "51": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "57": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                    "16": "    # # Convert repo URL to path by cloning repo",
                    "17": "    # repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "19": "    # repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "20": "    # temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "21": "    # clone_path = os.path.join(temp_dir, repo_name)",
                    "23": "    # subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "25": "    # # # Paths",
                    "26": "    # repo_path = clone_path",
                    "27": "    # jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "29": "    # # # Setting different timeperiod",
                    "30": "    # start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                    "31": "    # end_time = datetime.today().replace(microsecond=0)",
                    "33": "    # file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "35": "    # commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "36": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "38": "    # with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "39": "    #     commits_data = json.load(json_file)",
                    "41": "    # for file, commits in commits_data.items():",
                    "42": "    #     for commit in commits:",
                    "43": "    #         tag = \"-target=\" + commit[\"commit\"]",
                    "44": "    #         output = run_comment_lister(repo_path, jar_path, tag)",
                    "45": "    #         # Parse output as JSON",
                    "46": "    #         try:",
                    "47": "    #             comment_data = json.loads(output)",
                    "48": "    #         except json.JSONDecodeError as e:",
                    "49": "    #             print(f\"Failed to parse CommentLister output: {e}\")",
                    "50": "    #             return",
                    "51": "    #         # Filter comments by time",
                    "52": "    #         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "53": "    #         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                    "54": "    #             commit[\"comments\"] = filtered_comments[file]",
                    "55": "    #         else:",
                    "56": "    #             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "57": "    #             print(\"file could have been deleted\")",
                    "58": "    #             commit[\"comments\"] = {}",
                    "59": "    # # Save filtered comments on your system",
                    "60": "    # save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                    "61": "    # shutil.rmtree(clone_path)",
                    "64": "    # analyse_diff_comments(data)",
                    "78": "    save_to_json(d, \"Exports/clean_analysis_results.json\")",
                    "79": "    with open(\"Exports/clean_analysis_results.json\", \"r\") as json_file:",
                    "80": "        data = json.load(json_file)",
                    "81": "    d = classify_comments(data)",
                    "82": "    save_to_json(d, \"Exports/clean_analysis_results2.json\")"
                },
                "deleted": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time",
                    "16": "    # Convert repo URL to path by cloning repo",
                    "17": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\"",
                    "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                    "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "25": "    # # Paths",
                    "26": "    repo_path = clone_path",
                    "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "29": "    # # Setting different timeperiod",
                    "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                    "31": "    end_time = datetime.today().replace(microsecond=0)",
                    "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "39": "        commits_data = json.load(json_file)",
                    "41": "    for file, commits in commits_data.items():",
                    "42": "        for commit in commits:",
                    "43": "            tag = \"-target=\" + commit[\"commit\"]",
                    "44": "            output = run_comment_lister(repo_path, jar_path, tag)",
                    "45": "            # Parse output as JSON",
                    "46": "            try:",
                    "47": "                comment_data = json.loads(output)",
                    "48": "            except json.JSONDecodeError as e:",
                    "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                    "50": "                return",
                    "51": "            # Filter comments by time",
                    "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "53": "            if commit[\"commit\"] == commit_hash:",
                    "54": "                commit[\"comments\"] = filtered_comments",
                    "55": "            else:",
                    "56": "                print(\"mismatch in commit and comment data\")",
                    "57": "    # Save filtered comments on your system",
                    "58": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                    "59": "    shutil.rmtree(clone_path)",
                    "62": "    analyse_diff_comments(data)",
                    "76": "    save_to_json(d, \"Exports/analysis_results.json\")"
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments"
                    },
                    {
                        "16": "    # # Convert repo URL to path by cloning repo",
                        "17": "    # repo_url = \"https://github.com/AlexS-1/Bachelor-Code\""
                    },
                    {
                        "19": "    # repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    # temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    # clone_path = os.path.join(temp_dir, repo_name)"
                    },
                    {
                        "23": "    # subprocess.run(['git', 'clone', repo_url, clone_path], check=True)"
                    },
                    {
                        "25": "    # # # Paths",
                        "26": "    # repo_path = clone_path",
                        "27": "    # jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\""
                    },
                    {
                        "29": "    # # # Setting different timeperiod",
                        "30": "    # start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    # end_time = datetime.today().replace(microsecond=0)"
                    },
                    {
                        "33": "    # file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]"
                    },
                    {
                        "35": "    # commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    },
                    {
                        "38": "    # with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "    #     commits_data = json.load(json_file)"
                    },
                    {
                        "41": "    # for file, commits in commits_data.items():",
                        "42": "    #     for commit in commits:",
                        "43": "    #         tag = \"-target=\" + commit[\"commit\"]",
                        "44": "    #         output = run_comment_lister(repo_path, jar_path, tag)",
                        "45": "    #         # Parse output as JSON",
                        "46": "    #         try:",
                        "47": "    #             comment_data = json.loads(output)",
                        "48": "    #         except json.JSONDecodeError as e:",
                        "49": "    #             print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "    #             return",
                        "51": "    #         # Filter comments by time",
                        "52": "    #         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "    #         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "    #             commit[\"comments\"] = filtered_comments[file]",
                        "55": "    #         else:",
                        "56": "    #             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "    #             print(\"file could have been deleted\")",
                        "58": "    #             commit[\"comments\"] = {}",
                        "59": "    # # Save filtered comments on your system",
                        "60": "    # save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "61": "    # shutil.rmtree(clone_path)"
                    },
                    {
                        "64": "    # analyse_diff_comments(data)"
                    },
                    {
                        "78": "    save_to_json(d, \"Exports/clean_analysis_results.json\")",
                        "79": "    with open(\"Exports/clean_analysis_results.json\", \"r\") as json_file:",
                        "80": "        data = json.load(json_file)",
                        "81": "    d = classify_comments(data)",
                        "82": "    save_to_json(d, \"Exports/clean_analysis_results2.json\")"
                    }
                ],
                "deleted-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time"
                    },
                    {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/dani-garcia/vaultwarden\""
                    },
                    {
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)"
                    },
                    {
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)"
                    },
                    {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\""
                    },
                    {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)"
                    },
                    {
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]"
                    },
                    {
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    },
                    {
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)"
                    },
                    {
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)",
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return",
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash:",
                        "54": "                commit[\"comments\"] = filtered_comments",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data\")",
                        "57": "    # Save filtered comments on your system",
                        "58": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "59": "    shutil.rmtree(clone_path)"
                    },
                    {
                        "62": "    analyse_diff_comments(data)"
                    },
                    {
                        "76": "    save_to_json(d, \"Exports/analysis_results.json\")"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                        "6": "from build.xes_conversion import convert_json_to_xes",
                        "7": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "# Import packages",
                        "9": "import os",
                        "10": "import json",
                        "11": "import subprocess",
                        "12": "import shutil",
                        "13": "from datetime import datetime, timezone",
                        "14": "",
                        "15": "def main():"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "16": "    # # Convert repo URL to path by cloning repo",
                        "17": "    # repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "18": ""
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# # Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "17": {
                            "comment": "# repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "19": "    # repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    # temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    # clone_path = os.path.join(temp_dir, repo_name)",
                        "22": ""
                    },
                    "comment_lines": {
                        "19": {
                            "comment": "# repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "20": {
                            "comment": "# temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "21": {
                            "comment": "# clone_path = os.path.join(temp_dir, repo_name)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "23": "    # subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "24": ""
                    },
                    "comment_lines": {
                        "23": {
                            "comment": "# subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "25": "    # # # Paths",
                        "26": "    # repo_path = clone_path",
                        "27": "    # jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "28": "    "
                    },
                    "comment_lines": {
                        "25": {
                            "comment": "# # # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "26": {
                            "comment": "# repo_path = clone_path",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "27": {
                            "comment": "# jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "    # # # Setting different timeperiod",
                        "30": "    # start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    # end_time = datetime.today().replace(microsecond=0)",
                        "32": ""
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# # # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "30": {
                            "comment": "# start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "31": {
                            "comment": "# end_time = datetime.today().replace(microsecond=0)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "33": "    # file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "34": ""
                    },
                    "comment_lines": {
                        "33": {
                            "comment": "# file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "35": "    # commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                        "37": "    "
                    },
                    "comment_lines": {
                        "35": {
                            "comment": "# commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "36": {
                            "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out",
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "38": "    # with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "    #     commits_data = json.load(json_file)",
                        "40": ""
                    },
                    "comment_lines": {
                        "38": {
                            "comment": "# with open (\"Data/commits_data.json\", \"r\") as json_file:",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "39": {
                            "comment": "#     commits_data = json.load(json_file)",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "41": "    # for file, commits in commits_data.items():",
                        "42": "    #     for commit in commits:",
                        "43": "    #         tag = \"-target=\" + commit[\"commit\"]",
                        "44": "    #         output = run_comment_lister(repo_path, jar_path, tag)",
                        "45": "    #         # Parse output as JSON",
                        "46": "    #         try:",
                        "47": "    #             comment_data = json.loads(output)",
                        "48": "    #         except json.JSONDecodeError as e:",
                        "49": "    #             print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "    #             return",
                        "51": "    #         # Filter comments by time",
                        "52": "    #         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "    #         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "    #             commit[\"comments\"] = filtered_comments[file]",
                        "55": "    #         else:",
                        "56": "    #             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "    #             print(\"file could have been deleted\")",
                        "58": "    #             commit[\"comments\"] = {}",
                        "59": "    # # Save filtered comments on your system",
                        "60": "    # save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "61": "    # shutil.rmtree(clone_path)",
                        "62": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "63": "        data = json.load(json_file)"
                    },
                    "comment_lines": {
                        "41": {
                            "comment": "# for file, commits in commits_data.items():",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "42": {
                            "comment": "#     for commit in commits:",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "43": {
                            "comment": "#         tag = \"-target=\" + commit[\"commit\"]",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "44": {
                            "comment": "#         output = run_comment_lister(repo_path, jar_path, tag)",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "45": {
                            "comment": "#         # Parse output as JSON",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "46": {
                            "comment": "#         try:",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "47": {
                            "comment": "#             comment_data = json.loads(output)",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "48": {
                            "comment": "#         except json.JSONDecodeError as e:",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "49": {
                            "comment": "#             print(f\"Failed to parse CommentLister output: {e}\")",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "50": {
                            "comment": "#             return",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "51": {
                            "comment": "#         # Filter comments by time",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "52": {
                            "comment": "#         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "53": {
                            "comment": "#         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "54": {
                            "comment": "#             commit[\"comments\"] = filtered_comments[file]",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "55": {
                            "comment": "#         else:",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "56": {
                            "comment": "#             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "57": {
                            "comment": "#             print(\"file could have been deleted\")",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "58": {
                            "comment": "#             commit[\"comments\"] = {}",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "59": {
                            "comment": "# # Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "60": {
                            "comment": "# save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "61": {
                            "comment": "# shutil.rmtree(clone_path)",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "64": "    # analyse_diff_comments(data)",
                        "65": "    blockify_comments(data)",
                        "66": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "67": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "68": "        data = json.load(json_file)",
                        "69": "    blockify_comments2(data)",
                        "70": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "71": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "72": "        data = json.load(json_file)",
                        "73": "    d = extract_later_modified_comments(data)",
                        "74": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "75": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "76": "        data = json.load(json_file)",
                        "77": "    d = clean(data)",
                        "78": "    save_to_json(d, \"Exports/clean_analysis_results.json\")",
                        "79": "    with open(\"Exports/clean_analysis_results.json\", \"r\") as json_file:",
                        "80": "        data = json.load(json_file)",
                        "81": "    d = classify_comments(data)",
                        "82": "    save_to_json(d, \"Exports/clean_analysis_results2.json\")",
                        "83": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "84": "    convert_json_to_xes(d, 'Exports/output.xes')",
                        "85": "",
                        "86": "if __name__ == \"__main__\":",
                        "87": "    main()"
                    },
                    "comment_lines": {
                        "64": {
                            "comment": "# analyse_diff_comments(data)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "8": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "16": {
                    "comment": "# # Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "17": {
                    "comment": "# repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "19": {
                    "comment": "# repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "20": {
                    "comment": "# temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "21": {
                    "comment": "# clone_path = os.path.join(temp_dir, repo_name)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "23": {
                    "comment": "# subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "25": {
                    "comment": "# # # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "26": {
                    "comment": "# repo_path = clone_path",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "27": {
                    "comment": "# jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "29": {
                    "comment": "# # # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "30": {
                    "comment": "# start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "31": {
                    "comment": "# end_time = datetime.today().replace(microsecond=0)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "33": {
                    "comment": "# file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "35": {
                    "comment": "# commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "36": {
                    "comment": "# save_to_json(commits_data, \"Data/commits_data.json\")",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out",
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "38": {
                    "comment": "# with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "39": {
                    "comment": "#     commits_data = json.load(json_file)",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "41": {
                    "comment": "# for file, commits in commits_data.items():",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "42": {
                    "comment": "#     for commit in commits:",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "43": {
                    "comment": "#         tag = \"-target=\" + commit[\"commit\"]",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "44": {
                    "comment": "#         output = run_comment_lister(repo_path, jar_path, tag)",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "45": {
                    "comment": "#         # Parse output as JSON",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "46": {
                    "comment": "#         try:",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "47": {
                    "comment": "#             comment_data = json.loads(output)",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "48": {
                    "comment": "#         except json.JSONDecodeError as e:",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "49": {
                    "comment": "#             print(f\"Failed to parse CommentLister output: {e}\")",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "50": {
                    "comment": "#             return",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "51": {
                    "comment": "#         # Filter comments by time",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "52": {
                    "comment": "#         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "53": {
                    "comment": "#         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "54": {
                    "comment": "#             commit[\"comments\"] = filtered_comments[file]",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "55": {
                    "comment": "#         else:",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "56": {
                    "comment": "#             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "57": {
                    "comment": "#             print(\"file could have been deleted\")",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "58": {
                    "comment": "#             commit[\"comments\"] = {}",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "59": {
                    "comment": "# # Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "60": {
                    "comment": "# save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "61": {
                    "comment": "# shutil.rmtree(clone_path)",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "64": {
                    "comment": "# analyse_diff_comments(data)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "22aa658dddb9457b7fae9f52febd52afdf2a413e",
            "timestamp": "2024-12-04T00:55:39+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "16": "    # Convert repo URL to path by cloning repo",
                    "17": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                    "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "25": "    # # Paths",
                    "26": "    repo_path = clone_path",
                    "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "29": "    # # Setting different timeperiod",
                    "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                    "31": "    end_time = datetime.today().replace(microsecond=0)",
                    "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "39": "        commits_data = json.load(json_file)",
                    "41": "    for file, commits in commits_data.items():",
                    "42": "        for commit in commits:",
                    "43": "            tag = \"-target=\" + commit[\"commit\"]",
                    "44": "            output = run_comment_lister(repo_path, jar_path, tag)",
                    "45": "            # Parse output as JSON",
                    "46": "            try:",
                    "47": "                comment_data = json.loads(output)",
                    "48": "            except json.JSONDecodeError as e:",
                    "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                    "50": "                return",
                    "51": "            # Filter comments by time",
                    "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "53": "            if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                    "54": "                commit[\"comments\"] = filtered_comments[file]",
                    "55": "            else:",
                    "56": "                print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "57": "                print(\"file could have been deleted\")",
                    "58": "                commit[\"comments\"] = {}",
                    "59": "    # Save filtered comments on your system",
                    "60": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                    "61": "    shutil.rmtree(clone_path)"
                },
                "deleted": {
                    "16": "    # # Convert repo URL to path by cloning repo",
                    "17": "    # repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "19": "    # repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "20": "    # temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "21": "    # clone_path = os.path.join(temp_dir, repo_name)",
                    "23": "    # subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "25": "    # # # Paths",
                    "26": "    # repo_path = clone_path",
                    "27": "    # jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "29": "    # # # Setting different timeperiod",
                    "30": "    # start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                    "31": "    # end_time = datetime.today().replace(microsecond=0)",
                    "33": "    # file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "35": "    # commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "36": "    # save_to_json(commits_data, \"Data/commits_data.json\")",
                    "38": "    # with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "39": "    #     commits_data = json.load(json_file)",
                    "41": "    # for file, commits in commits_data.items():",
                    "42": "    #     for commit in commits:",
                    "43": "    #         tag = \"-target=\" + commit[\"commit\"]",
                    "44": "    #         output = run_comment_lister(repo_path, jar_path, tag)",
                    "45": "    #         # Parse output as JSON",
                    "46": "    #         try:",
                    "47": "    #             comment_data = json.loads(output)",
                    "48": "    #         except json.JSONDecodeError as e:",
                    "49": "    #             print(f\"Failed to parse CommentLister output: {e}\")",
                    "50": "    #             return",
                    "51": "    #         # Filter comments by time",
                    "52": "    #         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "53": "    #         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                    "54": "    #             commit[\"comments\"] = filtered_comments[file]",
                    "55": "    #         else:",
                    "56": "    #             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "57": "    #             print(\"file could have been deleted\")",
                    "58": "    #             commit[\"comments\"] = {}",
                    "59": "    # # Save filtered comments on your system",
                    "60": "    # save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                    "61": "    # shutil.rmtree(clone_path)"
                },
                "added-block": [
                    {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\""
                    },
                    {
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)"
                    },
                    {
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)"
                    },
                    {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\""
                    },
                    {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)"
                    },
                    {
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]"
                    },
                    {
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    },
                    {
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)"
                    },
                    {
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    {
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return"
                    },
                    {
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "                commit[\"comments\"] = filtered_comments[file]",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "                print(\"file could have been deleted\")",
                        "58": "                commit[\"comments\"] = {}"
                    },
                    {
                        "59": "    # Save filtered comments on your system",
                        "60": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "61": "    shutil.rmtree(clone_path)"
                    }
                ],
                "deleted-block": [
                    {
                        "16": "    # # Convert repo URL to path by cloning repo",
                        "17": "    # repo_url = \"https://github.com/AlexS-1/Bachelor-Code\""
                    },
                    {
                        "19": "    # repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    # temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    # clone_path = os.path.join(temp_dir, repo_name)"
                    },
                    {
                        "23": "    # subprocess.run(['git', 'clone', repo_url, clone_path], check=True)"
                    },
                    {
                        "25": "    # # # Paths",
                        "26": "    # repo_path = clone_path",
                        "27": "    # jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\""
                    },
                    {
                        "29": "    # # # Setting different timeperiod",
                        "30": "    # start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    # end_time = datetime.today().replace(microsecond=0)"
                    },
                    {
                        "33": "    # file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]"
                    },
                    {
                        "35": "    # commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    # save_to_json(commits_data, \"Data/commits_data.json\")"
                    },
                    {
                        "38": "    # with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "    #     commits_data = json.load(json_file)"
                    },
                    {
                        "41": "    # for file, commits in commits_data.items():",
                        "42": "    #     for commit in commits:",
                        "43": "    #         tag = \"-target=\" + commit[\"commit\"]",
                        "44": "    #         output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    {
                        "45": "    #         # Parse output as JSON",
                        "46": "    #         try:",
                        "47": "    #             comment_data = json.loads(output)",
                        "48": "    #         except json.JSONDecodeError as e:",
                        "49": "    #             print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "    #             return"
                    },
                    {
                        "51": "    #         # Filter comments by time",
                        "52": "    #         commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "    #         if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "    #             commit[\"comments\"] = filtered_comments[file]",
                        "55": "    #         else:",
                        "56": "    #             print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "    #             print(\"file could have been deleted\")",
                        "58": "    #             commit[\"comments\"] = {}"
                    },
                    {
                        "59": "    # # Save filtered comments on your system",
                        "60": "    # save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "61": "    # shutil.rmtree(clone_path)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                        "6": "from build.xes_conversion import convert_json_to_xes",
                        "7": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "# Import packages",
                        "9": "import os",
                        "10": "import json",
                        "11": "import subprocess",
                        "12": "import shutil",
                        "13": "from datetime import datetime, timezone",
                        "14": "",
                        "15": "def main():"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "18": "",
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "22": "",
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "24": ""
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "28": "    "
                    },
                    "comment_lines": {
                        "25": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)",
                        "32": "",
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "34": "",
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "37": "    ",
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)",
                        "40": "",
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return"
                    },
                    "comment_lines": {
                        "45": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "                commit[\"comments\"] = filtered_comments[file]",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "                print(\"file could have been deleted\")",
                        "58": "                commit[\"comments\"] = {}"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "59": "    # Save filtered comments on your system",
                        "60": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "61": "    shutil.rmtree(clone_path)",
                        "62": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "63": "        data = json.load(json_file)"
                    },
                    "comment_lines": {
                        "59": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "64": "    # analyse_diff_comments(data)",
                        "65": "    blockify_comments(data)",
                        "66": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "67": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "68": "        data = json.load(json_file)",
                        "69": "    blockify_comments2(data)",
                        "70": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "71": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "72": "        data = json.load(json_file)",
                        "73": "    d = extract_later_modified_comments(data)",
                        "74": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "75": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "76": "        data = json.load(json_file)",
                        "77": "    d = clean(data)",
                        "78": "    save_to_json(d, \"Exports/clean_analysis_results.json\")",
                        "79": "    with open(\"Exports/clean_analysis_results.json\", \"r\") as json_file:",
                        "80": "        data = json.load(json_file)",
                        "81": "    d = classify_comments(data)",
                        "82": "    save_to_json(d, \"Exports/clean_analysis_results2.json\")",
                        "83": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "84": "    convert_json_to_xes(d, 'Exports/output.xes')",
                        "85": "",
                        "86": "if __name__ == \"__main__\":",
                        "87": "    main()"
                    },
                    "comment_lines": {
                        "64": {
                            "comment": "# analyse_diff_comments(data)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "8": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "16": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "25": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "29": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "45": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "51": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "59": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "64": {
                    "comment": "# analyse_diff_comments(data)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                }
            }
        },
        {
            "commit": "76c0e457bfe78effef6b104d334eed6a7fa3e4e4",
            "timestamp": "2024-12-04T23:01:11+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content",
                    "81": "    d = classify_content(data)"
                },
                "deleted": {
                    "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                    "81": "    d = classify_comments(data)"
                },
                "added-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content"
                    },
                    {
                        "81": "    d = classify_content(data)"
                    }
                ],
                "deleted-block": [
                    {
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments"
                    },
                    {
                        "81": "    d = classify_comments(data)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content",
                        "6": "from build.xes_conversion import convert_json_to_xes",
                        "7": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "# Import packages",
                        "9": "import os",
                        "10": "import json",
                        "11": "import subprocess",
                        "12": "import shutil",
                        "13": "from datetime import datetime, timezone",
                        "14": "",
                        "15": "def main():"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "18": "",
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "22": "",
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "24": ""
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "28": "    "
                    },
                    "comment_lines": {
                        "25": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)",
                        "32": "",
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "34": "",
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                        "37": "    ",
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)",
                        "40": "",
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return"
                    },
                    "comment_lines": {
                        "45": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "                commit[\"comments\"] = filtered_comments[file]",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "                print(\"file could have been deleted\")",
                        "58": "                commit[\"comments\"] = {}"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "59": "    # Save filtered comments on your system",
                        "60": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                        "61": "    shutil.rmtree(clone_path)",
                        "62": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "63": "        data = json.load(json_file)"
                    },
                    "comment_lines": {
                        "59": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "64": "    # analyse_diff_comments(data)",
                        "65": "    blockify_comments(data)",
                        "66": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "67": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "68": "        data = json.load(json_file)",
                        "69": "    blockify_comments2(data)",
                        "70": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "71": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "72": "        data = json.load(json_file)",
                        "73": "    d = extract_later_modified_comments(data)",
                        "74": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "75": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "76": "        data = json.load(json_file)",
                        "77": "    d = clean(data)",
                        "78": "    save_to_json(d, \"Exports/clean_analysis_results.json\")",
                        "79": "    with open(\"Exports/clean_analysis_results.json\", \"r\") as json_file:",
                        "80": "        data = json.load(json_file)",
                        "81": "    d = classify_content(data)",
                        "82": "    save_to_json(d, \"Exports/clean_analysis_results2.json\")",
                        "83": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "84": "    convert_json_to_xes(d, 'Exports/output.xes')",
                        "85": "",
                        "86": "if __name__ == \"__main__\":",
                        "87": "    main()"
                    },
                    "comment_lines": {
                        "64": {
                            "comment": "# analyse_diff_comments(data)",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "8": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "16": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "25": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "29": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "45": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "51": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "59": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "64": {
                    "comment": "# analyse_diff_comments(data)",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                }
            }
        },
        {
            "commit": "2177350ff473ebba0adaed083fc557aacd9adebe",
            "timestamp": "2024-12-05T23:05:58+01:00",
            "author": "alexander.schranner",
            "filename": "main.py",
            "diff": {
                "added": {
                    "36": "    save_to_json(commits_data, \"Data/code_data.json\")",
                    "38": "    with open (\"Data/code_data.json\", \"r\") as json_file:",
                    "56": "                print(\"mismatch in commit and comment data\")",
                    "57": "                print(\"No comments in this Commit\", commit[\"commit\"], \"for investigate file\", file)",
                    "60": "    save_to_json(commits_data, \"Data/code_data.json\")",
                    "62": "",
                    "63": "    with open(\"Data/code_data.json\", \"r\") as json_file:",
                    "65": "    analyse_diff_comments(data)",
                    "66": "    save_to_json(data, \"Exports/diff_comments.json\")",
                    "89": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "90": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "91": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "92": "    clone_path = os.path.join(temp_dir, repo_name)",
                    "93": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "94": "    tag = \"f73512c4aa778287e31d18e9d218502acf7479ee\" # \"1061293a43b0788f9db921ae6fc61734ccdf1b8d\"",
                    "95": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "96": "    data = run_comment_lister(clone_path, jar_path, tag)",
                    "97": "    shutil.rmtree(clone_path)",
                    "98": "    print(\"DATA: \", data)",
                    "99": "    # main()"
                },
                "deleted": {
                    "36": "    save_to_json(commits_data, \"Data/commits_data.json\")",
                    "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:",
                    "56": "                print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "57": "                print(\"file could have been deleted\")",
                    "60": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")",
                    "62": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                    "64": "    # analyse_diff_comments(data)",
                    "87": "    main()"
                },
                "added-block": [
                    {
                        "36": "    save_to_json(commits_data, \"Data/code_data.json\")"
                    },
                    {
                        "38": "    with open (\"Data/code_data.json\", \"r\") as json_file:"
                    },
                    {
                        "56": "                print(\"mismatch in commit and comment data\")",
                        "57": "                print(\"No comments in this Commit\", commit[\"commit\"], \"for investigate file\", file)"
                    },
                    {
                        "60": "    save_to_json(commits_data, \"Data/code_data.json\")"
                    },
                    {
                        "62": "",
                        "63": "    with open(\"Data/code_data.json\", \"r\") as json_file:"
                    },
                    {
                        "65": "    analyse_diff_comments(data)",
                        "66": "    save_to_json(data, \"Exports/diff_comments.json\")"
                    },
                    {
                        "89": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "90": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "91": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "92": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "93": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\""
                    },
                    {
                        "94": "    tag = \"f73512c4aa778287e31d18e9d218502acf7479ee\" # \"1061293a43b0788f9db921ae6fc61734ccdf1b8d\"",
                        "95": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "96": "    data = run_comment_lister(clone_path, jar_path, tag)",
                        "97": "    shutil.rmtree(clone_path)",
                        "98": "    print(\"DATA: \", data)"
                    },
                    {
                        "99": "    # main()"
                    }
                ],
                "deleted-block": [
                    {
                        "36": "    save_to_json(commits_data, \"Data/commits_data.json\")"
                    },
                    {
                        "38": "    with open (\"Data/commits_data.json\", \"r\") as json_file:"
                    },
                    {
                        "56": "                print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "57": "                print(\"file could have been deleted\")"
                    },
                    {
                        "60": "    save_to_json(commits_data, \"Data/filtered_commits_data.json\")"
                    },
                    {
                        "62": "    with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:"
                    },
                    {
                        "64": "    # analyse_diff_comments(data)"
                    },
                    {
                        "87": "    main()"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "# Import modules",
                        "2": "from build.pydriller import get_commits_data",
                        "3": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "4": "from build.utils import save_to_json",
                        "5": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content",
                        "6": "from build.xes_conversion import convert_json_to_xes",
                        "7": ""
                    },
                    "comment_lines": {
                        "1": {
                            "comment": "# Import modules",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "8": "# Import packages",
                        "9": "import os",
                        "10": "import json",
                        "11": "import subprocess",
                        "12": "import shutil",
                        "13": "from datetime import datetime, timezone",
                        "14": "",
                        "15": "def main():"
                    },
                    "comment_lines": {
                        "8": {
                            "comment": "# Import packages",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "16": "    # Convert repo URL to path by cloning repo",
                        "17": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "18": "",
                        "19": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "20": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "21": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "22": "",
                        "23": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "24": ""
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Convert repo URL to path by cloning repo",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "25": "    # # Paths",
                        "26": "    repo_path = clone_path",
                        "27": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "28": "    "
                    },
                    "comment_lines": {
                        "25": {
                            "comment": "# # Paths",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "    # # Setting different timeperiod",
                        "30": "    start_time = datetime.today().replace(year = datetime.today().year - 1, tzinfo=None, microsecond=0)",
                        "31": "    end_time = datetime.today().replace(microsecond=0)",
                        "32": "",
                        "33": "    file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "34": "",
                        "35": "    commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "36": "    save_to_json(commits_data, \"Data/code_data.json\")",
                        "37": "    ",
                        "38": "    with open (\"Data/code_data.json\", \"r\") as json_file:",
                        "39": "        commits_data = json.load(json_file)",
                        "40": "",
                        "41": "    for file, commits in commits_data.items():",
                        "42": "        for commit in commits:",
                        "43": "            tag = \"-target=\" + commit[\"commit\"]",
                        "44": "            output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# # Setting different timeperiod",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "45": "            # Parse output as JSON",
                        "46": "            try:",
                        "47": "                comment_data = json.loads(output)",
                        "48": "            except json.JSONDecodeError as e:",
                        "49": "                print(f\"Failed to parse CommentLister output: {e}\")",
                        "50": "                return"
                    },
                    "comment_lines": {
                        "45": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "            # Filter comments by time",
                        "52": "            commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "53": "            if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "54": "                commit[\"comments\"] = filtered_comments[file]",
                        "55": "            else:",
                        "56": "                print(\"mismatch in commit and comment data\")",
                        "57": "                print(\"No comments in this Commit\", commit[\"commit\"], \"for investigate file\", file)",
                        "58": "                commit[\"comments\"] = {}"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "59": "    # Save filtered comments on your system",
                        "60": "    save_to_json(commits_data, \"Data/code_data.json\")",
                        "61": "    shutil.rmtree(clone_path)",
                        "62": "",
                        "63": "    with open(\"Data/code_data.json\", \"r\") as json_file:",
                        "64": "        data = json.load(json_file)",
                        "65": "    analyse_diff_comments(data)",
                        "66": "    save_to_json(data, \"Exports/diff_comments.json\")",
                        "67": "    blockify_comments(data)",
                        "68": "    save_to_json(data, \"Exports/blockified_comments_data.json\")",
                        "69": "    with open(\"Exports/blockified_comments_data.json\", \"r\") as json_file:",
                        "70": "        data = json.load(json_file)",
                        "71": "    blockify_comments2(data)",
                        "72": "    save_to_json(data, \"Exports/blockified_comments2_data.json\")",
                        "73": "    with open(\"Exports/blockified_comments2_data.json\", \"r\") as json_file:",
                        "74": "        data = json.load(json_file)",
                        "75": "    d = extract_later_modified_comments(data)",
                        "76": "    save_to_json(d, \"Exports/analysis_results.json\")",
                        "77": "    with open(\"Exports/analysis_results.json\", \"r\") as json_file:",
                        "78": "        data = json.load(json_file)",
                        "79": "    d = clean(data)",
                        "80": "    save_to_json(d, \"Exports/clean_analysis_results.json\")",
                        "81": "    with open(\"Exports/clean_analysis_results.json\", \"r\") as json_file:",
                        "82": "        data = json.load(json_file)",
                        "83": "    d = classify_content(data)",
                        "84": "    save_to_json(d, \"Exports/clean_analysis_results2.json\")",
                        "85": "    print(\"Average duration:\", average_comment_update_time(d))",
                        "86": "    convert_json_to_xes(d, 'Exports/output.xes')",
                        "87": "",
                        "88": "if __name__ == \"__main__\":",
                        "89": "    repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "90": "    repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "91": "    temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "92": "    clone_path = os.path.join(temp_dir, repo_name)",
                        "93": "    jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\""
                    },
                    "comment_lines": {
                        "59": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "94": "    tag = \"f73512c4aa778287e31d18e9d218502acf7479ee\" # \"1061293a43b0788f9db921ae6fc61734ccdf1b8d\"",
                        "95": "    subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "96": "    data = run_comment_lister(clone_path, jar_path, tag)",
                        "97": "    shutil.rmtree(clone_path)",
                        "98": "    print(\"DATA: \", data)"
                    },
                    "comment_lines": {
                        "94": {
                            "comment": "# \"1061293a43b0788f9db921ae6fc61734ccdf1b8d\"",
                            "char_position_in_line": 53,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "99": "    # main()"
                    },
                    "comment_lines": {
                        "99": {
                            "comment": "# main()",
                            "char_position_in_line": 4,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "1": {
                    "comment": "# Import modules",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "8": {
                    "comment": "# Import packages",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "16": {
                    "comment": "# Convert repo URL to path by cloning repo",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "25": {
                    "comment": "# # Paths",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "29": {
                    "comment": "# # Setting different timeperiod",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ]
                },
                "45": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "51": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "59": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "94": {
                    "comment": "# \"1061293a43b0788f9db921ae6fc61734ccdf1b8d\"",
                    "char_position_in_line": 53,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "99": {
                    "comment": "# main()",
                    "char_position_in_line": 4,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                }
            }
        }
    ],
    "build/comment_lister.py": [
        {
            "commit": "b10794953bf2b307859821a8354d3429d710e31b",
            "timestamp": "2024-11-24T18:37:49+01:00",
            "author": "alexander.schranner",
            "filename": "build/comment_lister.py",
            "diff": {
                "added": {
                    "27": "            i = 0",
                    "30": "                    split_comment_lines = contents[str(i)][\"Text\"].split(\"\\n\")",
                    "31": "                    # print(\"Have to split comments:\", split_comment_lines)",
                    "32": "                    if len(split_comment_lines) > 1:",
                    "33": "                        initial_line = contents[str(i)][\"Line\"]",
                    "34": "                        j = 0",
                    "35": "                        for comment in split_comment_lines:",
                    "36": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                    "37": "                            comment_data = {",
                    "38": "                                \"line\": initial_line + j,",
                    "39": "                                \"comment\": comment,",
                    "40": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                    "41": "                            }",
                    "42": "                            j += 1",
                    "43": "                            filtered_comments.append(comment_data)",
                    "44": "                    else:",
                    "45": "                        comment_data = {",
                    "46": "                            \"line\": contents[str(i)][\"Line\"],",
                    "47": "                            \"comment\": contents[str(i)][\"Text\"],",
                    "48": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                    "49": "                        }",
                    "50": "                        filtered_comments.append(comment_data)",
                    "54": "                    i += 1",
                    "55": "    else:",
                    "56": "        print(\"Comments not in specified date range\")",
                    "57": "    return commit_data[\"ObjectId\"], filtered_comments"
                },
                "deleted": {
                    "26": "            i = 0",
                    "30": "                    comment_data = {",
                    "31": "                        \"line\": contents[str(i)][\"Line\"],",
                    "32": "                        \"comment\": contents[str(i)][\"Text\"],",
                    "33": "                    }",
                    "37": "                    filtered_comments.append(comment_data)",
                    "38": "                i += 1",
                    "39": "    return filtered_comments"
                },
                "added-block": [
                    {
                        "27": "            i = 0"
                    },
                    {
                        "30": "                    split_comment_lines = contents[str(i)][\"Text\"].split(\"\\n\")"
                    },
                    {
                        "31": "                    # print(\"Have to split comments:\", split_comment_lines)",
                        "32": "                    if len(split_comment_lines) > 1:",
                        "33": "                        initial_line = contents[str(i)][\"Line\"]",
                        "34": "                        j = 0",
                        "35": "                        for comment in split_comment_lines:"
                    },
                    {
                        "36": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                        "37": "                            comment_data = {",
                        "38": "                                \"line\": initial_line + j,",
                        "39": "                                \"comment\": comment,",
                        "40": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                        "41": "                            }",
                        "42": "                            j += 1",
                        "43": "                            filtered_comments.append(comment_data)",
                        "44": "                    else:",
                        "45": "                        comment_data = {",
                        "46": "                            \"line\": contents[str(i)][\"Line\"],",
                        "47": "                            \"comment\": contents[str(i)][\"Text\"],",
                        "48": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                        "49": "                        }",
                        "50": "                        filtered_comments.append(comment_data)"
                    },
                    {
                        "54": "                    i += 1",
                        "55": "    else:",
                        "56": "        print(\"Comments not in specified date range\")",
                        "57": "    return commit_data[\"ObjectId\"], filtered_comments"
                    }
                ],
                "deleted-block": [
                    {
                        "26": "            i = 0"
                    },
                    {
                        "30": "                    comment_data = {"
                    },
                    {
                        "31": "                        \"line\": contents[str(i)][\"Line\"],",
                        "32": "                        \"comment\": contents[str(i)][\"Text\"],",
                        "33": "                    }"
                    },
                    {
                        "37": "                    filtered_comments.append(comment_data)",
                        "38": "                i += 1",
                        "39": "    return filtered_comments"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "import subprocess",
                        "2": "import json",
                        "3": "import os",
                        "4": "import shutil",
                        "5": "from datetime import datetime, timezone",
                        "6": "",
                        "7": "def run_comment_lister(repo_path, jar_path, tag=\"-target=HEAD\"):",
                        "8": "    try:",
                        "9": "        result = subprocess.run(",
                        "10": "            ['java', '-jar', jar_path, repo_path, tag],",
                        "11": "            stdout=subprocess.PIPE,",
                        "12": "            stderr=subprocess.PIPE,",
                        "13": "            text=True,",
                        "14": "            check=True",
                        "15": "        )",
                        "16": "        return result.stdout",
                        "17": "    except subprocess.CalledProcessError as e:",
                        "18": "        print(f\"Error running CommentLister: {e.stderr}\")",
                        "19": "        return None",
                        "20": "",
                        "21": "def filter_comments_by_time(commit_data, start_time, end_time):",
                        "22": "    filtered_comments = []",
                        "23": "    commit_time = datetime.fromisoformat(commit_data[\"CommitTime\"]).replace(tzinfo=None)",
                        "24": "    if start_time <= commit_time <= end_time:",
                        "25": "        for filename, contents in commit_data[\"Files\"].items():",
                        "26": "            error = False",
                        "27": "            i = 0",
                        "28": "            while not error:",
                        "29": "                try:",
                        "30": "                    split_comment_lines = contents[str(i)][\"Text\"].split(\"\\n\")"
                    }
                },
                {
                    "code_lines": {
                        "31": "                    # print(\"Have to split comments:\", split_comment_lines)",
                        "32": "                    if len(split_comment_lines) > 1:",
                        "33": "                        initial_line = contents[str(i)][\"Line\"]",
                        "34": "                        j = 0",
                        "35": "                        for comment in split_comment_lines:"
                    },
                    "comment_lines": {
                        "31": {
                            "comment": "# print(\"Have to split comments:\", split_comment_lines)",
                            "char_position_in_line": 20,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "36": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                        "37": "                            comment_data = {",
                        "38": "                                \"line\": initial_line + j,",
                        "39": "                                \"comment\": comment,",
                        "40": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                        "41": "                            }",
                        "42": "                            j += 1",
                        "43": "                            filtered_comments.append(comment_data)",
                        "44": "                    else:",
                        "45": "                        comment_data = {",
                        "46": "                            \"line\": contents[str(i)][\"Line\"],",
                        "47": "                            \"comment\": contents[str(i)][\"Text\"],",
                        "48": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                        "49": "                        }",
                        "50": "                        filtered_comments.append(comment_data)",
                        "51": "                except KeyError as e:",
                        "52": "                    error = True",
                        "53": "                if not error:",
                        "54": "                    i += 1",
                        "55": "    else:",
                        "56": "        print(\"Comments not in specified date range\")",
                        "57": "    return commit_data[\"ObjectId\"], filtered_comments"
                    },
                    "comment_lines": {
                        "36": {
                            "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                            "char_position_in_line": 28,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "31": {
                    "comment": "# print(\"Have to split comments:\", split_comment_lines)",
                    "char_position_in_line": 20,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "36": {
                    "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                    "char_position_in_line": 28,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "filename": "build/comment_lister.py",
            "diff": {
                "added": {
                    "22": "    filtered_comments = {}",
                    "26": "            filtered_comments[filename] = []",
                    "44": "                            filtered_comments[filename].append(comment_data)",
                    "51": "                        filtered_comments[filename].append(comment_data)"
                },
                "deleted": {
                    "22": "    filtered_comments = []",
                    "43": "                            filtered_comments.append(comment_data)",
                    "50": "                        filtered_comments.append(comment_data)"
                },
                "added-block": [
                    {
                        "22": "    filtered_comments = {}"
                    },
                    {
                        "26": "            filtered_comments[filename] = []"
                    },
                    {
                        "44": "                            filtered_comments[filename].append(comment_data)"
                    },
                    {
                        "51": "                        filtered_comments[filename].append(comment_data)"
                    }
                ],
                "deleted-block": [
                    {
                        "22": "    filtered_comments = []"
                    },
                    {
                        "43": "                            filtered_comments.append(comment_data)"
                    },
                    {
                        "50": "                        filtered_comments.append(comment_data)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "import subprocess",
                        "2": "import json",
                        "3": "import os",
                        "4": "import shutil",
                        "5": "from datetime import datetime, timezone",
                        "6": "",
                        "7": "def run_comment_lister(repo_path, jar_path, tag=\"-target=HEAD\"):",
                        "8": "    try:",
                        "9": "        result = subprocess.run(",
                        "10": "            ['java', '-jar', jar_path, repo_path, tag],",
                        "11": "            stdout=subprocess.PIPE,",
                        "12": "            stderr=subprocess.PIPE,",
                        "13": "            text=True,",
                        "14": "            check=True",
                        "15": "        )",
                        "16": "        return result.stdout",
                        "17": "    except subprocess.CalledProcessError as e:",
                        "18": "        print(f\"Error running CommentLister: {e.stderr}\")",
                        "19": "        return None",
                        "20": "",
                        "21": "def filter_comments_by_time(commit_data, start_time, end_time):",
                        "22": "    filtered_comments = {}",
                        "23": "    commit_time = datetime.fromisoformat(commit_data[\"CommitTime\"]).replace(tzinfo=None)",
                        "24": "    if start_time <= commit_time <= end_time:",
                        "25": "        for filename, contents in commit_data[\"Files\"].items():",
                        "26": "            filtered_comments[filename] = []",
                        "27": "            error = False",
                        "28": "            i = 0",
                        "29": "            while not error:",
                        "30": "                try:",
                        "31": "                    split_comment_lines = contents[str(i)][\"Text\"].split(\"\\n\")"
                    }
                },
                {
                    "code_lines": {
                        "32": "                    # print(\"Have to split comments:\", split_comment_lines)",
                        "33": "                    if len(split_comment_lines) > 1:",
                        "34": "                        initial_line = contents[str(i)][\"Line\"]",
                        "35": "                        j = 0",
                        "36": "                        for comment in split_comment_lines:"
                    },
                    "comment_lines": {
                        "32": {
                            "comment": "# print(\"Have to split comments:\", split_comment_lines)",
                            "char_position_in_line": 20,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "37": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                        "38": "                            comment_data = {",
                        "39": "                                \"line\": initial_line + j,",
                        "40": "                                \"comment\": comment,",
                        "41": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                        "42": "                            }",
                        "43": "                            j += 1",
                        "44": "                            filtered_comments[filename].append(comment_data)",
                        "45": "                    else:",
                        "46": "                        comment_data = {",
                        "47": "                            \"line\": contents[str(i)][\"Line\"],",
                        "48": "                            \"comment\": contents[str(i)][\"Text\"],",
                        "49": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                        "50": "                        }",
                        "51": "                        filtered_comments[filename].append(comment_data)",
                        "52": "                except KeyError as e:",
                        "53": "                    error = True",
                        "54": "                if not error:",
                        "55": "                    i += 1",
                        "56": "    else:",
                        "57": "        print(\"Comments not in specified date range\")",
                        "58": "    return commit_data[\"ObjectId\"], filtered_comments"
                    },
                    "comment_lines": {
                        "37": {
                            "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                            "char_position_in_line": 28,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "32": {
                    "comment": "# print(\"Have to split comments:\", split_comment_lines)",
                    "char_position_in_line": 20,
                    "type": [
                        "commented-out"
                    ]
                },
                "37": {
                    "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                    "char_position_in_line": 28,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "76c0e457bfe78effef6b104d334eed6a7fa3e4e4",
            "timestamp": "2024-12-04T23:01:11+01:00",
            "author": "alexander.schranner",
            "filename": "build/comment_lister.py",
            "diff": {
                "added": {
                    "6": "from build.analysis import classify_comments",
                    "32": "                    type = classify_comments(contents[str(i)][\"Text\"])",
                    "43": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"],",
                    "44": "                                \"type\": type",
                    "52": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"],",
                    "53": "                            \"type\": type"
                },
                "deleted": {
                    "41": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]",
                    "49": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]"
                },
                "added-block": [
                    {
                        "6": "from build.analysis import classify_comments"
                    },
                    {
                        "32": "                    type = classify_comments(contents[str(i)][\"Text\"])"
                    },
                    {
                        "43": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"],",
                        "44": "                                \"type\": type"
                    },
                    {
                        "52": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"],",
                        "53": "                            \"type\": type"
                    }
                ],
                "deleted-block": [
                    {
                        "41": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]"
                    },
                    {
                        "49": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"]"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "import subprocess",
                        "2": "import json",
                        "3": "import os",
                        "4": "import shutil",
                        "5": "from datetime import datetime, timezone",
                        "6": "from build.analysis import classify_comments",
                        "7": "",
                        "8": "def run_comment_lister(repo_path, jar_path, tag=\"-target=HEAD\"):",
                        "9": "    try:",
                        "10": "        result = subprocess.run(",
                        "11": "            ['java', '-jar', jar_path, repo_path, tag],",
                        "12": "            stdout=subprocess.PIPE,",
                        "13": "            stderr=subprocess.PIPE,",
                        "14": "            text=True,",
                        "15": "            check=True",
                        "16": "        )",
                        "17": "        return result.stdout",
                        "18": "    except subprocess.CalledProcessError as e:",
                        "19": "        print(f\"Error running CommentLister: {e.stderr}\")",
                        "20": "        return None",
                        "21": "",
                        "22": "def filter_comments_by_time(commit_data, start_time, end_time):",
                        "23": "    filtered_comments = {}",
                        "24": "    commit_time = datetime.fromisoformat(commit_data[\"CommitTime\"]).replace(tzinfo=None)",
                        "25": "    if start_time <= commit_time <= end_time:",
                        "26": "        for filename, contents in commit_data[\"Files\"].items():",
                        "27": "            filtered_comments[filename] = []",
                        "28": "            error = False",
                        "29": "            i = 0",
                        "30": "            while not error:",
                        "31": "                try:",
                        "32": "                    type = classify_comments(contents[str(i)][\"Text\"])",
                        "33": "                    split_comment_lines = contents[str(i)][\"Text\"].split(\"\\n\")"
                    }
                },
                {
                    "code_lines": {
                        "34": "                    # print(\"Have to split comments:\", split_comment_lines)",
                        "35": "                    if len(split_comment_lines) > 1:",
                        "36": "                        initial_line = contents[str(i)][\"Line\"]",
                        "37": "                        j = 0",
                        "38": "                        for comment in split_comment_lines:"
                    },
                    "comment_lines": {
                        "34": {
                            "comment": "# print(\"Have to split comments:\", split_comment_lines)",
                            "char_position_in_line": 20,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "39": "                            # Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                        "40": "                            comment_data = {",
                        "41": "                                \"line\": initial_line + j,",
                        "42": "                                \"comment\": comment,",
                        "43": "                                \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"],",
                        "44": "                                \"type\": type",
                        "45": "                            }",
                        "46": "                            j += 1",
                        "47": "                            filtered_comments[filename].append(comment_data)",
                        "48": "                    else:",
                        "49": "                        comment_data = {",
                        "50": "                            \"line\": contents[str(i)][\"Line\"],",
                        "51": "                            \"comment\": contents[str(i)][\"Text\"],",
                        "52": "                            \"char_position_in_line\": contents[str(i)][\"CharPositionInLine\"],",
                        "53": "                            \"type\": type",
                        "54": "                        }",
                        "55": "                        filtered_comments[filename].append(comment_data)",
                        "56": "                except KeyError as e:",
                        "57": "                    error = True",
                        "58": "                if not error:",
                        "59": "                    i += 1",
                        "60": "    else:",
                        "61": "        print(\"Comments not in specified date range\")",
                        "62": "    return commit_data[\"ObjectId\"], filtered_comments"
                    },
                    "comment_lines": {
                        "39": {
                            "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                            "char_position_in_line": 28,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "34": {
                    "comment": "# print(\"Have to split comments:\", split_comment_lines)",
                    "char_position_in_line": 20,
                    "type": [
                        "commented-out"
                    ]
                },
                "39": {
                    "comment": "# Assumption: All multi line comments are formatted in one block, i.e. vertically in one collum",
                    "char_position_in_line": 28,
                    "type": [
                        "normal"
                    ]
                }
            }
        }
    ],
    "build/pydriller.py": [
        {
            "commit": "e20d03792161ba1b90725e6912b40275f06bf2da",
            "timestamp": "2024-11-25T02:54:47+01:00",
            "author": "alexander.schranner",
            "filename": "build/pydriller.py",
            "diff": {
                "added": {
                    "21": "                        \"diff\": diff_to_dict(file.diff_parsed)",
                    "27": "def diff_to_dict(diff):",
                    "28": "    dict_added = {}",
                    "29": "    for line in diff[\"added\"]:",
                    "30": "        dict_added[line[0]] = line[1]",
                    "31": "    diff[\"added\"] = dict_added",
                    "32": "    dict_deleted = {}",
                    "33": "    for line in diff[\"deleted\"]:",
                    "34": "        dict_deleted[line[0]] = line[1]",
                    "35": "    diff[\"deleted\"] = dict_deleted",
                    "36": "    return diff",
                    "37": "",
                    "38": ""
                },
                "deleted": {
                    "21": "                        \"diff\": file.diff_parsed"
                },
                "added-block": [
                    {
                        "21": "                        \"diff\": diff_to_dict(file.diff_parsed)"
                    },
                    {
                        "27": "def diff_to_dict(diff):",
                        "28": "    dict_added = {}",
                        "29": "    for line in diff[\"added\"]:",
                        "30": "        dict_added[line[0]] = line[1]",
                        "31": "    diff[\"added\"] = dict_added",
                        "32": "    dict_deleted = {}",
                        "33": "    for line in diff[\"deleted\"]:",
                        "34": "        dict_deleted[line[0]] = line[1]",
                        "35": "    diff[\"deleted\"] = dict_deleted",
                        "36": "    return diff",
                        "37": "",
                        "38": ""
                    }
                ],
                "deleted-block": [
                    {
                        "21": "                        \"diff\": file.diff_parsed"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "import pm4py",
                        "4": "from datetime import datetime",
                        "5": "from dateutil.relativedelta import relativedelta",
                        "6": "",
                        "7": "def get_commits_data(repo_path, from_date, to_date, file_types):",
                        "8": "    files_data = {}",
                        "9": "    for commit in Repository(   repo_path, ",
                        "10": "                                since=from_date, ",
                        "11": "                                to=to_date, ",
                        "12": "                                only_modifications_with_file_types=file_types).traverse_commits():",
                        "13": "            for file in commit.modified_files:",
                        "14": "                if file.filename not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "15": "                    files_data[file.filename] = []",
                        "16": "                if len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "17": "                    file_data = {",
                        "18": "                        \"commit\": commit.hash,",
                        "19": "                        \"timestamp\": commit.committer_date.isoformat(),",
                        "20": "                        \"author\": commit.author.name,",
                        "21": "                        \"diff\": diff_to_dict(file.diff_parsed)",
                        "22": "                    }",
                        "23": "                    if len(file.diff_parsed) != 0:",
                        "24": "                        files_data[file.filename].append(file_data)",
                        "25": "    return files_data",
                        "26": "",
                        "27": "def diff_to_dict(diff):",
                        "28": "    dict_added = {}",
                        "29": "    for line in diff[\"added\"]:",
                        "30": "        dict_added[line[0]] = line[1]",
                        "31": "    diff[\"added\"] = dict_added",
                        "32": "    dict_deleted = {}",
                        "33": "    for line in diff[\"deleted\"]:",
                        "34": "        dict_deleted[line[0]] = line[1]",
                        "35": "    diff[\"deleted\"] = dict_deleted",
                        "36": "    return diff",
                        "37": "",
                        "38": "",
                        "39": "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):",
                        "40": "    files_data = {}"
                    }
                },
                {
                    "code_lines": {
                        "41": "    # Traverse through the commits in the repository",
                        "42": "    # Only save commits, that contain at least one file of the format {language_file_extension}",
                        "43": "    for commit in Repository(repo_url, ",
                        "44": "    only_modifications_with_file_types=[f\".{language_file_extension}\"],",
                        "45": "    since=dt1,",
                        "46": "    to=dt2).traverse_commits():",
                        "47": "        if len(multi_comment_symbols) >= 2:",
                        "48": "            multi_comments_enabled = True",
                        "49": "        else:",
                        "50": "            multi_comments_enabled = False"
                    },
                    "comment_lines": {
                        "41": {
                            "comment": "# Traverse through the commits in the repository",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ]
                        },
                        "42": {
                            "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                            "char_position_in_line": 4,
                            "type": [
                                "block"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "        # Analyze each file modified in the commit",
                        "52": "        for modified_file in commit.modified_files:"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# Analyze each file modified in the commit",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "53": "            # only store file data for Rust files",
                        "54": "            if modified_file.filename not in files_data:",
                        "55": "                files_data[modified_file.filename] = []",
                        "56": "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:",
                        "57": "                file_data = {",
                        "58": "                    \"commit\": commit.hash,",
                        "59": "                    \"timestamp\": commit.committer_date.isoformat(),",
                        "60": "                    \"author\": commit.author.name,",
                        "61": "                    \"commit_message\": commit.msg,",
                        "62": "                    \"additions\": modified_file.added_lines,",
                        "63": "                    \"deletions\": modified_file.deleted_lines,",
                        "64": "                    \"change_type\": modified_file.change_type.name,",
                        "65": "                    \"diff\": modified_file.diff_parsed",
                        "66": "                }",
                        "67": "                diff_added = {}",
                        "68": "                diff_deleted = {}",
                        "69": "                diff_modified = {}",
                        "70": "                following_multi_comment = False"
                    },
                    "comment_lines": {
                        "53": {
                            "comment": "# only store file data for Rust files",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "71": "                # For added diff ispect lines filter out comments",
                        "72": "                for line in modified_file.diff_parsed[\"added\"]:",
                        "73": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                        "74": "                        diff_added[line[0]] = line[1]",
                        "75": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                        "76": "                        diff_added[line[0]] = line[1]",
                        "77": "                        following_multi_comment = True",
                        "78": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                        "79": "                        diff_added[line[0]] = line[1]",
                        "80": "                        following_multi_comment = False",
                        "81": "                file_data[\"comment_added_diff\"] = diff_added"
                    },
                    "comment_lines": {
                        "71": {
                            "comment": "# For added diff ispect lines filter out comments",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "82": "                # For deleted diff ispect lines filter out comments",
                        "83": "                for line in modified_file.diff_parsed[\"deleted\"]:",
                        "84": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                        "85": "                        diff_deleted[line[0]] = line[1]",
                        "86": "                        if line[0] in diff_added.keys():",
                        "87": "                            diff_modified[line[0]] = line[1]",
                        "88": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                        "89": "                        diff_added[line[0]] = line[1]",
                        "90": "                        following_multi_comment = True",
                        "91": "                        if line[0] in diff_added.keys():",
                        "92": "                            diff_modified[line[0]] = line[1]",
                        "93": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                        "94": "                        diff_added[line[0]] = line[1]",
                        "95": "                        if line[0] in diff_added.keys():",
                        "96": "                            diff_modified[line[0]] = line[1]",
                        "97": "                file_data[\"comment_deleted_diff\"] = diff_deleted",
                        "98": "                file_data[\"comment_modified_diff\"] = diff_modified"
                    },
                    "comment_lines": {
                        "82": {
                            "comment": "# For deleted diff ispect lines filter out comments",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "99": "                # Generate keywords based on the commit message and type of changes",
                        "100": "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                        "101": "                # Extract type of commit from commit message",
                        "102": "                # file_data[\"activity\"] = extract_activity(commit.msg)",
                        "103": "                if len(diff_added) + len(diff_deleted) != 0:",
                        "104": "                    files_data[modified_file.filename].append(file_data)",
                        "105": "    return files_data",
                        "106": "",
                        "107": "def extract_keywords(commit_message, modified_file):"
                    },
                    "comment_lines": {
                        "99": {
                            "comment": "# Generate keywords based on the commit message and type of changes",
                            "char_position_in_line": 16,
                            "type": [
                                "block"
                            ]
                        },
                        "100": {
                            "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                            "char_position_in_line": 16,
                            "type": [
                                "block",
                                "commented-out"
                            ]
                        },
                        "101": {
                            "comment": "# Extract type of commit from commit message",
                            "char_position_in_line": 16,
                            "type": [
                                "block"
                            ]
                        },
                        "102": {
                            "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                            "char_position_in_line": 16,
                            "type": [
                                "block",
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "108": "    # Determine basic keywords based on the commit message",
                        "109": "    keywords = []",
                        "110": "    if \"performance\" in commit_message.lower():",
                        "111": "        keywords.append(\"performance\")",
                        "112": "    if \"security\" in commit_message.lower():",
                        "113": "        keywords.append(\"security\")",
                        "114": "    if modified_file.added_lines > modified_file.deleted_lines:",
                        "115": "        keywords.append(\"expansion\")",
                        "116": "    else:",
                        "117": "        keywords.append(\"optimization\")",
                        "118": "    return keywords",
                        "119": "",
                        "120": "def extract_activity(commit_message):"
                    },
                    "comment_lines": {
                        "108": {
                            "comment": "# Determine basic keywords based on the commit message",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "121": "    # Use commit message keywords to determine activity type",
                        "122": "    activity = \"\"",
                        "123": "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                        "124": "        activity = \"Bug Fix\"",
                        "125": "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                        "126": "        activity = \"Feature Development\"",
                        "127": "    elif \"refactor\" in commit.msg.lower():",
                        "128": "        activity = \"Refactoring\"",
                        "129": "    else:",
                        "130": "        activity = \"Other\"",
                        "131": "    return activity",
                        "132": "",
                        "133": "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):",
                        "134": "    following_multi_comment = False",
                        "135": "    if len(multi_comment_symbols) >= 2:",
                        "136": "        multi_comments_enabled = True",
                        "137": "    else:",
                        "138": "        multi_comments_enabled = False",
                        "139": "    for file, commits in commits_data.items():",
                        "140": "        if len(file) > 0:",
                        "141": "            for commit in commits:",
                        "142": "                diff_edited = []"
                    },
                    "comment_lines": {
                        "121": {
                            "comment": "# Use commit message keywords to determine activity type",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "143": "                # Set current line for each analysis",
                        "144": "                for i in range(len(commit[\"diff\"][type])):",
                        "145": "                    curr_line = commit[\"diff\"][type][i][0]",
                        "146": "                    curr_content = commit[\"diff\"][type][i][1]"
                    },
                    "comment_lines": {
                        "143": {
                            "comment": "# Set current line for each analysis",
                            "char_position_in_line": 16,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "147": "                    # In case of a starting multiline comment start adding future lines without comment symbol ",
                        "148": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:",
                        "149": "                            following_multi_comment = True"
                    },
                    "comment_lines": {
                        "147": {
                            "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "150": "                    # In case of comment add them to existing dict if they directly follow",
                        "151": "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:",
                        "152": "                        if len(diff_edited) > 0:",
                        "153": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                        "154": "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:",
                        "155": "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content",
                        "156": "                                else:",
                        "157": "                                    diff_edited.append({",
                        "158": "                                        \"line_numbers\": [],",
                        "159": "                                        \"comments\": {curr_line: curr_content},",
                        "160": "                                        \"lines\": []})",
                        "161": "                        else:"
                    },
                    "comment_lines": {
                        "150": {
                            "comment": "# In case of comment add them to existing dict if they directly follow",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "162": "                    # or create new one",
                        "163": "                            diff_edited.append({",
                        "164": "                                \"line_numbers\": [],",
                        "165": "                                \"comments\": {curr_line: curr_content},",
                        "166": "                                \"lines\": []})"
                    },
                    "comment_lines": {
                        "162": {
                            "comment": "# or create new one",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "167": "                    # In case of no comment add lines to existing dict if line number directly follows",
                        "168": "                    else:    ",
                        "169": "                        if len(diff_edited) > 0:",
                        "170": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                        "171": "                                diff_edited[-1][\"line_numbers\"].append(curr_line)",
                        "172": "                                diff_edited[-1][\"lines\"].append(curr_content)",
                        "173": "                            else:"
                    },
                    "comment_lines": {
                        "167": {
                            "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "174": "                    # Or create new one",
                        "175": "                                diff_edited.append({",
                        "176": "                                    \"line_numbers\": [curr_line],",
                        "177": "                                    \"comments\": {},",
                        "178": "                                    \"lines\": [curr_content]})"
                    },
                    "comment_lines": {
                        "174": {
                            "comment": "# Or create new one",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "179": "                    # Disable multiline comments when symbol found",
                        "180": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:",
                        "181": "                        following_multi_comment = False",
                        "182": "                commit[\"diff\"][type] = diff_edited",
                        "183": "    return commits_data",
                        "184": "",
                        "185": "def analyze_diffs(data):",
                        "186": "    analysis_results = []",
                        "187": "",
                        "188": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "179": {
                            "comment": "# Disable multiline comments when symbol found",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "189": "        # Store last modified timestamps for each line",
                        "190": "        last_modified = {}",
                        "191": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "189": {
                            "comment": "# Store last modified timestamps for each line",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "192": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "193": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])"
                    },
                    "comment_lines": {
                        "192": {
                            "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                            "char_position_in_line": 12,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "194": "            # Track modified lines",
                        "195": "            for block in commit[\"diff\"][\"added\"]:",
                        "196": "                for line in block[\"line_numbers\"]:",
                        "197": "                    line_number = line",
                        "198": "                    last_modified[line_number] = commit_time"
                    },
                    "comment_lines": {
                        "194": {
                            "comment": "# Track modified lines",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "199": "            # Compare with comments",
                        "200": "            for line in commit[\"comment_added_diff\"]:",
                        "201": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "202": "                last_modified_lines = list(last_modified.keys())",
                        "203": "                if int(line) in last_modified_lines:",
                        "204": "                    for block in commit[\"diff\"][\"added\"]:",
                        "205": "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:",
                        "206": "                            if(comment_time > last_modified[int(line)]):",
                        "207": "                                analysis_results.append({",
                        "208": "                                    \"file\": file,",
                        "209": "                                    \"line\": int(line),",
                        "210": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                        "211": "                                    \"comment_time\": str(comment_time),",
                        "212": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                        "213": "                                })",
                        "214": "    return analysis_results"
                    },
                    "comment_lines": {
                        "199": {
                            "comment": "# Compare with comments",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "41": {
                    "comment": "# Traverse through the commits in the repository",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ]
                },
                "42": {
                    "comment": "# Only save commits, that contain at least one file of the format {language_file_extension}",
                    "char_position_in_line": 4,
                    "type": [
                        "block"
                    ]
                },
                "51": {
                    "comment": "# Analyze each file modified in the commit",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "53": {
                    "comment": "# only store file data for Rust files",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "71": {
                    "comment": "# For added diff ispect lines filter out comments",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "82": {
                    "comment": "# For deleted diff ispect lines filter out comments",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "99": {
                    "comment": "# Generate keywords based on the commit message and type of changes",
                    "char_position_in_line": 16,
                    "type": [
                        "block"
                    ]
                },
                "100": {
                    "comment": "# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "char_position_in_line": 16,
                    "type": [
                        "block",
                        "commented-out"
                    ]
                },
                "101": {
                    "comment": "# Extract type of commit from commit message",
                    "char_position_in_line": 16,
                    "type": [
                        "block"
                    ]
                },
                "102": {
                    "comment": "# file_data[\"activity\"] = extract_activity(commit.msg)",
                    "char_position_in_line": 16,
                    "type": [
                        "block",
                        "commented-out"
                    ]
                },
                "108": {
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "121": {
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "143": {
                    "comment": "# Set current line for each analysis",
                    "char_position_in_line": 16,
                    "type": [
                        "normal"
                    ]
                },
                "147": {
                    "comment": "# In case of a starting multiline comment start adding future lines without comment symbol ",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ]
                },
                "150": {
                    "comment": "# In case of comment add them to existing dict if they directly follow",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ]
                },
                "162": {
                    "comment": "# or create new one",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ]
                },
                "167": {
                    "comment": "# In case of no comment add lines to existing dict if line number directly follows",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ]
                },
                "174": {
                    "comment": "# Or create new one",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ]
                },
                "179": {
                    "comment": "# Disable multiline comments when symbol found",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ]
                },
                "189": {
                    "comment": "# Store last modified timestamps for each line",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "192": {
                    "comment": "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "char_position_in_line": 12,
                    "type": [
                        "commented-out"
                    ]
                },
                "194": {
                    "comment": "# Track modified lines",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "199": {
                    "comment": "# Compare with comments",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "ca64e3c56b1e147cafb1af0d143d4f60f04cfbe2",
            "timestamp": "2024-11-28T10:16:59+01:00",
            "author": "alexander.schranner",
            "filename": "build/pydriller.py",
            "diff": {
                "added": {
                    "62": "    return activity"
                },
                "deleted": {
                    "38": "",
                    "39": "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):",
                    "40": "    files_data = {}",
                    "41": "    # Traverse through the commits in the repository",
                    "42": "    # Only save commits, that contain at least one file of the format {language_file_extension}",
                    "43": "    for commit in Repository(repo_url,",
                    "44": "    only_modifications_with_file_types=[f\".{language_file_extension}\"],",
                    "45": "    since=dt1,",
                    "46": "    to=dt2).traverse_commits():",
                    "47": "        if len(multi_comment_symbols) >= 2:",
                    "48": "            multi_comments_enabled = True",
                    "49": "        else:",
                    "50": "            multi_comments_enabled = False",
                    "51": "        # Analyze each file modified in the commit",
                    "52": "        for modified_file in commit.modified_files:",
                    "53": "            # only store file data for Rust files",
                    "54": "            if modified_file.filename not in files_data:",
                    "55": "                files_data[modified_file.filename] = []",
                    "56": "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:",
                    "57": "                file_data = {",
                    "58": "                    \"commit\": commit.hash,",
                    "59": "                    \"timestamp\": commit.committer_date.isoformat(),",
                    "60": "                    \"author\": commit.author.name,",
                    "61": "                    \"commit_message\": commit.msg,",
                    "62": "                    \"additions\": modified_file.added_lines,",
                    "63": "                    \"deletions\": modified_file.deleted_lines,",
                    "64": "                    \"change_type\": modified_file.change_type.name,",
                    "65": "                    \"diff\": modified_file.diff_parsed",
                    "66": "                }",
                    "67": "                diff_added = {}",
                    "68": "                diff_deleted = {}",
                    "69": "                diff_modified = {}",
                    "70": "                following_multi_comment = False",
                    "71": "                # For added diff ispect lines filter out comments",
                    "72": "                for line in modified_file.diff_parsed[\"added\"]:",
                    "73": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                    "74": "                        diff_added[line[0]] = line[1]",
                    "75": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                    "76": "                        diff_added[line[0]] = line[1]",
                    "77": "                        following_multi_comment = True",
                    "78": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                    "79": "                        diff_added[line[0]] = line[1]",
                    "80": "                        following_multi_comment = False",
                    "81": "                file_data[\"comment_added_diff\"] = diff_added",
                    "82": "                # For deleted diff ispect lines filter out comments",
                    "83": "                for line in modified_file.diff_parsed[\"deleted\"]:",
                    "84": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                    "85": "                        diff_deleted[line[0]] = line[1]",
                    "86": "                        if line[0] in diff_added.keys():",
                    "87": "                            diff_modified[line[0]] = line[1]",
                    "88": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                    "89": "                        diff_added[line[0]] = line[1]",
                    "90": "                        following_multi_comment = True",
                    "91": "                        if line[0] in diff_added.keys():",
                    "92": "                            diff_modified[line[0]] = line[1]",
                    "93": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                    "94": "                        diff_added[line[0]] = line[1]",
                    "95": "                        if line[0] in diff_added.keys():",
                    "96": "                            diff_modified[line[0]] = line[1]",
                    "97": "                file_data[\"comment_deleted_diff\"] = diff_deleted",
                    "98": "                file_data[\"comment_modified_diff\"] = diff_modified",
                    "99": "                # Generate keywords based on the commit message and type of changes",
                    "100": "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                    "101": "                # Extract type of commit from commit message",
                    "102": "                # file_data[\"activity\"] = extract_activity(commit.msg)",
                    "103": "                if len(diff_added) + len(diff_deleted) != 0:",
                    "104": "                    files_data[modified_file.filename].append(file_data)",
                    "105": "    return files_data",
                    "106": "",
                    "131": "    return activity",
                    "132": "",
                    "133": "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):",
                    "134": "    following_multi_comment = False",
                    "135": "    if len(multi_comment_symbols) >= 2:",
                    "136": "        multi_comments_enabled = True",
                    "137": "    else:",
                    "138": "        multi_comments_enabled = False",
                    "139": "    for file, commits in commits_data.items():",
                    "140": "        if len(file) > 0:",
                    "141": "            for commit in commits:",
                    "142": "                diff_edited = []",
                    "143": "                # Set current line for each analysis",
                    "144": "                for i in range(len(commit[\"diff\"][type])):",
                    "145": "                    curr_line = commit[\"diff\"][type][i][0]",
                    "146": "                    curr_content = commit[\"diff\"][type][i][1]",
                    "147": "                    # In case of a starting multiline comment start adding future lines without comment symbol",
                    "148": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:",
                    "149": "                            following_multi_comment = True",
                    "150": "                    # In case of comment add them to existing dict if they directly follow",
                    "151": "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:",
                    "152": "                        if len(diff_edited) > 0:",
                    "153": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "154": "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:",
                    "155": "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content",
                    "156": "                                else:",
                    "157": "                                    diff_edited.append({",
                    "158": "                                        \"line_numbers\": [],",
                    "159": "                                        \"comments\": {curr_line: curr_content},",
                    "160": "                                        \"lines\": []})",
                    "161": "                        else:",
                    "162": "                    # or create new one",
                    "163": "                            diff_edited.append({",
                    "164": "                                \"line_numbers\": [],",
                    "165": "                                \"comments\": {curr_line: curr_content},",
                    "166": "                                \"lines\": []})",
                    "167": "                    # In case of no comment add lines to existing dict if line number directly follows",
                    "168": "                    else:",
                    "169": "                        if len(diff_edited) > 0:",
                    "170": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                    "171": "                                diff_edited[-1][\"line_numbers\"].append(curr_line)",
                    "172": "                                diff_edited[-1][\"lines\"].append(curr_content)",
                    "173": "                            else:",
                    "174": "                    # Or create new one",
                    "175": "                                diff_edited.append({",
                    "176": "                                    \"line_numbers\": [curr_line],",
                    "177": "                                    \"comments\": {},",
                    "178": "                                    \"lines\": [curr_content]})",
                    "179": "                    # Disable multiline comments when symbol found",
                    "180": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:",
                    "181": "                        following_multi_comment = False",
                    "182": "                commit[\"diff\"][type] = diff_edited",
                    "183": "    return commits_data",
                    "184": "",
                    "185": "def analyze_diffs(data):",
                    "186": "    analysis_results = []",
                    "187": "",
                    "188": "    for file, commits in data.items():",
                    "189": "        # Store last modified timestamps for each line",
                    "190": "        last_modified = {}",
                    "191": "        for commit in commits:",
                    "192": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                    "193": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])",
                    "194": "            # Track modified lines",
                    "195": "            for block in commit[\"diff\"][\"added\"]:",
                    "196": "                for line in block[\"line_numbers\"]:",
                    "197": "                    line_number = line",
                    "198": "                    last_modified[line_number] = commit_time",
                    "199": "            # Compare with comments",
                    "200": "            for line in commit[\"comment_added_diff\"]:",
                    "201": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                    "202": "                last_modified_lines = list(last_modified.keys())",
                    "203": "                if int(line) in last_modified_lines:",
                    "204": "                    for block in commit[\"diff\"][\"added\"]:",
                    "205": "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:",
                    "206": "                            if(comment_time > last_modified[int(line)]):",
                    "207": "                                analysis_results.append({",
                    "208": "                                    \"file\": file,",
                    "209": "                                    \"line\": int(line),",
                    "210": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                    "211": "                                    \"comment_time\": str(comment_time),",
                    "212": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                    "213": "                                })",
                    "214": "    return analysis_results"
                },
                "added-block": [
                    {
                        "62": "    return activity"
                    }
                ],
                "deleted-block": [
                    {
                        "38": ""
                    },
                    {
                        "39": "def analyze_commits(repo_url, language_file_extension, dt1, dt2, single_comment_symbol, multi_comment_symbols=[]):",
                        "40": "    files_data = {}",
                        "41": "    # Traverse through the commits in the repository",
                        "42": "    # Only save commits, that contain at least one file of the format {language_file_extension}",
                        "43": "    for commit in Repository(repo_url,",
                        "44": "    only_modifications_with_file_types=[f\".{language_file_extension}\"],",
                        "45": "    since=dt1,",
                        "46": "    to=dt2).traverse_commits():",
                        "47": "        if len(multi_comment_symbols) >= 2:",
                        "48": "            multi_comments_enabled = True",
                        "49": "        else:",
                        "50": "            multi_comments_enabled = False",
                        "51": "        # Analyze each file modified in the commit"
                    },
                    {
                        "52": "        for modified_file in commit.modified_files:",
                        "53": "            # only store file data for Rust files",
                        "54": "            if modified_file.filename not in files_data:",
                        "55": "                files_data[modified_file.filename] = []",
                        "56": "            if len(modified_file.filename.split(\".\")) == 2 and modified_file.filename.split(\".\")[1] == language_file_extension:",
                        "57": "                file_data = {",
                        "58": "                    \"commit\": commit.hash,",
                        "59": "                    \"timestamp\": commit.committer_date.isoformat(),",
                        "60": "                    \"author\": commit.author.name,",
                        "61": "                    \"commit_message\": commit.msg,",
                        "62": "                    \"additions\": modified_file.added_lines,",
                        "63": "                    \"deletions\": modified_file.deleted_lines,",
                        "64": "                    \"change_type\": modified_file.change_type.name,",
                        "65": "                    \"diff\": modified_file.diff_parsed",
                        "66": "                }",
                        "67": "                diff_added = {}",
                        "68": "                diff_deleted = {}",
                        "69": "                diff_modified = {}",
                        "70": "                following_multi_comment = False",
                        "71": "                # For added diff ispect lines filter out comments",
                        "72": "                for line in modified_file.diff_parsed[\"added\"]:",
                        "73": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                        "74": "                        diff_added[line[0]] = line[1]",
                        "75": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                        "76": "                        diff_added[line[0]] = line[1]",
                        "77": "                        following_multi_comment = True",
                        "78": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                        "79": "                        diff_added[line[0]] = line[1]",
                        "80": "                        following_multi_comment = False",
                        "81": "                file_data[\"comment_added_diff\"] = diff_added",
                        "82": "                # For deleted diff ispect lines filter out comments",
                        "83": "                for line in modified_file.diff_parsed[\"deleted\"]:",
                        "84": "                    if line[1].find(single_comment_symbol) != -1 or following_multi_comment:",
                        "85": "                        diff_deleted[line[0]] = line[1]",
                        "86": "                        if line[0] in diff_added.keys():",
                        "87": "                            diff_modified[line[0]] = line[1]",
                        "88": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[0]) != -1:",
                        "89": "                        diff_added[line[0]] = line[1]",
                        "90": "                        following_multi_comment = True",
                        "91": "                        if line[0] in diff_added.keys():",
                        "92": "                            diff_modified[line[0]] = line[1]",
                        "93": "                    if multi_comments_enabled and line[1].find(multi_comment_symbols[1]) != -1:",
                        "94": "                        diff_added[line[0]] = line[1]",
                        "95": "                        if line[0] in diff_added.keys():",
                        "96": "                            diff_modified[line[0]] = line[1]",
                        "97": "                file_data[\"comment_deleted_diff\"] = diff_deleted",
                        "98": "                file_data[\"comment_modified_diff\"] = diff_modified",
                        "99": "                # Generate keywords based on the commit message and type of changes",
                        "100": "                # file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)",
                        "101": "                # Extract type of commit from commit message",
                        "102": "                # file_data[\"activity\"] = extract_activity(commit.msg)",
                        "103": "                if len(diff_added) + len(diff_deleted) != 0:",
                        "104": "                    files_data[modified_file.filename].append(file_data)",
                        "105": "    return files_data",
                        "106": ""
                    },
                    {
                        "131": "    return activity",
                        "132": "",
                        "133": "def pretty_diff(commits_data, type, single_comment_symbol, multi_comment_symbols=[]):",
                        "134": "    following_multi_comment = False",
                        "135": "    if len(multi_comment_symbols) >= 2:",
                        "136": "        multi_comments_enabled = True",
                        "137": "    else:",
                        "138": "        multi_comments_enabled = False",
                        "139": "    for file, commits in commits_data.items():",
                        "140": "        if len(file) > 0:",
                        "141": "            for commit in commits:",
                        "142": "                diff_edited = []",
                        "143": "                # Set current line for each analysis",
                        "144": "                for i in range(len(commit[\"diff\"][type])):",
                        "145": "                    curr_line = commit[\"diff\"][type][i][0]",
                        "146": "                    curr_content = commit[\"diff\"][type][i][1]",
                        "147": "                    # In case of a starting multiline comment start adding future lines without comment symbol",
                        "148": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[0]) != -1:",
                        "149": "                            following_multi_comment = True",
                        "150": "                    # In case of comment add them to existing dict if they directly follow",
                        "151": "                    if curr_content.find(single_comment_symbol) == 0 or curr_content.find(single_comment_symbol + \" \") != -1 or following_multi_comment:",
                        "152": "                        if len(diff_edited) > 0:",
                        "153": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                        "154": "                                if len(diff_edited[-1][\"comments\"].keys()) > 0 and list(diff_edited[-1][\"comments\"].keys())[-1] + 1 == curr_line:",
                        "155": "                                    diff_edited[-1][\"comments\"][curr_line] = curr_content",
                        "156": "                                else:",
                        "157": "                                    diff_edited.append({",
                        "158": "                                        \"line_numbers\": [],",
                        "159": "                                        \"comments\": {curr_line: curr_content},",
                        "160": "                                        \"lines\": []})",
                        "161": "                        else:",
                        "162": "                    # or create new one",
                        "163": "                            diff_edited.append({",
                        "164": "                                \"line_numbers\": [],",
                        "165": "                                \"comments\": {curr_line: curr_content},",
                        "166": "                                \"lines\": []})",
                        "167": "                    # In case of no comment add lines to existing dict if line number directly follows",
                        "168": "                    else:",
                        "169": "                        if len(diff_edited) > 0:",
                        "170": "                            if len(diff_edited[-1][\"line_numbers\"]) == 0 or curr_line == diff_edited[-1][\"line_numbers\"][-1] + 1:",
                        "171": "                                diff_edited[-1][\"line_numbers\"].append(curr_line)",
                        "172": "                                diff_edited[-1][\"lines\"].append(curr_content)",
                        "173": "                            else:",
                        "174": "                    # Or create new one",
                        "175": "                                diff_edited.append({",
                        "176": "                                    \"line_numbers\": [curr_line],",
                        "177": "                                    \"comments\": {},",
                        "178": "                                    \"lines\": [curr_content]})",
                        "179": "                    # Disable multiline comments when symbol found",
                        "180": "                    if multi_comments_enabled and curr_content.find(multi_comment_symbols[1]) != -1:",
                        "181": "                        following_multi_comment = False",
                        "182": "                commit[\"diff\"][type] = diff_edited",
                        "183": "    return commits_data",
                        "184": "",
                        "185": "def analyze_diffs(data):",
                        "186": "    analysis_results = []",
                        "187": "",
                        "188": "    for file, commits in data.items():",
                        "189": "        # Store last modified timestamps for each line",
                        "190": "        last_modified = {}",
                        "191": "        for commit in commits:",
                        "192": "            # print(\"Starting to analyse commit: \", commit[\"commit\"])",
                        "193": "            commit_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "194": "            # Track modified lines",
                        "195": "            for block in commit[\"diff\"][\"added\"]:",
                        "196": "                for line in block[\"line_numbers\"]:",
                        "197": "                    line_number = line",
                        "198": "                    last_modified[line_number] = commit_time",
                        "199": "            # Compare with comments",
                        "200": "            for line in commit[\"comment_added_diff\"]:",
                        "201": "                comment_time = datetime.fromisoformat(commit[\"timestamp\"])",
                        "202": "                last_modified_lines = list(last_modified.keys())",
                        "203": "                if int(line) in last_modified_lines:",
                        "204": "                    for block in commit[\"diff\"][\"added\"]:",
                        "205": "                        if line in block[\"comments\"] and len(block[\"line_numbers\"]) == 0:",
                        "206": "                            if(comment_time > last_modified[int(line)]):",
                        "207": "                                analysis_results.append({",
                        "208": "                                    \"file\": file,",
                        "209": "                                    \"line\": int(line),",
                        "210": "                                    \"comment\": commit[\"comment_added_diff\"][line],",
                        "211": "                                    \"comment_time\": str(comment_time),",
                        "212": "                                    \"last_code_change_time\": str(last_modified[int(line)])",
                        "213": "                                })",
                        "214": "    return analysis_results"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "import pm4py",
                        "4": "from datetime import datetime",
                        "5": "from dateutil.relativedelta import relativedelta",
                        "6": "",
                        "7": "def get_commits_data(repo_path, from_date, to_date, file_types):",
                        "8": "    files_data = {}",
                        "9": "    for commit in Repository(   repo_path, ",
                        "10": "                                since=from_date, ",
                        "11": "                                to=to_date, ",
                        "12": "                                only_modifications_with_file_types=file_types).traverse_commits():",
                        "13": "            for file in commit.modified_files:",
                        "14": "                if file.filename not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "15": "                    files_data[file.filename] = []",
                        "16": "                if len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "17": "                    file_data = {",
                        "18": "                        \"commit\": commit.hash,",
                        "19": "                        \"timestamp\": commit.committer_date.isoformat(),",
                        "20": "                        \"author\": commit.author.name,",
                        "21": "                        \"diff\": diff_to_dict(file.diff_parsed)",
                        "22": "                    }",
                        "23": "                    if len(file.diff_parsed) != 0:",
                        "24": "                        files_data[file.filename].append(file_data)",
                        "25": "    return files_data",
                        "26": "",
                        "27": "def diff_to_dict(diff):",
                        "28": "    dict_added = {}",
                        "29": "    for line in diff[\"added\"]:",
                        "30": "        dict_added[line[0]] = line[1]",
                        "31": "    diff[\"added\"] = dict_added",
                        "32": "    dict_deleted = {}",
                        "33": "    for line in diff[\"deleted\"]:",
                        "34": "        dict_deleted[line[0]] = line[1]",
                        "35": "    diff[\"deleted\"] = dict_deleted",
                        "36": "    return diff",
                        "37": "",
                        "38": "def extract_keywords(commit_message, modified_file):"
                    }
                },
                {
                    "code_lines": {
                        "39": "    # Determine basic keywords based on the commit message",
                        "40": "    keywords = []",
                        "41": "    if \"performance\" in commit_message.lower():",
                        "42": "        keywords.append(\"performance\")",
                        "43": "    if \"security\" in commit_message.lower():",
                        "44": "        keywords.append(\"security\")",
                        "45": "    if modified_file.added_lines > modified_file.deleted_lines:",
                        "46": "        keywords.append(\"expansion\")",
                        "47": "    else:",
                        "48": "        keywords.append(\"optimization\")",
                        "49": "    return keywords",
                        "50": "",
                        "51": "def extract_activity(commit_message):"
                    },
                    "comment_lines": {
                        "39": {
                            "comment": "# Determine basic keywords based on the commit message",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "52": "    # Use commit message keywords to determine activity type",
                        "53": "    activity = \"\"",
                        "54": "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                        "55": "        activity = \"Bug Fix\"",
                        "56": "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                        "57": "        activity = \"Feature Development\"",
                        "58": "    elif \"refactor\" in commit.msg.lower():",
                        "59": "        activity = \"Refactoring\"",
                        "60": "    else:",
                        "61": "        activity = \"Other\"",
                        "62": "    return activity"
                    },
                    "comment_lines": {
                        "52": {
                            "comment": "# Use commit message keywords to determine activity type",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "39": {
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "52": {
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "filename": "build/pydriller.py",
            "diff": {
                "added": {
                    "6": "from build.utils import list_to_dict",
                    "15": "                if file.new_path not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                    "16": "                    files_data[file.new_path] = []",
                    "18": "                    if file.source_code:",
                    "19": "                        source = list_to_dict(file.source_code.split(\"\\n\"))",
                    "20": "                    else:",
                    "21": "                        source = {}",
                    "26": "                        \"diff\": diff_to_dict(file.diff_parsed),",
                    "27": "                        \"source_code\": source",
                    "30": "                        files_data[file.new_path].append(file_data)"
                },
                "deleted": {
                    "14": "                if file.filename not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                    "15": "                    files_data[file.filename] = []",
                    "21": "                        \"diff\": diff_to_dict(file.diff_parsed)",
                    "24": "                        files_data[file.filename].append(file_data)"
                },
                "added-block": [
                    {
                        "6": "from build.utils import list_to_dict"
                    },
                    {
                        "15": "                if file.new_path not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "16": "                    files_data[file.new_path] = []"
                    },
                    {
                        "18": "                    if file.source_code:",
                        "19": "                        source = list_to_dict(file.source_code.split(\"\\n\"))",
                        "20": "                    else:",
                        "21": "                        source = {}"
                    },
                    {
                        "26": "                        \"diff\": diff_to_dict(file.diff_parsed),",
                        "27": "                        \"source_code\": source"
                    },
                    {
                        "30": "                        files_data[file.new_path].append(file_data)"
                    }
                ],
                "deleted-block": [
                    {
                        "14": "                if file.filename not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "15": "                    files_data[file.filename] = []"
                    },
                    {
                        "21": "                        \"diff\": diff_to_dict(file.diff_parsed)"
                    },
                    {
                        "24": "                        files_data[file.filename].append(file_data)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "import pm4py",
                        "4": "from datetime import datetime",
                        "5": "from dateutil.relativedelta import relativedelta",
                        "6": "from build.utils import list_to_dict",
                        "7": "",
                        "8": "def get_commits_data(repo_path, from_date, to_date, file_types):",
                        "9": "    files_data = {}",
                        "10": "    for commit in Repository(   repo_path, ",
                        "11": "                                since=from_date, ",
                        "12": "                                to=to_date, ",
                        "13": "                                only_modifications_with_file_types=file_types).traverse_commits():",
                        "14": "            for file in commit.modified_files:",
                        "15": "                if file.new_path not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "16": "                    files_data[file.new_path] = []",
                        "17": "                if len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "18": "                    if file.source_code:",
                        "19": "                        source = list_to_dict(file.source_code.split(\"\\n\"))",
                        "20": "                    else:",
                        "21": "                        source = {}",
                        "22": "                    file_data = {",
                        "23": "                        \"commit\": commit.hash,",
                        "24": "                        \"timestamp\": commit.committer_date.isoformat(),",
                        "25": "                        \"author\": commit.author.name,",
                        "26": "                        \"diff\": diff_to_dict(file.diff_parsed),",
                        "27": "                        \"source_code\": source",
                        "28": "                    }",
                        "29": "                    if len(file.diff_parsed) != 0:",
                        "30": "                        files_data[file.new_path].append(file_data)",
                        "31": "    return files_data",
                        "32": "",
                        "33": "def diff_to_dict(diff):",
                        "34": "    dict_added = {}",
                        "35": "    for line in diff[\"added\"]:",
                        "36": "        dict_added[line[0]] = line[1]",
                        "37": "    diff[\"added\"] = dict_added",
                        "38": "    dict_deleted = {}",
                        "39": "    for line in diff[\"deleted\"]:",
                        "40": "        dict_deleted[line[0]] = line[1]",
                        "41": "    diff[\"deleted\"] = dict_deleted",
                        "42": "    return diff",
                        "43": "",
                        "44": "def extract_keywords(commit_message, modified_file):"
                    }
                },
                {
                    "code_lines": {
                        "45": "    # Determine basic keywords based on the commit message",
                        "46": "    keywords = []",
                        "47": "    if \"performance\" in commit_message.lower():",
                        "48": "        keywords.append(\"performance\")",
                        "49": "    if \"security\" in commit_message.lower():",
                        "50": "        keywords.append(\"security\")",
                        "51": "    if modified_file.added_lines > modified_file.deleted_lines:",
                        "52": "        keywords.append(\"expansion\")",
                        "53": "    else:",
                        "54": "        keywords.append(\"optimization\")",
                        "55": "    return keywords",
                        "56": "",
                        "57": "def extract_activity(commit_message):"
                    },
                    "comment_lines": {
                        "45": {
                            "comment": "# Determine basic keywords based on the commit message",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "58": "    # Use commit message keywords to determine activity type",
                        "59": "    activity = \"\"",
                        "60": "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                        "61": "        activity = \"Bug Fix\"",
                        "62": "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                        "63": "        activity = \"Feature Development\"",
                        "64": "    elif \"refactor\" in commit.msg.lower():",
                        "65": "        activity = \"Refactoring\"",
                        "66": "    else:",
                        "67": "        activity = \"Other\"",
                        "68": "    return activity"
                    },
                    "comment_lines": {
                        "58": {
                            "comment": "# Use commit message keywords to determine activity type",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "45": {
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "58": {
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        },
        {
            "commit": "2177350ff473ebba0adaed083fc557aacd9adebe",
            "timestamp": "2024-12-05T23:05:58+01:00",
            "author": "alexander.schranner",
            "filename": "build/pydriller.py",
            "diff": {
                "added": {
                    "16": "                    # Make sure filename \u2260 None by checking if file was deleted and therefore setting ot old path instead",
                    "17": "                    if file.new_path == None:",
                    "18": "                        name = file.old_path",
                    "19": "                    else:",
                    "20": "                        name = file.new_path",
                    "21": "                    files_data[name] = []",
                    "35": "                        files_data[name].append(file_data)"
                },
                "deleted": {
                    "16": "                    files_data[file.new_path] = []",
                    "30": "                        files_data[file.new_path].append(file_data)"
                },
                "added-block": [
                    {
                        "16": "                    # Make sure filename \u2260 None by checking if file was deleted and therefore setting ot old path instead",
                        "17": "                    if file.new_path == None:",
                        "18": "                        name = file.old_path",
                        "19": "                    else:",
                        "20": "                        name = file.new_path",
                        "21": "                    files_data[name] = []"
                    },
                    {
                        "35": "                        files_data[name].append(file_data)"
                    }
                ],
                "deleted-block": [
                    {
                        "16": "                    files_data[file.new_path] = []"
                    },
                    {
                        "30": "                        files_data[file.new_path].append(file_data)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "import pm4py",
                        "4": "from datetime import datetime",
                        "5": "from dateutil.relativedelta import relativedelta",
                        "6": "from build.utils import list_to_dict",
                        "7": "",
                        "8": "def get_commits_data(repo_path, from_date, to_date, file_types):",
                        "9": "    files_data = {}",
                        "10": "    for commit in Repository(   repo_path, ",
                        "11": "                                since=from_date, ",
                        "12": "                                to=to_date, ",
                        "13": "                                only_modifications_with_file_types=file_types).traverse_commits():",
                        "14": "            for file in commit.modified_files:",
                        "15": "                if file.new_path not in files_data and len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:"
                    }
                },
                {
                    "code_lines": {
                        "16": "                    # Make sure filename \u2260 None by checking if file was deleted and therefore setting ot old path instead",
                        "17": "                    if file.new_path == None:",
                        "18": "                        name = file.old_path",
                        "19": "                    else:",
                        "20": "                        name = file.new_path",
                        "21": "                    files_data[name] = []",
                        "22": "                if len(file.filename.split(\".\")) == 2 and \".\" + file.filename.split(\".\")[1] in file_types:",
                        "23": "                    if file.source_code:",
                        "24": "                        source = list_to_dict(file.source_code.split(\"\\n\"))",
                        "25": "                    else:",
                        "26": "                        source = {}",
                        "27": "                    file_data = {",
                        "28": "                        \"commit\": commit.hash,",
                        "29": "                        \"timestamp\": commit.committer_date.isoformat(),",
                        "30": "                        \"author\": commit.author.name,",
                        "31": "                        \"diff\": diff_to_dict(file.diff_parsed),",
                        "32": "                        \"source_code\": source",
                        "33": "                    }",
                        "34": "                    if len(file.diff_parsed) != 0:",
                        "35": "                        files_data[name].append(file_data)",
                        "36": "    return files_data",
                        "37": "",
                        "38": "def diff_to_dict(diff):",
                        "39": "    dict_added = {}",
                        "40": "    for line in diff[\"added\"]:",
                        "41": "        dict_added[line[0]] = line[1]",
                        "42": "    diff[\"added\"] = dict_added",
                        "43": "    dict_deleted = {}",
                        "44": "    for line in diff[\"deleted\"]:",
                        "45": "        dict_deleted[line[0]] = line[1]",
                        "46": "    diff[\"deleted\"] = dict_deleted",
                        "47": "    return diff",
                        "48": "",
                        "49": "def extract_keywords(commit_message, modified_file):"
                    },
                    "comment_lines": {
                        "16": {
                            "comment": "# Make sure filename \u2260 None by checking if file was deleted and therefore setting ot old path instead",
                            "char_position_in_line": 20,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "    # Determine basic keywords based on the commit message",
                        "51": "    keywords = []",
                        "52": "    if \"performance\" in commit_message.lower():",
                        "53": "        keywords.append(\"performance\")",
                        "54": "    if \"security\" in commit_message.lower():",
                        "55": "        keywords.append(\"security\")",
                        "56": "    if modified_file.added_lines > modified_file.deleted_lines:",
                        "57": "        keywords.append(\"expansion\")",
                        "58": "    else:",
                        "59": "        keywords.append(\"optimization\")",
                        "60": "    return keywords",
                        "61": "",
                        "62": "def extract_activity(commit_message):"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# Determine basic keywords based on the commit message",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "63": "    # Use commit message keywords to determine activity type",
                        "64": "    activity = \"\"",
                        "65": "    if \"bug\" in commit.msg.lower() or \"fix\" in commit.msg.lower():",
                        "66": "        activity = \"Bug Fix\"",
                        "67": "    elif \"feature\" in commit.msg.lower() or \"add\" in commit.msg.lower():",
                        "68": "        activity = \"Feature Development\"",
                        "69": "    elif \"refactor\" in commit.msg.lower():",
                        "70": "        activity = \"Refactoring\"",
                        "71": "    else:",
                        "72": "        activity = \"Other\"",
                        "73": "    return activity"
                    },
                    "comment_lines": {
                        "63": {
                            "comment": "# Use commit message keywords to determine activity type",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "16": {
                    "comment": "# Make sure filename \u2260 None by checking if file was deleted and therefore setting ot old path instead",
                    "char_position_in_line": 20,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "50": {
                    "comment": "# Determine basic keywords based on the commit message",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "63": {
                    "comment": "# Use commit message keywords to determine activity type",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                }
            }
        }
    ],
    "build/xes_conversion.py": [
        {
            "commit": "ca64e3c56b1e147cafb1af0d143d4f60f04cfbe2",
            "timestamp": "2024-11-28T10:16:59+01:00",
            "author": "alexander.schranner",
            "filename": "build/xes_conversion.py",
            "diff": {
                "added": {},
                "deleted": {},
                "added-block": [],
                "deleted-block": []
            },
            "source_code": [],
            "comments": {}
        },
        {
            "commit": "39a855de8da8bde2a00bb031978e8a5bda2178ac",
            "timestamp": "2024-12-03T15:33:45+01:00",
            "author": "alexander.schranner",
            "filename": "build/xes_conversion.py",
            "diff": {
                "added": {
                    "1": "import json",
                    "2": "from xml.etree.ElementTree import Element, SubElement, tostring",
                    "3": "from xml.dom.minidom import parseString",
                    "4": "",
                    "5": "def convert_json_to_xes(json_data, output_file):",
                    "6": "    # Create the root XES element",
                    "7": "    root = Element('log')",
                    "8": "    root.set('xes.version', '1.0')",
                    "9": "    root.set('xes.features', 'nested-attributes')",
                    "10": "    root.set('xmlns', 'http://www.xes-standard.org/')",
                    "11": "",
                    "12": "    # Group by file (caseID)",
                    "13": "    grouped_data = {}",
                    "14": "    for entry in json_data:",
                    "15": "        case_id = entry['file']",
                    "16": "        if case_id not in grouped_data:",
                    "17": "            grouped_data[case_id] = []",
                    "18": "        grouped_data[case_id].append(entry)",
                    "19": "",
                    "20": "    # Create traces (cases)",
                    "21": "    for case_id, events in grouped_data.items():",
                    "22": "        trace = SubElement(root, 'trace')",
                    "23": "",
                    "24": "        # Add caseID as attribute",
                    "25": "        trace_string = SubElement(trace, 'string')",
                    "26": "        trace_string.set('key', 'concept:name')",
                    "27": "        trace_string.set('value', case_id)",
                    "28": "",
                    "29": "        # Add events to the trace",
                    "30": "        for event in events:",
                    "31": "            event_element = SubElement(trace, 'event')",
                    "32": "",
                    "33": "            # Add attributes for the event",
                    "34": "            for key, value in event.items():",
                    "35": "                if key == 'file':  # Skip the file as it's used as caseID",
                    "36": "                    continue",
                    "37": "                attr_type = 'string'",
                    "38": "                if 'time' in key:",
                    "39": "                    attr_type = 'date'  # Use date type for time fields",
                    "40": "                event_attr = SubElement(event_element, attr_type)",
                    "41": "                event_attr.set('key', key)",
                    "42": "                event_attr.set('value', str(value))",
                    "43": "",
                    "44": "    # Save the output",
                    "45": "    xml_str = parseString(tostring(root)).toprettyxml(indent=\"  \")",
                    "46": "    with open(output_file, 'w', encoding='utf-8') as f:",
                    "47": "        f.write(xml_str)"
                },
                "deleted": {},
                "added-block": [
                    {
                        "1": "import json",
                        "2": "from xml.etree.ElementTree import Element, SubElement, tostring",
                        "3": "from xml.dom.minidom import parseString",
                        "4": "",
                        "5": "def convert_json_to_xes(json_data, output_file):"
                    },
                    {
                        "6": "    # Create the root XES element",
                        "7": "    root = Element('log')",
                        "8": "    root.set('xes.version', '1.0')",
                        "9": "    root.set('xes.features', 'nested-attributes')",
                        "10": "    root.set('xmlns', 'http://www.xes-standard.org/')",
                        "11": ""
                    },
                    {
                        "12": "    # Group by file (caseID)",
                        "13": "    grouped_data = {}",
                        "14": "    for entry in json_data:",
                        "15": "        case_id = entry['file']",
                        "16": "        if case_id not in grouped_data:",
                        "17": "            grouped_data[case_id] = []",
                        "18": "        grouped_data[case_id].append(entry)",
                        "19": ""
                    },
                    {
                        "20": "    # Create traces (cases)",
                        "21": "    for case_id, events in grouped_data.items():",
                        "22": "        trace = SubElement(root, 'trace')",
                        "23": ""
                    },
                    {
                        "24": "        # Add caseID as attribute",
                        "25": "        trace_string = SubElement(trace, 'string')",
                        "26": "        trace_string.set('key', 'concept:name')",
                        "27": "        trace_string.set('value', case_id)",
                        "28": ""
                    },
                    {
                        "29": "        # Add events to the trace",
                        "30": "        for event in events:",
                        "31": "            event_element = SubElement(trace, 'event')",
                        "32": ""
                    },
                    {
                        "33": "            # Add attributes for the event",
                        "34": "            for key, value in event.items():"
                    },
                    {
                        "35": "                if key == 'file':  # Skip the file as it's used as caseID",
                        "36": "                    continue",
                        "37": "                attr_type = 'string'",
                        "38": "                if 'time' in key:"
                    },
                    {
                        "39": "                    attr_type = 'date'  # Use date type for time fields",
                        "40": "                event_attr = SubElement(event_element, attr_type)",
                        "41": "                event_attr.set('key', key)",
                        "42": "                event_attr.set('value', str(value))",
                        "43": ""
                    },
                    {
                        "44": "    # Save the output",
                        "45": "    xml_str = parseString(tostring(root)).toprettyxml(indent=\"  \")",
                        "46": "    with open(output_file, 'w', encoding='utf-8') as f:",
                        "47": "        f.write(xml_str)"
                    }
                ],
                "deleted-block": []
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "import json",
                        "2": "from xml.etree.ElementTree import Element, SubElement, tostring",
                        "3": "from xml.dom.minidom import parseString",
                        "4": "",
                        "5": "def convert_json_to_xes(json_data, output_file):"
                    }
                },
                {
                    "code_lines": {
                        "6": "    # Create the root XES element",
                        "7": "    root = Element('log')",
                        "8": "    root.set('xes.version', '1.0')",
                        "9": "    root.set('xes.features', 'nested-attributes')",
                        "10": "    root.set('xmlns', 'http://www.xes-standard.org/')",
                        "11": ""
                    },
                    "comment_lines": {
                        "6": {
                            "comment": "# Create the root XES element",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "12": "    # Group by file (caseID)",
                        "13": "    grouped_data = {}",
                        "14": "    for entry in json_data:",
                        "15": "        case_id = entry['file']",
                        "16": "        if case_id not in grouped_data:",
                        "17": "            grouped_data[case_id] = []",
                        "18": "        grouped_data[case_id].append(entry)",
                        "19": ""
                    },
                    "comment_lines": {
                        "12": {
                            "comment": "# Group by file (caseID)",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "20": "    # Create traces (cases)",
                        "21": "    for case_id, events in grouped_data.items():",
                        "22": "        trace = SubElement(root, 'trace')",
                        "23": "        "
                    },
                    "comment_lines": {
                        "20": {
                            "comment": "# Create traces (cases)",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "        # Add caseID as attribute",
                        "25": "        trace_string = SubElement(trace, 'string')",
                        "26": "        trace_string.set('key', 'concept:name')",
                        "27": "        trace_string.set('value', case_id)",
                        "28": ""
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# Add caseID as attribute",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "        # Add events to the trace",
                        "30": "        for event in events:",
                        "31": "            event_element = SubElement(trace, 'event')",
                        "32": "            "
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# Add events to the trace",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "33": "            # Add attributes for the event",
                        "34": "            for key, value in event.items():"
                    },
                    "comment_lines": {
                        "33": {
                            "comment": "# Add attributes for the event",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "35": "                if key == 'file':  # Skip the file as it's used as caseID",
                        "36": "                    continue",
                        "37": "                attr_type = 'string'",
                        "38": "                if 'time' in key:"
                    },
                    "comment_lines": {
                        "35": {
                            "comment": "# Skip the file as it's used as caseID",
                            "char_position_in_line": 35,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "39": "                    attr_type = 'date'  # Use date type for time fields",
                        "40": "                event_attr = SubElement(event_element, attr_type)",
                        "41": "                event_attr.set('key', key)",
                        "42": "                event_attr.set('value', str(value))",
                        "43": ""
                    },
                    "comment_lines": {
                        "39": {
                            "comment": "# Use date type for time fields",
                            "char_position_in_line": 40,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "44": "    # Save the output",
                        "45": "    xml_str = parseString(tostring(root)).toprettyxml(indent=\"  \")",
                        "46": "    with open(output_file, 'w', encoding='utf-8') as f:",
                        "47": "        f.write(xml_str)",
                        "48": ""
                    },
                    "comment_lines": {
                        "44": {
                            "comment": "# Save the output",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "6": {
                    "comment": "# Create the root XES element",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "12": {
                    "comment": "# Group by file (caseID)",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "20": {
                    "comment": "# Create traces (cases)",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "24": {
                    "comment": "# Add caseID as attribute",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "29": {
                    "comment": "# Add events to the trace",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "33": {
                    "comment": "# Add attributes for the event",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "35": {
                    "comment": "# Skip the file as it's used as caseID",
                    "char_position_in_line": 35,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "39": {
                    "comment": "# Use date type for time fields",
                    "char_position_in_line": 40,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "44": {
                    "comment": "# Save the output",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        }
    ],
    "build/utils.py": [
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "filename": "build/utils.py",
            "diff": {
                "added": {
                    "26": "    xes_exporter.apply(log, path)",
                    "27": "",
                    "28": "def list_to_dict(list):",
                    "29": "    dict = {}",
                    "30": "    for i in range(len(list)):",
                    "31": "        dict[i+1] = list[i]",
                    "32": "    return dict"
                },
                "deleted": {
                    "26": "    xes_exporter.apply(log, path)"
                },
                "added-block": [
                    {
                        "26": "    xes_exporter.apply(log, path)",
                        "27": "",
                        "28": "def list_to_dict(list):",
                        "29": "    dict = {}",
                        "30": "    for i in range(len(list)):",
                        "31": "        dict[i+1] = list[i]",
                        "32": "    return dict"
                    }
                ],
                "deleted-block": [
                    {
                        "26": "    xes_exporter.apply(log, path)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pm4py.objects.log.obj import EventLog, Trace, Event",
                        "2": "from pm4py.objects.log.exporter.xes import exporter as xes_exporter",
                        "3": "import json",
                        "4": "",
                        "5": "def save_to_json(data, path):",
                        "6": "    with open(path, 'w') as json_file:",
                        "7": "        json.dump(data, json_file, indent=4)",
                        "8": "",
                        "9": "def save_to_xes(data, path):",
                        "10": "    log = EventLog()"
                    }
                },
                {
                    "code_lines": {
                        "11": "    # Iterate over each element in the data",
                        "12": "    for file, commits in data.items():"
                    },
                    "comment_lines": {
                        "11": {
                            "comment": "# Iterate over each element in the data",
                            "char_position_in_line": 4,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "13": "        # Create a trace for the file",
                        "14": "        trace = Trace()",
                        "15": "        trace.attributes[\"file\"] = file",
                        "16": "        for commit in commits:"
                    },
                    "comment_lines": {
                        "13": {
                            "comment": "# Create a trace for the file",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "17": "            # Extract event attributes",
                        "18": "            event = Event()",
                        "19": "            event[\"timestamp\"] = commit.get(\"timestamp\")",
                        "20": "            event[\"author\"] = commit.get(\"author\")",
                        "21": "            event[\"change_type\"] = commit.get(\"change_type\")"
                    },
                    "comment_lines": {
                        "17": {
                            "comment": "# Extract event attributes",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "22": "            # Add the event to the trace",
                        "23": "            trace.append(event)"
                    },
                    "comment_lines": {
                        "22": {
                            "comment": "# Add the event to the trace",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "24": "        # Add the trace to the log",
                        "25": "        log.append(trace)",
                        "26": "    xes_exporter.apply(log, path)",
                        "27": "",
                        "28": "def list_to_dict(list):",
                        "29": "    dict = {}",
                        "30": "    for i in range(len(list)):",
                        "31": "        dict[i+1] = list[i]",
                        "32": "    return dict"
                    },
                    "comment_lines": {
                        "24": {
                            "comment": "# Add the trace to the log",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "11": {
                    "comment": "# Iterate over each element in the data",
                    "char_position_in_line": 4,
                    "type": [
                        "normal"
                    ]
                },
                "13": {
                    "comment": "# Create a trace for the file",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "17": {
                    "comment": "# Extract event attributes",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "22": {
                    "comment": "# Add the event to the trace",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "24": {
                    "comment": "# Add the trace to the log",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                }
            }
        }
    ],
    "test.py": [
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "filename": "test.py",
            "diff": {
                "added": {
                    "1": "from pydriller import Repository",
                    "2": "import json",
                    "3": "from build.utils import save_to_json, list_to_dict",
                    "4": "from datetime import datetime",
                    "5": "",
                    "6": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):",
                    "7": "    \"\"\"",
                    "8": "    Extracts the source code of a specific commit tagged in the repository.",
                    "9": "",
                    "10": "    :param repo_path: Path to the local Git repository.",
                    "11": "    :param tag_name: The name of the tag to fetch.",
                    "12": "    :return: A dictionary containing file paths and their contents at the given commit.",
                    "13": "    \"\"\"",
                    "14": "    source_code = []",
                    "15": "",
                    "16": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                    "17": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                    "18": "        for modified_file in commit.modified_files:",
                    "19": "            # Save the file path and its source code",
                    "20": "            if modified_file.source_code:",
                    "21": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                    "22": "                    comit = {",
                    "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                    "24": "                    }",
                    "25": "                    source_code.append(comit)",
                    "26": "",
                    "27": "    return source_code",
                    "28": "",
                    "29": "# Example usage",
                    "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "31": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                    "32": "dt1 = datetime(2024,11,21)",
                    "33": "dt2 = datetime(2024,11,22)",
                    "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                    "35": "save_to_json(source_code, \"Tests/exports.json\")"
                },
                "deleted": {},
                "added-block": [
                    {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "from build.utils import save_to_json, list_to_dict",
                        "4": "from datetime import datetime",
                        "5": "",
                        "6": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):"
                    },
                    {
                        "7": "    \"\"\"",
                        "8": "    Extracts the source code of a specific commit tagged in the repository.",
                        "9": "",
                        "10": "    :param repo_path: Path to the local Git repository.",
                        "11": "    :param tag_name: The name of the tag to fetch.",
                        "12": "    :return: A dictionary containing file paths and their contents at the given commit.",
                        "13": "    \"\"\"",
                        "14": "    source_code = []",
                        "15": "",
                        "16": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                        "17": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                        "18": "        for modified_file in commit.modified_files:"
                    },
                    {
                        "19": "            # Save the file path and its source code",
                        "20": "            if modified_file.source_code:",
                        "21": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                        "22": "                    comit = {",
                        "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                        "24": "                    }",
                        "25": "                    source_code.append(comit)",
                        "26": "",
                        "27": "    return source_code",
                        "28": ""
                    },
                    {
                        "29": "# Example usage",
                        "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "31": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                        "32": "dt1 = datetime(2024,11,21)",
                        "33": "dt2 = datetime(2024,11,22)",
                        "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                        "35": "save_to_json(source_code, \"Tests/exports.json\")"
                    }
                ],
                "deleted-block": []
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "from build.utils import save_to_json, list_to_dict",
                        "4": "from datetime import datetime",
                        "5": "",
                        "6": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):"
                    }
                },
                {
                    "code_lines": {
                        "7": "    \"\"\"",
                        "8": "    Extracts the source code of a specific commit tagged in the repository.",
                        "9": "",
                        "10": "    :param repo_path: Path to the local Git repository.",
                        "11": "    :param tag_name: The name of the tag to fetch.",
                        "12": "    :return: A dictionary containing file paths and their contents at the given commit.",
                        "13": "    \"\"\"",
                        "14": "    source_code = []",
                        "15": "",
                        "16": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                        "17": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                        "18": "        for modified_file in commit.modified_files:"
                    },
                    "comment_lines": {
                        "7": {
                            "comment": "\"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "8": {
                            "comment": "    Extracts the source code of a specific commit tagged in the repository.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "9": {
                            "comment": "",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring",
                                "commented-out"
                            ],
                            "edit": "added"
                        },
                        "10": {
                            "comment": "    :param repo_path: Path to the local Git repository.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "11": {
                            "comment": "    :param tag_name: The name of the tag to fetch.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "12": {
                            "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "13": {
                            "comment": "    \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "19": "            # Save the file path and its source code",
                        "20": "            if modified_file.source_code:",
                        "21": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                        "22": "                    comit = {",
                        "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                        "24": "                    }",
                        "25": "                    source_code.append(comit)",
                        "26": "",
                        "27": "    return source_code",
                        "28": ""
                    },
                    "comment_lines": {
                        "19": {
                            "comment": "# Save the file path and its source code",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "# Example usage",
                        "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "31": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                        "32": "dt1 = datetime(2024,11,21)",
                        "33": "dt2 = datetime(2024,11,22)",
                        "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                        "35": "save_to_json(source_code, \"Tests/exports.json\")",
                        "36": ""
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# Example usage",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "7": {
                    "comment": "\"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "8": {
                    "comment": "    Extracts the source code of a specific commit tagged in the repository.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "9": {
                    "comment": "",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring",
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "10": {
                    "comment": "    :param repo_path: Path to the local Git repository.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "11": {
                    "comment": "    :param tag_name: The name of the tag to fetch.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "12": {
                    "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "13": {
                    "comment": "    \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "19": {
                    "comment": "# Save the file path and its source code",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "29": {
                    "comment": "# Example usage",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "c92ae279606c2cdf0e62136cd793b188fda08371",
            "timestamp": "2024-12-04T14:36:49+01:00",
            "author": "alexander.schranner",
            "filename": "test.py",
            "diff": {
                "added": {
                    "3": "from build.pydriller import get_commits_data",
                    "4": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                    "5": "from build.utils import save_to_json",
                    "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                    "7": "from build.xes_conversion import convert_json_to_xes",
                    "8": "from datetime import datetime, timezone",
                    "9": "import os",
                    "10": "import subprocess",
                    "11": "import shutil",
                    "15": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                    "20": "    END DOCSTRING",
                    "27": "            # NORMAL Save the file path and its source code",
                    "29": "                # BLOCK: Multiple lines",
                    "30": "                # of comment",
                    "33": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data",
                    "36": "                    # print(commit) #COMMENTED-OUT",
                    "41": "repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "43": "start_time = datetime(2024,12,3)",
                    "44": "end_time = datetime(2024,12,4)",
                    "45": "repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "46": "temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "47": "clone_path = os.path.join(temp_dir, repo_name)",
                    "48": "",
                    "49": "subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "50": "",
                    "51": "# # Paths",
                    "52": "repo_path = clone_path",
                    "53": "jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "54": "file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "55": "",
                    "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "57": "save_to_json(commits_data, \"Toy-Example/commits_data.json\")",
                    "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                    "59": "        commits_data = json.load(json_file)",
                    "60": "",
                    "61": "for file, commits in commits_data.items():",
                    "62": "    for commit in commits:",
                    "63": "        tag = \"-target=\" + commit[\"commit\"]",
                    "64": "        output = run_comment_lister(repo_path, jar_path, tag)",
                    "65": "        # Parse output as JSON",
                    "66": "        try:",
                    "67": "            comment_data = json.loads(output)",
                    "68": "        except json.JSONDecodeError as e:",
                    "69": "            print(f\"Failed to parse CommentLister output: {e}\")",
                    "70": "            break",
                    "71": "        # Filter comments by time",
                    "72": "        commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "73": "        if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                    "74": "            commit[\"comments\"] = filtered_comments[file]",
                    "75": "        else:",
                    "76": "            print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "77": "            print(\"file could have been deleted\")",
                    "78": "            commit[\"comments\"] = {}",
                    "79": "# Save filtered comments on your system",
                    "80": "save_to_json(commits_data, \"Toy-Example/filtered_commits_data.json\")",
                    "81": "shutil.rmtree(clone_path)",
                    "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                    "83": "    data = json.load(json_file)",
                    "84": "# analyse_diff_comments(data)",
                    "85": "blockify_comments(data)",
                    "86": "save_to_json(data, \"Toy-Example/blockified_comments_data.json\")",
                    "87": "with open(\"Toy-Example/blockified_comments_data.json\", \"r\") as json_file:",
                    "88": "    data = json.load(json_file)",
                    "89": "blockify_comments2(data)",
                    "90": "save_to_json(data, \"Toy-Example/blockified_comments2_data.json\")",
                    "91": "with open(\"Toy-Example/blockified_comments2_data.json\", \"r\") as json_file:",
                    "92": "    data = json.load(json_file)",
                    "93": "d = extract_later_modified_comments(data)",
                    "94": "save_to_json(d, \"Toy-Example/analysis_results.json\")",
                    "95": "with open(\"Toy-Example/analysis_results.json\", \"r\") as json_file:",
                    "96": "    data = json.load(json_file)",
                    "97": "d = clean(data)",
                    "98": "save_to_json(d, \"Toy-Example/clean_analysis_results.json\")",
                    "99": "with open(\"Toy-Example/clean_analysis_results.json\", \"r\") as json_file:",
                    "100": "    data = json.load(json_file)",
                    "101": "d = classify_comments(data)",
                    "102": "save_to_json(d, \"Toy-Example/clean_analysis_results2.json\")",
                    "103": "print(\"Average duration:\", average_comment_update_time(d))",
                    "104": "convert_json_to_xes(d, 'Toy-Example/output.xes')"
                },
                "deleted": {
                    "3": "from build.utils import save_to_json, list_to_dict",
                    "4": "from datetime import datetime",
                    "8": "    Extracts the source code of a specific commit tagged in the repository.",
                    "19": "            # Save the file path and its source code",
                    "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                    "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "32": "dt1 = datetime(2024,11,21)",
                    "33": "dt2 = datetime(2024,11,22)",
                    "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                    "35": "save_to_json(source_code, \"Tests/exports.json\")"
                },
                "added-block": [
                    {
                        "3": "from build.pydriller import get_commits_data",
                        "4": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "5": "from build.utils import save_to_json",
                        "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                        "7": "from build.xes_conversion import convert_json_to_xes",
                        "8": "from datetime import datetime, timezone",
                        "9": "import os",
                        "10": "import subprocess",
                        "11": "import shutil"
                    },
                    {
                        "15": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository."
                    },
                    {
                        "20": "    END DOCSTRING"
                    },
                    {
                        "27": "            # NORMAL Save the file path and its source code"
                    },
                    {
                        "29": "                # BLOCK: Multiple lines",
                        "30": "                # of comment"
                    },
                    {
                        "33": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data"
                    },
                    {
                        "36": "                    # print(commit) #COMMENTED-OUT"
                    },
                    {
                        "41": "repo_url = \"https://github.com/AlexS-1/Bachelor-Code\""
                    },
                    {
                        "43": "start_time = datetime(2024,12,3)",
                        "44": "end_time = datetime(2024,12,4)",
                        "45": "repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "46": "temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "47": "clone_path = os.path.join(temp_dir, repo_name)",
                        "48": "",
                        "49": "subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "50": ""
                    },
                    {
                        "51": "# # Paths",
                        "52": "repo_path = clone_path",
                        "53": "jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "54": "file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "55": "",
                        "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "57": "save_to_json(commits_data, \"Toy-Example/commits_data.json\")",
                        "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                        "59": "        commits_data = json.load(json_file)",
                        "60": "",
                        "61": "for file, commits in commits_data.items():",
                        "62": "    for commit in commits:",
                        "63": "        tag = \"-target=\" + commit[\"commit\"]",
                        "64": "        output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    {
                        "65": "        # Parse output as JSON",
                        "66": "        try:",
                        "67": "            comment_data = json.loads(output)",
                        "68": "        except json.JSONDecodeError as e:",
                        "69": "            print(f\"Failed to parse CommentLister output: {e}\")",
                        "70": "            break"
                    },
                    {
                        "71": "        # Filter comments by time",
                        "72": "        commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "73": "        if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "74": "            commit[\"comments\"] = filtered_comments[file]",
                        "75": "        else:",
                        "76": "            print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "77": "            print(\"file could have been deleted\")",
                        "78": "            commit[\"comments\"] = {}"
                    },
                    {
                        "79": "# Save filtered comments on your system",
                        "80": "save_to_json(commits_data, \"Toy-Example/filtered_commits_data.json\")",
                        "81": "shutil.rmtree(clone_path)",
                        "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "83": "    data = json.load(json_file)"
                    },
                    {
                        "84": "# analyse_diff_comments(data)",
                        "85": "blockify_comments(data)",
                        "86": "save_to_json(data, \"Toy-Example/blockified_comments_data.json\")",
                        "87": "with open(\"Toy-Example/blockified_comments_data.json\", \"r\") as json_file:",
                        "88": "    data = json.load(json_file)",
                        "89": "blockify_comments2(data)",
                        "90": "save_to_json(data, \"Toy-Example/blockified_comments2_data.json\")",
                        "91": "with open(\"Toy-Example/blockified_comments2_data.json\", \"r\") as json_file:",
                        "92": "    data = json.load(json_file)",
                        "93": "d = extract_later_modified_comments(data)",
                        "94": "save_to_json(d, \"Toy-Example/analysis_results.json\")",
                        "95": "with open(\"Toy-Example/analysis_results.json\", \"r\") as json_file:",
                        "96": "    data = json.load(json_file)",
                        "97": "d = clean(data)",
                        "98": "save_to_json(d, \"Toy-Example/clean_analysis_results.json\")",
                        "99": "with open(\"Toy-Example/clean_analysis_results.json\", \"r\") as json_file:",
                        "100": "    data = json.load(json_file)",
                        "101": "d = classify_comments(data)",
                        "102": "save_to_json(d, \"Toy-Example/clean_analysis_results2.json\")",
                        "103": "print(\"Average duration:\", average_comment_update_time(d))",
                        "104": "convert_json_to_xes(d, 'Toy-Example/output.xes')"
                    }
                ],
                "deleted-block": [
                    {
                        "3": "from build.utils import save_to_json, list_to_dict",
                        "4": "from datetime import datetime"
                    },
                    {
                        "8": "    Extracts the source code of a specific commit tagged in the repository."
                    },
                    {
                        "19": "            # Save the file path and its source code"
                    },
                    {
                        "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))"
                    },
                    {
                        "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\""
                    },
                    {
                        "32": "dt1 = datetime(2024,11,21)"
                    },
                    {
                        "33": "dt2 = datetime(2024,11,22)",
                        "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                        "35": "save_to_json(source_code, \"Tests/exports.json\")"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "from build.pydriller import get_commits_data",
                        "4": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "5": "from build.utils import save_to_json",
                        "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                        "7": "from build.xes_conversion import convert_json_to_xes",
                        "8": "from datetime import datetime, timezone",
                        "9": "import os",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "",
                        "13": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):"
                    }
                },
                {
                    "code_lines": {
                        "14": "    \"\"\"",
                        "15": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                        "16": "",
                        "17": "    :param repo_path: Path to the local Git repository.",
                        "18": "    :param tag_name: The name of the tag to fetch.",
                        "19": "    :return: A dictionary containing file paths and their contents at the given commit.",
                        "20": "    END DOCSTRING",
                        "21": "    \"\"\"",
                        "22": "    source_code = []",
                        "23": "",
                        "24": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                        "25": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                        "26": "        for modified_file in commit.modified_files:"
                    },
                    "comment_lines": {
                        "14": {
                            "comment": "\"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "15": {
                            "comment": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "16": {
                            "comment": "",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring",
                                "commented-out"
                            ]
                        },
                        "17": {
                            "comment": "    :param repo_path: Path to the local Git repository.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "18": {
                            "comment": "    :param tag_name: The name of the tag to fetch.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "19": {
                            "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "20": {
                            "comment": "    END DOCSTRING",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ],
                            "edit": "added"
                        },
                        "21": {
                            "comment": "    \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "27": "            # NORMAL Save the file path and its source code",
                        "28": "            if modified_file.source_code:"
                    },
                    "comment_lines": {
                        "27": {
                            "comment": "# NORMAL Save the file path and its source code",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "                # BLOCK: Multiple lines",
                        "30": "                # of comment",
                        "31": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                        "32": "                    comit = {"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# BLOCK: Multiple lines",
                            "char_position_in_line": 16,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        },
                        "30": {
                            "comment": "# of comment",
                            "char_position_in_line": 16,
                            "type": [
                                "block"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "33": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data",
                        "34": "                    }",
                        "35": "                    source_code.append(comit)"
                    },
                    "comment_lines": {
                        "33": {
                            "comment": "#INLINE: identify each block of data",
                            "char_position_in_line": 122,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "36": "                    # print(commit) #COMMENTED-OUT",
                        "37": "",
                        "38": "    return source_code",
                        "39": ""
                    },
                    "comment_lines": {
                        "36": {
                            "comment": "# print(commit) #COMMENTED-OUT",
                            "char_position_in_line": 20,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "40": "# Example usage",
                        "41": "repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "42": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                        "43": "start_time = datetime(2024,12,3)",
                        "44": "end_time = datetime(2024,12,4)",
                        "45": "repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "46": "temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "47": "clone_path = os.path.join(temp_dir, repo_name)",
                        "48": "",
                        "49": "subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "50": ""
                    },
                    "comment_lines": {
                        "40": {
                            "comment": "# Example usage",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "51": "# # Paths",
                        "52": "repo_path = clone_path",
                        "53": "jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "54": "file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "55": "",
                        "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                        "57": "save_to_json(commits_data, \"Toy-Example/commits_data.json\")",
                        "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                        "59": "        commits_data = json.load(json_file)",
                        "60": "",
                        "61": "for file, commits in commits_data.items():",
                        "62": "    for commit in commits:",
                        "63": "        tag = \"-target=\" + commit[\"commit\"]",
                        "64": "        output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "51": {
                            "comment": "# # Paths",
                            "char_position_in_line": 0,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "65": "        # Parse output as JSON",
                        "66": "        try:",
                        "67": "            comment_data = json.loads(output)",
                        "68": "        except json.JSONDecodeError as e:",
                        "69": "            print(f\"Failed to parse CommentLister output: {e}\")",
                        "70": "            break"
                    },
                    "comment_lines": {
                        "65": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "71": "        # Filter comments by time",
                        "72": "        commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "73": "        if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "74": "            commit[\"comments\"] = filtered_comments[file]",
                        "75": "        else:",
                        "76": "            print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "77": "            print(\"file could have been deleted\")",
                        "78": "            commit[\"comments\"] = {}"
                    },
                    "comment_lines": {
                        "71": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "79": "# Save filtered comments on your system",
                        "80": "save_to_json(commits_data, \"Toy-Example/filtered_commits_data.json\")",
                        "81": "shutil.rmtree(clone_path)",
                        "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                        "83": "    data = json.load(json_file)"
                    },
                    "comment_lines": {
                        "79": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ],
                            "edit": "added"
                        }
                    }
                },
                {
                    "code_lines": {
                        "84": "# analyse_diff_comments(data)",
                        "85": "blockify_comments(data)",
                        "86": "save_to_json(data, \"Toy-Example/blockified_comments_data.json\")",
                        "87": "with open(\"Toy-Example/blockified_comments_data.json\", \"r\") as json_file:",
                        "88": "    data = json.load(json_file)",
                        "89": "blockify_comments2(data)",
                        "90": "save_to_json(data, \"Toy-Example/blockified_comments2_data.json\")",
                        "91": "with open(\"Toy-Example/blockified_comments2_data.json\", \"r\") as json_file:",
                        "92": "    data = json.load(json_file)",
                        "93": "d = extract_later_modified_comments(data)",
                        "94": "save_to_json(d, \"Toy-Example/analysis_results.json\")",
                        "95": "with open(\"Toy-Example/analysis_results.json\", \"r\") as json_file:",
                        "96": "    data = json.load(json_file)",
                        "97": "d = clean(data)",
                        "98": "save_to_json(d, \"Toy-Example/clean_analysis_results.json\")",
                        "99": "with open(\"Toy-Example/clean_analysis_results.json\", \"r\") as json_file:",
                        "100": "    data = json.load(json_file)",
                        "101": "d = classify_comments(data)",
                        "102": "save_to_json(d, \"Toy-Example/clean_analysis_results2.json\")",
                        "103": "print(\"Average duration:\", average_comment_update_time(d))",
                        "104": "convert_json_to_xes(d, 'Toy-Example/output.xes')"
                    },
                    "comment_lines": {
                        "84": {
                            "comment": "# analyse_diff_comments(data)",
                            "char_position_in_line": 0,
                            "type": [
                                "commented-out"
                            ],
                            "edit": "added"
                        }
                    }
                }
            ],
            "comments": {
                "14": {
                    "comment": "\"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "15": {
                    "comment": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "16": {
                    "comment": "",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring",
                        "commented-out"
                    ]
                },
                "17": {
                    "comment": "    :param repo_path: Path to the local Git repository.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "18": {
                    "comment": "    :param tag_name: The name of the tag to fetch.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "19": {
                    "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "20": {
                    "comment": "    END DOCSTRING",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ],
                    "edit": "added"
                },
                "21": {
                    "comment": "    \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "27": {
                    "comment": "# NORMAL Save the file path and its source code",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "29": {
                    "comment": "# BLOCK: Multiple lines",
                    "char_position_in_line": 16,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "30": {
                    "comment": "# of comment",
                    "char_position_in_line": 16,
                    "type": [
                        "block"
                    ],
                    "edit": "added"
                },
                "33": {
                    "comment": "#INLINE: identify each block of data",
                    "char_position_in_line": 122,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "36": {
                    "comment": "# print(commit) #COMMENTED-OUT",
                    "char_position_in_line": 20,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "40": {
                    "comment": "# Example usage",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "51": {
                    "comment": "# # Paths",
                    "char_position_in_line": 0,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                },
                "65": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "71": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "79": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ],
                    "edit": "added"
                },
                "84": {
                    "comment": "# analyse_diff_comments(data)",
                    "char_position_in_line": 0,
                    "type": [
                        "commented-out"
                    ],
                    "edit": "added"
                }
            }
        },
        {
            "commit": "76c0e457bfe78effef6b104d334eed6a7fa3e4e4",
            "timestamp": "2024-12-04T23:01:11+01:00",
            "author": "alexander.schranner",
            "filename": "test.py",
            "diff": {
                "added": {
                    "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content",
                    "37": "    return source_code",
                    "43": "end_time = datetime.today()",
                    "55": "commits_data = get_commits_data(repo_path, start_time, datetime.today(), file_types)",
                    "57": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                    "81": "with open(\"Toy-Example/filtered_commits_data.json\", \"r\") as json_file:",
                    "100": "d = classify_content(data)"
                },
                "deleted": {
                    "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                    "37": "",
                    "38": "    return source_code",
                    "44": "end_time = datetime(2024,12,4)",
                    "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                    "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                    "101": "d = classify_comments(data)"
                },
                "added-block": [
                    {
                        "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content"
                    },
                    {
                        "37": "    return source_code"
                    },
                    {
                        "43": "end_time = datetime.today()"
                    },
                    {
                        "55": "commits_data = get_commits_data(repo_path, start_time, datetime.today(), file_types)"
                    },
                    {
                        "57": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:"
                    },
                    {
                        "81": "with open(\"Toy-Example/filtered_commits_data.json\", \"r\") as json_file:"
                    },
                    {
                        "100": "d = classify_content(data)"
                    }
                ],
                "deleted-block": [
                    {
                        "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments"
                    },
                    {
                        "37": "",
                        "38": "    return source_code"
                    },
                    {
                        "44": "end_time = datetime(2024,12,4)"
                    },
                    {
                        "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)"
                    },
                    {
                        "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:"
                    },
                    {
                        "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:"
                    },
                    {
                        "101": "d = classify_comments(data)"
                    }
                ]
            },
            "source_code": [
                {
                    "code_lines": {
                        "1": "from pydriller import Repository",
                        "2": "import json",
                        "3": "from build.pydriller import get_commits_data",
                        "4": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                        "5": "from build.utils import save_to_json",
                        "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments, classify_content",
                        "7": "from build.xes_conversion import convert_json_to_xes",
                        "8": "from datetime import datetime, timezone",
                        "9": "import os",
                        "10": "import subprocess",
                        "11": "import shutil",
                        "12": "",
                        "13": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):"
                    }
                },
                {
                    "code_lines": {
                        "14": "    \"\"\"",
                        "15": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                        "16": "",
                        "17": "    :param repo_path: Path to the local Git repository.",
                        "18": "    :param tag_name: The name of the tag to fetch.",
                        "19": "    :return: A dictionary containing file paths and their contents at the given commit.",
                        "20": "    END DOCSTRING",
                        "21": "    \"\"\"",
                        "22": "    source_code = []",
                        "23": "",
                        "24": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                        "25": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                        "26": "        for modified_file in commit.modified_files:"
                    },
                    "comment_lines": {
                        "14": {
                            "comment": "\"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "15": {
                            "comment": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "16": {
                            "comment": "",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring",
                                "commented-out"
                            ]
                        },
                        "17": {
                            "comment": "    :param repo_path: Path to the local Git repository.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "18": {
                            "comment": "    :param tag_name: The name of the tag to fetch.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "19": {
                            "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "20": {
                            "comment": "    END DOCSTRING",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        },
                        "21": {
                            "comment": "    \"\"\"",
                            "char_position_in_line": 4,
                            "type": [
                                "block",
                                "docstring"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "27": "            # NORMAL Save the file path and its source code",
                        "28": "            if modified_file.source_code:"
                    },
                    "comment_lines": {
                        "27": {
                            "comment": "# NORMAL Save the file path and its source code",
                            "char_position_in_line": 12,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "29": "                # BLOCK: Multiple lines",
                        "30": "                # of comment",
                        "31": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                        "32": "                    comit = {"
                    },
                    "comment_lines": {
                        "29": {
                            "comment": "# BLOCK: Multiple lines",
                            "char_position_in_line": 16,
                            "type": [
                                "block"
                            ]
                        },
                        "30": {
                            "comment": "# of comment",
                            "char_position_in_line": 16,
                            "type": [
                                "block"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "33": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data",
                        "34": "                    }",
                        "35": "                    source_code.append(comit)"
                    },
                    "comment_lines": {
                        "33": {
                            "comment": "#INLINE: identify each block of data",
                            "char_position_in_line": 122,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "36": "                    # print(commit) #COMMENTED-OUT",
                        "37": "    return source_code  ",
                        "38": ""
                    },
                    "comment_lines": {
                        "36": {
                            "comment": "# print(commit) #COMMENTED-OUT",
                            "char_position_in_line": 20,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "39": "# Example usage",
                        "40": "repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                        "41": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                        "42": "start_time = datetime(2024,12,3)",
                        "43": "end_time = datetime.today()",
                        "44": "repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                        "45": "temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                        "46": "clone_path = os.path.join(temp_dir, repo_name)",
                        "47": "",
                        "48": "subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                        "49": ""
                    },
                    "comment_lines": {
                        "39": {
                            "comment": "# Example usage",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "50": "# # Paths",
                        "51": "repo_path = clone_path",
                        "52": "jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                        "53": "file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                        "54": "",
                        "55": "commits_data = get_commits_data(repo_path, start_time, datetime.today(), file_types)",
                        "56": "save_to_json(commits_data, \"Toy-Example/commits_data.json\")",
                        "57": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file: ",
                        "58": "        commits_data = json.load(json_file)",
                        "59": "",
                        "60": "for file, commits in commits_data.items():",
                        "61": "    for commit in commits:",
                        "62": "        tag = \"-target=\" + commit[\"commit\"]",
                        "63": "        output = run_comment_lister(repo_path, jar_path, tag)"
                    },
                    "comment_lines": {
                        "50": {
                            "comment": "# # Paths",
                            "char_position_in_line": 0,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "64": "        # Parse output as JSON",
                        "65": "        try:",
                        "66": "            comment_data = json.loads(output)",
                        "67": "        except json.JSONDecodeError as e:",
                        "68": "            print(f\"Failed to parse CommentLister output: {e}\")",
                        "69": "            break"
                    },
                    "comment_lines": {
                        "64": {
                            "comment": "# Parse output as JSON",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "70": "        # Filter comments by time",
                        "71": "        commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                        "72": "        if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                        "73": "            commit[\"comments\"] = filtered_comments[file]",
                        "74": "        else:",
                        "75": "            print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                        "76": "            print(\"file could have been deleted\")",
                        "77": "            commit[\"comments\"] = {}"
                    },
                    "comment_lines": {
                        "70": {
                            "comment": "# Filter comments by time",
                            "char_position_in_line": 8,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "78": "# Save filtered comments on your system",
                        "79": "save_to_json(commits_data, \"Toy-Example/filtered_commits_data.json\")",
                        "80": "shutil.rmtree(clone_path)",
                        "81": "with open(\"Toy-Example/filtered_commits_data.json\", \"r\") as json_file:",
                        "82": "    data = json.load(json_file)"
                    },
                    "comment_lines": {
                        "78": {
                            "comment": "# Save filtered comments on your system",
                            "char_position_in_line": 0,
                            "type": [
                                "normal"
                            ]
                        }
                    }
                },
                {
                    "code_lines": {
                        "83": "# analyse_diff_comments(data)",
                        "84": "blockify_comments(data)",
                        "85": "save_to_json(data, \"Toy-Example/blockified_comments_data.json\")",
                        "86": "with open(\"Toy-Example/blockified_comments_data.json\", \"r\") as json_file:",
                        "87": "    data = json.load(json_file)",
                        "88": "blockify_comments2(data)",
                        "89": "save_to_json(data, \"Toy-Example/blockified_comments2_data.json\")",
                        "90": "with open(\"Toy-Example/blockified_comments2_data.json\", \"r\") as json_file:",
                        "91": "    data = json.load(json_file)",
                        "92": "d = extract_later_modified_comments(data)",
                        "93": "save_to_json(d, \"Toy-Example/analysis_results.json\")",
                        "94": "with open(\"Toy-Example/analysis_results.json\", \"r\") as json_file:",
                        "95": "    data = json.load(json_file)",
                        "96": "d = clean(data)",
                        "97": "save_to_json(d, \"Toy-Example/clean_analysis_results.json\")",
                        "98": "with open(\"Toy-Example/clean_analysis_results.json\", \"r\") as json_file:",
                        "99": "    data = json.load(json_file)",
                        "100": "d = classify_content(data)",
                        "101": "save_to_json(d, \"Toy-Example/clean_analysis_results2.json\")",
                        "102": "print(\"Average duration:\", average_comment_update_time(d))",
                        "103": "convert_json_to_xes(d, 'Toy-Example/output.xes')"
                    },
                    "comment_lines": {
                        "83": {
                            "comment": "# analyse_diff_comments(data)",
                            "char_position_in_line": 0,
                            "type": [
                                "commented-out"
                            ]
                        }
                    }
                }
            ],
            "comments": {
                "14": {
                    "comment": "\"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "15": {
                    "comment": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "16": {
                    "comment": "",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring",
                        "commented-out"
                    ]
                },
                "17": {
                    "comment": "    :param repo_path: Path to the local Git repository.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "18": {
                    "comment": "    :param tag_name: The name of the tag to fetch.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "19": {
                    "comment": "    :return: A dictionary containing file paths and their contents at the given commit.",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "20": {
                    "comment": "    END DOCSTRING",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "21": {
                    "comment": "    \"\"\"",
                    "char_position_in_line": 4,
                    "type": [
                        "block",
                        "docstring"
                    ]
                },
                "27": {
                    "comment": "# NORMAL Save the file path and its source code",
                    "char_position_in_line": 12,
                    "type": [
                        "normal"
                    ]
                },
                "29": {
                    "comment": "# BLOCK: Multiple lines",
                    "char_position_in_line": 16,
                    "type": [
                        "block"
                    ]
                },
                "30": {
                    "comment": "# of comment",
                    "char_position_in_line": 16,
                    "type": [
                        "block"
                    ]
                },
                "33": {
                    "comment": "#INLINE: identify each block of data",
                    "char_position_in_line": 122,
                    "type": [
                        "normal"
                    ]
                },
                "36": {
                    "comment": "# print(commit) #COMMENTED-OUT",
                    "char_position_in_line": 20,
                    "type": [
                        "commented-out"
                    ]
                },
                "39": {
                    "comment": "# Example usage",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "50": {
                    "comment": "# # Paths",
                    "char_position_in_line": 0,
                    "type": [
                        "commented-out"
                    ]
                },
                "64": {
                    "comment": "# Parse output as JSON",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "70": {
                    "comment": "# Filter comments by time",
                    "char_position_in_line": 8,
                    "type": [
                        "normal"
                    ]
                },
                "78": {
                    "comment": "# Save filtered comments on your system",
                    "char_position_in_line": 0,
                    "type": [
                        "normal"
                    ]
                },
                "83": {
                    "comment": "# analyse_diff_comments(data)",
                    "char_position_in_line": 0,
                    "type": [
                        "commented-out"
                    ]
                }
            }
        }
    ]
}