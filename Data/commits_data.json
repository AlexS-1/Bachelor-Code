{
    "admin_diagnostics.js": [
        {
            "commit": "569add453d5039e4a2930be9ce0759828e056c88",
            "timestamp": "2024-02-02T21:44:19+01:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "80": "    supportString += `* Running within a container: ${dj.running_within_container} (Base: ${dj.container_base_image})\\n`;",
                    "182": "    if (!dj.running_within_container) {"
                },
                "deleted": {
                    "80": "    supportString += `* Running within Docker: ${dj.running_within_docker} (Base: ${dj.docker_base_image})\\n`;",
                    "182": "    if (!dj.running_within_docker) {"
                }
            }
        },
        {
            "commit": "f05398a6b36891e6e979a39937f8f8eaa6360d52",
            "timestamp": "2024-05-25T15:39:36+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "24": "function isValidIp(ip) {",
                    "25": "    const ipv4Regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;",
                    "26": "    const ipv6Regex = /^(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|((?:[a-fA-F0-9]{1,4}:){1,7}:|:(:[a-fA-F0-9]{1,4}){1,7}|[a-fA-F0-9]{1,4}:((:[a-fA-F0-9]{1,4}){1,6}))$/;",
                    "27": "    return ipv4Regex.test(ip) || ipv6Regex.test(ip);",
                    "28": "}"
                },
                "deleted": {
                    "24": "const isValidIp = value => (/^(?:(?:^|\\.)(?:2(?:5[0-5]|[0-4]\\d)|1?\\d?\\d)){4}$/.test(value) ? true : false);"
                }
            }
        },
        {
            "commit": "54bfcb8bc3aa1d15cf20821dc5f3747892011272",
            "timestamp": "2024-07-12T22:59:48+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "120": "    document.getElementById(\"support-string\").textContent = supportString;",
                    "129": "    const supportStr = document.getElementById(\"support-string\").textContent;",
                    "204": "    document.getElementById(\"time-browser-string\").textContent = browserUTC;",
                    "220": "    document.getElementById(\"domain-browser-string\").textContent = browserURL;",
                    "232": "    const diag_json = JSON.parse(document.getElementById(\"diagnostics_json\").textContent);"
                },
                "deleted": {
                    "120": "    document.getElementById(\"support-string\").innerText = supportString;",
                    "129": "    const supportStr = document.getElementById(\"support-string\").innerText;",
                    "204": "    document.getElementById(\"time-browser-string\").innerText = browserUTC;",
                    "220": "    document.getElementById(\"domain-browser-string\").innerText = browserURL;",
                    "232": "    const diag_json = JSON.parse(document.getElementById(\"diagnostics_json\").innerText);"
                }
            }
        }
    ],
    "datatables.js": [
        {
            "commit": "d6b97090fab5eba429a79c35735a0760b2fa9ee2",
            "timestamp": "2024-02-25T23:26:46+01:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "7": " *   https://datatables.net/download/#bs5/dt-2.0.0",
                    "10": " *   DataTables 2.0.0",
                    "13": "/*! DataTables 2.0.0",
                    "14": " * \u00a9 SpryMedia Ltd - datatables.net/license",
                    "20": " * @version     2.0.0",
                    "26": " *   MIT license - https://datatables.net/license",
                    "32": " * For details please refer to: https://www.datatables.net",
                    "66": "\t\t\tmodule.exports = factory( jq, window, window.document );",
                    "73": "}(function( $, window, document ) {",
                    "94": "\t\tvar _that = this;",
                    "95": "\t\tvar emptyInit = options === undefined;",
                    "96": "\t\tvar len = this.length;",
                    "97": "",
                    "98": "\t\tif ( emptyInit ) {",
                    "99": "\t\t\toptions = {};",
                    "100": "\t\t}",
                    "101": "",
                    "102": "\t\t// Method to get DT API instance from jQuery object",
                    "103": "\t\tthis.api = function ()",
                    "105": "\t\t\treturn new _Api( this );",
                    "107": "",
                    "108": "\t\tthis.each(function() {",
                    "109": "\t\t\t// For each initialisation we want to give it a clean initialisation",
                    "110": "\t\t\t// object that can be bashed around",
                    "111": "\t\t\tvar o = {};",
                    "112": "\t\t\tvar oInit = len > 1 ? // optimisation for single table case",
                    "113": "\t\t\t\t_fnExtend( o, options, true ) :",
                    "114": "\t\t\t\toptions;",
                    "115": "",
                    "116": "",
                    "117": "\t\t\tvar i=0, iLen;",
                    "118": "\t\t\tvar sId = this.getAttribute( 'id' );",
                    "119": "\t\t\tvar bInitHandedOff = false;",
                    "120": "\t\t\tvar defaults = DataTable.defaults;",
                    "121": "\t\t\tvar $this = $(this);",
                    "122": "",
                    "123": "",
                    "124": "\t\t\t/* Sanity check */",
                    "125": "\t\t\tif ( this.nodeName.toLowerCase() != 'table' )",
                    "126": "\t\t\t{",
                    "127": "\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );",
                    "128": "\t\t\t\treturn;",
                    "130": "",
                    "131": "\t\t\t$(this).trigger( 'options.dt', oInit );",
                    "132": "",
                    "133": "\t\t\t/* Backwards compatibility for the defaults */",
                    "134": "\t\t\t_fnCompatOpts( defaults );",
                    "135": "\t\t\t_fnCompatCols( defaults.column );",
                    "136": "",
                    "137": "\t\t\t/* Convert the camel-case defaults to Hungarian */",
                    "138": "\t\t\t_fnCamelToHungarian( defaults, defaults, true );",
                    "139": "\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );",
                    "140": "",
                    "141": "\t\t\t/* Setting up the initialisation object */",
                    "142": "\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );",
                    "143": "",
                    "144": "",
                    "145": "",
                    "146": "\t\t\t/* Check to see if we are re-initialising a table */",
                    "147": "\t\t\tvar allSettings = DataTable.settings;",
                    "148": "\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )",
                    "149": "\t\t\t{",
                    "150": "\t\t\t\tvar s = allSettings[i];",
                    "151": "",
                    "152": "\t\t\t\t/* Base check on table node */",
                    "153": "\t\t\t\tif (",
                    "154": "\t\t\t\t\ts.nTable == this ||",
                    "155": "\t\t\t\t\t(s.nTHead && s.nTHead.parentNode == this) ||",
                    "156": "\t\t\t\t\t(s.nTFoot && s.nTFoot.parentNode == this)",
                    "157": "\t\t\t\t) {",
                    "158": "\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;",
                    "159": "\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;",
                    "160": "",
                    "161": "\t\t\t\t\tif ( emptyInit || bRetrieve )",
                    "162": "\t\t\t\t\t{",
                    "163": "\t\t\t\t\t\treturn s.oInstance;",
                    "164": "\t\t\t\t\t}",
                    "165": "\t\t\t\t\telse if ( bDestroy )",
                    "166": "\t\t\t\t\t{",
                    "167": "\t\t\t\t\t\tnew DataTable.Api(s).destroy();",
                    "168": "\t\t\t\t\t\tbreak;",
                    "169": "\t\t\t\t\t}",
                    "170": "\t\t\t\t\telse",
                    "171": "\t\t\t\t\t{",
                    "172": "\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );",
                    "173": "\t\t\t\t\t\treturn;",
                    "174": "\t\t\t\t\t}",
                    "175": "\t\t\t\t}",
                    "176": "",
                    "177": "\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously",
                    "178": "\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old",
                    "179": "\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been",
                    "180": "\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually",
                    "181": "\t\t\t\t */",
                    "182": "\t\t\t\tif ( s.sTableId == this.id )",
                    "183": "\t\t\t\t{",
                    "184": "\t\t\t\t\tallSettings.splice( i, 1 );",
                    "185": "\t\t\t\t\tbreak;",
                    "186": "\t\t\t\t}",
                    "188": "",
                    "189": "\t\t\t/* Ensure the table has an ID - required for accessibility */",
                    "190": "\t\t\tif ( sId === null || sId === \"\" )",
                    "191": "\t\t\t{",
                    "192": "\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);",
                    "193": "\t\t\t\tthis.id = sId;",
                    "195": "",
                    "196": "\t\t\t/* Create the settings object for this table and set some of the default parameters */",
                    "197": "\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {",
                    "198": "\t\t\t\t\"sDestroyWidth\": $this[0].style.width,",
                    "199": "\t\t\t\t\"sInstance\":     sId,",
                    "200": "\t\t\t\t\"sTableId\":      sId,",
                    "201": "\t\t\t\tcolgroup: $('<colgroup>').prependTo(this),",
                    "202": "\t\t\t\tfastData: function (row, column, type) {",
                    "203": "\t\t\t\t\treturn _fnGetCellData(oSettings, row, column, type);",
                    "204": "\t\t\t\t}",
                    "205": "\t\t\t} );",
                    "206": "\t\t\toSettings.nTable = this;",
                    "207": "\t\t\toSettings.oInit  = oInit;",
                    "208": "",
                    "209": "\t\t\tallSettings.push( oSettings );",
                    "210": "",
                    "211": "\t\t\t// Make a single API instance available for internal handling",
                    "212": "\t\t\toSettings.api = new _Api( oSettings );",
                    "213": "",
                    "214": "\t\t\t// Need to add the instance after the instance after the settings object has been added",
                    "215": "\t\t\t// to the settings array, so we can self reference the table instance if more than one",
                    "216": "\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();",
                    "217": "",
                    "218": "\t\t\t// Backwards compatibility, before we apply all the defaults",
                    "219": "\t\t\t_fnCompatOpts( oInit );",
                    "220": "",
                    "221": "\t\t\t// If the length menu is given, but the init display length is not, use the length menu",
                    "222": "\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )",
                    "223": "\t\t\t{",
                    "224": "\t\t\t\toInit.iDisplayLength = Array.isArray(oInit.aLengthMenu[0])",
                    "225": "\t\t\t\t\t? oInit.aLengthMenu[0][0]",
                    "226": "\t\t\t\t\t: $.isPlainObject( oInit.aLengthMenu[0] )",
                    "227": "\t\t\t\t\t\t? oInit.aLengthMenu[0].value",
                    "228": "\t\t\t\t\t\t: oInit.aLengthMenu[0];",
                    "231": "\t\t\t// Apply the defaults and init options to make a single init object will all",
                    "232": "\t\t\t// options defined from defaults and instance options.",
                    "233": "\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );",
                    "236": "\t\t\t// Map the initialisation options onto the settings object",
                    "237": "\t\t\t_fnMap( oSettings.oFeatures, oInit, [",
                    "238": "\t\t\t\t\"bPaginate\",",
                    "239": "\t\t\t\t\"bLengthChange\",",
                    "240": "\t\t\t\t\"bFilter\",",
                    "241": "\t\t\t\t\"bSort\",",
                    "242": "\t\t\t\t\"bSortMulti\",",
                    "243": "\t\t\t\t\"bInfo\",",
                    "244": "\t\t\t\t\"bProcessing\",",
                    "245": "\t\t\t\t\"bAutoWidth\",",
                    "246": "\t\t\t\t\"bSortClasses\",",
                    "247": "\t\t\t\t\"bServerSide\",",
                    "248": "\t\t\t\t\"bDeferRender\"",
                    "249": "\t\t\t] );",
                    "250": "\t\t\t_fnMap( oSettings, oInit, [",
                    "251": "\t\t\t\t\"ajax\",",
                    "252": "\t\t\t\t\"fnFormatNumber\",",
                    "253": "\t\t\t\t\"sServerMethod\",",
                    "254": "\t\t\t\t\"aaSorting\",",
                    "255": "\t\t\t\t\"aaSortingFixed\",",
                    "256": "\t\t\t\t\"aLengthMenu\",",
                    "257": "\t\t\t\t\"sPaginationType\",",
                    "258": "\t\t\t\t\"iStateDuration\",",
                    "259": "\t\t\t\t\"bSortCellsTop\",",
                    "260": "\t\t\t\t\"iTabIndex\",",
                    "261": "\t\t\t\t\"sDom\",",
                    "262": "\t\t\t\t\"fnStateLoadCallback\",",
                    "263": "\t\t\t\t\"fnStateSaveCallback\",",
                    "264": "\t\t\t\t\"renderer\",",
                    "265": "\t\t\t\t\"searchDelay\",",
                    "266": "\t\t\t\t\"rowId\",",
                    "267": "\t\t\t\t\"caption\",",
                    "268": "\t\t\t\t\"layout\",",
                    "269": "\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat",
                    "270": "\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],",
                    "271": "\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],",
                    "272": "\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ]",
                    "273": "\t\t\t] );",
                    "274": "\t\t\t_fnMap( oSettings.oScroll, oInit, [",
                    "275": "\t\t\t\t[ \"sScrollX\", \"sX\" ],",
                    "276": "\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],",
                    "277": "\t\t\t\t[ \"sScrollY\", \"sY\" ],",
                    "278": "\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]",
                    "279": "\t\t\t] );",
                    "280": "\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );",
                    "282": "\t\t\t/* Callback functions which are array driven */",
                    "283": "\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback );",
                    "284": "\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams );",
                    "285": "\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams );",
                    "286": "\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded );",
                    "287": "\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback );",
                    "288": "\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow );",
                    "289": "\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback );",
                    "290": "\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback );",
                    "291": "\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete );",
                    "292": "\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback );",
                    "294": "\t\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );",
                    "296": "\t\t\t/* Browser support detection */",
                    "297": "\t\t\t_fnBrowserDetect( oSettings );",
                    "299": "\t\t\tvar oClasses = oSettings.oClasses;",
                    "301": "\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );",
                    "302": "\t\t\t$this.addClass( oClasses.table );",
                    "304": "\t\t\tif (! oSettings.oFeatures.bPaginate) {",
                    "305": "\t\t\t\toInit.iDisplayStart = 0;",
                    "306": "\t\t\t}",
                    "336": "\t\t\t\t\t\t// Error occurred loading language file",
                    "337": "\t\t\t\t\t\t_fnLog( oSettings, 0, 'i18n file loading error', 21 );",
                    "338": "",
                    "339": "\t\t\t\t\t\t// continue on as best we can",
                    "353": "\t\t\tvar columnsInit = [];",
                    "354": "\t\t\tvar thead = this.getElementsByTagName('thead');",
                    "355": "\t\t\tvar initHeaderLayout = _fnDetectHeader( oSettings, thead[0] );",
                    "357": "\t\t\t// If we don't have a columns array, then generate one with nulls",
                    "358": "\t\t\tif ( oInit.aoColumns ) {",
                    "359": "\t\t\t\tcolumnsInit = oInit.aoColumns;",
                    "361": "\t\t\telse if ( initHeaderLayout.length ) {",
                    "362": "\t\t\t\tfor ( i=0, iLen=initHeaderLayout[0].length ; i<iLen ; i++ ) {",
                    "363": "\t\t\t\t\tcolumnsInit.push( null );",
                    "364": "\t\t\t\t}",
                    "367": "\t\t\t// Add the columns",
                    "368": "\t\t\tfor ( i=0, iLen=columnsInit.length ; i<iLen ; i++ ) {",
                    "369": "\t\t\t\t_fnAddColumn( oSettings );",
                    "372": "\t\t\t// Apply the column definitions",
                    "373": "\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, columnsInit, initHeaderLayout, function (iCol, oDef) {",
                    "380": "\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);",
                    "381": "",
                    "382": "\t\t\tif ( rowOne.length ) {",
                    "383": "\t\t\t\tvar a = function ( cell, name ) {",
                    "384": "\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;",
                    "385": "\t\t\t\t};",
                    "386": "",
                    "387": "\t\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {",
                    "388": "\t\t\t\t\tvar col = oSettings.aoColumns[i];",
                    "389": "",
                    "390": "\t\t\t\t\tif (! col) {",
                    "391": "\t\t\t\t\t\t_fnLog( oSettings, 0, 'Incorrect column count', 18 );",
                    "392": "\t\t\t\t\t}",
                    "393": "",
                    "394": "\t\t\t\t\tif ( col.mData === i ) {",
                    "395": "\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );",
                    "396": "\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );",
                    "397": "",
                    "398": "\t\t\t\t\t\tif ( sort !== null || filter !== null ) {",
                    "399": "\t\t\t\t\t\t\tcol.mData = {",
                    "400": "\t\t\t\t\t\t\t\t_:      i+'.display',",
                    "401": "\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,",
                    "402": "\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,",
                    "403": "\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined",
                    "404": "\t\t\t\t\t\t\t};",
                    "405": "\t\t\t\t\t\t\tcol._isArrayHost = true;",
                    "406": "",
                    "407": "\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );",
                    "408": "\t\t\t\t\t\t}",
                    "409": "\t\t\t\t\t}",
                    "410": "\t\t\t\t} );",
                    "411": "\t\t\t}",
                    "412": "",
                    "413": "\t\t\tvar features = oSettings.oFeatures;",
                    "414": "\t\t\tvar loadedInit = function () {",
                    "415": "\t\t\t\t/*",
                    "416": "\t\t\t\t * Sorting",
                    "417": "\t\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler",
                    "418": "\t\t\t\t */",
                    "419": "",
                    "420": "\t\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting",
                    "421": "\t\t\t\t// in case that has been altered, so the default sort reflects that option",
                    "422": "\t\t\t\tif ( oInit.aaSorting === undefined ) {",
                    "423": "\t\t\t\t\tvar sorting = oSettings.aaSorting;",
                    "424": "\t\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {",
                    "425": "\t\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];",
                    "426": "\t\t\t\t\t}",
                    "427": "\t\t\t\t}",
                    "428": "",
                    "429": "\t\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into",
                    "430": "\t\t\t\t * account, and also will apply sorting disabled classes if disabled",
                    "431": "\t\t\t\t */",
                    "432": "\t\t\t\t_fnSortingClasses( oSettings );",
                    "433": "",
                    "434": "\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {",
                    "435": "\t\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {",
                    "436": "\t\t\t\t\t\t_fnSortingClasses( oSettings );",
                    "437": "\t\t\t\t\t}",
                    "438": "\t\t\t\t} );",
                    "439": "",
                    "440": "",
                    "441": "\t\t\t\t/*",
                    "442": "\t\t\t\t * Final init",
                    "443": "\t\t\t\t * Cache the header, body and footer as required, creating them if needed",
                    "444": "\t\t\t\t */",
                    "445": "\t\t\t\tvar caption = $this.children('caption');",
                    "446": "",
                    "447": "\t\t\t\tif ( oSettings.caption ) {",
                    "448": "\t\t\t\t\tif ( caption.length === 0 ) {",
                    "449": "\t\t\t\t\t\tcaption = $('<caption/>').appendTo( $this );",
                    "450": "\t\t\t\t\t}",
                    "451": "",
                    "452": "\t\t\t\t\tcaption.html( oSettings.caption );",
                    "453": "\t\t\t\t}",
                    "454": "",
                    "455": "\t\t\t\t// Store the caption side, so we can remove the element from the document",
                    "456": "\t\t\t\t// when creating the element",
                    "457": "\t\t\t\tif (caption.length) {",
                    "458": "\t\t\t\t\tcaption[0]._captionSide = caption.css('caption-side');",
                    "459": "\t\t\t\t\toSettings.captionNode = caption[0];",
                    "460": "\t\t\t\t}",
                    "461": "",
                    "462": "\t\t\t\tif ( thead.length === 0 ) {",
                    "463": "\t\t\t\t\tthead = $('<thead/>').appendTo($this);",
                    "464": "\t\t\t\t}",
                    "465": "\t\t\t\toSettings.nTHead = thead[0];",
                    "466": "\t\t\t\t$('tr', thead).addClass(oClasses.thead.row);",
                    "467": "",
                    "468": "\t\t\t\tvar tbody = $this.children('tbody');",
                    "469": "\t\t\t\tif ( tbody.length === 0 ) {",
                    "470": "\t\t\t\t\ttbody = $('<tbody/>').insertAfter(thead);",
                    "471": "\t\t\t\t}",
                    "472": "\t\t\t\toSettings.nTBody = tbody[0];",
                    "473": "",
                    "474": "\t\t\t\tvar tfoot = $this.children('tfoot');",
                    "475": "\t\t\t\tif ( tfoot.length === 0 ) {",
                    "476": "\t\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create",
                    "477": "\t\t\t\t\t// a tfoot element for the caption element to be appended to",
                    "478": "\t\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);",
                    "479": "\t\t\t\t}",
                    "480": "\t\t\t\toSettings.nTFoot = tfoot[0];",
                    "481": "\t\t\t\t$('tr', tfoot).addClass(oClasses.tfoot.row);",
                    "482": "",
                    "483": "\t\t\t\t// Check if there is data passing into the constructor",
                    "484": "\t\t\t\tif ( oInit.aaData ) {",
                    "485": "\t\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {",
                    "486": "\t\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );",
                    "487": "\t\t\t\t\t}",
                    "488": "\t\t\t\t}",
                    "489": "\t\t\t\telse if ( _fnDataSource( oSettings ) == 'dom' ) {",
                    "490": "\t\t\t\t\t// Grab the data from the page",
                    "491": "\t\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );",
                    "492": "\t\t\t\t}",
                    "493": "",
                    "494": "\t\t\t\t/* Copy the data index array */",
                    "495": "\t\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();",
                    "496": "",
                    "497": "\t\t\t\t/* Initialisation complete - table can be drawn */",
                    "498": "\t\t\t\toSettings.bInitialised = true;",
                    "499": "",
                    "500": "\t\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the",
                    "501": "\t\t\t\t * language processor)",
                    "502": "\t\t\t\t */",
                    "503": "\t\t\t\tif ( bInitHandedOff === false ) {",
                    "504": "\t\t\t\t\t_fnInitialise( oSettings );",
                    "505": "\t\t\t\t}",
                    "506": "\t\t\t};",
                    "507": "",
                    "508": "\t\t\t/* Must be done after everything which can be overridden by the state saving! */",
                    "509": "\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState );",
                    "510": "",
                    "511": "\t\t\tif ( oInit.bStateSave )",
                    "512": "\t\t\t{",
                    "513": "\t\t\t\tfeatures.bStateSave = true;",
                    "514": "\t\t\t\t_fnLoadState( oSettings, oInit, loadedInit );",
                    "515": "\t\t\t}",
                    "516": "\t\t\telse {",
                    "517": "\t\t\t\tloadedInit();",
                    "518": "\t\t\t}",
                    "519": "",
                    "520": "\t\t} );",
                    "521": "\t\t_that = null;",
                    "522": "\t\treturn this;",
                    "523": "\t};",
                    "524": "",
                    "525": "",
                    "526": "",
                    "527": "\t/**",
                    "528": "\t * DataTables extensions",
                    "529": "\t *",
                    "530": "\t * This namespace acts as a collection area for plug-ins that can be used to",
                    "531": "\t * extend DataTables capabilities. Indeed many of the build in methods",
                    "532": "\t * use this method to provide their own capabilities (sorting methods for",
                    "533": "\t * example).",
                    "534": "\t *",
                    "535": "\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy",
                    "536": "\t * reasons",
                    "537": "\t *",
                    "538": "\t *  @namespace",
                    "539": "\t */",
                    "540": "\tDataTable.ext = _ext = {",
                    "541": "\t\t/**",
                    "542": "\t\t * Buttons. For use with the Buttons extension for DataTables. This is",
                    "543": "\t\t * defined here so other extensions can define buttons regardless of load",
                    "544": "\t\t * order. It is _not_ used by DataTables core.",
                    "545": "\t\t *",
                    "546": "\t\t *  @type object",
                    "547": "\t\t *  @default {}",
                    "548": "\t\t */",
                    "549": "\t\tbuttons: {},",
                    "550": "",
                    "551": "",
                    "552": "\t\t/**",
                    "553": "\t\t * Element class names",
                    "554": "\t\t *",
                    "555": "\t\t *  @type object",
                    "556": "\t\t *  @default {}",
                    "557": "\t\t */",
                    "558": "\t\tclasses: {},",
                    "559": "",
                    "560": "",
                    "561": "\t\t/**",
                    "562": "\t\t * DataTables build type (expanded by the download builder)",
                    "563": "\t\t *",
                    "564": "\t\t *  @type string",
                    "565": "\t\t */",
                    "566": "\t\tbuild:\"bs5/dt-2.0.0\",",
                    "567": "",
                    "568": "",
                    "569": "\t\t/**",
                    "570": "\t\t * Error reporting.",
                    "571": "\t\t *",
                    "572": "\t\t * How should DataTables report an error. Can take the value 'alert',",
                    "573": "\t\t * 'throw', 'none' or a function.",
                    "574": "\t\t *",
                    "575": "\t\t *  @type string|function",
                    "576": "\t\t *  @default alert",
                    "577": "\t\t */",
                    "578": "\t\terrMode: \"alert\",",
                    "579": "",
                    "580": "",
                    "581": "\t\t/**",
                    "582": "\t\t * Legacy so v1 plug-ins don't throw js errors on load",
                    "583": "\t\t */",
                    "584": "\t\tfeature: [],",
                    "585": "",
                    "586": "\t\t/**",
                    "587": "\t\t * Feature plug-ins.",
                    "588": "\t\t *",
                    "589": "\t\t * This is an object of callbacks which provide the features for DataTables",
                    "590": "\t\t * to be initialised via the `layout` option.",
                    "591": "\t\t */",
                    "592": "\t\tfeatures: {},",
                    "593": "",
                    "594": "",
                    "595": "\t\t/**",
                    "596": "\t\t * Row searching.",
                    "597": "\t\t *",
                    "598": "\t\t * This method of searching is complimentary to the default type based",
                    "599": "\t\t * searching, and a lot more comprehensive as it allows you complete control",
                    "600": "\t\t * over the searching logic. Each element in this array is a function",
                    "601": "\t\t * (parameters described below) that is called for every row in the table,",
                    "602": "\t\t * and your logic decides if it should be included in the searching data set",
                    "603": "\t\t * or not.",
                    "604": "\t\t *",
                    "605": "\t\t * Searching functions have the following input parameters:",
                    "606": "\t\t *",
                    "607": "\t\t * 1. `{object}` DataTables settings object: see",
                    "608": "\t\t *    {@link DataTable.models.oSettings}",
                    "609": "\t\t * 2. `{array|object}` Data for the row to be processed (same as the",
                    "610": "\t\t *    original format that was passed in as the data source, or an array",
                    "611": "\t\t *    from a DOM data source",
                    "612": "\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which",
                    "613": "\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.",
                    "614": "\t\t *",
                    "615": "\t\t * And the following return is expected:",
                    "616": "\t\t *",
                    "617": "\t\t * * {boolean} Include the row in the searched result set (true) or not",
                    "618": "\t\t *   (false)",
                    "619": "\t\t *",
                    "620": "\t\t * Note that as with the main search ability in DataTables, technically this",
                    "621": "\t\t * is \"filtering\", since it is subtractive. However, for consistency in",
                    "622": "\t\t * naming we call it searching here.",
                    "623": "\t\t *",
                    "624": "\t\t *  @type array",
                    "625": "\t\t *  @default []",
                    "626": "\t\t *",
                    "627": "\t\t *  @example",
                    "628": "\t\t *    // The following example shows custom search being applied to the",
                    "629": "\t\t *    // fourth column (i.e. the data[3] index) based on two input values",
                    "630": "\t\t *    // from the end-user, matching the data in a certain range.",
                    "631": "\t\t *    $.fn.dataTable.ext.search.push(",
                    "632": "\t\t *      function( settings, data, dataIndex ) {",
                    "633": "\t\t *        var min = document.getElementById('min').value * 1;",
                    "634": "\t\t *        var max = document.getElementById('max').value * 1;",
                    "635": "\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;",
                    "636": "\t\t *",
                    "637": "\t\t *        if ( min == \"\" && max == \"\" ) {",
                    "638": "\t\t *          return true;",
                    "639": "\t\t *        }",
                    "640": "\t\t *        else if ( min == \"\" && version < max ) {",
                    "641": "\t\t *          return true;",
                    "642": "\t\t *        }",
                    "643": "\t\t *        else if ( min < version && \"\" == max ) {",
                    "644": "\t\t *          return true;",
                    "645": "\t\t *        }",
                    "646": "\t\t *        else if ( min < version && version < max ) {",
                    "647": "\t\t *          return true;",
                    "648": "\t\t *        }",
                    "649": "\t\t *        return false;",
                    "650": "\t\t *      }",
                    "651": "\t\t *    );",
                    "652": "\t\t */",
                    "653": "\t\tsearch: [],",
                    "654": "",
                    "655": "",
                    "656": "\t\t/**",
                    "657": "\t\t * Selector extensions",
                    "658": "\t\t *",
                    "659": "\t\t * The `selector` option can be used to extend the options available for the",
                    "660": "\t\t * selector modifier options (`selector-modifier` object data type) that",
                    "661": "\t\t * each of the three built in selector types offer (row, column and cell +",
                    "662": "\t\t * their plural counterparts). For example the Select extension uses this",
                    "663": "\t\t * mechanism to provide an option to select only rows, columns and cells",
                    "664": "\t\t * that have been marked as selected by the end user (`{selected: true}`),",
                    "665": "\t\t * which can be used in conjunction with the existing built in selector",
                    "666": "\t\t * options.",
                    "667": "\t\t *",
                    "668": "\t\t * Each property is an array to which functions can be pushed. The functions",
                    "669": "\t\t * take three attributes:",
                    "670": "\t\t *",
                    "671": "\t\t * * Settings object for the host table",
                    "672": "\t\t * * Options object (`selector-modifier` object type)",
                    "673": "\t\t * * Array of selected item indexes",
                    "674": "\t\t *",
                    "675": "\t\t * The return is an array of the resulting item indexes after the custom",
                    "676": "\t\t * selector has been applied.",
                    "677": "\t\t *",
                    "678": "\t\t *  @type object",
                    "679": "\t\t */",
                    "680": "\t\tselector: {",
                    "681": "\t\t\tcell: [],",
                    "682": "\t\t\tcolumn: [],",
                    "683": "\t\t\trow: []",
                    "684": "\t\t},",
                    "685": "",
                    "686": "",
                    "687": "\t\t/**",
                    "688": "\t\t * Legacy configuration options. Enable and disable legacy options that",
                    "689": "\t\t * are available in DataTables.",
                    "690": "\t\t *",
                    "691": "\t\t *  @type object",
                    "692": "\t\t */",
                    "693": "\t\tlegacy: {",
                    "694": "\t\t\t/**",
                    "695": "\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing",
                    "696": "\t\t\t * requests",
                    "697": "\t\t\t *",
                    "698": "\t\t\t *  @type boolean",
                    "699": "\t\t\t *  @default null",
                    "700": "\t\t\t */",
                    "701": "\t\t\tajax: null",
                    "702": "\t\t},",
                    "703": "",
                    "704": "",
                    "705": "\t\t/**",
                    "706": "\t\t * Pagination plug-in methods.",
                    "707": "\t\t *",
                    "708": "\t\t * Each entry in this object is a function and defines which buttons should",
                    "709": "\t\t * be shown by the pagination rendering method that is used for the table:",
                    "710": "\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the",
                    "711": "\t\t * buttons are displayed in the document, while the functions here tell it",
                    "712": "\t\t * what buttons to display. This is done by returning an array of button",
                    "713": "\t\t * descriptions (what each button will do).",
                    "714": "\t\t *",
                    "715": "\t\t * Pagination types (the four built in options and any additional plug-in",
                    "716": "\t\t * options defined here) can be used through the `paginationType`",
                    "717": "\t\t * initialisation parameter.",
                    "718": "\t\t *",
                    "719": "\t\t * The functions defined take two parameters:",
                    "720": "\t\t *",
                    "721": "\t\t * 1. `{int} page` The current page index",
                    "722": "\t\t * 2. `{int} pages` The number of pages in the table",
                    "723": "\t\t *",
                    "724": "\t\t * Each function is expected to return an array where each element of the",
                    "725": "\t\t * array can be one of:",
                    "726": "\t\t *",
                    "727": "\t\t * * `first` - Jump to first page when activated",
                    "728": "\t\t * * `last` - Jump to last page when activated",
                    "729": "\t\t * * `previous` - Show previous page when activated",
                    "730": "\t\t * * `next` - Show next page when activated",
                    "731": "\t\t * * `{int}` - Show page of the index given",
                    "732": "\t\t * * `{array}` - A nested array containing the above elements to add a",
                    "733": "\t\t *   containing 'DIV' element (might be useful for styling).",
                    "734": "\t\t *",
                    "735": "\t\t * Note that DataTables v1.9- used this object slightly differently whereby",
                    "736": "\t\t * an object with two functions would be defined for each plug-in. That",
                    "737": "\t\t * ability is still supported by DataTables 1.10+ to provide backwards",
                    "738": "\t\t * compatibility, but this option of use is now decremented and no longer",
                    "739": "\t\t * documented in DataTables 1.10+.",
                    "740": "\t\t *",
                    "741": "\t\t *  @type object",
                    "742": "\t\t *  @default {}",
                    "743": "\t\t *",
                    "744": "\t\t *  @example",
                    "745": "\t\t *    // Show previous, next and current page buttons only",
                    "746": "\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {",
                    "747": "\t\t *      return [ 'previous', page, 'next' ];",
                    "748": "\t\t *    };",
                    "749": "\t\t */",
                    "750": "\t\tpager: {},",
                    "751": "",
                    "752": "",
                    "753": "\t\trenderer: {",
                    "754": "\t\t\tpageButton: {},",
                    "755": "\t\t\theader: {}",
                    "756": "\t\t},",
                    "757": "",
                    "758": "",
                    "759": "\t\t/**",
                    "760": "\t\t * Ordering plug-ins - custom data source",
                    "761": "\t\t *",
                    "762": "\t\t * The extension options for ordering of data available here is complimentary",
                    "763": "\t\t * to the default type based ordering that DataTables typically uses. It",
                    "764": "\t\t * allows much greater control over the the data that is being used to",
                    "765": "\t\t * order a column, but is necessarily therefore more complex.",
                    "766": "\t\t *",
                    "767": "\t\t * This type of ordering is useful if you want to do ordering based on data",
                    "768": "\t\t * live from the DOM (for example the contents of an 'input' element) rather",
                    "769": "\t\t * than just the static string that DataTables knows of.",
                    "770": "\t\t *",
                    "771": "\t\t * The way these plug-ins work is that you create an array of the values you",
                    "772": "\t\t * wish to be ordering for the column in question and then return that",
                    "773": "\t\t * array. The data in the array much be in the index order of the rows in",
                    "774": "\t\t * the table (not the currently ordering order!). Which order data gathering",
                    "775": "\t\t * function is run here depends on the `dt-init columns.orderDataType`",
                    "776": "\t\t * parameter that is used for the column (if any).",
                    "777": "\t\t *",
                    "778": "\t\t * The functions defined take two parameters:",
                    "779": "\t\t *",
                    "780": "\t\t * 1. `{object}` DataTables settings object: see",
                    "781": "\t\t *    {@link DataTable.models.oSettings}",
                    "782": "\t\t * 2. `{int}` Target column index",
                    "783": "\t\t *",
                    "784": "\t\t * Each function is expected to return an array:",
                    "785": "\t\t *",
                    "786": "\t\t * * `{array}` Data for the column to be ordering upon",
                    "787": "\t\t *",
                    "788": "\t\t *  @type array",
                    "789": "\t\t *",
                    "790": "\t\t *  @example",
                    "791": "\t\t *    // Ordering using `input` node values",
                    "792": "\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )",
                    "793": "\t\t *    {",
                    "794": "\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {",
                    "795": "\t\t *        return $('input', td).val();",
                    "796": "\t\t *      } );",
                    "797": "\t\t *    }",
                    "798": "\t\t */",
                    "799": "\t\torder: {},",
                    "800": "",
                    "801": "",
                    "802": "\t\t/**",
                    "803": "\t\t * Type based plug-ins.",
                    "804": "\t\t *",
                    "805": "\t\t * Each column in DataTables has a type assigned to it, either by automatic",
                    "806": "\t\t * detection or by direct assignment using the `type` option for the column.",
                    "807": "\t\t * The type of a column will effect how it is ordering and search (plug-ins",
                    "808": "\t\t * can also make use of the column type if required).",
                    "809": "\t\t *",
                    "810": "\t\t * @namespace",
                    "811": "\t\t */",
                    "812": "\t\ttype: {",
                    "813": "\t\t\t/**",
                    "814": "\t\t\t * Automatic column class assignment",
                    "815": "\t\t\t */",
                    "816": "\t\t\tclassName: {},",
                    "817": "",
                    "818": "\t\t\t/**",
                    "819": "\t\t\t * Type detection functions.",
                    "820": "\t\t\t *",
                    "821": "\t\t\t * The functions defined in this object are used to automatically detect",
                    "822": "\t\t\t * a column's type, making initialisation of DataTables super easy, even",
                    "823": "\t\t\t * when complex data is in the table.",
                    "824": "\t\t\t *",
                    "825": "\t\t\t * The functions defined take two parameters:",
                    "826": "\t\t\t *",
                    "827": "\t\t     *  1. `{*}` Data from the column cell to be analysed",
                    "828": "\t\t     *  2. `{settings}` DataTables settings object. This can be used to",
                    "829": "\t\t     *     perform context specific type detection - for example detection",
                    "830": "\t\t     *     based on language settings such as using a comma for a decimal",
                    "831": "\t\t     *     place. Generally speaking the options from the settings will not",
                    "832": "\t\t     *     be required",
                    "833": "\t\t\t *",
                    "834": "\t\t\t * Each function is expected to return:",
                    "835": "\t\t\t *",
                    "836": "\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus",
                    "837": "\t\t\t *   pass it on to the other type detection functions.",
                    "838": "\t\t\t *",
                    "839": "\t\t\t *  @type array",
                    "840": "\t\t\t *",
                    "841": "\t\t\t *  @example",
                    "842": "\t\t\t *    // Currency type detection plug-in:",
                    "843": "\t\t\t *    $.fn.dataTable.ext.type.detect.push(",
                    "844": "\t\t\t *      function ( data, settings ) {",
                    "845": "\t\t\t *        // Check the numeric part",
                    "846": "\t\t\t *        if ( ! data.substring(1).match(/[0-9]/) ) {",
                    "847": "\t\t\t *          return null;",
                    "848": "\t\t\t *        }",
                    "849": "\t\t\t *",
                    "850": "\t\t\t *        // Check prefixed by currency",
                    "851": "\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {",
                    "852": "\t\t\t *          return 'currency';",
                    "853": "\t\t\t *        }",
                    "854": "\t\t\t *        return null;",
                    "855": "\t\t\t *      }",
                    "856": "\t\t\t *    );",
                    "857": "\t\t\t */",
                    "858": "\t\t\tdetect: [],",
                    "859": "",
                    "860": "\t\t\t/**",
                    "861": "\t\t\t * Automatic renderer assignment",
                    "862": "\t\t\t */",
                    "863": "\t\t\trender: {},",
                    "864": "",
                    "865": "",
                    "866": "\t\t\t/**",
                    "867": "\t\t\t * Type based search formatting.",
                    "868": "\t\t\t *",
                    "869": "\t\t\t * The type based searching functions can be used to pre-format the",
                    "870": "\t\t\t * data to be search on. For example, it can be used to strip HTML",
                    "871": "\t\t\t * tags or to de-format telephone numbers for numeric only searching.",
                    "872": "\t\t\t *",
                    "873": "\t\t\t * Note that is a search is not defined for a column of a given type,",
                    "874": "\t\t\t * no search formatting will be performed.",
                    "875": "\t\t\t *",
                    "876": "\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType",
                    "877": "\t\t\t * for a column (or have it automatically detected for you by DataTables",
                    "878": "\t\t\t * or a type detection plug-in), you will typically be using this for",
                    "879": "\t\t\t * custom sorting, but it can also be used to provide custom searching",
                    "880": "\t\t\t * by allowing you to pre-processing the data and returning the data in",
                    "881": "\t\t\t * the format that should be searched upon. This is done by adding",
                    "882": "\t\t\t * functions this object with a parameter name which matches the sType",
                    "883": "\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>",
                    "884": "\t\t\t * for searching data.",
                    "885": "\t\t\t *",
                    "886": "\t\t\t * The functions defined take a single parameter:",
                    "887": "\t\t\t *",
                    "888": "\t\t     *  1. `{*}` Data from the column cell to be prepared for searching",
                    "889": "\t\t\t *",
                    "890": "\t\t\t * Each function is expected to return:",
                    "891": "\t\t\t *",
                    "892": "\t\t\t * * `{string|null}` Formatted string that will be used for the searching.",
                    "893": "\t\t\t *",
                    "894": "\t\t\t *  @type object",
                    "895": "\t\t\t *  @default {}",
                    "896": "\t\t\t *",
                    "897": "\t\t\t *  @example",
                    "898": "\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {",
                    "899": "\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );",
                    "900": "\t\t\t *    }",
                    "901": "\t\t\t */",
                    "902": "\t\t\tsearch: {},",
                    "903": "",
                    "904": "",
                    "905": "\t\t\t/**",
                    "906": "\t\t\t * Type based ordering.",
                    "907": "\t\t\t *",
                    "908": "\t\t\t * The column type tells DataTables what ordering to apply to the table",
                    "909": "\t\t\t * when a column is sorted upon. The order for each type that is defined,",
                    "910": "\t\t\t * is defined by the functions available in this object.",
                    "911": "\t\t\t *",
                    "912": "\t\t\t * Each ordering option can be described by three properties added to",
                    "913": "\t\t\t * this object:",
                    "914": "\t\t\t *",
                    "915": "\t\t\t * * `{type}-pre` - Pre-formatting function",
                    "916": "\t\t\t * * `{type}-asc` - Ascending order function",
                    "917": "\t\t\t * * `{type}-desc` - Descending order function",
                    "918": "\t\t\t *",
                    "919": "\t\t\t * All three can be used together, only `{type}-pre` or only",
                    "920": "\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended",
                    "921": "\t\t\t * that only `{type}-pre` is used, as this provides the optimal",
                    "922": "\t\t\t * implementation in terms of speed, although the others are provided",
                    "923": "\t\t\t * for compatibility with existing Javascript sort functions.",
                    "924": "\t\t\t *",
                    "925": "\t\t\t * `{type}-pre`: Functions defined take a single parameter:",
                    "926": "\t\t\t *",
                    "927": "\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering",
                    "928": "\t\t\t *",
                    "929": "\t\t\t * And return:",
                    "930": "\t\t\t *",
                    "931": "\t\t\t * * `{*}` Data to be sorted upon",
                    "932": "\t\t\t *",
                    "933": "\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort",
                    "934": "\t\t\t * functions, taking two parameters:",
                    "935": "\t\t\t *",
                    "936": "\t\t     *  1. `{*}` Data to compare to the second parameter",
                    "937": "\t\t     *  2. `{*}` Data to compare to the first parameter",
                    "938": "\t\t\t *",
                    "939": "\t\t\t * And returning:",
                    "940": "\t\t\t *",
                    "941": "\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower",
                    "942": "\t\t\t *   than the second parameter, ===0 if the two parameters are equal and",
                    "943": "\t\t\t *   >0 if the first parameter should be sorted height than the second",
                    "944": "\t\t\t *   parameter.",
                    "945": "\t\t\t *",
                    "946": "\t\t\t *  @type object",
                    "947": "\t\t\t *  @default {}",
                    "948": "\t\t\t *",
                    "949": "\t\t\t *  @example",
                    "950": "\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter",
                    "951": "\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {",
                    "952": "\t\t\t *      \"string-pre\": function(x) {",
                    "953": "\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );",
                    "954": "\t\t\t *        return parseFloat( a );",
                    "955": "\t\t\t *      }",
                    "956": "\t\t\t *    } );",
                    "957": "\t\t\t *",
                    "958": "\t\t\t *  @example",
                    "959": "\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method",
                    "960": "\t\t\t *    $.extend( $.fn.dataTable.ext.order, {",
                    "961": "\t\t\t *      \"string-case-asc\": function(x,y) {",
                    "962": "\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
                    "963": "\t\t\t *      },",
                    "964": "\t\t\t *      \"string-case-desc\": function(x,y) {",
                    "965": "\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));",
                    "966": "\t\t\t *      }",
                    "967": "\t\t\t *    } );",
                    "968": "\t\t\t */",
                    "969": "\t\t\torder: {}",
                    "970": "\t\t},",
                    "971": "",
                    "972": "\t\t/**",
                    "973": "\t\t * Unique DataTables instance counter",
                    "974": "\t\t *",
                    "975": "\t\t * @type int",
                    "976": "\t\t * @private",
                    "977": "\t\t */",
                    "978": "\t\t_unique: 0,",
                    "979": "",
                    "980": "",
                    "981": "\t\t//",
                    "982": "\t\t// Depreciated",
                    "983": "\t\t// The following properties are retained for backwards compatibility only.",
                    "984": "\t\t// The should not be used in new projects and will be removed in a future",
                    "985": "\t\t// version",
                    "986": "\t\t//",
                    "987": "",
                    "988": "\t\t/**",
                    "989": "\t\t * Version check function.",
                    "990": "\t\t *  @type function",
                    "991": "\t\t *  @depreciated Since 1.10",
                    "992": "\t\t */",
                    "993": "\t\tfnVersionCheck: DataTable.fnVersionCheck,",
                    "994": "",
                    "995": "",
                    "996": "\t\t/**",
                    "997": "\t\t * Index for what 'this' index API functions should use",
                    "998": "\t\t *  @type int",
                    "999": "\t\t *  @deprecated Since v1.10",
                    "1000": "\t\t */",
                    "1001": "\t\tiApiIndex: 0,",
                    "1002": "",
                    "1003": "",
                    "1004": "\t\t/**",
                    "1005": "\t\t * Software version",
                    "1006": "\t\t *  @type string",
                    "1007": "\t\t *  @deprecated Since v1.10",
                    "1008": "\t\t */",
                    "1009": "\t\tsVersion: DataTable.version",
                    "1013": "\t//",
                    "1014": "\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts",
                    "1015": "\t//",
                    "1016": "\t$.extend( _ext, {",
                    "1017": "\t\tafnFiltering: _ext.search,",
                    "1018": "\t\taTypes:       _ext.type.detect,",
                    "1019": "\t\tofnSearch:    _ext.type.search,",
                    "1020": "\t\toSort:        _ext.type.order,",
                    "1021": "\t\tafnSortData:  _ext.order,",
                    "1022": "\t\taoFeatures:   _ext.feature,",
                    "1023": "\t\toStdClasses:  _ext.classes,",
                    "1024": "\t\toPagination:  _ext.pager",
                    "1025": "\t} );",
                    "1026": "",
                    "1027": "",
                    "1028": "\t$.extend( DataTable.ext.classes, {",
                    "1029": "\t\tcontainer: 'dt-container',",
                    "1030": "\t\tempty: {",
                    "1031": "\t\t\trow: 'dt-empty'",
                    "1032": "\t\t},",
                    "1033": "\t\tinfo: {",
                    "1034": "\t\t\tcontainer: 'dt-info'",
                    "1035": "\t\t},",
                    "1036": "\t\tlength: {",
                    "1037": "\t\t\tcontainer: 'dt-length',",
                    "1038": "\t\t\tselect: 'dt-input'",
                    "1039": "\t\t},",
                    "1040": "\t\torder: {",
                    "1041": "\t\t\tcanAsc: 'dt-orderable-asc',",
                    "1042": "\t\t\tcanDesc: 'dt-orderable-desc',",
                    "1043": "\t\t\tisAsc: 'dt-ordering-asc',",
                    "1044": "\t\t\tisDesc: 'dt-ordering-desc',",
                    "1045": "\t\t\tnone: 'dt-orderable-none',",
                    "1046": "\t\t\tposition: 'sorting_'",
                    "1047": "\t\t},",
                    "1048": "\t\tprocessing: {",
                    "1049": "\t\t\tcontainer: 'dt-processing'",
                    "1050": "\t\t},",
                    "1051": "\t\tscrolling: {",
                    "1052": "\t\t\tbody: 'dt-scroll-body',",
                    "1053": "\t\t\tcontainer: 'dt-scroll',",
                    "1054": "\t\t\tfooter: {",
                    "1055": "\t\t\t\tself: 'dt-scroll-foot',",
                    "1056": "\t\t\t\tinner: 'dt-scroll-footInner'",
                    "1057": "\t\t\t},",
                    "1058": "\t\t\theader: {",
                    "1059": "\t\t\t\tself: 'dt-scroll-head',",
                    "1060": "\t\t\t\tinner: 'dt-scroll-headInner'",
                    "1061": "\t\t\t}",
                    "1062": "\t\t},",
                    "1063": "\t\tsearch: {",
                    "1064": "\t\t\tcontainer: 'dt-search',",
                    "1065": "\t\t\tinput: 'dt-input'",
                    "1066": "\t\t},",
                    "1067": "\t\ttable: 'dataTable',",
                    "1068": "\t\ttbody: {",
                    "1069": "\t\t\tcell: '',",
                    "1070": "\t\t\trow: ''",
                    "1071": "\t\t},",
                    "1072": "\t\tthead: {",
                    "1073": "\t\t\tcell: '',",
                    "1074": "\t\t\trow: ''",
                    "1075": "\t\t},",
                    "1076": "\t\ttfoot: {",
                    "1077": "\t\t\tcell: '',",
                    "1078": "\t\t\trow: ''",
                    "1079": "\t\t},",
                    "1080": "\t\tpaging: {",
                    "1081": "\t\t\tactive: 'current',",
                    "1082": "\t\t\tbutton: 'dt-paging-button',",
                    "1083": "\t\t\tcontainer: 'dt-paging',",
                    "1084": "\t\t\tdisabled: 'disabled'",
                    "1085": "\t\t}",
                    "1086": "\t} );",
                    "1087": "",
                    "1088": "",
                    "1115": "\tvar _re_date = /^\\d{2,4}[./-]\\d{1,2}[./-]\\d{1,2}([T ]{1}\\d{1,2}[:.]\\d{2}([.:]\\d{2})?)?$/;",
                    "1120": "\t// https://en.wikipedia.org/wiki/Foreign_exchange_market",
                    "1190": "\t// Is a string a number surrounded by HTML?",
                    "1196": "\t\t// input and select strings mean that this isn't just a number",
                    "1197": "\t\tif (typeof d === 'string' && d.match(/<(input|select)/i)) {",
                    "1198": "\t\t\treturn null;",
                    "1199": "\t\t}",
                    "1200": "",
                    "1253": "\t\t\t\tif ( a[ order[i] ] ) {",
                    "1254": "\t\t\t\t\tout.push( a[ order[i] ][ prop ] );",
                    "1255": "\t\t\t\t}",
                    "1298": "\t// Replaceable function in api.util",
                    "1305": "\t// Replaceable function in api.util",
                    "1306": "\tvar _escapeHtml = function ( d ) {",
                    "1307": "\t\tif (Array.isArray(d)) {",
                    "1308": "\t\t\td = d.join(',');",
                    "1309": "\t\t}",
                    "1310": "",
                    "1311": "\t\treturn typeof d === 'string' ?",
                    "1312": "\t\t\td",
                    "1313": "\t\t\t\t.replace(/&/g, '&amp;')",
                    "1314": "\t\t\t\t.replace(/</g, '&lt;')",
                    "1315": "\t\t\t\t.replace(/>/g, '&gt;')",
                    "1316": "\t\t\t\t.replace(/\"/g, '&quot;') :",
                    "1317": "\t\t\td;",
                    "1318": "\t};",
                    "1319": "",
                    "1320": "\t// Remove diacritics from a string by decomposing it and then removing",
                    "1321": "\t// non-ascii characters",
                    "1322": "\tvar _normalize = function (str, both) {",
                    "1323": "\t\tif (typeof str !== 'string') {",
                    "1324": "\t\t\treturn str;",
                    "1325": "\t\t}",
                    "1326": "",
                    "1327": "\t\t// It is faster to just run `normalize` than it is to check if",
                    "1328": "\t\t// we need to with a regex!",
                    "1329": "\t\tvar res = str.normalize(\"NFD\");",
                    "1330": "",
                    "1331": "\t\t// Equally, here we check if a regex is needed or not",
                    "1332": "\t\treturn res.length !== str.length",
                    "1333": "\t\t\t? (both === true ? str + ' ' : '' ) + res.replace(/[\\u0300-\\u036f]/g, \"\")",
                    "1334": "\t\t\t: res;",
                    "1335": "\t}",
                    "1375": "\t\tif (Array.from && Set) {",
                    "1376": "\t\t\treturn Array.from(new Set(src));",
                    "1377": "\t\t}",
                    "1378": "",
                    "1385": "\t\t// consider. See jsperf.app/compare-array-unique-versions/4 for more",
                    "1420": "",
                    "1424": "\t// Similar to jQuery's addClass, but use classList.add",
                    "1425": "\tfunction _addClass(el, name) {",
                    "1426": "\t\tif (name) {",
                    "1427": "\t\t\tname.split(' ').forEach(function (n) {",
                    "1428": "\t\t\t\tif (n) {",
                    "1429": "\t\t\t\t\t// `add` does deduplication, so no need to check `contains`",
                    "1430": "\t\t\t\t\tel.classList.add(n);",
                    "1431": "\t\t\t\t}",
                    "1432": "\t\t\t});",
                    "1447": "\t\t/**",
                    "1448": "\t\t * Return a string with diacritic characters decomposed",
                    "1449": "\t\t * @param {*} mixed Function or string to normalize",
                    "1450": "\t\t * @param {*} both Return original string and the normalized string",
                    "1451": "\t\t * @returns String or undefined",
                    "1452": "\t\t */",
                    "1453": "\t\tdiacritics: function (mixed, both) {",
                    "1454": "\t\t\tvar type = typeof mixed;",
                    "1455": "",
                    "1456": "\t\t\tif (type !== 'function') {",
                    "1457": "\t\t\t\treturn _normalize(mixed, both);",
                    "1458": "\t\t\t}",
                    "1459": "\t\t\t_normalize = mixed;",
                    "1460": "\t\t},",
                    "1461": "",
                    "1462": "\t\t/**",
                    "1463": "\t\t * Debounce a function",
                    "1464": "\t\t *",
                    "1465": "\t\t * @param {function} fn Function to be called",
                    "1466": "\t\t * @param {integer} freq Call frequency in mS",
                    "1467": "\t\t * @return {function} Wrapped function",
                    "1468": "\t\t */",
                    "1469": "\t\tdebounce: function ( fn, timeout ) {",
                    "1470": "\t\t\tvar timer;",
                    "1471": "",
                    "1472": "\t\t\treturn function () {",
                    "1473": "\t\t\t\tvar that = this;",
                    "1474": "\t\t\t\tvar args = arguments;",
                    "1475": "",
                    "1476": "\t\t\t\tclearTimeout(timer);",
                    "1477": "",
                    "1478": "\t\t\t\ttimer = setTimeout( function () {",
                    "1479": "\t\t\t\t\tfn.apply(that, args);",
                    "1480": "\t\t\t\t}, timeout || 250 );",
                    "1481": "\t\t\t};",
                    "1482": "\t\t},",
                    "1483": "",
                    "1552": "\t\t\telse if (",
                    "1553": "\t\t\t\ttypeof source === 'string' && (source.indexOf('.') !== -1 ||",
                    "1554": "\t\t\t\tsource.indexOf('[') !== -1 || source.indexOf('(') !== -1)",
                    "1555": "\t\t\t) {",
                    "1671": "\t\t\telse if (",
                    "1672": "\t\t\t\ttypeof source === 'string' && (source.indexOf('.') !== -1 ||",
                    "1673": "\t\t\t\tsource.indexOf('[') !== -1 || source.indexOf('(') !== -1)",
                    "1674": "\t\t\t) {",
                    "1749": "\t\t\t\treturn function (data) { // row and meta also passed, but not used",
                    "1753": "\t\t},",
                    "1754": "",
                    "1755": "\t\tstripHtml: function (mixed) {",
                    "1756": "\t\t\tvar type = typeof mixed;",
                    "1757": "",
                    "1758": "\t\t\tif (type === 'function') {",
                    "1759": "\t\t\t\t_stripHtml = mixed;",
                    "1760": "\t\t\t\treturn;",
                    "1761": "\t\t\t}",
                    "1762": "\t\t\telse if (type === 'string') {",
                    "1763": "\t\t\t\treturn _stripHtml(mixed);",
                    "1764": "\t\t\t}",
                    "1765": "\t\t\treturn mixed;",
                    "1766": "\t\t},",
                    "1767": "",
                    "1768": "\t\tescapeHtml: function (mixed) {",
                    "1769": "\t\t\tvar type = typeof mixed;",
                    "1770": "",
                    "1771": "\t\t\tif (type === 'function') {",
                    "1772": "\t\t\t\t_escapeHtml = mixed;",
                    "1773": "\t\t\t\treturn;",
                    "1774": "\t\t\t}",
                    "1775": "\t\t\telse if (type === 'string' || Array.isArray(mixed)) {",
                    "1776": "\t\t\t\treturn _escapeHtml(mixed);",
                    "1777": "\t\t\t}",
                    "1778": "\t\t\treturn mixed;",
                    "1779": "\t\t},",
                    "1780": "",
                    "1781": "\t\tunique: _unique",
                    "1801": "\t\t$.each( o, function (key) {",
                    "1839": "\t\t$.each( user, function (key) {",
                    "1913": "",
                    "1914": "\t\t// Enable search delay if server-side processing is enabled",
                    "1915": "\t\tif (init.serverSide && ! init.searchDelay) {",
                    "1916": "\t\t\tinit.searchDelay = 400;",
                    "1917": "\t\t}",
                    "1961": "\t\t\t\t\tleft: -1 * window.pageXOffset, // allow for scrolling",
                    "2007": "\tfunction _fnAddColumn( oSettings )",
                    "2015": "\t\t\tidx: iCol,",
                    "2016": "\t\t\tsearchFixed: {},",
                    "2017": "\t\t\tcolEl: $('<col>')",
                    "2059": "",
                    "2091": "",
                    "2092": "\t\t// The `render` option can be given as an array to access the helper rendering methods.",
                    "2093": "\t\t// The first element is the rendering method to use, the rest are the parameters to pass",
                    "2094": "\t\tif ( oCol.mRender && Array.isArray( oCol.mRender ) ) {",
                    "2095": "\t\t\tvar copy = oCol.mRender.slice();",
                    "2096": "\t\t\tvar name = copy.shift();",
                    "2097": "",
                    "2098": "\t\t\toCol.mRender = DataTable.render[name].apply(window, copy);",
                    "2099": "\t\t}",
                    "2100": "",
                    "2101": "\t\toCol._render = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;",
                    "2114": "\t\t\treturn oCol._render && type ?",
                    "2115": "\t\t\t\toCol._render( innerData, type, rowData, meta ) :",
                    "2144": "\t\t_fnCalculateColumnWidths( settings );",
                    "2145": "\t\t_fnColumnSizes( settings );",
                    "2148": "\t\tif ( scroll.sY !== '' || scroll.sX !== '') {",
                    "2155": "\t/**",
                    "2156": "\t * Apply column sizes",
                    "2157": "\t *",
                    "2158": "\t * @param {*} settings DataTables settings object",
                    "2159": "\t */",
                    "2160": "\tfunction _fnColumnSizes ( settings )",
                    "2161": "\t{",
                    "2162": "\t\tvar cols = settings.aoColumns;",
                    "2163": "",
                    "2164": "\t\tfor (var i=0 ; i<cols.length ; i++) {",
                    "2165": "\t\t\tvar width = _fnColumnsSumWidth(settings, [i], false, false);",
                    "2166": "",
                    "2167": "\t\t\tcols[i].colEl.css('width', width);",
                    "2168": "\t\t}",
                    "2169": "\t}",
                    "2170": "",
                    "2201": "\t\tvar iPos = aiVis.indexOf(iMatch);",
                    "2213": "\tfunction _fnVisbleColumns( settings )",
                    "2215": "\t\tvar layout = settings.aoHeader;",
                    "2216": "\t\tvar columns = settings.aoColumns;",
                    "2219": "\t\tif ( layout.length ) {",
                    "2220": "\t\t\tfor ( var i=0, ien=layout[0].length ; i<ien ; i++ ) {",
                    "2221": "\t\t\t\tif ( columns[i].bVisible && $(layout[0][i].cell).css('display') !== 'none' ) {",
                    "2222": "\t\t\t\t\tvis++;",
                    "2223": "\t\t\t\t}",
                    "2225": "\t\t}",
                    "2243": "\t\toSettings.aoColumns.map( function(val, i) {",
                    "2264": "\t\tvar col, detectedType, cache;",
                    "2277": "",
                    "2278": "\t\t\t\t\t\tif (! data[k]) {",
                    "2279": "\t\t\t\t\t\t\tcontinue;",
                    "2280": "\t\t\t\t\t\t}",
                    "2281": "",
                    "2295": "\t\t\t\t\t\tif ( ! detectedType && j !== types.length-2 ) {",
                    "2320": "",
                    "2321": "\t\t\t// Set class names for header / footer for auto type classes",
                    "2322": "\t\t\tvar autoClass = _ext.type.className[col.sType];",
                    "2323": "",
                    "2324": "\t\t\tif (autoClass) {",
                    "2325": "\t\t\t\t_columnAutoClass(settings.aoHeader, i, autoClass);",
                    "2326": "\t\t\t\t_columnAutoClass(settings.aoFooter, i, autoClass);",
                    "2327": "\t\t\t}",
                    "2328": "",
                    "2329": "\t\t\tvar renderer = _ext.type.render[col.sType];",
                    "2330": "",
                    "2331": "\t\t\t// This can only happen once! There is no way to remover",
                    "2332": "\t\t\t// a renderer. After the first time the renderer has",
                    "2333": "\t\t\t// already been set so createTr will run the renderer itself.",
                    "2334": "\t\t\tif (renderer && ! col._render) {",
                    "2335": "\t\t\t\tcol._render = DataTable.util.get(renderer);",
                    "2336": "",
                    "2337": "\t\t\t\t_columnAutoRender(settings, i);",
                    "2338": "\t\t\t}",
                    "2339": "\t\t}",
                    "2340": "\t}",
                    "2341": "",
                    "2342": "\t/**",
                    "2343": "\t * Apply an auto detected renderer to data which doesn't yet have",
                    "2344": "\t * a renderer",
                    "2345": "\t */",
                    "2346": "\tfunction _columnAutoRender(settings, colIdx) {",
                    "2347": "\t\tvar data = settings.aoData;",
                    "2348": "",
                    "2349": "\t\tfor (var i=0 ; i<data.length ; i++) {",
                    "2350": "\t\t\tif (data[i].nTr) {",
                    "2351": "\t\t\t\t// We have to update the display here since there is no",
                    "2352": "\t\t\t\t// invalidation check for the data",
                    "2353": "\t\t\t\tvar display = _fnGetCellData( settings, i, colIdx, 'display' );",
                    "2354": "",
                    "2355": "\t\t\t\tdata[i].displayData[colIdx] = display;",
                    "2356": "\t\t\t\t_fnWriteCell(data[i].anCells[colIdx], display);",
                    "2357": "",
                    "2358": "\t\t\t\t// No need to update sort / filter data since it has",
                    "2359": "\t\t\t\t// been invalidated and will be re-read with the",
                    "2360": "\t\t\t\t// renderer now applied",
                    "2361": "\t\t\t}",
                    "2365": "\t/**",
                    "2366": "\t * Apply a class name to a column's header cells",
                    "2367": "\t */",
                    "2368": "\tfunction _columnAutoClass(container, colIdx, className) {",
                    "2369": "\t\tcontainer.forEach(function (row) {",
                    "2370": "\t\t\tif (row[colIdx].unique) {",
                    "2371": "\t\t\t\t_addClass(row[colIdx].cell, className);",
                    "2372": "\t\t\t}",
                    "2373": "\t\t});",
                    "2374": "\t}",
                    "2383": "\t *  @param {array} headerLayout Layout for header as it was loaded",
                    "2388": "\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, headerLayout, fn )",
                    "2393": "\t\tif ( aoCols ) {",
                    "2394": "\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ ) {",
                    "2395": "\t\t\t\tif (aoCols[i] && aoCols[i].name) {",
                    "2396": "\t\t\t\t\tcolumns[i].sName = aoCols[i].name;",
                    "2397": "\t\t\t\t}",
                    "2398": "\t\t\t}",
                    "2399": "\t\t}",
                    "2400": "",
                    "2423": "\t\t\t\t\tvar target = aTargets[j];",
                    "2424": "",
                    "2425": "\t\t\t\t\tif ( typeof target === 'number' && target >= 0 )",
                    "2428": "\t\t\t\t\t\twhile( columns.length <= target )",
                    "2434": "\t\t\t\t\t\tfn( target, def );",
                    "2436": "\t\t\t\t\telse if ( typeof target === 'number' && target < 0 )",
                    "2439": "\t\t\t\t\t\tfn( columns.length+target, def );",
                    "2441": "\t\t\t\t\telse if ( typeof target === 'string' )",
                    "2443": "\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ ) {",
                    "2444": "\t\t\t\t\t\t\tif (target.indexOf(':name') !== -1) {",
                    "2445": "\t\t\t\t\t\t\t\tif (columns[k].sName === target.replace(':name', '')) {",
                    "2446": "\t\t\t\t\t\t\t\t\tfn( k, def );",
                    "2447": "\t\t\t\t\t\t\t\t}",
                    "2448": "\t\t\t\t\t\t\t}",
                    "2449": "\t\t\t\t\t\t\telse {",
                    "2450": "\t\t\t\t\t\t\t\theaderLayout.forEach(function (row) {",
                    "2451": "\t\t\t\t\t\t\t\t\tvar cell = $(row[k].cell);",
                    "2452": "",
                    "2453": "\t\t\t\t\t\t\t\t\t// Legacy support. Note that it means that we don't support",
                    "2454": "\t\t\t\t\t\t\t\t\t// an element name selector only, since they are treated as",
                    "2455": "\t\t\t\t\t\t\t\t\t// class names for 1.x compat.",
                    "2456": "\t\t\t\t\t\t\t\t\tif (target.match(/^[a-z][\\w-]*$/i)) {",
                    "2457": "\t\t\t\t\t\t\t\t\t\ttarget = '.' + target;",
                    "2458": "\t\t\t\t\t\t\t\t\t}",
                    "2459": "",
                    "2460": "\t\t\t\t\t\t\t\t\tif (target === '_all' || cell.is( target )) {",
                    "2461": "\t\t\t\t\t\t\t\t\t\tfn( k, def );",
                    "2462": "\t\t\t\t\t\t\t\t\t}",
                    "2463": "\t\t\t\t\t\t\t\t});",
                    "2472": "\t\tif ( aoCols ) {",
                    "2473": "\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ ) {",
                    "2479": "",
                    "2480": "\t/**",
                    "2481": "\t * Get the width for a given set of columns",
                    "2482": "\t *",
                    "2483": "\t * @param {*} settings DataTables settings object",
                    "2484": "\t * @param {*} targets Columns - comma separated string or array of numbers",
                    "2485": "\t * @param {*} original Use the original width (true) or calculated (false)",
                    "2486": "\t * @param {*} incVisible Include visible columns (true) or not (false)",
                    "2487": "\t * @returns Combined CSS value",
                    "2488": "\t */",
                    "2489": "\tfunction _fnColumnsSumWidth( settings, targets, original, incVisible ) {",
                    "2490": "\t\tif ( ! Array.isArray( targets ) ) {",
                    "2491": "\t\t\ttargets = _fnColumnsFromHeader( targets );",
                    "2492": "\t\t}",
                    "2493": "",
                    "2494": "\t\tvar sum = 0;",
                    "2495": "\t\tvar unit;",
                    "2496": "\t\tvar columns = settings.aoColumns;",
                    "2497": "",
                    "2498": "\t\tfor ( var i=0, ien=targets.length ; i<ien ; i++ ) {",
                    "2499": "\t\t\tvar column = columns[ targets[i] ];",
                    "2500": "\t\t\tvar definedWidth = original ?",
                    "2501": "\t\t\t\tcolumn.sWidthOrig :",
                    "2502": "\t\t\t\tcolumn.sWidth;",
                    "2503": "",
                    "2504": "\t\t\tif ( ! incVisible && column.bVisible === false ) {",
                    "2505": "\t\t\t\tcontinue;",
                    "2506": "\t\t\t}",
                    "2507": "",
                    "2508": "\t\t\tif ( definedWidth === null || definedWidth === undefined ) {",
                    "2509": "\t\t\t\treturn null; // can't determine a defined width - browser defined",
                    "2510": "\t\t\t}",
                    "2511": "\t\t\telse if ( typeof definedWidth === 'number' ) {",
                    "2512": "\t\t\t\tunit = 'px';",
                    "2513": "\t\t\t\tsum += definedWidth;",
                    "2514": "\t\t\t}",
                    "2515": "\t\t\telse {",
                    "2516": "\t\t\t\tvar matched = definedWidth.match(/([\\d\\.]+)([^\\d]*)/);",
                    "2517": "",
                    "2518": "\t\t\t\tif ( matched ) {",
                    "2519": "\t\t\t\t\tsum += matched[1] * 1;",
                    "2520": "\t\t\t\t\tunit = matched.length === 3 ?",
                    "2521": "\t\t\t\t\t\tmatched[2] :",
                    "2522": "\t\t\t\t\t\t'px';",
                    "2523": "\t\t\t\t}",
                    "2524": "\t\t\t}",
                    "2525": "\t\t}",
                    "2526": "",
                    "2527": "\t\treturn sum + unit;",
                    "2528": "\t}",
                    "2529": "",
                    "2530": "\tfunction _fnColumnsFromHeader( cell )",
                    "2531": "\t{",
                    "2532": "\t\tvar attr = $(cell).closest('[data-dt-column]').attr('data-dt-column');",
                    "2533": "",
                    "2534": "\t\tif ( ! attr ) {",
                    "2535": "\t\t\treturn [];",
                    "2536": "\t\t}",
                    "2537": "",
                    "2538": "\t\treturn attr.split(',').map( function (val) {",
                    "2539": "\t\t\treturn val * 1;",
                    "2540": "\t\t} );",
                    "2541": "\t}",
                    "2546": "\t *  @param {object} settings dataTables settings object",
                    "2547": "\t *  @param {array} data data array to be added",
                    "2548": "\t *  @param {node} [tr] TR element to add to the table - optional. If not given,",
                    "2550": "\t *  @param {array} [tds] Array of TD|TH elements for the row - must be given",
                    "2555": "\tfunction _fnAddData ( settings, dataIn, tr, tds )",
                    "2558": "\t\tvar rowIdx = settings.aoData.length;",
                    "2559": "\t\tvar rowModel = $.extend( true, {}, DataTable.models.oRow, {",
                    "2560": "\t\t\tsrc: tr ? 'dom' : 'data',",
                    "2561": "\t\t\tidx: rowIdx",
                    "2564": "\t\trowModel._aData = dataIn;",
                    "2565": "\t\tsettings.aoData.push( rowModel );",
                    "2567": "\t\tvar columns = settings.aoColumns;",
                    "2571": "\t\t\t// Invalidate the column types as the new data needs to be revalidated",
                    "2576": "\t\tsettings.aiDisplayMaster.push( rowIdx );",
                    "2578": "\t\tvar id = settings.rowIdFn( dataIn );",
                    "2580": "\t\t\tsettings.aIds[ id ] = rowModel;",
                    "2584": "\t\tif ( tr || ! settings.oFeatures.bDeferRender )",
                    "2586": "\t\t\t_fnCreateTr( settings, rowIdx, tr, tds );",
                    "2589": "\t\treturn rowIdx;",
                    "2614": "\t\t\treturn _fnAddData( settings, row.data, el, row.cells );",
                    "2615": "\t\t} );",
                    "2647": "\t\t// Allow for a node being returned for non-display types",
                    "2648": "\t\tif (type !== 'display' && cellData && typeof cellData === 'object' && cellData.nodeName) {",
                    "2649": "\t\t\tcellData = cellData.innerHTML;",
                    "2650": "\t\t}",
                    "2651": "",
                    "2709": "\t/**",
                    "2710": "\t * Write a value to a cell",
                    "2711": "\t * @param {*} td Cell",
                    "2712": "\t * @param {*} val Value",
                    "2713": "\t */",
                    "2714": "\tfunction _fnWriteCell(td, val)",
                    "2715": "\t{",
                    "2716": "\t\tif (val && typeof val === 'object' && val.nodeName) {",
                    "2717": "\t\t\t$(td)",
                    "2718": "\t\t\t\t.empty()",
                    "2719": "\t\t\t\t.append(val);",
                    "2720": "\t\t}",
                    "2721": "\t\telse {",
                    "2722": "\t\t\ttd.innerHTML = val;",
                    "2723": "\t\t}",
                    "2724": "\t}",
                    "2725": "",
                    "2738": "\t\tvar parts = str.match(/(\\\\.|[^.])+/g) || [''];",
                    "2739": "",
                    "2740": "\t\treturn parts.map( function ( s ) {",
                    "2813": "\t\t// Remove the cached data for the row",
                    "2814": "\t\trow._aSortData = null;",
                    "2815": "\t\trow._aFilterData = null;",
                    "2816": "\t\trow.displayData = null;",
                    "2829": "\t\t\tvar display = _fnGetRowDisplay(settings, rowIdx);",
                    "2833": "\t\t\t\t\t_fnWriteCell(cells[colIdx], display[colIdx]);",
                    "2837": "\t\t\t\t\t\t_fnWriteCell(cells[i], display[i]);",
                    "2843": "\t\t// Column specific invalidation",
                    "2846": "\t\t\t// Type - the data might have changed",
                    "2848": "",
                    "2849": "\t\t\t// Max length string. Its a fairly cheep recalculation, so not worth",
                    "2850": "\t\t\t// something more complicated",
                    "2851": "\t\t\tcols[ colIdx ].maxLenString = null;",
                    "2856": "\t\t\t\tcols[i].maxLenString = null;",
                    "2887": "\t\t\tname, col, i=0, contents,",
                    "2981": "",
                    "2982": "\t/**",
                    "2983": "\t * Render and cache a row's display data for the columns, if required",
                    "2984": "\t * @returns",
                    "2985": "\t */",
                    "2986": "\tfunction _fnGetRowDisplay (settings, rowIdx) {",
                    "2987": "\t\tlet rowModal = settings.aoData[rowIdx];",
                    "2988": "\t\tlet columns = settings.aoColumns;",
                    "2989": "",
                    "2990": "\t\tif (! rowModal.displayData) {",
                    "2991": "\t\t\t// Need to render and cache",
                    "2992": "\t\t\trowModal.displayData = [];",
                    "2993": "",
                    "2994": "\t\t\tfor ( var colIdx=0, len=columns.length ; colIdx<len ; colIdx++ ) {",
                    "2995": "\t\t\t\trowModal.displayData.push(",
                    "2996": "\t\t\t\t\t_fnGetCellData( settings, rowIdx, colIdx, 'display' )",
                    "2997": "\t\t\t\t);",
                    "2998": "\t\t\t}",
                    "2999": "\t\t}",
                    "3000": "",
                    "3001": "\t\treturn rowModal.displayData;",
                    "3002": "\t}",
                    "3003": "",
                    "3021": "\t\t\ti, iLen, create,",
                    "3022": "\t\t\ttrClass = oSettings.oClasses.tbody.row;",
                    "3031": "\t\t\t_addClass(nTr, trClass);",
                    "3032": "",
                    "3059": "",
                    "3060": "\t\t\t\tvar display = _fnGetRowDisplay(oSettings, iRow);",
                    "3063": "\t\t\t\tif (",
                    "3064": "\t\t\t\t\tcreate ||",
                    "3065": "\t\t\t\t\t(",
                    "3066": "\t\t\t\t\t\t(oCol.mRender || oCol.mData !== i) &&",
                    "3067": "\t\t\t\t\t\t(!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')",
                    "3068": "\t\t\t\t\t)",
                    "3069": "\t\t\t\t) {",
                    "3070": "\t\t\t\t\t_fnWriteCell(nTd, display[i]);",
                    "3091": "\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', 'row-created', [nTr, rowData, iRow, cells] );",
                    "3092": "\t\t}",
                    "3093": "\t\telse {",
                    "3094": "\t\t\t_addClass(row.nTr, trClass);",
                    "3146": "\tfunction _fnBuildHead( settings, side )",
                    "3148": "\t\tvar classes = settings.oClasses;",
                    "3149": "\t\tvar columns = settings.aoColumns;",
                    "3150": "\t\tvar i, ien, row;",
                    "3151": "\t\tvar target = side === 'header'",
                    "3152": "\t\t\t? settings.nTHead",
                    "3153": "\t\t\t: settings.nTFoot;",
                    "3154": "\t\tvar titleProp = side === 'header' ? 'sTitle' : side;",
                    "3155": "",
                    "3156": "\t\t// Footer might be defined",
                    "3157": "\t\tif (! target) {",
                    "3158": "\t\t\treturn;",
                    "3161": "\t\t// If no cells yet and we have content for them, then create",
                    "3162": "\t\tif ( $('th, td', target).length === 0 && (side === 'header' || _pluck(settings.aoColumns, titleProp).join('')) ) {",
                    "3163": "\t\t\trow = $('<tr/>')",
                    "3164": "\t\t\t\t.appendTo( target );",
                    "3166": "\t\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {",
                    "3167": "\t\t\t\t$('<th/>')",
                    "3168": "\t\t\t\t\t.html( columns[i][titleProp] || '' )",
                    "3169": "\t\t\t\t\t.appendTo( row );",
                    "3171": "\t\t}",
                    "3173": "\t\tvar detected = _fnDetectHeader( settings, target, true );",
                    "3175": "\t\tif (side === 'header') {",
                    "3176": "\t\t\tsettings.aoHeader = detected;",
                    "3177": "\t\t}",
                    "3178": "\t\telse {",
                    "3179": "\t\t\tsettings.aoFooter = detected;",
                    "3180": "\t\t}",
                    "3182": "\t\t// ARIA role for the rows",
                    "3183": "\t\t$(target).children('tr').attr('role', 'row');",
                    "3185": "\t\t// Every cell needs to be passed through the renderer",
                    "3186": "\t\t$(target).children('tr').children('th, td')",
                    "3187": "\t\t\t.each( function () {",
                    "3188": "\t\t\t\t_fnRenderer( settings, side )(",
                    "3189": "\t\t\t\t\tsettings, $(this), classes",
                    "3190": "\t\t\t\t);",
                    "3191": "\t\t\t} );",
                    "3192": "\t}",
                    "3194": "\t/**",
                    "3195": "\t * Build a layout structure for a header or footer",
                    "3196": "\t *",
                    "3197": "\t * @param {*} settings DataTables settings",
                    "3198": "\t * @param {*} source Source layout array",
                    "3199": "\t * @param {*} incColumns What columns should be included",
                    "3200": "\t * @returns Layout array",
                    "3201": "\t */",
                    "3202": "\tfunction _fnHeaderLayout( settings, source, incColumns )",
                    "3203": "\t{",
                    "3204": "\t\tvar row, column, cell;",
                    "3205": "\t\tvar local = [];",
                    "3206": "\t\tvar structure = [];",
                    "3207": "\t\tvar columns = settings.aoColumns;",
                    "3208": "\t\tvar columnCount = columns.length;",
                    "3209": "\t\tvar rowspan, colspan;",
                    "3210": "",
                    "3211": "\t\tif ( ! source ) {",
                    "3212": "\t\t\treturn;",
                    "3215": "\t\t// Default is to work on only visible columns",
                    "3216": "\t\tif ( ! incColumns ) {",
                    "3217": "\t\t\tincColumns = _range(columnCount)",
                    "3218": "\t\t\t\t.filter(function (idx) {",
                    "3219": "\t\t\t\t\treturn columns[idx].bVisible;",
                    "3220": "\t\t\t\t});",
                    "3223": "\t\t// Make a copy of the master layout array, but with only the columns we want",
                    "3224": "\t\tfor ( row=0 ; row<source.length ; row++ ) {",
                    "3225": "\t\t\t// Remove any columns we haven't selected",
                    "3226": "\t\t\tlocal[row] = source[row].slice().filter(function (cell, i) {",
                    "3227": "\t\t\t\treturn incColumns.includes(i);",
                    "3228": "\t\t\t});",
                    "3229": "",
                    "3230": "\t\t\t// Prep the structure array - it needs an element for each row",
                    "3231": "\t\t\tstructure.push( [] );",
                    "3232": "\t\t}",
                    "3234": "\t\tfor ( row=0 ; row<local.length ; row++ ) {",
                    "3235": "\t\t\tfor ( column=0 ; column<local[row].length ; column++ ) {",
                    "3236": "\t\t\t\trowspan = 1;",
                    "3237": "\t\t\t\tcolspan = 1;",
                    "3239": "\t\t\t\t// Check to see if there is already a cell (row/colspan) covering our target",
                    "3240": "\t\t\t\t// insert point. If there is, then there is nothing to do.",
                    "3241": "\t\t\t\tif ( structure[row][column] === undefined ) {",
                    "3242": "\t\t\t\t\tcell = local[row][column].cell;",
                    "3244": "\t\t\t\t\t// Expand for rowspan",
                    "3245": "\t\t\t\t\twhile (",
                    "3246": "\t\t\t\t\t\tlocal[row+rowspan] !== undefined &&",
                    "3247": "\t\t\t\t\t\tlocal[row][column].cell == local[row+rowspan][column].cell",
                    "3248": "\t\t\t\t\t) {",
                    "3249": "\t\t\t\t\t\tstructure[row+rowspan][column] = null;",
                    "3250": "\t\t\t\t\t\trowspan++;",
                    "3252": "",
                    "3253": "\t\t\t\t\t// And for colspan",
                    "3254": "\t\t\t\t\twhile (",
                    "3255": "\t\t\t\t\t\tlocal[row][column+colspan] !== undefined &&",
                    "3256": "\t\t\t\t\t\tlocal[row][column].cell == local[row][column+colspan].cell",
                    "3257": "\t\t\t\t\t) {",
                    "3258": "\t\t\t\t\t\t// Which also needs to go over rows",
                    "3259": "\t\t\t\t\t\tfor ( var k=0 ; k<rowspan ; k++ ) {",
                    "3260": "\t\t\t\t\t\t\tstructure[row+k][column+colspan] = null;",
                    "3261": "\t\t\t\t\t\t}",
                    "3262": "",
                    "3263": "\t\t\t\t\t\tcolspan++;",
                    "3264": "\t\t\t\t\t}",
                    "3265": "",
                    "3266": "\t\t\t\t\tstructure[row][column] = {",
                    "3267": "\t\t\t\t\t\tcell: cell,",
                    "3268": "\t\t\t\t\t\tcolspan: colspan,",
                    "3269": "\t\t\t\t\t\trowspan: rowspan,",
                    "3270": "\t\t\t\t\t\ttitle: $('span.dt-column-title', cell).html()",
                    "3271": "\t\t\t\t\t};",
                    "3275": "",
                    "3276": "\t\treturn structure;",
                    "3281": "\t * Draw the header (or footer) element based on the column visibility states.",
                    "3282": "\t *",
                    "3283": "\t *  @param object oSettings dataTables settings object",
                    "3284": "\t *  @param array aoSource Layout array from _fnDetectHeader",
                    "3287": "\tfunction _fnDrawHead( settings, source )",
                    "3289": "\t\tvar layout = _fnHeaderLayout(settings, source);",
                    "3290": "\t\tvar tr, n;",
                    "3292": "\t\tfor ( var row=0 ; row<source.length ; row++ ) {",
                    "3293": "\t\t\ttr = source[row].row;",
                    "3295": "\t\t\t// All cells are going to be replaced, so empty out the row",
                    "3296": "\t\t\t// Can't use $().empty() as that kills event handlers",
                    "3297": "\t\t\tif (tr) {",
                    "3298": "\t\t\t\twhile( (n = tr.firstChild) ) {",
                    "3299": "\t\t\t\t\ttr.removeChild( n );",
                    "3303": "\t\t\tfor ( var column=0 ; column<layout[row].length ; column++ ) {",
                    "3304": "\t\t\t\tvar point = layout[row][column];",
                    "3306": "\t\t\t\tif (point) {",
                    "3307": "\t\t\t\t\t$(point.cell)",
                    "3308": "\t\t\t\t\t\t.appendTo(tr)",
                    "3309": "\t\t\t\t\t\t.attr('rowspan', point.rowspan)",
                    "3310": "\t\t\t\t\t\t.attr('colspan', point.colspan);",
                    "3330": "\t\tif ( aPreDraw.indexOf(false) !== -1 )",
                    "3342": "\t\tvar columns = oSettings.aoColumns;",
                    "3343": "\t\tvar body = $(oSettings.nTBody);",
                    "3348": "\t\tif ( !bServerSide )",
                    "3354": "\t\t\t// Show loading message for server-side processing",
                    "3355": "\t\t\tif (oSettings.iDraw === 0) {",
                    "3356": "\t\t\t\tbody.empty().append(_emptyRow(oSettings));",
                    "3357": "\t\t\t}",
                    "3358": "",
                    "3379": "\t\t\t\t// Add various classes as needed",
                    "3380": "\t\t\t\tfor (var i=0 ; i<columns.length ; i++) {",
                    "3381": "\t\t\t\t\tvar col = columns[i];",
                    "3382": "\t\t\t\t\tvar td = aoData.anCells[i];",
                    "3383": "",
                    "3384": "\t\t\t\t\t_addClass(td, _ext.type.className[col.sType]); // auto class",
                    "3385": "\t\t\t\t\t_addClass(td, col.sClass); // column class",
                    "3386": "\t\t\t\t\t_addClass(td, oSettings.oClasses.tbody.cell); // all cells",
                    "3401": "\t\t\tanRows[ 0 ] = _emptyRow(oSettings);",
                    "3414": "\t\t// Empty table needs a specific class",
                    "3415": "\t\t$(oSettings.nTableWrapper).toggleClass('dt-empty-footer', $('tr', oSettings.nTFoot).length === 0);",
                    "3416": "",
                    "3418": "\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings], true );",
                    "3434": "\tfunction _fnReDraw( settings, holdPosition, recompute )",
                    "3441": "\t\tif (recompute === undefined || recompute === true) {",
                    "3442": "\t\t\tif ( sort ) {",
                    "3443": "\t\t\t\t_fnSort( settings );",
                    "3444": "\t\t\t}",
                    "3445": "",
                    "3446": "\t\t\tif ( filter ) {",
                    "3447": "\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );",
                    "3448": "\t\t\t}",
                    "3449": "\t\t\telse {",
                    "3450": "\t\t\t\t// No filtering, so we want to just use the display master",
                    "3451": "\t\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();",
                    "3452": "\t\t\t}",
                    "3453": "\t\t}",
                    "3454": "",
                    "3455": "\t\tif ( holdPosition !== true ) {",
                    "3456": "\t\t\tsettings._iDisplayStart = 0;",
                    "3457": "\t\t}",
                    "3458": "",
                    "3459": "\t\t// Let any modules know about the draw hold position state (used by",
                    "3460": "\t\t// scrolling internally)",
                    "3461": "\t\tsettings._drawHold = holdPosition;",
                    "3462": "",
                    "3463": "\t\t_fnDraw( settings );",
                    "3464": "",
                    "3465": "\t\tsettings._drawHold = false;",
                    "3466": "\t}",
                    "3467": "",
                    "3468": "",
                    "3469": "\t/*",
                    "3470": "\t * Table is empty - create a row with an empty message in it",
                    "3471": "\t */",
                    "3472": "\tfunction _emptyRow ( settings ) {",
                    "3473": "\t\tvar oLang = settings.oLanguage;",
                    "3474": "\t\tvar zero = oLang.sZeroRecords;",
                    "3475": "\t\tvar dataSrc = _fnDataSource( settings );",
                    "3476": "",
                    "3477": "\t\tif ( settings.iDraw <= 1 && (dataSrc === 'ajax' || dataSrc === 'ssp') )",
                    "3478": "\t\t{",
                    "3479": "\t\t\tzero = oLang.sLoadingRecords;",
                    "3480": "\t\t}",
                    "3481": "\t\telse if ( oLang.sEmptyTable && settings.fnRecordsTotal() === 0 )",
                    "3482": "\t\t{",
                    "3483": "\t\t\tzero = oLang.sEmptyTable;",
                    "3484": "\t\t}",
                    "3485": "",
                    "3486": "\t\treturn $( '<tr/>' )",
                    "3487": "\t\t\t.append( $('<td />', {",
                    "3488": "\t\t\t\t'colSpan': _fnVisbleColumns( settings ),",
                    "3489": "\t\t\t\t'class':   settings.oClasses.empty.row",
                    "3490": "\t\t\t} ).html( zero ) )[0];",
                    "3491": "\t}",
                    "3492": "",
                    "3493": "",
                    "3494": "\t/**",
                    "3495": "\t * Convert a `layout` object given by a user to the object structure needed",
                    "3496": "\t * for the renderer. This is done twice, once for above and once for below",
                    "3497": "\t * the table. Ordering must also be considered.",
                    "3498": "\t *",
                    "3499": "\t * @param {*} settings DataTables settings object",
                    "3500": "\t * @param {*} layout Layout object to convert",
                    "3501": "\t * @param {string} side `top` or `bottom`",
                    "3502": "\t * @returns Converted array structure - one item for each row.",
                    "3503": "\t */",
                    "3504": "\tfunction _layoutArray ( settings, layout, side )",
                    "3505": "\t{",
                    "3506": "\t\tvar groups = {};",
                    "3507": "",
                    "3508": "\t\t// Combine into like groups (e.g. `top`, `top2`, etc)",
                    "3509": "\t\t$.each( layout, function ( pos, val ) {",
                    "3510": "\t\t\tif (val === null) {",
                    "3511": "\t\t\t\treturn;",
                    "3512": "\t\t\t}",
                    "3513": "",
                    "3514": "\t\t\tvar splitPos = pos.replace(/([A-Z])/g, ' $1').split(' ');",
                    "3515": "",
                    "3516": "\t\t\tif ( ! groups[ splitPos[0] ] ) {",
                    "3517": "\t\t\t\tgroups[ splitPos[0] ] = {};",
                    "3518": "\t\t\t}",
                    "3519": "",
                    "3520": "\t\t\tvar align = splitPos.length === 1 ?",
                    "3521": "\t\t\t\t'full' :",
                    "3522": "\t\t\t\tsplitPos[1].toLowerCase();",
                    "3523": "\t\t\tvar group = groups[ splitPos[0] ];",
                    "3524": "",
                    "3525": "\t\t\t// Transform to an object with a contents property",
                    "3526": "\t\t\tif ( $.isPlainObject( val ) ) {",
                    "3527": "\t\t\t\t// Already a group from a previous pass",
                    "3528": "\t\t\t\tif (val.contents) {",
                    "3529": "\t\t\t\t\tgroup[ align ] = val;",
                    "3530": "\t\t\t\t}",
                    "3531": "\t\t\t\telse {",
                    "3532": "\t\t\t\t\t// For objects, each property becomes an entry in the contents",
                    "3533": "\t\t\t\t\t// array for this insert position",
                    "3534": "\t\t\t\t\tgroup[ align ] = {",
                    "3535": "\t\t\t\t\t\tcontents: Object.keys(val).map(function (key) {",
                    "3536": "\t\t\t\t\t\t\treturn {",
                    "3537": "\t\t\t\t\t\t\t\tfeature: key,",
                    "3538": "\t\t\t\t\t\t\t\topts: val[key]",
                    "3539": "\t\t\t\t\t\t\t};",
                    "3540": "\t\t\t\t\t\t})",
                    "3541": "\t\t\t\t\t};",
                    "3542": "\t\t\t\t}",
                    "3543": "\t\t\t}",
                    "3544": "\t\t\telse {",
                    "3545": "\t\t\t\tgroup[ align ] = {",
                    "3546": "\t\t\t\t\tcontents: val",
                    "3547": "\t\t\t\t};",
                    "3548": "\t\t\t}",
                    "3549": "",
                    "3550": "\t\t\t// And make contents an array",
                    "3551": "\t\t\tif ( ! Array.isArray( group[ align ].contents ) ) {",
                    "3552": "\t\t\t\tgroup[ align ].contents = [ group[ align ].contents ];",
                    "3553": "\t\t\t}",
                    "3554": "\t\t} );",
                    "3555": "",
                    "3556": "\t\tvar filtered = Object.keys(groups)",
                    "3557": "\t\t\t.map( function ( pos ) {",
                    "3558": "\t\t\t\t// Filter to only the side we need",
                    "3559": "\t\t\t\tif ( pos.indexOf(side) !== 0 ) {",
                    "3560": "\t\t\t\t\treturn null;",
                    "3561": "\t\t\t\t}",
                    "3562": "",
                    "3563": "\t\t\t\treturn {",
                    "3564": "\t\t\t\t\tname: pos,",
                    "3565": "\t\t\t\t\tval: groups[pos]",
                    "3566": "\t\t\t\t};",
                    "3567": "\t\t\t} )",
                    "3568": "\t\t\t.filter( function (item) {",
                    "3569": "\t\t\t\treturn item !== null;",
                    "3570": "\t\t\t});",
                    "3571": "",
                    "3572": "\t\t// Order by item identifier",
                    "3573": "\t\tfiltered.sort( function ( a, b ) {",
                    "3574": "\t\t\tvar order1 = a.name.replace(/[^0-9]/g, '') * 1;",
                    "3575": "\t\t\tvar order2 = b.name.replace(/[^0-9]/g, '') * 1;",
                    "3576": "",
                    "3577": "\t\t\treturn order2 - order1;",
                    "3578": "\t\t} );",
                    "3579": "",
                    "3580": "\t\tif ( side === 'bottom' ) {",
                    "3581": "\t\t\tfiltered.reverse();",
                    "3582": "\t\t}",
                    "3583": "",
                    "3584": "\t\t// Split into rows",
                    "3585": "\t\tvar rows = [];",
                    "3586": "\t\tfor ( var i=0, ien=filtered.length ; i<ien ; i++ ) {",
                    "3587": "\t\t\tif (  filtered[i].val.full ) {",
                    "3588": "\t\t\t\trows.push( { full: filtered[i].val.full } );",
                    "3589": "\t\t\t\t_layoutResolve( settings, rows[ rows.length - 1 ] );",
                    "3590": "",
                    "3591": "\t\t\t\tdelete filtered[i].val.full;",
                    "3592": "\t\t\t}",
                    "3593": "",
                    "3594": "\t\t\tif ( Object.keys(filtered[i].val).length ) {",
                    "3595": "\t\t\t\trows.push( filtered[i].val );",
                    "3596": "\t\t\t\t_layoutResolve( settings, rows[ rows.length - 1 ] );",
                    "3597": "\t\t\t}",
                    "3598": "\t\t}",
                    "3599": "",
                    "3600": "\t\treturn rows;",
                    "3601": "\t}",
                    "3602": "",
                    "3603": "",
                    "3604": "\t/**",
                    "3605": "\t * Convert the contents of a row's layout object to nodes that can be inserted",
                    "3606": "\t * into the document by a renderer. Execute functions, look up plug-ins, etc.",
                    "3607": "\t *",
                    "3608": "\t * @param {*} settings DataTables settings object",
                    "3609": "\t * @param {*} row Layout object for this row",
                    "3610": "\t */",
                    "3611": "\tfunction _layoutResolve( settings, row ) {",
                    "3612": "\t\tvar getFeature = function (feature, opts) {",
                    "3613": "\t\t\tif ( ! _ext.features[ feature ] ) {",
                    "3614": "\t\t\t\t_fnLog( settings, 0, 'Unknown feature: '+ feature );",
                    "3615": "\t\t\t}",
                    "3616": "",
                    "3617": "\t\t\treturn _ext.features[ feature ].apply( this, [settings, opts] );",
                    "3618": "\t\t};",
                    "3619": "",
                    "3620": "\t\tvar resolve = function ( item ) {",
                    "3621": "\t\t\tvar line = row[ item ].contents;",
                    "3622": "",
                    "3623": "\t\t\tfor ( var i=0, ien=line.length ; i<ien ; i++ ) {",
                    "3624": "\t\t\t\tif ( ! line[i] ) {",
                    "3625": "\t\t\t\t\tcontinue;",
                    "3626": "\t\t\t\t}",
                    "3627": "\t\t\t\telse if ( typeof line[i] === 'string' ) {",
                    "3628": "\t\t\t\t\tline[i] = getFeature( line[i], null );",
                    "3629": "\t\t\t\t}",
                    "3630": "\t\t\t\telse if ( $.isPlainObject(line[i]) ) {",
                    "3631": "\t\t\t\t\t// If it's an object, it just has feature and opts properties from",
                    "3632": "\t\t\t\t\t// the transform in _layoutArray",
                    "3633": "\t\t\t\t\tline[i] = getFeature(line[i].feature, line[i].opts);",
                    "3634": "\t\t\t\t}",
                    "3635": "\t\t\t\telse if ( typeof line[i].node === 'function' ) {",
                    "3636": "\t\t\t\t\tline[i] = line[i].node( settings );",
                    "3637": "\t\t\t\t}",
                    "3638": "\t\t\t\telse if ( typeof line[i] === 'function' ) {",
                    "3639": "\t\t\t\t\tvar inst = line[i]( settings );",
                    "3640": "",
                    "3641": "\t\t\t\t\tline[i] = typeof inst.node === 'function' ?",
                    "3642": "\t\t\t\t\t\tinst.node() :",
                    "3643": "\t\t\t\t\t\tinst;",
                    "3644": "\t\t\t\t}",
                    "3645": "\t\t\t}",
                    "3646": "\t\t};",
                    "3647": "",
                    "3648": "\t\t$.each( row, function ( key ) {",
                    "3649": "\t\t\tresolve( key );",
                    "3650": "\t\t} );",
                    "3651": "\t}",
                    "3652": "",
                    "3653": "",
                    "3654": "\t/**",
                    "3655": "\t * Add the options to the page HTML for the table",
                    "3656": "\t *  @param {object} settings DataTables settings object",
                    "3657": "\t *  @memberof DataTable#oApi",
                    "3658": "\t */",
                    "3659": "\tfunction _fnAddOptionsHtml ( settings )",
                    "3660": "\t{",
                    "3661": "\t\tvar classes = settings.oClasses;",
                    "3662": "\t\tvar table = $(settings.nTable);",
                    "3663": "",
                    "3664": "\t\t// Wrapper div around everything DataTables controls",
                    "3665": "\t\tvar insert = $('<div/>')",
                    "3666": "\t\t\t.attr({",
                    "3667": "\t\t\t\tid:      settings.sTableId+'_wrapper',",
                    "3668": "\t\t\t\t'class': classes.container",
                    "3669": "\t\t\t})",
                    "3670": "\t\t\t.insertBefore(table);",
                    "3672": "\t\tsettings.nTableWrapper = insert[0];",
                    "3674": "\t\tvar top = _layoutArray( settings, settings.layout, 'top' );",
                    "3675": "\t\tvar bottom = _layoutArray( settings, settings.layout, 'bottom' );",
                    "3676": "\t\tvar renderer = _fnRenderer( settings, 'layout' );",
                    "3677": "",
                    "3678": "\t\tif (settings.sDom) {",
                    "3679": "\t\t\t// Legacy",
                    "3680": "\t\t\t_fnLayoutDom(settings, settings.sDom, insert);",
                    "3682": "\t\telse {",
                    "3683": "\t\t\t// Everything above - the renderer will actually insert the contents into the document",
                    "3684": "\t\t\ttop.forEach(function (item) {",
                    "3685": "\t\t\t\trenderer( settings, insert, item );",
                    "3686": "\t\t\t});",
                    "3688": "\t\t\t// The table - always the center of attention",
                    "3689": "\t\t\trenderer( settings, insert, {",
                    "3690": "\t\t\t\tfull: {",
                    "3691": "\t\t\t\t\ttable: true,",
                    "3692": "\t\t\t\t\tcontents: [ _fnFeatureHtmlTable(settings) ]",
                    "3693": "\t\t\t\t}",
                    "3694": "\t\t\t} );",
                    "3696": "\t\t\t// Everything below",
                    "3697": "\t\t\tbottom.forEach(function (item) {",
                    "3698": "\t\t\t\trenderer( settings, insert, item );",
                    "3699": "\t\t\t});",
                    "3700": "\t\t}",
                    "3702": "\t\t// Processing floats on top, so it isn't an inserted feature",
                    "3703": "\t\t_processingHtml( settings );",
                    "3707": "\t * Draw the table with the legacy DOM property",
                    "3708": "\t * @param {*} settings DT settings object",
                    "3709": "\t * @param {*} dom DOM string",
                    "3710": "\t * @param {*} insert Insert point",
                    "3712": "\tfunction _fnLayoutDom( settings, dom, insert )",
                    "3714": "\t\tvar parts = dom.match(/(\".*?\")|('.*?')|./g);",
                    "3715": "\t\tvar featureNode, option, newNode, next, attr;",
                    "3717": "\t\tfor ( var i=0 ; i<parts.length ; i++ ) {",
                    "3719": "\t\t\toption = parts[i];",
                    "3721": "\t\t\tif ( option == '<' ) {",
                    "3722": "\t\t\t\t// New container div",
                    "3723": "\t\t\t\tnewNode = $('<div/>');",
                    "3725": "\t\t\t\t// Check to see if we should append an id and/or a class name to the container",
                    "3726": "\t\t\t\tnext = parts[i+1];",
                    "3728": "\t\t\t\tif ( next[0] == \"'\" || next[0] == '\"' ) {",
                    "3729": "\t\t\t\t\tattr = next.replace(/['\"]/g, '');",
                    "3730": "",
                    "3731": "\t\t\t\t\tvar id = '', className;",
                    "3736": "\t\t\t\t\tif ( attr.indexOf('.') != -1 ) {",
                    "3737": "\t\t\t\t\t\tvar split = attr.split('.');",
                    "3738": "",
                    "3739": "\t\t\t\t\t\tid = split[0];",
                    "3740": "\t\t\t\t\t\tclassName = split[1];",
                    "3742": "\t\t\t\t\telse if ( attr[0] == \"#\" ) {",
                    "3743": "\t\t\t\t\t\tid = attr;",
                    "3745": "\t\t\t\t\telse {",
                    "3746": "\t\t\t\t\t\tclassName = attr;",
                    "3749": "\t\t\t\t\tnewNode",
                    "3750": "\t\t\t\t\t\t.attr('id', id.substring(1))",
                    "3751": "\t\t\t\t\t\t.addClass(className);",
                    "3752": "",
                    "3753": "\t\t\t\t\ti++; // Move along the position array",
                    "3756": "\t\t\t\tinsert.append( newNode );",
                    "3757": "\t\t\t\tinsert = newNode;",
                    "3759": "\t\t\telse if ( option == '>' ) {",
                    "3760": "\t\t\t\t// End container div",
                    "3763": "\t\t\telse if ( option == 't' ) {",
                    "3764": "\t\t\t\t// Table",
                    "3765": "\t\t\t\tfeatureNode = _fnFeatureHtmlTable( settings );",
                    "3767": "\t\t\telse",
                    "3769": "\t\t\t\tDataTable.ext.feature.forEach(function(feature) {",
                    "3770": "\t\t\t\t\tif ( option == feature.cFeature ) {",
                    "3771": "\t\t\t\t\t\tfeatureNode = feature.fnInit( settings );",
                    "3773": "\t\t\t\t});",
                    "3776": "\t\t\t// Add to the display",
                    "3777": "\t\t\tif ( featureNode ) {",
                    "3789": "\t *  @param {node} thead The header/footer element for the table",
                    "3790": "\t *  @returns {array} Calculated layout array",
                    "3793": "\tfunction _fnDetectHeader ( settings, thead, write )",
                    "3795": "\t\tvar columns = settings.aoColumns;",
                    "3796": "\t\tvar rows = $(thead).children('tr');",
                    "3797": "\t\tvar row, cell;",
                    "3798": "\t\tvar i, k, l, iLen, shifted, column, colspan, rowspan;",
                    "3799": "\t\tvar isHeader = thead && thead.nodeName.toLowerCase() === 'thead';",
                    "3800": "\t\tvar layout = [];",
                    "3801": "\t\tvar unique;",
                    "3802": "\t\tvar shift = function ( a, i, j ) {",
                    "3804": "\t\t\twhile ( k[j] ) {",
                    "3810": "\t\t// We know how many rows there are in the layout - so prep it",
                    "3811": "\t\tfor ( i=0, iLen=rows.length ; i<iLen ; i++ ) {",
                    "3812": "\t\t\tlayout.push( [] );",
                    "3815": "\t\tfor ( i=0, iLen=rows.length ; i<iLen ; i++ ) {",
                    "3816": "\t\t\trow = rows[i];",
                    "3817": "\t\t\tcolumn = 0;",
                    "3818": "",
                    "3819": "\t\t\t// For every cell in the row..",
                    "3820": "\t\t\tcell = row.firstChild;",
                    "3821": "\t\t\twhile ( cell ) {",
                    "3822": "\t\t\t\tif (",
                    "3823": "\t\t\t\t\tcell.nodeName.toUpperCase() == 'TD' ||",
                    "3824": "\t\t\t\t\tcell.nodeName.toUpperCase() == 'TH'",
                    "3825": "\t\t\t\t) {",
                    "3826": "\t\t\t\t\tvar cols = [];",
                    "3827": "",
                    "3828": "\t\t\t\t\t// Get the col and rowspan attributes from the DOM and sanitise them",
                    "3829": "\t\t\t\t\tcolspan = cell.getAttribute('colspan') * 1;",
                    "3830": "\t\t\t\t\trowspan = cell.getAttribute('rowspan') * 1;",
                    "3831": "\t\t\t\t\tcolspan = (!colspan || colspan===0 || colspan===1) ? 1 : colspan;",
                    "3832": "\t\t\t\t\trowspan = (!rowspan || rowspan===0 || rowspan===1) ? 1 : rowspan;",
                    "3833": "",
                    "3834": "\t\t\t\t\t// There might be colspan cells already in this row, so shift our target",
                    "3835": "\t\t\t\t\t// accordingly",
                    "3836": "\t\t\t\t\tshifted = shift( layout, i, column );",
                    "3837": "",
                    "3838": "\t\t\t\t\t// Cache calculation for unique columns",
                    "3839": "\t\t\t\t\tunique = colspan === 1 ?",
                    "3840": "\t\t\t\t\t\ttrue :",
                    "3841": "\t\t\t\t\t\tfalse;",
                    "3842": "",
                    "3843": "\t\t\t\t\t// Perform header setup",
                    "3844": "\t\t\t\t\tif ( write ) {",
                    "3845": "\t\t\t\t\t\tif (unique) {",
                    "3846": "\t\t\t\t\t\t\t// Allow column options to be set from HTML attributes",
                    "3847": "\t\t\t\t\t\t\t_fnColumnOptions( settings, shifted, $(cell).data() );",
                    "3848": "",
                    "3849": "\t\t\t\t\t\t\t// Get the width for the column. This can be defined from the",
                    "3850": "\t\t\t\t\t\t\t// width attribute, style attribute or `columns.width` option",
                    "3851": "\t\t\t\t\t\t\tvar columnDef = columns[shifted];",
                    "3852": "\t\t\t\t\t\t\tvar width = cell.getAttribute('width') || null;",
                    "3853": "\t\t\t\t\t\t\tvar t = cell.style.width.match(/width:\\s*(\\d+[pxem%]+)/);",
                    "3854": "\t\t\t\t\t\t\tif ( t ) {",
                    "3855": "\t\t\t\t\t\t\t\twidth = t[1];",
                    "3856": "\t\t\t\t\t\t\t}",
                    "3858": "\t\t\t\t\t\t\tcolumnDef.sWidthOrig = columnDef.sWidth || width;",
                    "3860": "\t\t\t\t\t\t\tif (isHeader) {",
                    "3861": "\t\t\t\t\t\t\t\t// Column title handling - can be user set, or read from the DOM",
                    "3862": "\t\t\t\t\t\t\t\t// This happens before the render, so the original is still in place",
                    "3863": "\t\t\t\t\t\t\t\tif ( columnDef.sTitle !== null && ! columnDef.autoTitle ) {",
                    "3864": "\t\t\t\t\t\t\t\t\tcell.innerHTML = columnDef.sTitle;",
                    "3865": "\t\t\t\t\t\t\t\t}",
                    "3866": "",
                    "3867": "\t\t\t\t\t\t\t\tif (! columnDef.sTitle && unique) {",
                    "3868": "\t\t\t\t\t\t\t\t\tcolumnDef.sTitle = cell.innerHTML.replace( /<.*?>/g, \"\" );",
                    "3869": "\t\t\t\t\t\t\t\t\tcolumnDef.autoTitle = true;",
                    "3870": "\t\t\t\t\t\t\t\t}",
                    "3871": "\t\t\t\t\t\t\t}",
                    "3872": "\t\t\t\t\t\t\telse {",
                    "3873": "\t\t\t\t\t\t\t\t// Footer specific operations",
                    "3874": "\t\t\t\t\t\t\t\tif (columnDef.footer) {",
                    "3875": "\t\t\t\t\t\t\t\t\tcell.innerHTML = columnDef.footer;",
                    "3876": "\t\t\t\t\t\t\t\t}",
                    "3877": "\t\t\t\t\t\t\t}",
                    "3878": "",
                    "3879": "\t\t\t\t\t\t\t// Fall back to the aria-label attribute on the table header if no ariaTitle is",
                    "3880": "\t\t\t\t\t\t\t// provided.",
                    "3881": "\t\t\t\t\t\t\tif (! columnDef.ariaTitle) {",
                    "3882": "\t\t\t\t\t\t\t\tcolumnDef.ariaTitle = $(cell).attr(\"aria-label\") || columnDef.sTitle;",
                    "3883": "\t\t\t\t\t\t\t}",
                    "3884": "",
                    "3885": "\t\t\t\t\t\t\t// Column specific class names",
                    "3886": "\t\t\t\t\t\t\tif ( columnDef.className ) {",
                    "3887": "\t\t\t\t\t\t\t\t$(cell).addClass( columnDef.className );",
                    "3888": "\t\t\t\t\t\t\t}",
                    "3889": "\t\t\t\t\t\t}",
                    "3890": "",
                    "3891": "\t\t\t\t\t\t// Wrap the column title so we can write to it in future",
                    "3892": "\t\t\t\t\t\tif ( $('span.dt-column-title', cell).length === 0) {",
                    "3893": "\t\t\t\t\t\t\t$('<span>')",
                    "3894": "\t\t\t\t\t\t\t\t.addClass('dt-column-title')",
                    "3895": "\t\t\t\t\t\t\t\t.append(cell.childNodes)",
                    "3896": "\t\t\t\t\t\t\t\t.appendTo(cell);",
                    "3897": "\t\t\t\t\t\t}",
                    "3898": "",
                    "3899": "\t\t\t\t\t\tif ( isHeader && $('span.dt-column-order', cell).length === 0) {",
                    "3900": "\t\t\t\t\t\t\t$('<span>')",
                    "3901": "\t\t\t\t\t\t\t\t.addClass('dt-column-order')",
                    "3902": "\t\t\t\t\t\t\t\t.appendTo(cell);",
                    "3906": "\t\t\t\t\t// If there is col / rowspan, copy the information into the layout grid",
                    "3907": "\t\t\t\t\tfor ( l=0 ; l<colspan ; l++ ) {",
                    "3908": "\t\t\t\t\t\tfor ( k=0 ; k<rowspan ; k++ ) {",
                    "3909": "\t\t\t\t\t\t\tlayout[i+k][shifted+l] = {",
                    "3910": "\t\t\t\t\t\t\t\tcell: cell,",
                    "3911": "\t\t\t\t\t\t\t\tunique: unique",
                    "3912": "\t\t\t\t\t\t\t};",
                    "3914": "\t\t\t\t\t\t\tlayout[i+k].row = row;",
                    "3915": "\t\t\t\t\t\t}",
                    "3917": "\t\t\t\t\t\tcols.push( shifted+l );",
                    "3918": "\t\t\t\t\t}",
                    "3919": "",
                    "3920": "\t\t\t\t\t// Assign an attribute so spanning cells can still be identified",
                    "3921": "\t\t\t\t\t// as belonging to a column",
                    "3922": "\t\t\t\t\tcell.setAttribute('data-dt-column', _unique(cols).join(','));",
                    "3924": "",
                    "3925": "\t\t\t\tcell = cell.nextSibling;",
                    "3929": "\t\treturn layout;",
                    "3985": "\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR], true );",
                    "4008": "\t\t\t\"url\": typeof ajax === 'string' ?",
                    "4009": "\t\t\t\tajax :",
                    "4010": "\t\t\t\t'',",
                    "4016": "\t\t\t\"error\": function (xhr, error) {",
                    "4017": "\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR], true );",
                    "4019": "\t\t\t\tif ( ret.indexOf(true) === -1 ) {",
                    "4032": "\t\t// If `ajax` option is an object, extend and override our default base",
                    "4033": "\t\tif ( $.isPlainObject( ajax ) ) {",
                    "4034": "\t\t\t$.extend( baseAjax, ajax )",
                    "4035": "\t\t}",
                    "4036": "",
                    "4041": "\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data, baseAjax], true );",
                    "4043": "\t\tif ( typeof ajax === 'function' )",
                    "4048": "\t\telse if (ajax.url === '') {",
                    "4049": "\t\t\tcallback({});",
                    "4050": "\t\t}",
                    "4051": "\t\telse {",
                    "4053": "\t\t\toSettings.jqXHR = $.ajax( baseAjax );",
                    "4056": "\t\t\tif ( ajaxData ) {",
                    "4057": "\t\t\t\tajax.data = ajaxData;",
                    "4058": "\t\t\t}",
                    "4086": "\t * request.",
                    "4098": "\t\t\tcolData = function ( idx, prop ) {",
                    "4099": "\t\t\t\treturn typeof columns[idx][prop] === 'function' ?",
                    "4100": "\t\t\t\t\t'function' :",
                    "4101": "\t\t\t\t\tcolumns[idx][prop];",
                    "4102": "\t\t\t};",
                    "4104": "\t\treturn {",
                    "4105": "\t\t\tdraw: settings.iDraw,",
                    "4106": "\t\t\tcolumns: columns.map( function ( column, i ) {",
                    "4107": "\t\t\t\treturn {",
                    "4108": "\t\t\t\t\tdata: colData(i, 'mData'),",
                    "4109": "\t\t\t\t\tname: column.sName,",
                    "4110": "\t\t\t\t\tsearchable: column.bSearchable,",
                    "4111": "\t\t\t\t\torderable: column.bSortable,",
                    "4112": "\t\t\t\t\tsearch: {",
                    "4113": "\t\t\t\t\t\tvalue: preColSearch[i].search,",
                    "4114": "\t\t\t\t\t\tregex: preColSearch[i].regex,",
                    "4115": "\t\t\t\t\t\tfixed: Object.keys(column.searchFixed).map( function(name) {",
                    "4116": "\t\t\t\t\t\t\treturn {",
                    "4117": "\t\t\t\t\t\t\t\tname: name,",
                    "4118": "\t\t\t\t\t\t\t\tterm: column.searchFixed[name].toString()",
                    "4119": "\t\t\t\t\t\t\t}",
                    "4120": "\t\t\t\t\t\t})",
                    "4121": "\t\t\t\t\t}",
                    "4122": "\t\t\t\t};",
                    "4123": "\t\t\t} ),",
                    "4124": "\t\t\torder: _fnSortFlatten( settings ).map( function ( val ) {",
                    "4125": "\t\t\t\treturn {",
                    "4126": "\t\t\t\t\tcolumn: val.col,",
                    "4127": "\t\t\t\t\tdir: val.dir,",
                    "4128": "\t\t\t\t\tname: colData(val.col, 'sName')",
                    "4129": "\t\t\t\t};",
                    "4130": "\t\t\t} ),",
                    "4131": "\t\t\tstart: settings._iDisplayStart,",
                    "4132": "\t\t\tlength: features.bPaginate ?",
                    "4133": "\t\t\t\tsettings._iDisplayLength :",
                    "4134": "\t\t\t\t-1,",
                    "4135": "\t\t\tsearch: {",
                    "4136": "\t\t\t\tvalue: preSearch.search,",
                    "4137": "\t\t\t\tregex: preSearch.regex,",
                    "4138": "\t\t\t\tfixed: Object.keys(settings.searchFixed).map( function(name) {",
                    "4139": "\t\t\t\t\treturn {",
                    "4140": "\t\t\t\t\t\tname: name,",
                    "4141": "\t\t\t\t\t\tterm: settings.searchFixed[name].toString()",
                    "4142": "\t\t\t\t\t}",
                    "4143": "\t\t\t\t})",
                    "4162": "\t\tvar data = _fnAjaxDataSrc(settings, json);",
                    "4163": "\t\tvar draw = _fnAjaxDataSrcParam(settings, 'draw', json);",
                    "4164": "\t\tvar recordsTotal = _fnAjaxDataSrcParam(settings, 'recordsTotal', json);",
                    "4165": "\t\tvar recordsFiltered = _fnAjaxDataSrcParam(settings, 'recordsFiltered', json);",
                    "4190": "\t\t_fnInitComplete( settings );",
                    "4199": "\t *  @param {object} settings dataTables settings object",
                    "4203": "\tfunction _fnAjaxDataSrc ( settings, json, write )",
                    "4204": "\t{",
                    "4205": "\t\tvar dataProp = 'data';",
                    "4206": "",
                    "4207": "\t\tif ($.isPlainObject( settings.ajax ) && settings.ajax.dataSrc !== undefined) {",
                    "4208": "\t\t\t// Could in inside a `dataSrc` object, or not!",
                    "4209": "\t\t\tvar dataSrc = settings.ajax.dataSrc;",
                    "4210": "",
                    "4211": "\t\t\t// string, function and object are valid types",
                    "4212": "\t\t\tif (typeof dataSrc === 'string' || typeof dataSrc === 'function') {",
                    "4213": "\t\t\t\tdataProp = dataSrc;",
                    "4214": "\t\t\t}",
                    "4215": "\t\t\telse if (dataSrc.data !== undefined) {",
                    "4216": "\t\t\t\tdataProp = dataSrc.data;",
                    "4217": "\t\t\t}",
                    "4218": "\t\t}",
                    "4221": "\t\t\tif ( dataProp === 'data' ) {",
                    "4224": "\t\t\t\treturn json.aaData || json[dataProp];",
                    "4227": "\t\t\treturn dataProp !== \"\" ?",
                    "4228": "\t\t\t\t_fnGetObjectDataFn( dataProp )( json ) :",
                    "4231": "",
                    "4233": "\t\t_fnSetObjectDataFn( dataProp )( json, write );",
                    "4237": "\t * Very similar to _fnAjaxDataSrc, but for the other SSP properties",
                    "4238": "\t * @param {*} settings DataTables settings object",
                    "4239": "\t * @param {*} param Target parameter",
                    "4240": "\t * @param {*} json JSON data",
                    "4241": "\t * @returns Resolved value",
                    "4243": "\tfunction _fnAjaxDataSrcParam (settings, param, json) {",
                    "4244": "\t\tvar dataSrc = $.isPlainObject( settings.ajax )",
                    "4245": "\t\t\t? settings.ajax.dataSrc",
                    "4246": "\t\t\t: null;",
                    "4248": "\t\tif (dataSrc && dataSrc[param]) {",
                    "4249": "\t\t\t// Get from custom location",
                    "4250": "\t\t\treturn _fnGetObjectDataFn( dataSrc[param] )( json );",
                    "4251": "\t\t}",
                    "4253": "\t\t// else - Default behaviour",
                    "4254": "\t\tvar old = '';",
                    "4256": "\t\t// Legacy support",
                    "4257": "\t\tif (param === 'draw') {",
                    "4258": "\t\t\told = 'sEcho';",
                    "4259": "\t\t}",
                    "4260": "\t\telse if (param === 'recordsTotal') {",
                    "4261": "\t\t\told = 'iTotalRecords';",
                    "4262": "\t\t}",
                    "4263": "\t\telse if (param === 'recordsFiltered') {",
                    "4264": "\t\t\told = 'iTotalDisplayRecords';",
                    "4265": "\t\t}",
                    "4267": "\t\treturn json[old] !== undefined",
                    "4268": "\t\t\t? json[old]",
                    "4269": "\t\t\t: json[param];",
                    "4275": "\t *  @param {object} settings dataTables settings object",
                    "4276": "\t *  @param {object} input search information",
                    "4279": "\tfunction _fnFilterComplete ( settings, input )",
                    "4280": "\t{",
                    "4281": "\t\tvar columnsSearch = settings.aoPreSearchCols;",
                    "4285": "\t\t_fnColumnTypes( settings );",
                    "4287": "\t\t// In server-side processing all filtering is done by the server, so no point hanging around here",
                    "4288": "\t\tif ( _fnDataSource( settings ) != 'ssp' )",
                    "4290": "\t\t\t// Check if any of the rows were invalidated",
                    "4291": "\t\t\t_fnFilterData( settings );",
                    "4292": "",
                    "4293": "\t\t\t// Start from the full data set",
                    "4294": "\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();",
                    "4296": "\t\t\t// Global filter first",
                    "4297": "\t\t\t_fnFilter( settings.aiDisplay, settings, input.search, input );",
                    "4298": "",
                    "4299": "\t\t\t$.each(settings.searchFixed, function (name, term) {",
                    "4300": "\t\t\t\t_fnFilter(settings.aiDisplay, settings, term, {});",
                    "4301": "\t\t\t});",
                    "4302": "",
                    "4303": "\t\t\t// Then individual column filters",
                    "4304": "\t\t\tfor ( var i=0 ; i<columnsSearch.length ; i++ )",
                    "4306": "\t\t\t\tvar col = columnsSearch[i];",
                    "4307": "",
                    "4308": "\t\t\t\t_fnFilter(",
                    "4309": "\t\t\t\t\tsettings.aiDisplay,",
                    "4310": "\t\t\t\t\tsettings,",
                    "4311": "\t\t\t\t\tcol.search,",
                    "4312": "\t\t\t\t\tcol,",
                    "4313": "\t\t\t\t\ti",
                    "4314": "\t\t\t\t);",
                    "4315": "",
                    "4316": "\t\t\t\t$.each(settings.aoColumns[i].searchFixed, function (name, term) {",
                    "4317": "\t\t\t\t\t_fnFilter(settings.aiDisplay, settings, term, {}, i);",
                    "4318": "\t\t\t\t});",
                    "4321": "\t\t\t// And finally global filtering",
                    "4322": "\t\t\t_fnFilterCustom( settings );",
                    "4325": "\t\t// Tell the draw function we have been filtering",
                    "4326": "\t\tsettings.bFiltered = true;",
                    "4327": "",
                    "4328": "\t\t_fnCallbackFire( settings, null, 'search', [settings] );",
                    "4334": "\t *",
                    "4335": "\t * This is legacy now that we have named functions, but it is widely used",
                    "4336": "\t * from 1.x, so it is not yet deprecated.",
                    "4362": "\t\t\tdisplayRows.push.apply(displayRows, rows);",
                    "4370": "\tfunction _fnFilter( searchRows, settings, input, options, column )",
                    "4372": "\t\tif ( input === '' ) {",
                    "4373": "\t\t\treturn;",
                    "4376": "\t\tvar i = 0;",
                    "4378": "\t\t// Search term can be a function, regex or string - if a string we apply our",
                    "4379": "\t\t// smart filtering regex (assuming the options require that)",
                    "4380": "\t\tvar searchFunc = typeof input === 'function' ? input : null;",
                    "4381": "\t\tvar rpSearch = input instanceof RegExp",
                    "4382": "\t\t\t? input",
                    "4383": "\t\t\t: searchFunc",
                    "4384": "\t\t\t\t? null",
                    "4385": "\t\t\t\t: _fnFilterCreateSearch( input, options );",
                    "4387": "\t\t// Then for each row, does the test pass. If not, lop the row from the array",
                    "4388": "\t\twhile (i < searchRows.length) {",
                    "4389": "\t\t\tvar row = settings.aoData[ searchRows[i] ];",
                    "4390": "\t\t\tvar data = column === undefined",
                    "4391": "\t\t\t\t? row._sFilterRow",
                    "4392": "\t\t\t\t: row._aFilterData[ column ];",
                    "4394": "\t\t\tif ( (searchFunc && ! searchFunc(data, row._aData, searchRows[i], column)) || (rpSearch && ! rpSearch.test(data)) ) {",
                    "4395": "\t\t\t\tsearchRows.splice(i, 1);",
                    "4396": "\t\t\t\ti--;",
                    "4399": "\t\t\ti++;",
                    "4413": "\tfunction _fnFilterCreateSearch( search, inOpts )",
                    "4415": "\t\tvar not = [];",
                    "4416": "\t\tvar options = $.extend({}, {",
                    "4417": "\t\t\tboundary: false,",
                    "4418": "\t\t\tcaseInsensitive: true,",
                    "4419": "\t\t\texact: false,",
                    "4420": "\t\t\tregex: false,",
                    "4421": "\t\t\tsmart: true",
                    "4422": "\t\t}, inOpts);",
                    "4423": "",
                    "4424": "\t\tif (typeof search !== 'string') {",
                    "4425": "\t\t\tsearch = search.toString();",
                    "4426": "\t\t}",
                    "4427": "",
                    "4428": "\t\tif (options.exact) {",
                    "4429": "\t\t\treturn new RegExp(",
                    "4430": "\t\t\t\t'^'+_fnEscapeRegex(search)+'$',",
                    "4431": "\t\t\t\toptions.caseInsensitive ? 'i' : ''",
                    "4432": "\t\t\t);",
                    "4433": "\t\t}",
                    "4434": "",
                    "4435": "\t\tsearch = options.regex ?",
                    "4439": "\t\tif ( options.smart ) {",
                    "4442": "\t\t\t * order is important - a la google. And a negative look around for",
                    "4443": "\t\t\t * finding rows which don't contain a given string.",
                    "4444": "\t\t\t *",
                    "4445": "\t\t\t * So this is the sort of thing we want to generate:",
                    "4449": "\t\t\tvar parts = search.match( /!?[\"\\u201C][^\"\\u201D]+[\"\\u201D]|[^ ]+/g ) || [''];",
                    "4450": "\t\t\tvar a = parts.map( function ( word ) {",
                    "4451": "\t\t\t\tvar negative = false;",
                    "4452": "\t\t\t\tvar m;",
                    "4453": "",
                    "4454": "\t\t\t\t// Determine if it is a \"does not include\"",
                    "4455": "\t\t\t\tif ( word.charAt(0) === '!' ) {",
                    "4456": "\t\t\t\t\tnegative = true;",
                    "4457": "\t\t\t\t\tword = word.substring(1);",
                    "4458": "\t\t\t\t}",
                    "4459": "",
                    "4460": "\t\t\t\t// Strip the quotes from around matched phrases",
                    "4462": "\t\t\t\t\tm = word.match( /^\"(.*)\"$/ );",
                    "4466": "\t\t\t\t\t// Smart quote match (iPhone users)",
                    "4467": "\t\t\t\t\tm = word.match( /^\\u201C(.*)\\u201D$/ );",
                    "4471": "\t\t\t\t// For our \"not\" case, we need to modify the string that is",
                    "4472": "\t\t\t\t// allowed to match at the end of the expression.",
                    "4473": "\t\t\t\tif (negative) {",
                    "4474": "\t\t\t\t\tif (word.length > 1) {",
                    "4475": "\t\t\t\t\t\tnot.push('(?!'+word+')');",
                    "4476": "\t\t\t\t\t}",
                    "4477": "",
                    "4478": "\t\t\t\t\tword = '';",
                    "4479": "\t\t\t\t}",
                    "4480": "",
                    "4484": "\t\t\tvar match = not.length",
                    "4485": "\t\t\t\t? not.join('')",
                    "4486": "\t\t\t\t: '';",
                    "4487": "",
                    "4488": "\t\t\tvar boundary = options.boundary",
                    "4489": "\t\t\t\t? '\\\\b'",
                    "4490": "\t\t\t\t: '';",
                    "4491": "",
                    "4492": "\t\t\tsearch = '^(?=.*?'+boundary+a.join( ')(?=.*?'+boundary )+')('+match+'.)*$';",
                    "4495": "\t\treturn new RegExp( search, options.caseInsensitive ? 'i' : '' );",
                    "4514": "\t\tvar data = settings.aoData;",
                    "4516": "\t\tvar j, jen, filterData, cellData, row;",
                    "4519": "\t\tfor ( var rowIdx=0 ; rowIdx<data.length ; rowIdx++ ) {",
                    "4520": "\t\t\tif (! data[rowIdx]) {",
                    "4521": "\t\t\t\tcontinue;",
                    "4522": "\t\t\t}",
                    "4523": "",
                    "4524": "\t\t\trow = data[rowIdx];",
                    "4533": "\t\t\t\t\t\tcellData = _fnGetCellData( settings, rowIdx, j, 'filter' );",
                    "4535": "\t\t\t\t\t\t// Search in DataTables is string based",
                    "4551": "\t\t\t\t\t// method used here is much faster https://jsperf.com/html-decode",
                    "4583": "\t\tvar i, iAjaxStart=settings.iInitDisplayStart;",
                    "4592": "\t\t_fnBuildHead( settings, 'header' );",
                    "4593": "\t\t_fnBuildHead( settings, 'footer' );",
                    "4597": "\t\t// Enable features",
                    "4598": "\t\t_fnAddOptionsHtml( settings );",
                    "4599": "\t\t_fnSortInit( settings );",
                    "4601": "\t\t_colGroup( settings );",
                    "4603": "\t\t/* Okay to show that something is going on now */",
                    "4604": "\t\t_fnProcessingDisplay( settings, true );",
                    "4606": "\t\t_fnCallbackFire( settings, null, 'preInit', [settings], true );",
                    "4615": "",
                    "4616": "\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw",
                    "4617": "\t\tif ( dataSrc != 'ssp' ) {",
                    "4620": "\t\t\t\t_fnBuildAjax( settings, {}, function(json) {",
                    "4635": "\t\t\t\t\t_fnInitComplete( settings );",
                    "4640": "\t\t\t\t_fnProcessingDisplay( settings, false );",
                    "4648": "\t *  @param {object} settings dataTables settings object",
                    "4651": "\tfunction _fnInitComplete ( settings )",
                    "4653": "\t\tif (settings._bInitComplete) {",
                    "4654": "\t\t\treturn;",
                    "4655": "\t\t}",
                    "4656": "",
                    "4657": "\t\tvar args = [settings, settings.json];",
                    "4658": "",
                    "4661": "\t\t// Table is fully set up and we have data, so calculate the",
                    "4662": "\t\t// column widths",
                    "4663": "\t\t_fnAdjustColumnSizing( settings );",
                    "4665": "\t\t_fnCallbackFire( settings, null, 'plugin-init', args, true );",
                    "4666": "\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', args, true );",
                    "4721": "\t\t\t\tstart = 0;",
                    "4735": "\t\telse if ( action === 'ellipsis' )",
                    "4736": "\t\t{",
                    "4737": "\t\t\treturn;",
                    "4738": "\t\t}",
                    "4747": "\t\t_fnCallbackFire( settings, null, changed ? 'page' : 'page-nc', [settings] );",
                    "4749": "\t\tif ( changed && redraw ) {",
                    "4750": "\t\t\t_fnDraw( settings );",
                    "4759": "\t *  @param {object} settings DataTables settings object",
                    "4761": "\tfunction _processingHtml ( settings )",
                    "4763": "\t\tvar table = settings.nTable;",
                    "4764": "",
                    "4765": "\t\tif ( settings.oFeatures.bProcessing ) {",
                    "4766": "\t\t\tvar n = $('<div/>', {",
                    "4767": "\t\t\t\t\t'id': settings.sTableId + '_processing',",
                    "4768": "\t\t\t\t\t'class': settings.oClasses.processing.container,",
                    "4769": "\t\t\t\t\t'role': 'status'",
                    "4770": "\t\t\t\t} )",
                    "4771": "\t\t\t\t.html( settings.oLanguage.sProcessing )",
                    "4772": "\t\t\t\t.append('<div><div></div><div></div><div></div><div></div></div>')",
                    "4773": "\t\t\t\t.insertBefore( table );",
                    "4774": "",
                    "4775": "\t\t\t$(table).on( 'processing.dt.DT', function (e, s, show) {",
                    "4776": "\t\t\t\tn.css( 'display', show ? 'block' : 'none' );",
                    "4777": "\t\t\t} );",
                    "4778": "\t\t}",
                    "4784": "\t *  @param {object} settings DataTables settings object",
                    "4810": "\t\tvar classes = settings.oClasses.scrolling;",
                    "4811": "\t\tvar caption = settings.captionNode;",
                    "4812": "\t\tvar captionSide = caption ? caption._captionSide : null;",
                    "4841": "\t\tvar scroller = $( _div, { 'class': classes.container } )",
                    "4843": "\t\t\t\t$(_div, { 'class': classes.header.self } )",
                    "4851": "\t\t\t\t\t\t$(_div, { 'class': classes.header.inner } )",
                    "4868": "\t\t\t\t$(_div, { 'class': classes.body } )",
                    "4879": "\t\t\t\t$(_div, { 'class': classes.footer.self } )",
                    "4886": "\t\t\t\t\t\t$(_div, { 'class': classes.footer.inner } )",
                    "4906": "\t\t$(scrollBody).on( 'scroll.DT', function () {",
                    "4907": "\t\t\tvar scrollLeft = this.scrollLeft;",
                    "4909": "\t\t\tscrollHead.scrollLeft = scrollLeft;",
                    "4911": "\t\t\tif ( footer ) {",
                    "4912": "\t\t\t\tscrollFoot.scrollLeft = scrollLeft;",
                    "4913": "\t\t\t}",
                    "4914": "\t\t} );",
                    "4915": "",
                    "4916": "\t\t// When focus is put on the header cells, we might need to scroll the body",
                    "4917": "\t\t$('th, td', scrollHead).on('focus', function () {",
                    "4918": "\t\t\tvar scrollLeft = scrollHead.scrollLeft;",
                    "4919": "",
                    "4920": "\t\t\tscrollBody.scrollLeft = scrollLeft;",
                    "4921": "",
                    "4922": "\t\t\tif ( footer ) {",
                    "4923": "\t\t\t\tscrollBody.scrollLeft = scrollLeft;",
                    "4924": "\t\t\t}",
                    "4925": "\t\t});",
                    "4937": "\t\tsettings.aoDrawCallback.push(_fnScrollDraw);",
                    "4951": "\t *   2. Correct colgroup > col values if needed",
                    "4952": "\t *   3. Copy colgroup > col over to header and footer",
                    "4975": "\t\t\tfooter         = settings.nTFoot && $('th, td', settings.nTFoot).length ? $(settings.nTFoot) : null,",
                    "4977": "\t\t\theaderCopy, footerCopy;",
                    "4993": "\t\t// 1. Re-create the table inside the scrolling div",
                    "5003": "\t\t\tfooterCopy = footer.clone().prependTo( table );",
                    "5004": "\t\t\tfooterCopy.find('[id]').removeAttr('id');",
                    "5007": "\t\t// 2. Correct colgroup > col values if needed",
                    "5008": "\t\t// It is possible that the cell sizes are smaller than the content, so we need to",
                    "5009": "\t\t// correct colgroup>col for such cases. This can happen if the auto width detection",
                    "5010": "\t\t// uses a cell which has a longer string, but isn't the widest! For example",
                    "5011": "\t\t// \"Chief Executive Officer (CEO)\" is the longest string in the demo, but",
                    "5012": "\t\t// \"Systems Administrator\" is actually the widest string since it doesn't collapse.",
                    "5013": "\t\tif (settings.aiDisplay.length) {",
                    "5014": "\t\t\t// Get the column sizes from the first row in the table",
                    "5015": "\t\t\tvar colSizes = table.find('tbody tr').eq(0).find('th, td').map(function () {",
                    "5016": "\t\t\t\treturn $(this).outerWidth();",
                    "5017": "\t\t\t});",
                    "5019": "\t\t\t// Check against what the colgroup > col is set to and correct if needed",
                    "5020": "\t\t\t$('col', settings.colgroup).each(function (i) {",
                    "5021": "\t\t\t\tvar colWidth = this.style.width.replace('px', '');",
                    "5023": "\t\t\t\tif (colWidth !== colSizes[i]) {",
                    "5024": "\t\t\t\t\tthis.style.width = colSizes[i] + 'px';",
                    "5025": "\t\t\t\t}",
                    "5026": "\t\t\t});",
                    "5027": "\t\t}",
                    "5029": "\t\t// 3. Copy the colgroup over to the header and footer",
                    "5030": "\t\tdivHeaderTable",
                    "5031": "\t\t\t.find('colgroup')",
                    "5032": "\t\t\t.remove();",
                    "5034": "\t\tdivHeaderTable.append(settings.colgroup.clone());",
                    "5036": "\t\tif ( footer ) {",
                    "5037": "\t\t\tdivFooterTable",
                    "5038": "\t\t\t\t.find('colgroup')",
                    "5039": "\t\t\t\t.remove();",
                    "5041": "\t\t\tdivFooterTable.append(settings.colgroup.clone());",
                    "5046": "\t\t// both match, but we want to hide it completely.",
                    "5047": "\t\t$('th, td', headerCopy).each(function () {",
                    "5048": "\t\t\t$(this).children().wrapAll('<div class=\"dt-scroll-sizing\">');",
                    "5049": "\t\t});",
                    "5052": "\t\t\t$('th, td', footerCopy).each(function () {",
                    "5053": "\t\t\t\t$(this).children().wrapAll('<div class=\"dt-scroll-sizing\">');",
                    "5054": "\t\t\t});",
                    "5057": "\t\t// 4. Clean up",
                    "5060": "\t\tvar isScrolling = Math.floor(table.height()) > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";",
                    "5061": "\t\tvar paddingSide = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );",
                    "5062": "",
                    "5063": "\t\t// Set the width's of the header and footer tables",
                    "5064": "\t\tvar outerWidth = table.outerWidth();",
                    "5065": "",
                    "5066": "\t\tdivHeaderTable.css('width', _fnStringToCss( outerWidth ));",
                    "5067": "\t\tdivHeaderInner",
                    "5068": "\t\t\t.css('width', _fnStringToCss( outerWidth ))",
                    "5069": "\t\t\t.css(paddingSide, isScrolling ? barWidth+\"px\" : \"0px\");",
                    "5072": "\t\t\tdivFooterTable.css('width', _fnStringToCss( outerWidth ));",
                    "5073": "\t\t\tdivFooterInner",
                    "5074": "\t\t\t\t.css('width', _fnStringToCss( outerWidth ))",
                    "5075": "\t\t\t\t.css(paddingSide, isScrolling ? barWidth+\"px\" : \"0px\");",
                    "5079": "\t\ttable.children('colgroup').prependTo(table);",
                    "5081": "\t\t// Adjust the position of the header in case we loose the y-scrollbar",
                    "5092": "\t * Calculate the width of columns for the table",
                    "5093": "\t *  @param {object} settings dataTables settings object",
                    "5096": "\tfunction _fnCalculateColumnWidths ( settings )",
                    "5098": "\t\t// Not interested in doing column width calculation if auto-width is disabled",
                    "5099": "\t\tif (! settings.oFeatures.bAutoWidth) {",
                    "5100": "\t\t\treturn;",
                    "5104": "\t\t\ttable = settings.nTable,",
                    "5105": "\t\t\tcolumns = settings.aoColumns,",
                    "5106": "\t\t\tscroll = settings.oScroll,",
                    "5110": "\t\t\tvisibleColumns = _fnGetColumns( settings, 'bVisible' ),",
                    "5113": "\t\t\ti, column, columnIdx;",
                    "5120": "\t\t// Let plug-ins know that we are doing a recalc, in case they have changed any of the",
                    "5121": "\t\t// visible columns their own way (e.g. Responsive uses display:none).",
                    "5122": "\t\t_fnCallbackFire(",
                    "5123": "\t\t\tsettings,",
                    "5124": "\t\t\tnull,",
                    "5125": "\t\t\t'column-calc',",
                    "5126": "\t\t\t{visible: visibleColumns},",
                    "5127": "\t\t\tfalse",
                    "5128": "\t\t);",
                    "5130": "\t\t// Construct a single row, worst case, table with the widest",
                    "5131": "\t\t// node in the data, assign any user defined widths, then insert it into",
                    "5132": "\t\t// the DOM and allow the browser to do all the hard work of calculating",
                    "5133": "\t\t// table widths",
                    "5134": "\t\tvar tmpTable = $(table.cloneNode())",
                    "5135": "\t\t\t.css( 'visibility', 'hidden' )",
                    "5136": "\t\t\t.removeAttr( 'id' );",
                    "5138": "\t\t// Clean up the table body",
                    "5139": "\t\ttmpTable.append('<tbody>')",
                    "5140": "\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );",
                    "5142": "\t\t// Clone the table header and footer - we can't use the header / footer",
                    "5143": "\t\t// from the cloned table, since if scrolling is active, the table's",
                    "5144": "\t\t// real header and footer are contained in different table tags",
                    "5145": "\t\ttmpTable",
                    "5146": "\t\t\t.append( $(settings.nTHead).clone() )",
                    "5147": "\t\t\t.append( $(settings.nTFoot).clone() );",
                    "5149": "\t\t// Remove any assigned widths from the footer (from scrolling)",
                    "5150": "\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');",
                    "5151": "",
                    "5152": "\t\t// Apply custom sizing to the cloned header",
                    "5153": "\t\ttmpTable.find('thead th, thead td').each( function () {",
                    "5154": "\t\t\t// Get the `width` from the header layout",
                    "5155": "\t\t\tvar width = _fnColumnsSumWidth( settings, this, true, false );",
                    "5156": "",
                    "5157": "\t\t\tif ( width ) {",
                    "5158": "\t\t\t\tthis.style.width = width;",
                    "5163": "\t\t\t\tif ( scrollX ) {",
                    "5164": "\t\t\t\t\t$( this ).append( $('<div/>').css( {",
                    "5165": "\t\t\t\t\t\twidth: width,",
                    "5173": "\t\t\telse {",
                    "5174": "\t\t\t\tthis.style.width = '';",
                    "5176": "\t\t} );",
                    "5178": "\t\t// Find the widest piece of data for each column and put it into the table",
                    "5179": "\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {",
                    "5180": "\t\t\tcolumnIdx = visibleColumns[i];",
                    "5181": "\t\t\tcolumn = columns[ columnIdx ];",
                    "5182": "",
                    "5183": "\t\t\tvar longest = _fnGetMaxLenString(settings, columnIdx);",
                    "5184": "\t\t\tvar autoClass = _ext.type.className[column.sType];",
                    "5185": "\t\t\tvar text = longest + column.sContentPadding;",
                    "5186": "\t\t\tvar insert = longest.indexOf('<') === -1",
                    "5187": "\t\t\t\t? document.createTextNode(text)",
                    "5188": "\t\t\t\t: text",
                    "5189": "",
                    "5190": "\t\t\t$('<td/>')",
                    "5191": "\t\t\t\t.addClass(autoClass)",
                    "5192": "\t\t\t\t.addClass(column.sClass)",
                    "5193": "\t\t\t\t.append(insert)",
                    "5194": "\t\t\t\t.appendTo(tr);",
                    "5195": "\t\t}",
                    "5196": "",
                    "5197": "\t\t// Tidy the temporary table - remove name attributes so there aren't",
                    "5198": "\t\t// duplicated in the dom (radio elements for example)",
                    "5199": "\t\t$('[name]', tmpTable).removeAttr('name');",
                    "5200": "",
                    "5201": "\t\t// Table has been built, attach to the document so we can work with it.",
                    "5202": "\t\t// A holding element is used, positioned at the top of the container",
                    "5203": "\t\t// with minimal height, so it has no effect on if the container scrolls",
                    "5204": "\t\t// or not. Otherwise it might trigger scrolling when it actually isn't",
                    "5205": "\t\t// needed",
                    "5206": "\t\tvar holder = $('<div/>').css( scrollX || scrollY ?",
                    "5207": "\t\t\t\t{",
                    "5208": "\t\t\t\t\tposition: 'absolute',",
                    "5209": "\t\t\t\t\ttop: 0,",
                    "5210": "\t\t\t\t\tleft: 0,",
                    "5211": "\t\t\t\t\theight: 1,",
                    "5212": "\t\t\t\t\tright: 0,",
                    "5213": "\t\t\t\t\toverflow: 'hidden'",
                    "5214": "\t\t\t\t} :",
                    "5215": "\t\t\t\t{}",
                    "5216": "\t\t\t)",
                    "5217": "\t\t\t.append( tmpTable )",
                    "5218": "\t\t\t.appendTo( tableContainer );",
                    "5219": "",
                    "5220": "\t\t// When scrolling (X or Y) we want to set the width of the table as",
                    "5221": "\t\t// appropriate. However, when not scrolling leave the table width as it",
                    "5222": "\t\t// is. This results in slightly different, but I think correct behaviour",
                    "5223": "\t\tif ( scrollX && scrollXInner ) {",
                    "5224": "\t\t\ttmpTable.width( scrollXInner );",
                    "5225": "\t\t}",
                    "5226": "\t\telse if ( scrollX ) {",
                    "5227": "\t\t\ttmpTable.css( 'width', 'auto' );",
                    "5228": "\t\t\ttmpTable.removeAttr('width');",
                    "5229": "",
                    "5230": "\t\t\t// If there is no width attribute or style, then allow the table to",
                    "5231": "\t\t\t// collapse",
                    "5232": "\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {",
                    "5235": "\t\t}",
                    "5236": "\t\telse if ( scrollY ) {",
                    "5237": "\t\t\ttmpTable.width( tableContainer.clientWidth );",
                    "5238": "\t\t}",
                    "5239": "\t\telse if ( tableWidthAttr ) {",
                    "5240": "\t\t\ttmpTable.width( tableWidthAttr );",
                    "5241": "\t\t}",
                    "5243": "\t\t// Get the width of each column in the constructed table",
                    "5244": "\t\tvar total = 0;",
                    "5245": "\t\tvar bodyCells = tmpTable.find('tbody tr').eq(0).children();",
                    "5247": "\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {",
                    "5248": "\t\t\t// Use getBounding for sub-pixel accuracy, which we then want to round up!",
                    "5249": "\t\t\tvar bounding = bodyCells[i].getBoundingClientRect().width;",
                    "5251": "\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth",
                    "5252": "\t\t\t// of the table might not equal the total given here",
                    "5253": "\t\t\ttotal += bounding;",
                    "5255": "\t\t\t// Width for each column to use",
                    "5256": "\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding );",
                    "5257": "\t\t}",
                    "5259": "\t\ttable.style.width = _fnStringToCss( total );",
                    "5261": "\t\t// Finished with the table - ditch it",
                    "5262": "\t\tholder.remove();",
                    "5272": "\t\tif ( (tableWidthAttr || scrollX) && ! settings._reszEvt ) {",
                    "5274": "\t\t\t\t$(window).on('resize.DT-'+settings.sInstance, DataTable.util.throttle( function () {",
                    "5275": "\t\t\t\t\tif (! settings.bDestroying) {",
                    "5276": "\t\t\t\t\t\t_fnAdjustColumnSizing( settings );",
                    "5277": "\t\t\t\t\t}",
                    "5281": "\t\t\tbindResize();",
                    "5283": "\t\t\tsettings._reszEvt = true;",
                    "5292": "\t *  @returns {string} string of the max length",
                    "5297": "\t\tvar column = settings.aoColumns[colIdx];",
                    "5299": "\t\tif (! column.maxLenString) {",
                    "5300": "\t\t\tvar s, max='', maxLen = -1;",
                    "5301": "",
                    "5302": "\t\t\tfor ( var i=0, ien=settings.aiDisplayMaster.length ; i<ien ; i++ ) {",
                    "5303": "\t\t\t\tvar rowIdx = settings.aiDisplayMaster[i];",
                    "5304": "\t\t\t\tvar data = _fnGetRowDisplay(settings, rowIdx)[colIdx];",
                    "5305": "",
                    "5306": "\t\t\t\tvar cellString = data && typeof data === 'object' && data.nodeType",
                    "5307": "\t\t\t\t\t? data.innerHTML",
                    "5308": "\t\t\t\t\t: data+'';",
                    "5309": "",
                    "5310": "\t\t\t\t// Remove id / name attributes from elements so they",
                    "5311": "\t\t\t\t// don't interfere with existing elements",
                    "5312": "\t\t\t\tcellString = cellString",
                    "5313": "\t\t\t\t\t.replace(/id=\".*?\"/g, '')",
                    "5314": "\t\t\t\t\t.replace(/name=\".*?\"/g, '');",
                    "5315": "",
                    "5316": "\t\t\t\ts = _stripHtml(cellString)",
                    "5317": "\t\t\t\t\t.replace( /&nbsp;/g, ' ' );",
                    "5318": "",
                    "5319": "\t\t\t\tif ( s.length > maxLen ) {",
                    "5320": "\t\t\t\t\t// We want the HTML in the string, but the length that",
                    "5321": "\t\t\t\t\t// is important is the stripped string",
                    "5322": "\t\t\t\t\tmax = cellString;",
                    "5323": "\t\t\t\t\tmaxLen = s.length;",
                    "5324": "\t\t\t\t}",
                    "5326": "",
                    "5327": "\t\t\tcolumn.maxLenString = max;",
                    "5330": "\t\treturn column.maxLenString;",
                    "5351": "",
                    "5352": "\t\t// Check it has a unit character already",
                    "5353": "\t\treturn s.match(/\\d$/) ?",
                    "5354": "\t\t\ts+'px' :",
                    "5355": "\t\t\ts;",
                    "5356": "\t}",
                    "5357": "",
                    "5358": "\t/**",
                    "5359": "\t * Re-insert the `col` elements for current visibility",
                    "5360": "\t *",
                    "5361": "\t * @param {*} settings DT settings",
                    "5362": "\t */",
                    "5363": "\tfunction _colGroup( settings ) {",
                    "5364": "\t\tvar cols = settings.aoColumns;",
                    "5365": "",
                    "5366": "\t\tsettings.colgroup.empty();",
                    "5367": "",
                    "5368": "\t\tfor (i=0 ; i<cols.length ; i++) {",
                    "5369": "\t\t\tif (cols[i].bVisible) {",
                    "5370": "\t\t\t\tsettings.colgroup.append(cols[i].colEl);",
                    "5371": "\t\t\t}",
                    "5372": "\t\t}",
                    "5373": "\t}",
                    "5374": "",
                    "5375": "",
                    "5376": "\tfunction _fnSortInit( settings ) {",
                    "5377": "\t\tvar target = settings.nTHead;",
                    "5378": "\t\tvar headerRows = target.querySelectorAll('tr');",
                    "5379": "\t\tvar legacyTop = settings.bSortCellsTop;",
                    "5380": "\t\tvar notSelector = ':not([data-dt-order=\"disable\"]):not([data-dt-order=\"icon-only\"])';",
                    "5381": "",
                    "5382": "\t\t// Legacy support for `orderCellsTop`",
                    "5383": "\t\tif (legacyTop === true) {",
                    "5384": "\t\t\ttarget = headerRows[0];",
                    "5385": "\t\t}",
                    "5386": "\t\telse if (legacyTop === false) {",
                    "5387": "\t\t\ttarget = headerRows[ headerRows.length - 1 ];",
                    "5388": "\t\t}",
                    "5389": "",
                    "5390": "\t\t_fnSortAttachListener(",
                    "5391": "\t\t\tsettings,",
                    "5392": "\t\t\ttarget,",
                    "5393": "\t\t\ttarget === settings.nTHead",
                    "5394": "\t\t\t\t? 'tr'+notSelector+' th'+notSelector+', tr'+notSelector+' td'+notSelector",
                    "5395": "\t\t\t\t: 'th'+notSelector+', td'+notSelector",
                    "5396": "\t\t);",
                    "5397": "",
                    "5398": "\t\t// Need to resolve the user input array into our internal structure",
                    "5399": "\t\tvar order = [];",
                    "5400": "\t\t_fnSortResolve( settings, order, settings.aaSorting );",
                    "5401": "",
                    "5402": "\t\tsettings.aaSorting = order;",
                    "5403": "\t}",
                    "5404": "",
                    "5405": "",
                    "5406": "\tfunction _fnSortAttachListener(settings, node, selector, column, callback) {",
                    "5407": "\t\t_fnBindAction( node, selector, function (e) {",
                    "5408": "\t\t\tvar columns = column === undefined",
                    "5409": "\t\t\t\t? _fnColumnsFromHeader( e.target )",
                    "5410": "\t\t\t\t: [column];",
                    "5411": "",
                    "5412": "\t\t\tif ( columns.length ) {",
                    "5413": "\t\t\t\t_fnProcessingDisplay( settings, true );",
                    "5414": "",
                    "5415": "\t\t\t\t// Allow the processing display to show",
                    "5416": "\t\t\t\tsetTimeout( function () {",
                    "5417": "\t\t\t\t\tfor ( var i=0, ien=columns.length ; i<ien ; i++ ) {",
                    "5418": "\t\t\t\t\t\tvar append = e.shiftKey || i > 0;",
                    "5419": "",
                    "5420": "\t\t\t\t\t\t_fnSortAdd( settings, columns[i], append );",
                    "5421": "\t\t\t\t\t}",
                    "5422": "",
                    "5423": "\t\t\t\t\t_fnSort( settings );",
                    "5424": "\t\t\t\t\t_fnSortDisplay( settings );",
                    "5425": "\t\t\t\t\t_fnReDraw( settings, false, false );",
                    "5426": "\t\t\t\t\t_fnProcessingDisplay( settings, false );",
                    "5427": "",
                    "5428": "\t\t\t\t\tif (callback) {",
                    "5429": "\t\t\t\t\t\tcallback();",
                    "5430": "\t\t\t\t\t}",
                    "5431": "\t\t\t\t}, 0);",
                    "5432": "\t\t\t}",
                    "5433": "\t\t} );",
                    "5434": "\t}",
                    "5435": "",
                    "5436": "\t/**",
                    "5437": "\t * Sort the display array to match the master's order",
                    "5438": "\t * @param {*} settings",
                    "5439": "\t */",
                    "5440": "\tfunction _fnSortDisplay(settings) {",
                    "5441": "\t\tvar display = settings.aiDisplay;",
                    "5442": "\t\tvar master = settings.aiDisplayMaster;",
                    "5443": "",
                    "5444": "\t\tdisplay.sort(function(a, b){",
                    "5445": "\t\t\treturn master.indexOf(a) - master.indexOf(b);",
                    "5446": "\t\t});",
                    "5447": "\t}",
                    "5448": "",
                    "5449": "",
                    "5450": "\tfunction _fnSortResolve (settings, nestedSort, sort) {",
                    "5451": "\t\tvar push = function ( a ) {",
                    "5452": "\t\t\tif ($.isPlainObject(a)) {",
                    "5453": "\t\t\t\tif (a.idx !== undefined) {",
                    "5454": "\t\t\t\t\t// Index based ordering",
                    "5455": "\t\t\t\t\tnestedSort.push([a.idx, a.dir]);",
                    "5456": "\t\t\t\t}",
                    "5457": "\t\t\t\telse if (a.name) {",
                    "5458": "\t\t\t\t\t// Name based ordering",
                    "5459": "\t\t\t\t\tvar cols = _pluck( settings.aoColumns, 'sName');",
                    "5460": "\t\t\t\t\tvar idx = cols.indexOf(a.name);",
                    "5461": "",
                    "5462": "\t\t\t\t\tif (idx !== -1) {",
                    "5463": "\t\t\t\t\t\tnestedSort.push([idx, a.dir]);",
                    "5464": "\t\t\t\t\t}",
                    "5465": "\t\t\t\t}",
                    "5466": "\t\t\t}",
                    "5467": "\t\t\telse {",
                    "5468": "\t\t\t\t// Plain column index and direction pair",
                    "5469": "\t\t\t\tnestedSort.push(a);",
                    "5470": "\t\t\t}",
                    "5471": "\t\t};",
                    "5472": "",
                    "5473": "\t\tif ( $.isPlainObject(sort) ) {",
                    "5474": "\t\t\t// Object",
                    "5475": "\t\t\tpush(sort);",
                    "5476": "\t\t}",
                    "5477": "\t\telse if ( sort.length && typeof sort[0] === 'number' ) {",
                    "5478": "\t\t\t// 1D array",
                    "5479": "\t\t\tpush(sort);",
                    "5480": "\t\t}",
                    "5481": "\t\telse if ( sort.length ) {",
                    "5482": "\t\t\t// 2D array",
                    "5483": "\t\t\tfor (var z=0; z<sort.length; z++) {",
                    "5484": "\t\t\t\tpush(sort[z]); // Object or array",
                    "5485": "\t\t\t}",
                    "5486": "\t\t}",
                    "5493": "\t\t\ti, k, kLen,",
                    "5495": "\t\t\textSort = DataTable.ext.type.order,",
                    "5500": "\t\t\tnestedSort = [];",
                    "5501": "",
                    "5502": "\t\tif ( ! settings.oFeatures.bSort ) {",
                    "5503": "\t\t\treturn aSort;",
                    "5504": "\t\t}",
                    "5509": "\t\t\t_fnSortResolve( settings, nestedSort, fixed );",
                    "5513": "\t\t\t_fnSortResolve( settings, nestedSort, fixed.pre );",
                    "5516": "\t\t_fnSortResolve( settings, nestedSort, settings.aaSorting );",
                    "5519": "\t\t\t_fnSortResolve( settings, nestedSort, fixed.post );",
                    "5526": "\t\t\tif ( aoColumns[ srcCol ] ) {",
                    "5527": "\t\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;",
                    "5529": "\t\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )",
                    "5530": "\t\t\t\t{",
                    "5531": "\t\t\t\t\tiCol = aDataSort[k];",
                    "5532": "\t\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';",
                    "5534": "\t\t\t\t\tif ( nestedSort[i]._idx === undefined ) {",
                    "5535": "\t\t\t\t\t\tnestedSort[i]._idx = aoColumns[iCol].asSorting.indexOf(nestedSort[i][1]);",
                    "5536": "\t\t\t\t\t}",
                    "5537": "",
                    "5538": "\t\t\t\t\tif ( nestedSort[i][1] ) {",
                    "5539": "\t\t\t\t\t\taSort.push( {",
                    "5540": "\t\t\t\t\t\t\tsrc:       srcCol,",
                    "5541": "\t\t\t\t\t\t\tcol:       iCol,",
                    "5542": "\t\t\t\t\t\t\tdir:       nestedSort[i][1],",
                    "5543": "\t\t\t\t\t\t\tindex:     nestedSort[i]._idx,",
                    "5544": "\t\t\t\t\t\t\ttype:      sType,",
                    "5545": "\t\t\t\t\t\t\tformatter: extSort[ sType+\"-pre\" ],",
                    "5546": "\t\t\t\t\t\t\tsorter:    extSort[ sType+\"-\"+nestedSort[i][1] ]",
                    "5547": "\t\t\t\t\t\t} );",
                    "5548": "\t\t\t\t\t}",
                    "5549": "\t\t\t\t}",
                    "5561": "\tfunction _fnSort ( oSettings, col, dir )",
                    "5564": "\t\t\ti, ien, iLen,",
                    "5566": "\t\t\textSort = DataTable.ext.type.order,",
                    "5577": "\t\t// Allow a specific column to be sorted, which will _not_ alter the display",
                    "5578": "\t\t// master",
                    "5579": "\t\tif (col !== undefined) {",
                    "5580": "\t\t\tvar srcCol = oSettings.aoColumns[col];",
                    "5581": "\t\t\taSort = [{",
                    "5582": "\t\t\t\tsrc:       col,",
                    "5583": "\t\t\t\tcol:       col,",
                    "5584": "\t\t\t\tdir:       dir,",
                    "5585": "\t\t\t\tindex:     0,",
                    "5586": "\t\t\t\ttype:      srcCol.sType,",
                    "5587": "\t\t\t\tformatter: extSort[ srcCol.sType+\"-pre\" ],",
                    "5588": "\t\t\t\tsorter:    extSort[ srcCol.sType+\"-\"+dir ]",
                    "5589": "\t\t\t}];",
                    "5590": "\t\t\tdisplayMaster = displayMaster.slice();",
                    "5591": "\t\t}",
                    "5592": "\t\telse {",
                    "5593": "\t\t\taSort = _fnSortFlatten( oSettings );",
                    "5594": "\t\t}",
                    "5606": "\t\t\t// Reset the initial positions on each pass so we get a stable sort",
                    "5608": "\t\t\t\taiOrig[ i ] = i;",
                    "5609": "\t\t\t}",
                    "5610": "",
                    "5611": "\t\t\t// If the first sort is desc, then reverse the array to preserve original",
                    "5612": "\t\t\t// order, just in reverse",
                    "5613": "\t\t\tif (aSort.length && aSort[0].dir === 'desc') {",
                    "5614": "\t\t\t\taiOrig.reverse();",
                    "5621": "\t\t\t *    var test;",
                    "5622": "\t\t\t *    test = oSort['string-asc']('data11', 'data12');",
                    "5623": "\t\t\t *      if (test !== 0)",
                    "5624": "\t\t\t *        return test;",
                    "5625": "\t\t\t *    test = oSort['numeric-desc']('data21', 'data22');",
                    "5626": "\t\t\t *    if (test !== 0)",
                    "5627": "\t\t\t *      return test;",
                    "5634": "\t\t\tdisplayMaster.sort( function ( a, b ) {",
                    "5635": "\t\t\t\tvar",
                    "5636": "\t\t\t\t\tx, y, k, test, sort,",
                    "5637": "\t\t\t\t\tlen=aSort.length,",
                    "5638": "\t\t\t\t\tdataA = aoData[a]._aSortData,",
                    "5639": "\t\t\t\t\tdataB = aoData[b]._aSortData;",
                    "5641": "\t\t\t\tfor ( k=0 ; k<len ; k++ ) {",
                    "5642": "\t\t\t\t\tsort = aSort[k];",
                    "5644": "\t\t\t\t\t// Data, which may have already been through a `-pre` function",
                    "5645": "\t\t\t\t\tx = dataA[ sort.col ];",
                    "5646": "\t\t\t\t\ty = dataB[ sort.col ];",
                    "5647": "",
                    "5648": "\t\t\t\t\tif (sort.sorter) {",
                    "5649": "\t\t\t\t\t\t// If there is a custom sorter (`-asc` or `-desc`) for this",
                    "5650": "\t\t\t\t\t\t// data type, use it",
                    "5651": "\t\t\t\t\t\ttest = sort.sorter(x, y);",
                    "5654": "\t\t\t\t\t\t\treturn test;",
                    "5657": "\t\t\t\t\telse {",
                    "5658": "\t\t\t\t\t\t// Otherwise, use generic sorting",
                    "5659": "\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;",
                    "5662": "\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;",
                    "5665": "\t\t\t\t}",
                    "5667": "\t\t\t\tx = aiOrig[a];",
                    "5668": "\t\t\t\ty = aiOrig[b];",
                    "5670": "\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;",
                    "5671": "\t\t\t} );",
                    "5672": "\t\t}",
                    "5673": "\t\telse if ( aSort.length === 0 ) {",
                    "5674": "\t\t\t// Apply index order",
                    "5675": "\t\t\tdisplayMaster.sort(function (x, y) {",
                    "5676": "\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;",
                    "5677": "\t\t\t});",
                    "5678": "\t\t}",
                    "5680": "\t\tif (col === undefined) {",
                    "5681": "\t\t\t// Tell the draw function that we have sorted the data",
                    "5682": "\t\t\toSettings.bSorted = true;",
                    "5684": "\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort] );",
                    "5686": "",
                    "5687": "\t\treturn displayMaster;",
                    "5701": "\tfunction _fnSortAdd ( settings, colIdx, append )",
                    "5710": "\t\t\t\tidx = asSorting.indexOf(a[1]);",
                    "5720": "\t\tif ( ! col.bSortable ) {",
                    "5721": "\t\t\treturn;",
                    "5722": "\t\t}",
                    "5723": "",
                    "5732": "\t\t\tvar sortIdx = _pluck(sorting, '0').indexOf(colIdx);",
                    "5782": "\t\tvar sortClass = settings.oClasses.order.position;",
                    "5812": "\tfunction _fnSortData( settings, colIdx )",
                    "5815": "\t\tvar column = settings.aoColumns[ colIdx ];",
                    "5820": "\t\t\tcustomData = customSort.call( settings.oInstance, settings, colIdx,",
                    "5821": "\t\t\t\t_fnColumnIndexToVisible( settings, colIdx )",
                    "5828": "\t\tvar data = settings.aoData;",
                    "5829": "",
                    "5830": "\t\tfor ( var rowIdx=0 ; rowIdx<data.length ; rowIdx++ ) {",
                    "5831": "\t\t\t// Sparse array",
                    "5832": "\t\t\tif (! data[rowIdx]) {",
                    "5833": "\t\t\t\tcontinue;",
                    "5834": "\t\t\t}",
                    "5836": "\t\t\trow = data[rowIdx];",
                    "5842": "\t\t\tif ( ! row._aSortData[colIdx] || customSort ) {",
                    "5844": "\t\t\t\t\tcustomData[rowIdx] : // If there was a custom sort function, use data from there",
                    "5845": "\t\t\t\t\t_fnGetCellData( settings, rowIdx, colIdx, 'sort' );",
                    "5847": "\t\t\t\trow._aSortData[ colIdx ] = formatter ?",
                    "5848": "\t\t\t\t\tformatter( cellData, settings ) :",
                    "5856": "\t * State information for a table",
                    "5857": "\t *",
                    "5858": "\t * @param {*} settings",
                    "5859": "\t * @returns State object",
                    "5873": "\t\t\tsearch:  $.extend({}, settings.oPreviousSearch),",
                    "5874": "\t\t\tcolumns: settings.aoColumns.map( function ( col, i ) {",
                    "5877": "\t\t\t\t\tsearch: $.extend({}, settings.aoPreSearchCols[i])",
                    "5899": "\tfunction _fnLoadState ( settings, init, callback )",
                    "5935": "\t\t// Reject old data",
                    "5936": "\t\tvar duration = settings.iStateDuration;",
                    "5937": "\t\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {",
                    "5943": "\t\t// Allow custom and plug-in manipulation functions to alter the saved data set and",
                    "5944": "\t\t// cancelling of loading by returning false",
                    "5945": "\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );",
                    "5946": "\t\tif ( abStateLoad.indexOf(false) !== -1 ) {",
                    "5962": "\t\t// This is needed for ColReorder, which has to happen first to allow all",
                    "5963": "\t\t// the stored indexes to be usable. It is not publicly documented.",
                    "5964": "\t\t_fnCallbackFire( settings, null, 'stateLoadInit', [settings, s], true );",
                    "5965": "",
                    "6002": "\t\t\t$.extend( settings.oPreviousSearch, s.search );",
                    "6024": "\t\t\t\t\t$.extend( settings.aoPreSearchCols[i], col.search );",
                    "6054": "\t\t\t'https://datatables.net/tn/'+tn;",
                    "6063": "\t\t\t\t_fnCallbackFire( settings, null, 'dt-error', [ settings, tn, msg ], true );",
                    "6137": "\t\t\tif ( Object.prototype.hasOwnProperty.call(extender, prop) ) {",
                    "6164": "\t *  @param {object|string} selector Selector (for delegated events) or data object",
                    "6165": "\t *   to pass to the triggered function",
                    "6169": "\tfunction _fnBindAction( n, selector, fn )",
                    "6172": "\t\t\t.on( 'click.DT', selector, function (e) {",
                    "6173": "\t\t\t\tfn(e);",
                    "6174": "\t\t\t} )",
                    "6175": "\t\t\t.on( 'keypress.DT', selector, function (e){",
                    "6176": "\t\t\t\tif ( e.which === 13 ) {",
                    "6177": "\t\t\t\t\te.preventDefault();",
                    "6179": "\t\t\t\t}",
                    "6180": "\t\t\t} )",
                    "6181": "\t\t\t.on( 'selectstart.DT', selector, function () {",
                    "6182": "\t\t\t\t// Don't want a double click resulting in text selection",
                    "6183": "\t\t\t\treturn false;",
                    "6184": "\t\t\t} );",
                    "6191": "\t *  @param {object} settings dataTables settings object",
                    "6192": "\t *  @param {string} store Name of the array storage for the callbacks in oSettings",
                    "6196": "\tfunction _fnCallbackReg( settings, store, fn )",
                    "6198": "\t\tif ( fn ) {",
                    "6199": "\t\t\tsettings[store].push(fn);",
                    "6216": "\t *  @param {boolean} [bubbles] True if the event should bubble",
                    "6219": "\tfunction _fnCallbackFire( settings, callbackArr, eventName, args, bubbles )",
                    "6224": "\t\t\tret = settings[callbackArr].slice().reverse().map( function (val) {",
                    "6225": "\t\t\t\treturn val.apply( settings.oInstance, args );",
                    "6229": "\t\tif ( eventName !== null) {",
                    "6232": "",
                    "6233": "\t\t\t// Expose the DataTables API on the event object for easy access",
                    "6234": "\t\t\te.dt = settings.api;",
                    "6236": "\t\t\ttable[bubbles ?  'trigger' : 'triggerHandler']( e, args );",
                    "6240": "\t\t\tif (bubbles && table.parents('body').length === 0) {",
                    "6310": "\t\telse if ( settings.ajax ) {",
                    "6316": "\t/**",
                    "6317": "\t * Common replacement for language strings",
                    "6318": "\t *",
                    "6319": "\t * @param {*} settings DT settings object",
                    "6320": "\t * @param {*} str String with values to replace",
                    "6321": "\t * @param {*} entries Plural number for _ENTRIES_ - can be undefined",
                    "6322": "\t * @returns String",
                    "6323": "\t */",
                    "6324": "\tfunction _fnMacros ( settings, str, entries )",
                    "6325": "\t{",
                    "6326": "\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is",
                    "6327": "\t\t// used only internally",
                    "6328": "\t\tvar",
                    "6329": "\t\t\tformatter  = settings.fnFormatNumber,",
                    "6330": "\t\t\tstart      = settings._iDisplayStart+1,",
                    "6331": "\t\t\tlen        = settings._iDisplayLength,",
                    "6332": "\t\t\tvis        = settings.fnRecordsDisplay(),",
                    "6333": "\t\t\tmax        = settings.fnRecordsTotal(),",
                    "6334": "\t\t\tall        = len === -1;",
                    "6335": "",
                    "6336": "\t\treturn str.",
                    "6337": "\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).",
                    "6338": "\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).",
                    "6339": "\t\t\treplace(/_MAX_/g,   formatter.call( settings, max ) ).",
                    "6340": "\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).",
                    "6341": "\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).",
                    "6342": "\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) ).",
                    "6343": "\t\t\treplace(/_ENTRIES_/g, settings.api.i18n('entries', '', entries) ).",
                    "6344": "\t\t\treplace(/_ENTRIES-MAX_/g, settings.api.i18n('entries', '', max) ).",
                    "6345": "\t\t\treplace(/_ENTRIES-TOTAL_/g, settings.api.i18n('entries', '', vis) );",
                    "6346": "\t}",
                    "6422": "\t\tvar tables = _pluck(settings, 'nTable');",
                    "6427": "\t\telse if ( mixed.nTable && mixed.oFeatures ) {",
                    "6433": "\t\t\tidx = tables.indexOf(mixed);",
                    "6441": "\t\t\tjq = $(mixed).get();",
                    "6445": "\t\t\tjq = mixed.get();",
                    "6449": "\t\t\treturn settings.filter(function (v, idx) {",
                    "6450": "\t\t\t\treturn jq.includes(tables[idx]);",
                    "6451": "\t\t\t});",
                    "6508": "\t *   var api = new DataTable.Api( 'table.dataTable' );",
                    "6534": "\t\tthis.context = settings.length > 1",
                    "6535": "\t\t\t? _unique( settings )",
                    "6536": "\t\t\t: settings;",
                    "6540": "\t\t\tthis.push.apply(this, data);",
                    "6590": "\t\t\tvar a = __arrayProto.filter.call( this, fn, this );",
                    "6598": "",
                    "6602": "\t\tget: function ( idx )",
                    "6603": "\t\t{",
                    "6604": "\t\t\treturn this[ idx ];",
                    "6605": "\t\t},",
                    "6609": "\t\tincludes: function ( find ) {",
                    "6610": "\t\t\treturn this.indexOf( find ) === -1 ? false : true;",
                    "6613": "\t\tindexOf: __arrayProto.indexOf,",
                    "6614": "",
                    "6649": "\t\t\t\telse if ( type === 'every' || type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {",
                    "6686": "\t\tlastIndexOf: __arrayProto.lastIndexOf,",
                    "6692": "\t\t\tvar a = __arrayProto.map.call( this, fn, this );",
                    "6710": "\t\treduce: __arrayProto.reduce,",
                    "6712": "\t\treduceRight: __arrayProto.reduceRight,",
                    "6725": "\t\tsort:    __arrayProto.sort,",
                    "6746": "\t\t\treturn new _Api( this.context, _unique(this.toArray()) );",
                    "6753": "\tfunction _api_scope( scope, fn, struc ) {",
                    "6754": "\t\treturn function () {",
                    "6755": "\t\t\tvar ret = fn.apply( scope || this, arguments );",
                    "6756": "",
                    "6757": "\t\t\t// Method extension",
                    "6758": "\t\t\t_Api.extend( ret, ret, struc.methodExt );",
                    "6759": "\t\t\treturn ret;",
                    "6760": "\t\t};",
                    "6761": "\t}",
                    "6762": "",
                    "6763": "\tfunction _api_find( src, name ) {",
                    "6764": "\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {",
                    "6765": "\t\t\tif ( src[i].name === name ) {",
                    "6766": "\t\t\t\treturn src[i];",
                    "6767": "\t\t\t}",
                    "6768": "\t\t}",
                    "6769": "\t\treturn null;",
                    "6770": "\t}",
                    "6771": "",
                    "6772": "\twindow.__apiStruct = __apiStruct;",
                    "6773": "",
                    "6783": "\t\t\tstruct;",
                    "6790": "\t\t\t\t_api_scope( scope, struct.val, struct ) :",
                    "6825": "",
                    "6847": "\t\t\tvar src = _api_find( struct, key );",
                    "6913": "\t\t\tvar result = [];",
                    "6914": "",
                    "6915": "\t\t\tselector.forEach(function (sel) {",
                    "6916": "\t\t\t\tvar inner = __table_selector(sel, a);",
                    "6917": "",
                    "6918": "\t\t\t\tresult.push.apply(result, inner);",
                    "6919": "\t\t\t});",
                    "6920": "",
                    "6921": "\t\t\treturn result.filter( function (item) {",
                    "6922": "\t\t\t\treturn item;",
                    "6923": "\t\t\t});",
                    "6932": "\t\tvar nodes = a.map( function (el) {",
                    "6938": "\t\t\t.map( function () {",
                    "6940": "\t\t\t\tvar idx = nodes.indexOf(this);",
                    "6977": "\t// Common methods, combined to reduce size",
                    "6978": "\t[",
                    "6979": "\t\t['nodes', 'node', 'nTable'],",
                    "6980": "\t\t['body', 'body', 'nTBody'],",
                    "6981": "\t\t['header', 'header', 'nTHead'],",
                    "6982": "\t\t['footer', 'footer', 'nTFoot'],",
                    "6983": "\t].forEach(function (item) {",
                    "6984": "\t\t_api_registerPlural(",
                    "6985": "\t\t\t'tables().' + item[0] + '()',",
                    "6986": "\t\t\t'table().' + item[1] + '()' ,",
                    "6987": "\t\t\tfunction () {",
                    "6988": "\t\t\t\treturn this.iterator( 'table', function ( ctx ) {",
                    "6989": "\t\t\t\t\treturn ctx[item[2]];",
                    "6990": "\t\t\t\t}, 1 );",
                    "6991": "\t\t\t}",
                    "6992": "\t\t);",
                    "6993": "\t});",
                    "6994": "",
                    "6995": "\t// Structure methods",
                    "6996": "\t[",
                    "6997": "\t\t['header', 'aoHeader'],",
                    "6998": "\t\t['footer', 'aoFooter'],",
                    "6999": "\t].forEach(function (item) {",
                    "7000": "\t\t_api_register( 'table().' + item[0] + '.structure()' , function (selector) {",
                    "7001": "\t\t\tvar indexes = this.columns(selector).indexes().flatten();",
                    "7002": "\t\t\tvar ctx = this.context[0];",
                    "7003": "",
                    "7004": "\t\t\treturn _fnHeaderLayout(ctx, ctx[item[1]], indexes);",
                    "7005": "\t\t} );",
                    "7006": "\t})",
                    "7007": "",
                    "7009": "\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {",
                    "7011": "\t\t\treturn ctx.nTableWrapper;",
                    "7015": "\t_api_register( 'tables().every()', function ( fn ) {",
                    "7016": "\t\tvar that = this;",
                    "7018": "\t\treturn this.iterator('table', function (s, i) {",
                    "7019": "\t\t\tfn.call(that.table(i), i);",
                    "7020": "\t\t});",
                    "7021": "\t});",
                    "7023": "\t_api_register( 'caption()', function ( value, side ) {",
                    "7024": "\t\tvar context = this.context;",
                    "7026": "\t\t// Getter - return existing node's content",
                    "7027": "\t\tif ( value === undefined ) {",
                    "7028": "\t\t\tvar caption = context[0].captionNode;",
                    "7030": "\t\t\treturn caption && context.length ?",
                    "7031": "\t\t\t\tcaption.innerHTML :",
                    "7032": "\t\t\t\tnull;",
                    "7033": "\t\t}",
                    "7036": "\t\t\tvar table = $(ctx.nTable);",
                    "7037": "\t\t\tvar caption = $(ctx.captionNode);",
                    "7038": "\t\t\tvar container = $(ctx.nTableWrapper);",
                    "7040": "\t\t\t// Create the node if it doesn't exist yet",
                    "7041": "\t\t\tif ( ! caption.length ) {",
                    "7042": "\t\t\t\tcaption = $('<caption/>').html( value );",
                    "7043": "\t\t\t\tctx.captionNode = caption[0];",
                    "7045": "\t\t\t\t// If side isn't set, we need to insert into the document to let the",
                    "7046": "\t\t\t\t// CSS decide so we can read it back, otherwise there is no way to",
                    "7047": "\t\t\t\t// know if the CSS would put it top or bottom for scrolling",
                    "7048": "\t\t\t\tif (! side) {",
                    "7049": "\t\t\t\t\ttable.prepend(caption);",
                    "7050": "",
                    "7051": "\t\t\t\t\tside = caption.css('caption-side');",
                    "7052": "\t\t\t\t}",
                    "7053": "\t\t\t}",
                    "7054": "",
                    "7055": "\t\t\tcaption.html( value );",
                    "7056": "",
                    "7057": "\t\t\tif ( side ) {",
                    "7058": "\t\t\t\tcaption.css( 'caption-side', side );",
                    "7059": "\t\t\t\tcaption[0]._captionSide = side;",
                    "7060": "\t\t\t}",
                    "7061": "",
                    "7062": "\t\t\tif (container.find('div.dataTables_scroll').length) {",
                    "7063": "\t\t\t\tvar selector = (side === 'top' ? 'Head' : 'Foot');",
                    "7064": "",
                    "7065": "\t\t\t\tcontainer.find('div.dataTables_scroll'+ selector +' table').prepend(caption);",
                    "7066": "\t\t\t}",
                    "7067": "\t\t\telse {",
                    "7068": "\t\t\t\ttable.prepend(caption);",
                    "7069": "\t\t\t}",
                    "7073": "\t_api_register( 'caption.node()', function () {",
                    "7074": "\t\tvar ctx = this.context;",
                    "7075": "",
                    "7076": "\t\treturn ctx.length ? ctx[0].captionNode : null;",
                    "7077": "\t} );",
                    "7151": "\t_api_register( 'page.info()', function () {",
                    "7228": "\t\t\t_fnBuildAjax( settings, {}, function( json ) {",
                    "7237": "\t\t\t\t_fnInitComplete( settings );",
                    "7314": "\t\t\treturn $.isPlainObject( ctx.ajax ) ?",
                    "7315": "\t\t\t\tctx.ajax.url :",
                    "7316": "\t\t\t\tctx.ajax;",
                    "7366": "\t\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[[(:]/) ?",
                    "7373": "\t\t\t\t// Remove empty items",
                    "7374": "\t\t\t\tres = res.filter( function (item) {",
                    "7375": "\t\t\t\t\treturn item !== null && item !== undefined;",
                    "7376": "\t\t\t\t});",
                    "7377": "",
                    "7416": "\t// Reduce the API instance to the first item found",
                    "7417": "\tvar _selector_first = function ( old )",
                    "7419": "\t\tlet inst = new _Api(old.context[0]);",
                    "7421": "\t\t// Use a push rather than passing to the constructor, since it will",
                    "7422": "\t\t// merge arrays down automatically, which isn't what is wanted here",
                    "7423": "\t\tif (old.length) {",
                    "7424": "\t\t\tinst.push( old[0] );",
                    "7425": "\t\t}",
                    "7426": "",
                    "7427": "\t\tinst.selector = old.selector;",
                    "7428": "",
                    "7429": "\t\t// Limit to a single row / column / cell",
                    "7430": "\t\tif (inst.length && inst[0].length > 1) {",
                    "7431": "\t\t\tinst[0].splice(1);",
                    "7478": "\t\t\t\tfor ( i=0, ien=displayFiltered.length ; i<ien ; i++ ) {",
                    "7482": "\t\t\t\tdisplayMaster.forEach(function (item) {",
                    "7483": "\t\t\t\t\tif (! Object.prototype.hasOwnProperty.call(displayFilteredMap, item)) {",
                    "7484": "\t\t\t\t\t\ta.push(item);",
                    "7485": "\t\t\t\t\t}",
                    "7486": "\t\t\t\t});",
                    "7491": "\t\t\t\tif (! settings.aoData[i]) {",
                    "7492": "\t\t\t\t\tcontinue;",
                    "7493": "\t\t\t\t}",
                    "7494": "",
                    "7499": "\t\t\t\t\ttmp = displayFiltered.indexOf(i);",
                    "7509": "\t\telse if ( typeof order === 'number' ) {",
                    "7510": "\t\t\t// Order the rows by the given column",
                    "7511": "\t\t\tvar ordered = _fnSort(settings, order, 'asc');",
                    "7512": "",
                    "7513": "\t\t\tif (search === 'none') {",
                    "7514": "\t\t\t\ta = ordered;",
                    "7515": "\t\t\t}",
                    "7516": "\t\t\telse { // applied | removed",
                    "7517": "\t\t\t\tfor (i=0; i<ordered.length; i++) {",
                    "7518": "\t\t\t\t\ttmp = displayFiltered.indexOf(ordered[i]);",
                    "7519": "",
                    "7520": "\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||",
                    "7521": "\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )",
                    "7522": "\t\t\t\t\t{",
                    "7523": "\t\t\t\t\t\ta.push( ordered[i] );",
                    "7524": "\t\t\t\t\t}",
                    "7525": "\t\t\t\t}",
                    "7526": "\t\t\t}",
                    "7527": "\t\t}",
                    "7561": "\t\t\tif ( selInt !== null && rows.indexOf(selInt) !== -1 ) {",
                    "7572": "\t\t\t\treturn rows.map( function (idx) {",
                    "7638": "\t\tvar matched = _selector_run( 'row', selector, run, settings, opts );",
                    "7639": "",
                    "7640": "\t\tif (opts.order === 'current' || opts.order === 'applied') {",
                    "7641": "\t\t\tvar master = settings.aiDisplayMaster;",
                    "7642": "",
                    "7643": "\t\t\tmatched.sort(function(a, b) {",
                    "7644": "\t\t\t\treturn master.indexOf(a) - master.indexOf(b);",
                    "7645": "\t\t\t});",
                    "7646": "\t\t}",
                    "7647": "",
                    "7648": "\t\treturn matched;",
                    "7722": "\t\tthis.iterator( 'row', function ( settings, row ) {",
                    "7726": "\t\t\t// Delete from the display arrays",
                    "7727": "\t\t\tvar idx = settings.aiDisplayMaster.indexOf(row);",
                    "7728": "\t\t\tif (idx !== -1) {",
                    "7729": "\t\t\t\tsettings.aiDisplayMaster.splice(idx, 1);",
                    "7732": "\t\t\tidx = settings.aiDisplay.indexOf(row);",
                    "7733": "\t\t\tif (idx !== -1) {",
                    "7734": "\t\t\t\tsettings.aiDisplay.splice(idx, 1);",
                    "7735": "\t\t\t}",
                    "7751": "\t\t\tdata[row] = null;",
                    "7780": "\t\tmodRows.push.apply(modRows, newRows);",
                    "7802": "\t\t\treturn ctx.length && this.length && this[0].length ?",
                    "7826": "\t\treturn ctx.length && this.length && this[0].length ?",
                    "7854": "\t\tapi.on( 'stateSaveParams.DT', function ( e, settings, d ) {",
                    "7858": "\t\t\tvar rows = settings.aiDisplayMaster;",
                    "7861": "\t\t\tfor (var i=0 ; i<rows.length ; i++) {",
                    "7862": "\t\t\t\tvar rowIdx = rows[i];",
                    "7863": "\t\t\t\tvar data = settings.aoData[rowIdx];",
                    "7864": "",
                    "7865": "\t\t\t\tif (data._detailsShow) {",
                    "7866": "\t\t\t\t\tids.push( '#' + idFn(data._aData) );",
                    "7873": "\t\t// For future state loads (e.g. with StateRestore)",
                    "7874": "\t\tapi.on( 'stateLoaded.DT', function (e, settings, state) {",
                    "7875": "\t\t\t__details_state_load( api, state );",
                    "7878": "\t\t// And the initial load state",
                    "7879": "\t\t__details_state_load( api, api.state.loaded() );",
                    "7880": "\t});",
                    "7882": "\tvar __details_state_load = function (api, state)",
                    "7883": "\t{",
                    "7884": "\t\tif ( state && state.childRows ) {",
                    "7886": "\t\t\t\t.rows( state.childRows.map(function (id){",
                    "7890": "\t\t\t\t\t_fnCallbackFire( api.settings()[0], null, 'requestChild', [ this ] )",
                    "7893": "\t}",
                    "7911": "\t\t\t\tr.setAttribute( 'data-dt-row', row.idx );",
                    "7916": "\t\t\t\tvar created = $('<tr><td></td></tr>')",
                    "7917": "\t\t\t\t\t.attr( 'data-dt-row', row.idx )",
                    "7918": "\t\t\t\t\t.addClass( k );",
                    "7919": "",
                    "7922": "\t\t\t\t\t.html( r )[0].colSpan = _fnVisbleColumns( ctx );",
                    "8027": "\t\t\tapi.on( colvisEvent, function ( e, ctx ) {",
                    "8040": "\t\t\t\t\t\trow._details.each(function () {",
                    "8041": "\t\t\t\t\t\t\tvar el = $(this).children('td');",
                    "8042": "",
                    "8043": "\t\t\t\t\t\t\tif (el.length == 1) {",
                    "8044": "\t\t\t\t\t\t\t\tel.attr('colspan', visible);",
                    "8045": "\t\t\t\t\t\t\t}",
                    "8046": "\t\t\t\t\t\t});",
                    "8104": "\t], function () {         // it returns an object and this method is not executed)",
                    "8154": "\tvar __re_column_selector = /^([^:]+):(name|title|visIdx|visible)$/;",
                    "8159": "\tvar __columnData = function ( settings, column, r1, r2, rows, type ) {",
                    "8162": "\t\t\ta.push( _fnGetCellData( settings, rows[row], column, type ) );",
                    "8173": "\t\t\ttitles = _pluck( columns, 'sTitle' ),",
                    "8174": "\t\t\tcells = DataTable.util.get('[].[].cell')(settings.aoHeader),",
                    "8175": "\t\t\tnodes = _unique( _flatten([], cells) );",
                    "8176": "",
                    "8197": "\t\t\t\treturn columns.map(function (col, idx) {",
                    "8200": "\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows )",
                    "8202": "\t\t\t\t});",
                    "8218": "\t\t\t\t\t\t\tvar visColumns = columns.map( function (col,i) {",
                    "8228": "\t\t\t\t\t\treturn names.map( function (name, i) {",
                    "8232": "\t\t\t\t\tcase 'title':",
                    "8233": "\t\t\t\t\t\t// match by column title",
                    "8234": "\t\t\t\t\t\treturn titles.map( function (title, i) {",
                    "8235": "\t\t\t\t\t\t\treturn title === match[1] ? i : null;",
                    "8236": "\t\t\t\t\t\t} );",
                    "8237": "",
                    "8252": "\t\t\t\t\treturn _fnColumnsFromHeader( this ); // `nodes` is column index complete and in order",
                    "8277": "\t\t\tcells, i, ien, tr;",
                    "8287": "\t\t\treturn false;",
                    "8293": "\t\t\tvar insertBefore = _pluck(cols, 'bVisible').indexOf(true, column+1);",
                    "8296": "\t\t\t\tif (data[i]) {",
                    "8297": "\t\t\t\t\ttr = data[i].nTr;",
                    "8298": "\t\t\t\t\tcells = data[i].anCells;",
                    "8300": "\t\t\t\t\tif ( tr ) {",
                    "8301": "\t\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null",
                    "8302": "\t\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );",
                    "8303": "\t\t\t\t\t}",
                    "8314": "",
                    "8315": "\t\t_colGroup(settings);",
                    "8316": "",
                    "8317": "\t\treturn true;",
                    "8344": "\t_api_registerPlural( 'columns().header()', 'column().header()', function ( row ) {",
                    "8346": "\t\t\tvar header = settings.aoHeader;",
                    "8347": "\t\t\tvar target = row !== undefined",
                    "8348": "\t\t\t\t? row",
                    "8349": "\t\t\t\t: settings.bSortCellsTop // legacy support",
                    "8350": "\t\t\t\t\t? 0",
                    "8351": "\t\t\t\t\t: header.length - 1;",
                    "8352": "",
                    "8353": "\t\t\treturn header[target][column].cell;",
                    "8357": "\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( row ) {",
                    "8359": "\t\t\tvar footer = settings.aoFooter;",
                    "8360": "",
                    "8361": "\t\t\tif (! footer.length) {",
                    "8362": "\t\t\t\treturn null;",
                    "8363": "\t\t\t}",
                    "8364": "",
                    "8365": "\t\t\treturn settings.aoFooter[row !== undefined ? row : 0][column].cell;",
                    "8373": "\t_api_registerPlural( 'columns().render()', 'column().render()', function ( type ) {",
                    "8374": "\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {",
                    "8375": "\t\t\treturn __columnData( settings, column, i, j, rows, type );",
                    "8376": "\t\t}, 1 );",
                    "8377": "\t} );",
                    "8378": "",
                    "8393": "\t_api_registerPlural( 'columns().init()', 'column().init()', function () {",
                    "8394": "\t\treturn this.iterator( 'column', function ( settings, column ) {",
                    "8395": "\t\t\treturn settings.aoColumns[column];",
                    "8396": "\t\t}, 1 );",
                    "8397": "\t} );",
                    "8398": "",
                    "8405": "\t_api_registerPlural( 'columns().titles()', 'column().title()', function (title, row) {",
                    "8406": "\t\treturn this.iterator( 'column', function ( settings, column ) {",
                    "8407": "\t\t\t// Argument shifting",
                    "8408": "\t\t\tif (typeof title === 'number') {",
                    "8409": "\t\t\t\trow = title;",
                    "8410": "\t\t\t\ttitle = undefined;",
                    "8411": "\t\t\t}",
                    "8412": "",
                    "8413": "\t\t\tvar span = $('span.dt-column-title', this.column(column).header(row));",
                    "8414": "",
                    "8415": "\t\t\tif (title !== undefined) {",
                    "8416": "\t\t\t\tspan.html(title);",
                    "8417": "\t\t\t\treturn this;",
                    "8418": "\t\t\t}",
                    "8419": "",
                    "8420": "\t\t\treturn span.html();",
                    "8421": "\t\t}, 1 );",
                    "8422": "\t} );",
                    "8423": "",
                    "8424": "\t_api_registerPlural( 'columns().types()', 'column().type()', function () {",
                    "8425": "\t\treturn this.iterator( 'column', function ( settings, column ) {",
                    "8426": "\t\t\tvar type = settings.aoColumns[column].sType;",
                    "8427": "",
                    "8428": "\t\t\t// If the type was invalidated, then resolve it. This actually does",
                    "8429": "\t\t\t// all columns at the moment. Would only happen once if getting all",
                    "8430": "\t\t\t// column's data types.",
                    "8431": "\t\t\tif (! type) {",
                    "8432": "\t\t\t\t_fnColumnTypes(settings);",
                    "8433": "\t\t\t}",
                    "8434": "",
                    "8435": "\t\t\treturn type;",
                    "8436": "\t\t}, 1 );",
                    "8437": "\t} );",
                    "8438": "",
                    "8441": "\t\tvar changed = [];",
                    "8446": "",
                    "8447": "\t\t\tif (__setColumnVis( settings, column, vis )) {",
                    "8448": "\t\t\t\tchanged.push(column);",
                    "8449": "\t\t\t}",
                    "8469": "\t\t\t\t\tif (changed.includes(column)) {",
                    "8470": "\t\t\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );",
                    "8471": "\t\t\t\t\t}",
                    "8474": "\t\t\t\tif ( changed.length && (calc === undefined || calc) ) {",
                    "8483": "\t_api_registerPlural( 'columns().widths()', 'column().width()', function () {",
                    "8484": "\t\t// Injects a fake row into the table for just a moment so the widths can",
                    "8485": "\t\t// be read, regardless of colspan in the header and rows being present in",
                    "8486": "\t\t// the body",
                    "8487": "\t\tvar columns = this.columns(':visible').count();",
                    "8488": "\t\tvar row = $('<tr>').html('<td>' + Array(columns).join('</td><td>') + '</td>');",
                    "8489": "",
                    "8490": "\t\t$(this.table().body()).append(row);",
                    "8491": "",
                    "8492": "\t\tvar widths = row.children().map(function () {",
                    "8493": "\t\t\treturn $(this).outerWidth();",
                    "8494": "\t\t});",
                    "8495": "",
                    "8496": "\t\trow.remove();",
                    "8497": "",
                    "8498": "\t\treturn this.iterator( 'column', function ( settings, column ) {",
                    "8499": "\t\t\tvar visIdx = _fnColumnIndexToVisible( settings, column );",
                    "8500": "",
                    "8501": "\t\t\treturn visIdx !== null ? widths[visIdx] : 0;",
                    "8502": "\t\t}, 1);",
                    "8503": "\t} );",
                    "8504": "",
                    "8583": "\t\t\t\treturn s.column !== undefined && s.row !== undefined && rows.indexOf(s.row) !== -1 ?",
                    "8595": "\t\t\t\t\t};",
                    "8800": "\t\tvar args = Array.prototype.slice.call( arguments );",
                    "8814": "\t\telse if ( args.length > 1 ) {",
                    "8816": "\t\t\torder = args;",
                    "8821": "\t\t\tsettings.aaSorting = Array.isArray(order) ? order.slice() : order;",
                    "8838": "\t\t\t_fnSortAttachListener(settings, node, {}, column, callback);",
                    "8868": "\t\tif ( ! dir ) {",
                    "8869": "\t\t\treturn this.iterator( 'column', function ( settings, idx ) {",
                    "8870": "\t\t\t\tvar sort = _fnSortFlatten( settings );",
                    "8871": "",
                    "8872": "\t\t\t\tfor ( var i=0, ien=sort.length ; i<ien ; i++ ) {",
                    "8873": "\t\t\t\t\tif ( sort[i].col === idx ) {",
                    "8874": "\t\t\t\t\t\treturn sort[i].dir;",
                    "8875": "\t\t\t\t\t}",
                    "8876": "\t\t\t\t}",
                    "8878": "\t\t\t\treturn null;",
                    "8879": "\t\t\t}, 1 );",
                    "8880": "\t\t}",
                    "8881": "\t\telse {",
                    "8882": "\t\t\treturn this.iterator( 'table', function ( settings, i ) {",
                    "8883": "\t\t\t\tsettings.aaSorting = that[i].map( function (col) {",
                    "8884": "\t\t\t\t\treturn [ col, dir ];",
                    "8885": "\t\t\t\t} );",
                    "8887": "\t\t}",
                    "8888": "\t} );",
                    "8890": "\t_api_registerPlural('columns().orderable()', 'column().orderable()', function ( directions ) {",
                    "8891": "\t\treturn this.iterator( 'column', function ( settings, idx ) {",
                    "8892": "\t\t\tvar col = settings.aoColumns[idx];",
                    "8893": "",
                    "8894": "\t\t\treturn directions ?",
                    "8895": "\t\t\t\tcol.asSorting :",
                    "8896": "\t\t\t\tcol.bSortable;",
                    "8897": "\t\t}, 1 );",
                    "8901": "\t_api_register( 'processing()', function ( show ) {",
                    "8902": "\t\treturn this.iterator( 'table', function ( ctx ) {",
                    "8903": "\t\t\t_fnProcessingDisplay( ctx, show );",
                    "8904": "\t\t} );",
                    "8905": "\t} );",
                    "8906": "",
                    "8914": "\t\t\t\tctx[0].oPreviousSearch.search :",
                    "8924": "\t\t\tif (typeof regex === 'object') {",
                    "8925": "\t\t\t\t// New style options to pass to the search builder",
                    "8926": "\t\t\t\t_fnFilterComplete( settings, $.extend( settings.oPreviousSearch, regex, {",
                    "8927": "\t\t\t\t\tsearch: input",
                    "8928": "\t\t\t\t} ) );",
                    "8929": "\t\t\t}",
                    "8930": "\t\t\telse {",
                    "8931": "\t\t\t\t// Compat for the old options",
                    "8932": "\t\t\t\t_fnFilterComplete( settings, $.extend( settings.oPreviousSearch, {",
                    "8933": "\t\t\t\t\tsearch: input,",
                    "8934": "\t\t\t\t\tregex:  regex === null ? false : regex,",
                    "8935": "\t\t\t\t\tsmart:  smart === null ? true  : smart,",
                    "8936": "\t\t\t\t\tcaseInsensitive: caseInsen === null ? true : caseInsen",
                    "8937": "\t\t\t\t} ) );",
                    "8938": "\t\t\t}",
                    "8942": "\t_api_register( 'search.fixed()', function ( name, search ) {",
                    "8943": "\t\tvar ret = this.iterator( true, 'table', function ( settings ) {",
                    "8944": "\t\t\tvar fixed = settings.searchFixed;",
                    "8945": "",
                    "8946": "\t\t\tif (! name) {",
                    "8947": "\t\t\t\treturn Object.keys(fixed)",
                    "8948": "\t\t\t}",
                    "8949": "\t\t\telse if (search === undefined) {",
                    "8950": "\t\t\t\treturn fixed[name];",
                    "8951": "\t\t\t}",
                    "8952": "\t\t\telse if (search === null) {",
                    "8953": "\t\t\t\tdelete fixed[name];",
                    "8954": "\t\t\t}",
                    "8955": "\t\t\telse {",
                    "8956": "\t\t\t\tfixed[name] = search;",
                    "8957": "\t\t\t}",
                    "8958": "",
                    "8959": "\t\t\treturn this;",
                    "8960": "\t\t} );",
                    "8961": "",
                    "8962": "\t\treturn name !== undefined && search === undefined",
                    "8963": "\t\t\t? ret[0]",
                    "8964": "\t\t\t: ret;",
                    "8965": "\t} );",
                    "8976": "\t\t\t\t\treturn preSearch[ column ].search;",
                    "8984": "\t\t\t\tif (typeof regex === 'object') {",
                    "8985": "\t\t\t\t\t// New style options to pass to the search builder",
                    "8986": "\t\t\t\t\t$.extend( preSearch[ column ], regex, {",
                    "8987": "\t\t\t\t\t\tsearch: input",
                    "8988": "\t\t\t\t\t} );",
                    "8989": "\t\t\t\t}",
                    "8990": "\t\t\t\telse {",
                    "8991": "\t\t\t\t\t// Old style (with not all options available)",
                    "8992": "\t\t\t\t\t$.extend( preSearch[ column ], {",
                    "8993": "\t\t\t\t\t\tsearch: input,",
                    "8994": "\t\t\t\t\t\tregex:  regex === null ? false : regex,",
                    "8995": "\t\t\t\t\t\tsmart:  smart === null ? true  : smart,",
                    "8996": "\t\t\t\t\t\tcaseInsensitive: caseInsen === null ? true : caseInsen",
                    "8997": "\t\t\t\t\t} );",
                    "8998": "\t\t\t\t}",
                    "9000": "\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );",
                    "9005": "\t_api_register([",
                    "9006": "\t\t\t'columns().search.fixed()',",
                    "9007": "\t\t\t'column().search.fixed()'",
                    "9008": "\t\t],",
                    "9009": "\t\tfunction ( name, search ) {",
                    "9010": "\t\t\tvar ret = this.iterator( true, 'column', function ( settings, colIdx ) {",
                    "9011": "\t\t\t\tvar fixed = settings.aoColumns[colIdx].searchFixed;",
                    "9012": "",
                    "9013": "\t\t\t\tif (! name) {",
                    "9014": "\t\t\t\t\treturn Object.keys(fixed)",
                    "9015": "\t\t\t\t}",
                    "9016": "\t\t\t\telse if (search === undefined) {",
                    "9017": "\t\t\t\t\treturn fixed[name];",
                    "9018": "\t\t\t\t}",
                    "9019": "\t\t\t\telse if (search === null) {",
                    "9020": "\t\t\t\t\tdelete fixed[name];",
                    "9021": "\t\t\t\t}",
                    "9022": "\t\t\t\telse {",
                    "9023": "\t\t\t\t\tfixed[name] = search;",
                    "9024": "\t\t\t\t}",
                    "9025": "",
                    "9026": "\t\t\t\treturn this;",
                    "9027": "\t\t\t} );",
                    "9028": "",
                    "9029": "\t\t\treturn name !== undefined && search === undefined",
                    "9030": "\t\t\t\t? ret[0]",
                    "9031": "\t\t\t\t: ret;",
                    "9032": "\t\t}",
                    "9033": "\t);",
                    "9038": "\t_api_register( 'state()', function ( set, ignoreTime ) {",
                    "9039": "\t\t// getter",
                    "9040": "\t\tif ( ! set ) {",
                    "9041": "\t\t\treturn this.context.length ?",
                    "9042": "\t\t\t\tthis.context[0].oSavedState :",
                    "9043": "\t\t\t\tnull;",
                    "9044": "\t\t}",
                    "9045": "",
                    "9046": "\t\tvar setMutate = $.extend( true, {}, set );",
                    "9047": "",
                    "9048": "\t\t// setter",
                    "9049": "\t\treturn this.iterator( 'table', function ( settings ) {",
                    "9050": "\t\t\tif ( ignoreTime !== false ) {",
                    "9051": "\t\t\t\tsetMutate.time = +new Date() + 100;",
                    "9052": "\t\t\t}",
                    "9053": "",
                    "9054": "\t\t\t_fnImplementState( settings, setMutate, function(){} );",
                    "9055": "\t\t} );",
                    "9132": "\t *  @param {string} [version2=current DataTables version] As above, but optional.",
                    "9133": "\t *   If not given the current DataTables version will be used.",
                    "9143": "\tDataTable.versionCheck = function( version, version2 )",
                    "9145": "\t\tvar aThis = version2 ?",
                    "9146": "\t\t\tversion2.split('.') :",
                    "9147": "\t\t\tDataTable.version.split('.');",
                    "9183": "\tDataTable.isDataTable = function ( table )",
                    "9221": "\tDataTable.tables = function ( visible )",
                    "9230": "\t\tvar a = DataTable.settings",
                    "9231": "\t\t\t.filter( function (o) {",
                    "9232": "\t\t\t\treturn !visible || (visible && $(o.nTable).is(':visible'))",
                    "9233": "\t\t\t\t\t? true",
                    "9234": "\t\t\t\t\t: false;",
                    "9235": "\t\t\t} )",
                    "9236": "\t\t\t.map( function (o) {",
                    "9238": "\t\t\t});",
                    "9284": "\t\t\targs[0] = args[0].split( /\\s/ ).map( function ( e ) {",
                    "9304": "\t_api_register( 'error()', function (msg) {",
                    "9305": "\t\treturn this.iterator( 'table', function ( settings ) {",
                    "9306": "\t\t\t_fnLog( settings, 0, msg );",
                    "9307": "\t\t} );",
                    "9308": "\t} );",
                    "9309": "",
                    "9310": "",
                    "9329": "\t_api_register( 'trigger()', function ( name, args, bubbles ) {",
                    "9330": "\t\treturn this.iterator( 'table', function ( settings ) {",
                    "9331": "\t\t\treturn _fnCallbackFire( settings, null, name, args, bubbles );",
                    "9332": "\t\t} ).flatten();",
                    "9333": "\t} );",
                    "9334": "",
                    "9335": "",
                    "9336": "\t_api_register( 'ready()', function ( fn ) {",
                    "9337": "\t\tvar ctx = this.context;",
                    "9338": "",
                    "9339": "\t\t// Get status of first table",
                    "9340": "\t\tif (! fn) {",
                    "9341": "\t\t\treturn ctx.length",
                    "9342": "\t\t\t\t? (ctx[0]._bInitComplete || false)",
                    "9343": "\t\t\t\t: null;",
                    "9344": "\t\t}",
                    "9345": "",
                    "9346": "\t\t// Function to run either once the table becomes ready or",
                    "9347": "\t\t// immediately if it is already ready.",
                    "9348": "\t\treturn this.tables().every(function () {",
                    "9349": "\t\t\tif (this.context[0]._bInitComplete) {",
                    "9350": "\t\t\t\tfn.call(this);",
                    "9351": "\t\t\t}",
                    "9352": "\t\t\telse {",
                    "9353": "\t\t\t\tthis.on('init', function () {",
                    "9354": "\t\t\t\t\tfn.call(this);",
                    "9355": "\t\t\t\t});",
                    "9356": "\t\t\t}",
                    "9357": "\t\t} );",
                    "9358": "\t} );",
                    "9359": "",
                    "9360": "",
                    "9373": "\t\t\tvar rows      = settings.aoData.map( function (r) { return r ? r.nTr : null; } );",
                    "9374": "\t\t\tvar orderClasses = classes.order;",
                    "9381": "\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings], true );",
                    "9409": "\t\t\t$('th, td', thead)",
                    "9410": "\t\t\t\t.removeClass(",
                    "9411": "\t\t\t\t\torderClasses.canAsc + ' ' +",
                    "9412": "\t\t\t\t\torderClasses.canDesc + ' ' +",
                    "9413": "\t\t\t\t\torderClasses.isAsc + ' ' +",
                    "9414": "\t\t\t\t\torderClasses.isDesc",
                    "9415": "\t\t\t\t)",
                    "9416": "\t\t\t\t.css('width', '');",
                    "9423": "\t\t\tvar insertBefore = settings.nTableWrapper.nextSibling;",
                    "9433": "\t\t\t\torig.insertBefore( table, insertBefore );",
                    "9439": "\t\t\t\t\t.removeClass( classes.table );",
                    "9443": "\t\t\tvar idx = DataTable.settings.indexOf(settings);",
                    "9456": "\t\t\tvar inst;",
                    "9457": "\t\t\tvar counter = 0;",
                    "9459": "\t\t\treturn this.iterator( 'every', function ( settings, selectedIdx, tableIdx ) {",
                    "9460": "\t\t\t\tinst = api[ type ](selectedIdx, opts);",
                    "9461": "",
                    "9462": "\t\t\t\tif (type === 'cell') {",
                    "9463": "\t\t\t\t\tfn.call(inst, inst[0][0].row, inst[0][0].column, tableIdx, counter);",
                    "9464": "\t\t\t\t}",
                    "9465": "\t\t\t\telse {",
                    "9466": "\t\t\t\t\tfn.call(inst, selectedIdx, tableIdx, counter);",
                    "9467": "\t\t\t\t}",
                    "9468": "",
                    "9469": "\t\t\t\tcounter++;",
                    "9485": "\t\tif ( $.isPlainObject( resolved ) ) {",
                    "9486": "\t\t\tresolved = plural !== undefined && resolved[ plural ] !== undefined ?",
                    "9494": "\t} );",
                    "9495": "",
                    "9499": "\t * only for non-release builds. See https://semver.org/ for more information.",
                    "9504": "\tDataTable.version = \"2.0.0\";",
                    "9539": "\t\t\"caseInsensitive\": true,",
                    "9544": "\t\t\"search\": \"\",",
                    "9551": "\t\t\"regex\": false,",
                    "9556": "\t\t\"smart\": true,",
                    "9632": "\t\t\"idx\": -1,",
                    "9633": "",
                    "9634": "\t\t/**",
                    "9635": "\t\t * Cached display value",
                    "9636": "\t\t */",
                    "9637": "\t\tdisplayData: null",
                    "9654": "\t\t * Column index.",
                    "9804": "\t\t\"sWidthOrig\": null,",
                    "9805": "",
                    "9806": "\t\t/** Cached string which is the longest in the column */",
                    "9807": "\t\tmaxLenString: null,",
                    "9808": "",
                    "9809": "\t\t/**",
                    "9810": "\t\t * Store for named searches",
                    "9811": "\t\t */",
                    "9812": "\t\tsearchFixed: null",
                    "9889": "\t\t * [jQuery.ajax](https://api.jquery.com/jQuery.ajax/) allowing fine control",
                    "9913": "\t\t *   data source for the table.",
                    "10008": "\t\t\"bDeferRender\": true,",
                    "10032": "\t\t * Used only for compatiblity with DT1",
                    "10033": "\t\t * @deprecated",
                    "10038": "\t\t * Used only for compatiblity with DT1",
                    "10039": "\t\t * @deprecated",
                    "10108": "\t\t\"bSortCellsTop\": null,",
                    "10228": "\t\t/**",
                    "10229": "\t\t * Callback which allows modification of the saved state prior to loading that state.",
                    "10230": "\t\t * This callback is called when the table is loading state from the stored data, but",
                    "10231": "\t\t * prior to the settings object being modified by the saved state. Note that for",
                    "10232": "\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for",
                    "10233": "\t\t * a plug-in.",
                    "10256": "\t\t\t} catch (e) {",
                    "10257": "\t\t\t\t// noop",
                    "10258": "\t\t\t}",
                    "10330": "\t\t\t\t * ARIA label that is added to the table headers when the column may be sorted",
                    "10331": "\t\t\t\t */",
                    "10332": "\t\t\t\t\"orderable\": \": Activate to sort\",",
                    "10333": "",
                    "10334": "\t\t\t\t/**",
                    "10335": "\t\t\t\t * ARIA label that is added to the table headers when the column is currently being sorted",
                    "10337": "\t\t\t\t\"orderableReverse\": \": Activate to invert sorting\",",
                    "10340": "\t\t\t\t * ARIA label that is added to the table headers when the column is currently being",
                    "10341": "\t\t\t\t * sorted and next step is to remove sorting",
                    "10343": "\t\t\t\t\"orderableRemove\": \": Activate to remove sorting\",",
                    "10344": "",
                    "10345": "\t\t\t\tpaginate: {",
                    "10346": "\t\t\t\t\tfirst: 'First',",
                    "10347": "\t\t\t\t\tlast: 'Last',",
                    "10348": "\t\t\t\t\tnext: 'Next',",
                    "10349": "\t\t\t\t\tprevious: 'Previous'",
                    "10350": "\t\t\t\t}",
                    "10359": "\t\t\t\t * Label and character for first page button",
                    "10361": "\t\t\t\t\"sFirst\": \"\u00ab\",",
                    "10364": "\t\t\t\t * Last page button",
                    "10366": "\t\t\t\t\"sLast\": \"\u00bb\",",
                    "10369": "\t\t\t\t * Next page button",
                    "10371": "\t\t\t\t\"sNext\": \"\u203a\",",
                    "10374": "\t\t\t\t * Previous page button",
                    "10376": "\t\t\t\t\"sPrevious\": \"\u2039\",",
                    "10377": "\t\t\t},",
                    "10378": "",
                    "10379": "\t\t\t/**",
                    "10380": "\t\t\t * Plural object for the data type the table is showing",
                    "10381": "\t\t\t */",
                    "10382": "\t\t\tentries: {",
                    "10383": "\t\t\t\t_: \"entries\",",
                    "10384": "\t\t\t\t1: \"entry\"",
                    "10410": "\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ _ENTRIES-TOTAL_\",",
                    "10417": "\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 _ENTRIES-TOTAL_\",",
                    "10425": "\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total _ENTRIES-MAX_)\",",
                    "10468": "\t\t\t\"sLengthMenu\": \"_MENU_ _ENTRIES_ per page\",",
                    "10542": "\t\t * Table and control layout. This replaces the legacy `dom` option.",
                    "10544": "\t\tlayout: {",
                    "10545": "\t\t\ttopStart: 'pageLength',",
                    "10546": "\t\t\ttopEnd: 'search',",
                    "10547": "\t\t\tbottomStart: 'info',",
                    "10548": "\t\t\tbottomEnd: 'paging'",
                    "10549": "\t\t},",
                    "10553": "\t\t * Legacy DOM layout option",
                    "10555": "\t\t\"sDom\": null,",
                    "10577": "\t\t\"sPaginationType\": \"full_numbers\",",
                    "10641": "\t\t\"rowId\": \"DT_RowId\",",
                    "10642": "",
                    "10643": "",
                    "10644": "\t\t/**",
                    "10645": "\t\t * Caption value",
                    "10646": "\t\t */",
                    "10647": "\t\t\"caption\": null",
                    "10674": "\t\tariaTitle: '',",
                    "10675": "",
                    "10682": "\t\t\"asSorting\": [ 'asc', 'desc', '' ],",
                    "10686": "\t\t * Enable or disable filtering on the data in this column.",
                    "10964": "\t\t\t * Used only for compatiblity with DT1",
                    "10965": "\t\t\t * @deprecated",
                    "10967": "\t\t\t\"bInfo\": true,",
                    "10970": "\t\t\t * Used only for compatiblity with DT1",
                    "10971": "\t\t\t * @deprecated",
                    "10973": "\t\t\t\"bLengthChange\": true,",
                    "11166": "\t\t/**",
                    "11167": "\t\t * Store for named searches",
                    "11168": "\t\t */",
                    "11169": "\t\tsearchFixed: {},",
                    "11170": "",
                    "11319": "\t\t/**",
                    "11320": "\t\t * Number of paging controls on the page. Only used for backwards compatibility",
                    "11321": "\t\t */",
                    "11322": "\t\tpagingControls: 0,",
                    "11323": "",
                    "11366": "\t\t * Note if draw should be blocked while getting data",
                    "11368": "\t\t\"bAjaxDataGet\": true,",
                    "11584": "\t\t\"rowId\": null,",
                    "11585": "",
                    "11586": "\t\tcaption: '',",
                    "11587": "",
                    "11588": "\t\tcaptionNode: null,",
                    "11589": "",
                    "11590": "\t\tcolgroup: null",
                    "11644": "\t\tbuild:\"bs5/dt-2.0.0\",",
                    "11659": "\t\t/**",
                    "11660": "\t\t * Legacy so v1 plug-ins don't throw js errors on load",
                    "11661": "\t\t */",
                    "11662": "\t\tfeature: [],",
                    "11663": "",
                    "11667": "\t\t * This is an object of callbacks which provide the features for DataTables",
                    "11668": "\t\t * to be initialised via the `layout` option.",
                    "11670": "\t\tfeatures: {},",
                    "11891": "\t\t\t/**",
                    "11892": "\t\t\t * Automatic column class assignment",
                    "11893": "\t\t\t */",
                    "11894": "\t\t\tclassName: {},",
                    "11895": "",
                    "11938": "\t\t\t/**",
                    "11939": "\t\t\t * Automatic renderer assignment",
                    "11940": "\t\t\t */",
                    "11941": "\t\t\trender: {},",
                    "11942": "",
                    "12107": "\t\tcontainer: 'dt-container',",
                    "12108": "\t\tempty: {",
                    "12109": "\t\t\trow: 'dt-empty'",
                    "12110": "\t\t},",
                    "12111": "\t\tinfo: {",
                    "12112": "\t\t\tcontainer: 'dt-info'",
                    "12113": "\t\t},",
                    "12114": "\t\tlength: {",
                    "12115": "\t\t\tcontainer: 'dt-length',",
                    "12116": "\t\t\tselect: 'dt-input'",
                    "12117": "\t\t},",
                    "12118": "\t\torder: {",
                    "12119": "\t\t\tcanAsc: 'dt-orderable-asc',",
                    "12120": "\t\t\tcanDesc: 'dt-orderable-desc',",
                    "12121": "\t\t\tisAsc: 'dt-ordering-asc',",
                    "12122": "\t\t\tisDesc: 'dt-ordering-desc',",
                    "12123": "\t\t\tnone: 'dt-orderable-none',",
                    "12124": "\t\t\tposition: 'sorting_'",
                    "12125": "\t\t},",
                    "12126": "\t\tprocessing: {",
                    "12127": "\t\t\tcontainer: 'dt-processing'",
                    "12128": "\t\t},",
                    "12129": "\t\tscrolling: {",
                    "12130": "\t\t\tbody: 'dt-scroll-body',",
                    "12131": "\t\t\tcontainer: 'dt-scroll',",
                    "12132": "\t\t\tfooter: {",
                    "12133": "\t\t\t\tself: 'dt-scroll-foot',",
                    "12134": "\t\t\t\tinner: 'dt-scroll-footInner'",
                    "12135": "\t\t\t},",
                    "12136": "\t\t\theader: {",
                    "12137": "\t\t\t\tself: 'dt-scroll-head',",
                    "12138": "\t\t\t\tinner: 'dt-scroll-headInner'",
                    "12139": "\t\t\t}",
                    "12140": "\t\t},",
                    "12141": "\t\tsearch: {",
                    "12142": "\t\t\tcontainer: 'dt-search',",
                    "12143": "\t\t\tinput: 'dt-input'",
                    "12144": "\t\t},",
                    "12145": "\t\ttable: 'dataTable',",
                    "12146": "\t\ttbody: {",
                    "12147": "\t\t\tcell: '',",
                    "12148": "\t\t\trow: ''",
                    "12149": "\t\t},",
                    "12150": "\t\tthead: {",
                    "12151": "\t\t\tcell: '',",
                    "12152": "\t\t\trow: ''",
                    "12153": "\t\t},",
                    "12154": "\t\ttfoot: {",
                    "12155": "\t\t\tcell: '',",
                    "12156": "\t\t\trow: ''",
                    "12157": "\t\t},",
                    "12158": "\t\tpaging: {",
                    "12159": "\t\t\tactive: 'current',",
                    "12160": "\t\t\tbutton: 'dt-paging-button',",
                    "12161": "\t\t\tcontainer: 'dt-paging',",
                    "12162": "\t\t\tdisabled: 'disabled'",
                    "12163": "\t\t}",
                    "12164": "\t} );",
                    "12165": "",
                    "12166": "",
                    "12167": "\tvar extPagination = DataTable.ext.pager;",
                    "12168": "",
                    "12169": "\t// Paging buttons configuration",
                    "12170": "\t$.extend( extPagination, {",
                    "12171": "\t\tsimple: function () {",
                    "12172": "\t\t\treturn [ 'previous', 'next' ];",
                    "12173": "\t\t},",
                    "12174": "",
                    "12175": "\t\tfull: function () {",
                    "12176": "\t\t\treturn [  'first', 'previous', 'next', 'last' ];",
                    "12177": "\t\t},",
                    "12178": "",
                    "12179": "\t\tnumbers: function () {",
                    "12180": "\t\t\treturn [ 'numbers' ];",
                    "12181": "\t\t},",
                    "12182": "",
                    "12183": "\t\tsimple_numbers: function () {",
                    "12184": "\t\t\treturn [ 'previous', 'numbers', 'next' ];",
                    "12185": "\t\t},",
                    "12186": "",
                    "12187": "\t\tfull_numbers: function () {",
                    "12188": "\t\t\treturn [ 'first', 'previous', 'numbers', 'next', 'last' ];",
                    "12189": "\t\t},",
                    "12190": "",
                    "12191": "\t\tfirst_last: function () {",
                    "12192": "\t\t\treturn ['first', 'last'];",
                    "12193": "\t\t},",
                    "12194": "",
                    "12195": "\t\tfirst_last_numbers: function () {",
                    "12196": "\t\t\treturn ['first', 'numbers', 'last'];",
                    "12197": "\t\t},",
                    "12198": "",
                    "12199": "\t\t// For testing and plug-ins to use",
                    "12200": "\t\t_numbers: _pagingNumbers,",
                    "12201": "",
                    "12202": "\t\t// Number of number buttons - legacy, use `numbers` option for paging feature",
                    "12203": "\t\tnumbers_length: 7",
                    "12207": "\t$.extend( true, DataTable.ext.renderer, {",
                    "12208": "\t\tpagingButton: {",
                    "12209": "\t\t\t_: function (settings, buttonType, content, active, disabled) {",
                    "12210": "\t\t\t\tvar classes = settings.oClasses.paging;",
                    "12211": "\t\t\t\tvar btnClasses = [classes.button];",
                    "12212": "\t\t\t\tvar btn;",
                    "12213": "",
                    "12214": "\t\t\t\tif (active) {",
                    "12215": "\t\t\t\t\tbtnClasses.push(classes.active);",
                    "12216": "\t\t\t\t}",
                    "12217": "",
                    "12218": "\t\t\t\tif (disabled) {",
                    "12219": "\t\t\t\t\tbtnClasses.push(classes.disabled)",
                    "12220": "\t\t\t\t}",
                    "12221": "",
                    "12222": "\t\t\t\tif (buttonType === 'ellipsis') {",
                    "12223": "\t\t\t\t\tbtn = $('<span class=\"ellipsis\"></span>').html(content)[0];",
                    "12224": "\t\t\t\t}",
                    "12225": "\t\t\t\telse {",
                    "12226": "\t\t\t\t\tbtn = $('<button>', {",
                    "12227": "\t\t\t\t\t\tclass: btnClasses.join(' '),",
                    "12228": "\t\t\t\t\t\trole: 'link',",
                    "12229": "\t\t\t\t\t\ttype: 'button'",
                    "12230": "\t\t\t\t\t}).html(content);",
                    "12231": "\t\t\t\t}",
                    "12232": "",
                    "12233": "\t\t\t\treturn {",
                    "12234": "\t\t\t\t\tdisplay: btn,",
                    "12235": "\t\t\t\t\tclicker: btn",
                    "12236": "\t\t\t\t}",
                    "12237": "\t\t\t}",
                    "12238": "\t\t},",
                    "12239": "",
                    "12240": "\t\tpagingContainer: {",
                    "12241": "\t\t\t_: function (settings, buttons) {",
                    "12242": "\t\t\t\t// No wrapping element - just append directly to the host",
                    "12243": "\t\t\t\treturn buttons;",
                    "12244": "\t\t\t}",
                    "12245": "\t\t}",
                    "12246": "\t} );",
                    "12247": "",
                    "12248": "\t// Common function to remove new lines, strip HTML and diacritic control",
                    "12249": "\tvar _filterString = function (stripHtml, diacritics) {",
                    "12250": "\t\treturn function (str) {",
                    "12251": "\t\t\tif (_empty(str) || typeof str !== 'string') {",
                    "12252": "\t\t\t\treturn str;",
                    "12253": "\t\t\t}",
                    "12254": "",
                    "12255": "\t\t\tstr = str.replace( _re_new_lines, \" \" );",
                    "12256": "",
                    "12257": "\t\t\tif (stripHtml) {",
                    "12258": "\t\t\t\tstr = _stripHtml(str);",
                    "12259": "\t\t\t}",
                    "12260": "",
                    "12261": "\t\t\tif (diacritics) {",
                    "12262": "\t\t\t\tstr = _normalize(str, true);",
                    "12263": "\t\t\t}",
                    "12264": "",
                    "12265": "\t\t\treturn str;",
                    "12266": "\t\t};",
                    "12267": "\t}",
                    "12268": "",
                    "12269": "\t/*",
                    "12270": "\t * Public helper functions. These aren't used internally by DataTables, or",
                    "12271": "\t * called by any of the options passed into DataTables, but they can be used",
                    "12272": "\t * externally by developers working with DataTables. They are helper functions",
                    "12273": "\t * to make working with DataTables a little bit easier.",
                    "12274": "\t */",
                    "12275": "",
                    "12276": "\tfunction __mldFnName(name) {",
                    "12277": "\t\treturn name.replace(/[\\W]/g, '_')",
                    "12278": "\t}",
                    "12279": "",
                    "12280": "\t// Common logic for moment, luxon or a date action",
                    "12281": "\tfunction __mld( dt, momentFn, luxonFn, dateFn, arg1 ) {",
                    "12282": "\t\tif (window.moment) {",
                    "12283": "\t\t\treturn dt[momentFn]( arg1 );",
                    "12284": "\t\t}",
                    "12285": "\t\telse if (window.luxon) {",
                    "12286": "\t\t\treturn dt[luxonFn]( arg1 );",
                    "12287": "\t\t}",
                    "12288": "",
                    "12289": "\t\treturn dateFn ? dt[dateFn]( arg1 ) : dt;",
                    "12290": "\t}",
                    "12291": "",
                    "12292": "",
                    "12293": "\tvar __mlWarning = false;",
                    "12294": "\tfunction __mldObj (d, format, locale) {",
                    "12295": "\t\tvar dt;",
                    "12296": "",
                    "12297": "\t\tif (window.moment) {",
                    "12298": "\t\t\tdt = window.moment.utc( d, format, locale, true );",
                    "12299": "",
                    "12300": "\t\t\tif (! dt.isValid()) {",
                    "12301": "\t\t\t\treturn null;",
                    "12302": "\t\t\t}",
                    "12303": "\t\t}",
                    "12304": "\t\telse if (window.luxon) {",
                    "12305": "\t\t\tdt = format && typeof d === 'string'",
                    "12306": "\t\t\t\t? window.luxon.DateTime.fromFormat( d, format )",
                    "12307": "\t\t\t\t: window.luxon.DateTime.fromISO( d );",
                    "12308": "",
                    "12309": "\t\t\tif (! dt.isValid) {",
                    "12310": "\t\t\t\treturn null;",
                    "12311": "\t\t\t}",
                    "12312": "",
                    "12313": "\t\t\tdt.setLocale(locale);",
                    "12314": "\t\t}",
                    "12315": "\t\telse if (! format) {",
                    "12316": "\t\t\t// No format given, must be ISO",
                    "12317": "\t\t\tdt = new Date(d);",
                    "12318": "\t\t}",
                    "12319": "\t\telse {",
                    "12320": "\t\t\tif (! __mlWarning) {",
                    "12321": "\t\t\t\talert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');",
                    "12322": "\t\t\t}",
                    "12323": "",
                    "12324": "\t\t\t__mlWarning = true;",
                    "12325": "\t\t}",
                    "12326": "",
                    "12327": "\t\treturn dt;",
                    "12328": "\t}",
                    "12329": "",
                    "12330": "\t// Wrapper for date, datetime and time which all operate the same way with the exception of",
                    "12331": "\t// the output string for auto locale support",
                    "12332": "\tfunction __mlHelper (localeString) {",
                    "12333": "\t\treturn function ( from, to, locale, def ) {",
                    "12334": "\t\t\t// Luxon and Moment support",
                    "12335": "\t\t\t// Argument shifting",
                    "12336": "\t\t\tif ( arguments.length === 0 ) {",
                    "12337": "\t\t\t\tlocale = 'en';",
                    "12338": "\t\t\t\tto = null; // means toLocaleString",
                    "12339": "\t\t\t\tfrom = null; // means iso8601",
                    "12340": "\t\t\t}",
                    "12341": "\t\t\telse if ( arguments.length === 1 ) {",
                    "12342": "\t\t\t\tlocale = 'en';",
                    "12343": "\t\t\t\tto = from;",
                    "12344": "\t\t\t\tfrom = null;",
                    "12345": "\t\t\t}",
                    "12346": "\t\t\telse if ( arguments.length === 2 ) {",
                    "12347": "\t\t\t\tlocale = to;",
                    "12348": "\t\t\t\tto = from;",
                    "12349": "\t\t\t\tfrom = null;",
                    "12350": "\t\t\t}",
                    "12351": "",
                    "12352": "\t\t\tvar typeName = 'datetime' + (to ? '-' + __mldFnName(to) : '');",
                    "12353": "",
                    "12354": "\t\t\t// Add type detection and sorting specific to this date format - we need to be able to identify",
                    "12355": "\t\t\t// date type columns as such, rather than as numbers in extensions. Hence the need for this.",
                    "12356": "\t\t\tif (! DataTable.ext.type.order[typeName]) {",
                    "12357": "\t\t\t\tDataTable.type(typeName, {",
                    "12358": "\t\t\t\t\tdetect: function (d) {",
                    "12359": "\t\t\t\t\t\t// The renderer will give the value to type detect as the type!",
                    "12360": "\t\t\t\t\t\treturn d === typeName ? typeName : false;",
                    "12361": "\t\t\t\t\t},",
                    "12362": "\t\t\t\t\torder: {",
                    "12363": "\t\t\t\t\t\tpre: function (d) {",
                    "12364": "\t\t\t\t\t\t\t// The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a",
                    "12365": "\t\t\t\t\t\t\t// `valueOf` which gives milliseconds epoch",
                    "12366": "\t\t\t\t\t\t\treturn d.valueOf();",
                    "12367": "\t\t\t\t\t\t}",
                    "12368": "\t\t\t\t\t},",
                    "12369": "\t\t\t\t\tclassName: 'dt-right'",
                    "12370": "\t\t\t\t});",
                    "12371": "\t\t\t}",
                    "12372": "",
                    "12373": "\t\t\treturn function ( d, type ) {",
                    "12374": "\t\t\t\t// Allow for a default value",
                    "12375": "\t\t\t\tif (d === null || d === undefined) {",
                    "12376": "\t\t\t\t\tif (def === '--now') {",
                    "12377": "\t\t\t\t\t\t// We treat everything as UTC further down, so no changes are",
                    "12378": "\t\t\t\t\t\t// made, as such need to get the local date / time as if it were",
                    "12379": "\t\t\t\t\t\t// UTC",
                    "12380": "\t\t\t\t\t\tvar local = new Date();",
                    "12381": "\t\t\t\t\t\td = new Date( Date.UTC(",
                    "12382": "\t\t\t\t\t\t\tlocal.getFullYear(), local.getMonth(), local.getDate(),",
                    "12383": "\t\t\t\t\t\t\tlocal.getHours(), local.getMinutes(), local.getSeconds()",
                    "12384": "\t\t\t\t\t\t) );",
                    "12385": "\t\t\t\t\t}",
                    "12386": "\t\t\t\t\telse {",
                    "12387": "\t\t\t\t\t\td = '';",
                    "12388": "\t\t\t\t\t}",
                    "12389": "\t\t\t\t}",
                    "12390": "",
                    "12391": "\t\t\t\tif (type === 'type') {",
                    "12392": "\t\t\t\t\t// Typing uses the type name for fast matching",
                    "12393": "\t\t\t\t\treturn typeName;",
                    "12394": "\t\t\t\t}",
                    "12395": "",
                    "12396": "\t\t\t\tif (d === '') {",
                    "12397": "\t\t\t\t\treturn type !== 'sort'",
                    "12398": "\t\t\t\t\t\t? ''",
                    "12399": "\t\t\t\t\t\t: __mldObj('0000-01-01 00:00:00', null, locale);",
                    "12400": "\t\t\t\t}",
                    "12401": "",
                    "12402": "\t\t\t\t// Shortcut. If `from` and `to` are the same, we are using the renderer to",
                    "12403": "\t\t\t\t// format for ordering, not display - its already in the display format.",
                    "12404": "\t\t\t\tif ( to !== null && from === to && type !== 'sort' && type !== 'type' && ! (d instanceof Date) ) {",
                    "12405": "\t\t\t\t\treturn d;",
                    "12406": "\t\t\t\t}",
                    "12407": "",
                    "12408": "\t\t\t\tvar dt = __mldObj(d, from, locale);",
                    "12409": "",
                    "12410": "\t\t\t\tif (dt === null) {",
                    "12411": "\t\t\t\t\treturn d;",
                    "12412": "\t\t\t\t}",
                    "12413": "",
                    "12414": "\t\t\t\tif (type === 'sort') {",
                    "12415": "\t\t\t\t\treturn dt;",
                    "12416": "\t\t\t\t}",
                    "12417": "",
                    "12418": "\t\t\t\tvar formatted = to === null",
                    "12419": "\t\t\t\t\t? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()",
                    "12420": "\t\t\t\t\t: __mld(dt, 'format', 'toFormat', 'toISOString', to);",
                    "12421": "",
                    "12422": "\t\t\t\t// XSS protection",
                    "12423": "\t\t\t\treturn type === 'display' ?",
                    "12424": "\t\t\t\t\t_escapeHtml( formatted ) :",
                    "12425": "\t\t\t\t\tformatted;",
                    "12426": "\t\t\t};",
                    "12427": "\t\t}",
                    "12428": "\t}",
                    "12430": "\t// Based on locale, determine standard number formatting",
                    "12431": "\t// Fallback for legacy browsers is US English",
                    "12432": "\tvar __thousands = ',';",
                    "12433": "\tvar __decimal = '.';",
                    "12435": "\tif (window.Intl !== undefined) {",
                    "12436": "\t\ttry {",
                    "12437": "\t\t\tvar num = new Intl.NumberFormat().formatToParts(100000.1);",
                    "12438": "",
                    "12439": "\t\t\tfor (var i=0 ; i<num.length ; i++) {",
                    "12440": "\t\t\t\tif (num[i].type === 'group') {",
                    "12441": "\t\t\t\t\t__thousands = num[i].value;",
                    "12442": "\t\t\t\t}",
                    "12443": "\t\t\t\telse if (num[i].type === 'decimal') {",
                    "12444": "\t\t\t\t\t__decimal = num[i].value;",
                    "12445": "\t\t\t\t}",
                    "12446": "\t\t\t}",
                    "12448": "\t\tcatch (e) {",
                    "12449": "\t\t\t// noop",
                    "12453": "\t// Formatted date time detection - use by declaring the formats you are going to use",
                    "12454": "\tDataTable.datetime = function ( format, locale ) {",
                    "12455": "\t\tvar typeName = 'datetime-detect-' + __mldFnName(format);",
                    "12457": "\t\tif (! locale) {",
                    "12458": "\t\t\tlocale = 'en';",
                    "12459": "\t\t}",
                    "12461": "\t\tif (! DataTable.ext.type.order[typeName]) {",
                    "12462": "\t\t\tDataTable.type(typeName, {",
                    "12463": "\t\t\t\tdetect: function (d) {",
                    "12464": "\t\t\t\t\tvar dt = __mldObj(d, format, locale);",
                    "12465": "\t\t\t\t\treturn d === '' || dt ? typeName : false;",
                    "12466": "\t\t\t\t},",
                    "12467": "\t\t\t\torder: {",
                    "12468": "\t\t\t\t\tpre: function (d) {",
                    "12469": "\t\t\t\t\t\treturn __mldObj(d, format, locale) || 0;",
                    "12470": "\t\t\t\t\t}",
                    "12471": "\t\t\t\t},",
                    "12472": "\t\t\t\tclassName: 'dt-right'",
                    "12473": "\t\t\t});",
                    "12474": "\t\t}",
                    "12475": "\t}",
                    "12477": "\t/**",
                    "12478": "\t * Helpers for `columns.render`.",
                    "12479": "\t *",
                    "12480": "\t * The options defined here can be used with the `columns.render` initialisation",
                    "12481": "\t * option to provide a display renderer. The following functions are defined:",
                    "12482": "\t *",
                    "12483": "\t * * `moment` - Uses the MomentJS library to convert from a given format into another.",
                    "12484": "\t * This renderer has three overloads:",
                    "12485": "\t *   * 1 parameter:",
                    "12486": "\t *     * `string` - Format to convert to (assumes input is ISO8601 and locale is `en`)",
                    "12487": "\t *   * 2 parameters:",
                    "12488": "\t *     * `string` - Format to convert from",
                    "12489": "\t *     * `string` - Format to convert to. Assumes `en` locale",
                    "12490": "\t *   * 3 parameters:",
                    "12491": "\t *     * `string` - Format to convert from",
                    "12492": "\t *     * `string` - Format to convert to",
                    "12493": "\t *     * `string` - Locale",
                    "12494": "\t * * `number` - Will format numeric data (defined by `columns.data`) for",
                    "12495": "\t *   display, retaining the original unformatted data for sorting and filtering.",
                    "12496": "\t *   It takes 5 parameters:",
                    "12497": "\t *   * `string` - Thousands grouping separator",
                    "12498": "\t *   * `string` - Decimal point indicator",
                    "12499": "\t *   * `integer` - Number of decimal points to show",
                    "12500": "\t *   * `string` (optional) - Prefix.",
                    "12501": "\t *   * `string` (optional) - Postfix (/suffix).",
                    "12502": "\t * * `text` - Escape HTML to help prevent XSS attacks. It has no optional",
                    "12503": "\t *   parameters.",
                    "12504": "\t *",
                    "12505": "\t * @example",
                    "12506": "\t *   // Column definition using the number renderer",
                    "12507": "\t *   {",
                    "12508": "\t *     data: \"salary\",",
                    "12509": "\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )",
                    "12510": "\t *   }",
                    "12511": "\t *",
                    "12512": "\t * @namespace",
                    "12513": "\t */",
                    "12514": "\tDataTable.render = {",
                    "12515": "\t\tdate: __mlHelper('toLocaleDateString'),",
                    "12516": "\t\tdatetime: __mlHelper('toLocaleString'),",
                    "12517": "\t\ttime: __mlHelper('toLocaleTimeString'),",
                    "12518": "\t\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {",
                    "12519": "\t\t\t// Auto locale detection",
                    "12520": "\t\t\tif (thousands === null || thousands === undefined) {",
                    "12521": "\t\t\t\tthousands = __thousands;",
                    "12522": "\t\t\t}",
                    "12524": "\t\t\tif (decimal === null || decimal === undefined) {",
                    "12525": "\t\t\t\tdecimal = __decimal;",
                    "12526": "\t\t\t}",
                    "12528": "\t\t\treturn {",
                    "12529": "\t\t\t\tdisplay: function ( d ) {",
                    "12530": "\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {",
                    "12531": "\t\t\t\t\t\treturn d;",
                    "12532": "\t\t\t\t\t}",
                    "12534": "\t\t\t\t\tif (d === '' || d === null) {",
                    "12535": "\t\t\t\t\t\treturn d;",
                    "12536": "\t\t\t\t\t}",
                    "12538": "\t\t\t\t\tvar negative = d < 0 ? '-' : '';",
                    "12539": "\t\t\t\t\tvar flo = parseFloat( d );",
                    "12540": "\t\t\t\t\tvar abs = Math.abs(flo);",
                    "12542": "\t\t\t\t\t// Scientific notation for large and small numbers",
                    "12543": "\t\t\t\t\tif (abs >= 100000000000 || (abs < 0.0001 && abs !== 0) ) {",
                    "12544": "\t\t\t\t\t\tvar exp = flo.toExponential(precision).split(/e\\+?/);",
                    "12545": "\t\t\t\t\t\treturn exp[0] + ' x 10<sup>' + exp[1] + '</sup>';",
                    "12546": "\t\t\t\t\t}",
                    "12548": "\t\t\t\t\t// If NaN then there isn't much formatting that we can do - just",
                    "12549": "\t\t\t\t\t// return immediately, escaping any HTML (this was supposed to",
                    "12550": "\t\t\t\t\t// be a number after all)",
                    "12551": "\t\t\t\t\tif ( isNaN( flo ) ) {",
                    "12552": "\t\t\t\t\t\treturn _escapeHtml( d );",
                    "12553": "\t\t\t\t\t}",
                    "12555": "\t\t\t\t\tflo = flo.toFixed( precision );",
                    "12556": "\t\t\t\t\td = Math.abs( flo );",
                    "12558": "\t\t\t\t\tvar intPart = parseInt( d, 10 );",
                    "12559": "\t\t\t\t\tvar floatPart = precision ?",
                    "12560": "\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):",
                    "12561": "\t\t\t\t\t\t'';",
                    "12563": "\t\t\t\t\t// If zero, then can't have a negative prefix",
                    "12564": "\t\t\t\t\tif (intPart === 0 && parseFloat(floatPart) === 0) {",
                    "12565": "\t\t\t\t\t\tnegative = '';",
                    "12566": "\t\t\t\t\t}",
                    "12568": "\t\t\t\t\treturn negative + (prefix||'') +",
                    "12569": "\t\t\t\t\t\tintPart.toString().replace(",
                    "12570": "\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands",
                    "12571": "\t\t\t\t\t\t) +",
                    "12572": "\t\t\t\t\t\tfloatPart +",
                    "12573": "\t\t\t\t\t\t(postfix||'');",
                    "12574": "\t\t\t\t}",
                    "12575": "\t\t\t};",
                    "12576": "\t\t},",
                    "12578": "\t\ttext: function () {",
                    "12579": "\t\t\treturn {",
                    "12580": "\t\t\t\tdisplay: _escapeHtml,",
                    "12581": "\t\t\t\tfilter: _escapeHtml",
                    "12582": "\t\t\t};",
                    "12583": "\t\t}",
                    "12584": "\t};",
                    "12587": "\tvar _extTypes = DataTable.ext.type;",
                    "12589": "\t// Get / set type",
                    "12590": "\tDataTable.type = function (name, prop, val) {",
                    "12591": "\t\tif (! prop) {",
                    "12592": "\t\t\treturn {",
                    "12593": "\t\t\t\tclassName: _extTypes.className[name],",
                    "12594": "\t\t\t\tdetect: _extTypes.detect.find(function (fn) {",
                    "12595": "\t\t\t\t\treturn fn.name === name;",
                    "12596": "\t\t\t\t}),",
                    "12597": "\t\t\t\torder: {",
                    "12598": "\t\t\t\t\tpre: _extTypes.order[name + '-pre'],",
                    "12599": "\t\t\t\t\tasc: _extTypes.order[name + '-asc'],",
                    "12600": "\t\t\t\t\tdesc: _extTypes.order[name + '-desc']",
                    "12601": "\t\t\t\t},",
                    "12602": "\t\t\t\trender: _extTypes.render[name],",
                    "12603": "\t\t\t\tsearch: _extTypes.search[name]",
                    "12604": "\t\t\t};",
                    "12605": "\t\t}",
                    "12607": "\t\tvar setProp = function(prop, propVal) {",
                    "12608": "\t\t\t_extTypes[prop][name] = propVal;",
                    "12609": "\t\t};",
                    "12610": "\t\tvar setDetect = function (fn) {",
                    "12611": "\t\t\t// Wrap to allow the function to return `true` rather than",
                    "12612": "\t\t\t// specifying the type name.",
                    "12613": "\t\t\tvar cb = function (d, s) {",
                    "12614": "\t\t\t\tvar ret = fn(d, s);",
                    "12615": "",
                    "12616": "\t\t\t\treturn ret === true",
                    "12617": "\t\t\t\t\t? name",
                    "12618": "\t\t\t\t\t: ret;",
                    "12619": "\t\t\t};",
                    "12620": "\t\t\tObject.defineProperty(cb, \"name\", {value: name});",
                    "12622": "\t\t\tvar idx = _extTypes.detect.findIndex(function (fn) {",
                    "12623": "\t\t\t\treturn fn.name === name;",
                    "12624": "\t\t\t});",
                    "12626": "\t\t\tif (idx === -1) {",
                    "12627": "\t\t\t\t_extTypes.detect.unshift(cb);",
                    "12628": "\t\t\t}",
                    "12629": "\t\t\telse {",
                    "12630": "\t\t\t\t_extTypes.detect.splice(idx, 1, cb);",
                    "12631": "\t\t\t}",
                    "12632": "\t\t};",
                    "12633": "\t\tvar setOrder = function (obj) {",
                    "12634": "\t\t\t_extTypes.order[name + '-pre'] = obj.pre; // can be undefined",
                    "12635": "\t\t\t_extTypes.order[name + '-asc'] = obj.asc; // can be undefined",
                    "12636": "\t\t\t_extTypes.order[name + '-desc'] = obj.desc; // can be undefined",
                    "12637": "\t\t};",
                    "12639": "\t\t// prop is optional",
                    "12640": "\t\tif (! val) {",
                    "12641": "\t\t\tval = prop;",
                    "12642": "\t\t\tprop = null;",
                    "12643": "\t\t}",
                    "12645": "\t\tif (prop === 'className') {",
                    "12646": "\t\t\tsetProp('className', val);",
                    "12647": "\t\t}",
                    "12648": "\t\telse if (prop === 'detect') {",
                    "12649": "\t\t\tsetDetect(val);",
                    "12650": "\t\t}",
                    "12651": "\t\telse if (prop === 'order') {",
                    "12652": "\t\t\tsetOrder(val);",
                    "12653": "\t\t}",
                    "12654": "\t\telse if (prop === 'render') {",
                    "12655": "\t\t\tsetProp('render', val);",
                    "12656": "\t\t}",
                    "12657": "\t\telse if (prop === 'search') {",
                    "12658": "\t\t\tsetProp('search', val);",
                    "12659": "\t\t}",
                    "12660": "\t\telse if (! prop) {",
                    "12661": "\t\t\tif (val.className) {",
                    "12662": "\t\t\t\tsetProp('className', val.className);",
                    "12663": "\t\t\t}",
                    "12665": "\t\t\tif (val.detect !== undefined) {",
                    "12666": "\t\t\t\tsetDetect(val.detect);",
                    "12667": "\t\t\t}",
                    "12669": "\t\t\tif (val.order) {",
                    "12670": "\t\t\t\tsetOrder(val.order);",
                    "12671": "\t\t\t}",
                    "12673": "\t\t\tif (val.render !== undefined) {",
                    "12674": "\t\t\t\tsetProp('render', val.render);",
                    "12675": "\t\t\t}",
                    "12677": "\t\t\tif (val.search !== undefined) {",
                    "12678": "\t\t\t\tsetProp('search', val.search);",
                    "12679": "\t\t\t}",
                    "12680": "\t\t}",
                    "12681": "\t}",
                    "12683": "\t// Get a list of types",
                    "12684": "\tDataTable.types = function () {",
                    "12685": "\t\treturn _extTypes.detect.map(function (fn) {",
                    "12686": "\t\t\treturn fn.name;",
                    "12687": "\t\t});",
                    "12688": "\t};",
                    "12690": "\t//",
                    "12691": "\t// Built in data types",
                    "12692": "\t//",
                    "12694": "\tDataTable.type('string', {",
                    "12695": "\t\tdetect: function () {",
                    "12696": "\t\t\treturn 'string';",
                    "12697": "\t\t},",
                    "12698": "\t\torder: {",
                    "12699": "\t\t\tpre: function ( a ) {",
                    "12700": "\t\t\t\t// This is a little complex, but faster than always calling toString,",
                    "12701": "\t\t\t\t// http://jsperf.com/tostring-v-check",
                    "12702": "\t\t\t\treturn _empty(a) ?",
                    "12703": "\t\t\t\t\t'' :",
                    "12704": "\t\t\t\t\ttypeof a === 'string' ?",
                    "12705": "\t\t\t\t\t\ta.toLowerCase() :",
                    "12706": "\t\t\t\t\t\t! a.toString ?",
                    "12707": "\t\t\t\t\t\t\t'' :",
                    "12708": "\t\t\t\t\t\t\ta.toString();",
                    "12710": "\t\t},",
                    "12711": "\t\tsearch: _filterString(false, true)",
                    "12712": "\t});",
                    "12715": "\tDataTable.type('html', {",
                    "12716": "\t\tdetect: function ( d ) {",
                    "12717": "\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?",
                    "12718": "\t\t\t\t'html' : null;",
                    "12719": "\t\t},",
                    "12720": "\t\torder: {",
                    "12721": "\t\t\tpre: function ( a ) {",
                    "12722": "\t\t\t\treturn _empty(a) ?",
                    "12723": "\t\t\t\t\t'' :",
                    "12724": "\t\t\t\t\ta.replace ?",
                    "12725": "\t\t\t\t\t\t_stripHtml(a).trim().toLowerCase() :",
                    "12726": "\t\t\t\t\t\ta+'';",
                    "12727": "\t\t\t}",
                    "12729": "\t\tsearch: _filterString(true, true)",
                    "12730": "\t});",
                    "12732": "",
                    "12733": "\tDataTable.type('date', {",
                    "12734": "\t\tclassName: 'dt-type-date',",
                    "12735": "\t\tdetect: function ( d )",
                    "12746": "\t\torder: {",
                    "12747": "\t\t\tpre: function ( d ) {",
                    "12748": "\t\t\t\tvar ts = Date.parse( d );",
                    "12749": "\t\t\t\treturn isNaN(ts) ? -Infinity : ts;",
                    "12750": "\t\t\t}",
                    "12751": "\t\t}",
                    "12752": "\t});",
                    "12754": "",
                    "12755": "\tDataTable.type('html-num-fmt', {",
                    "12756": "\t\tclassName: 'dt-type-numeric',",
                    "12757": "\t\tdetect: function ( d, settings )",
                    "12760": "\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt' : null;",
                    "12761": "\t\t},",
                    "12762": "\t\torder: {",
                    "12763": "\t\t\tpre: function ( d, s ) {",
                    "12764": "\t\t\t\tvar dp = s.oLanguage.sDecimal;",
                    "12765": "\t\t\t\treturn __numericReplace( d, dp, _re_html, _re_formatted_numeric );",
                    "12766": "\t\t\t}",
                    "12768": "\t\tsearch: _filterString(true, true)",
                    "12769": "\t});",
                    "12771": "",
                    "12772": "\tDataTable.type('html-num', {",
                    "12773": "\t\tclassName: 'dt-type-numeric',",
                    "12774": "\t\tdetect: function ( d, settings )",
                    "12777": "\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num' : null;",
                    "12778": "\t\t},",
                    "12779": "\t\torder: {",
                    "12780": "\t\t\tpre: function ( d, s ) {",
                    "12781": "\t\t\t\tvar dp = s.oLanguage.sDecimal;",
                    "12782": "\t\t\t\treturn __numericReplace( d, dp, _re_html );",
                    "12783": "\t\t\t}",
                    "12785": "\t\tsearch: _filterString(true, true)",
                    "12786": "\t});",
                    "12788": "",
                    "12789": "\tDataTable.type('num-fmt', {",
                    "12790": "\t\tclassName: 'dt-type-numeric',",
                    "12791": "\t\tdetect: function ( d, settings )",
                    "12794": "\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt' : null;",
                    "12796": "\t\torder: {",
                    "12797": "\t\t\tpre: function ( d, s ) {",
                    "12798": "\t\t\t\tvar dp = s.oLanguage.sDecimal;",
                    "12799": "\t\t\t\treturn __numericReplace( d, dp, _re_formatted_numeric );",
                    "12800": "\t\t\t}",
                    "12802": "\t});",
                    "12805": "\tDataTable.type('num', {",
                    "12806": "\t\tclassName: 'dt-type-numeric',",
                    "12807": "\t\tdetect: function ( d, settings )",
                    "12808": "\t\t{",
                    "12809": "\t\t\tvar decimal = settings.oLanguage.sDecimal;",
                    "12810": "\t\t\treturn _isNumber( d, decimal ) ? 'num' : null;",
                    "12812": "\t\torder: {",
                    "12813": "\t\t\tpre: function (d, s) {",
                    "12814": "\t\t\t\tvar dp = s.oLanguage.sDecimal;",
                    "12815": "\t\t\t\treturn __numericReplace( d, dp );",
                    "12816": "\t\t\t}",
                    "12818": "\t});",
                    "12819": "",
                    "12849": "\t\t}",
                    "12851": "\t\treturn d * 1;",
                    "12852": "\t};",
                    "12855": "\t$.extend( true, DataTable.ext.renderer, {",
                    "12856": "\t\tfooter: {",
                    "12857": "\t\t\t_: function ( settings, cell, classes ) {",
                    "12858": "\t\t\t\tcell.addClass(classes.tfoot.cell);",
                    "12859": "\t\t\t}",
                    "12862": "\t\theader: {",
                    "12863": "\t\t\t_: function ( settings, cell, classes ) {",
                    "12864": "\t\t\t\tcell.addClass(classes.thead.cell);",
                    "12866": "\t\t\t\tif (! settings.oFeatures.bSort) {",
                    "12867": "\t\t\t\t\tcell.addClass(classes.order.none);",
                    "12868": "\t\t\t\t}",
                    "12870": "\t\t\t\tvar legacyTop = settings.bSortCellsTop;",
                    "12871": "\t\t\t\tvar headerRows = cell.closest('thead').find('tr');",
                    "12872": "\t\t\t\tvar rowIdx = cell.parent().index();",
                    "12874": "\t\t\t\t// Conditions to not apply the ordering icons",
                    "12875": "\t\t\t\tif (",
                    "12876": "\t\t\t\t\t// Cells and rows which have the attribute to disable the icons",
                    "12877": "\t\t\t\t\tcell.attr('data-dt-order') === 'disable' ||",
                    "12878": "\t\t\t\t\tcell.parent().attr('data-dt-order') === 'disable' ||",
                    "12879": "",
                    "12880": "\t\t\t\t\t// Legacy support for `orderCellsTop`. If it is set, then cells",
                    "12881": "\t\t\t\t\t// which are not in the top or bottom row of the header (depending",
                    "12882": "\t\t\t\t\t// on the value) do not get the sorting classes applied to them",
                    "12883": "\t\t\t\t\t(legacyTop === true && rowIdx !== 0) ||",
                    "12884": "\t\t\t\t\t(legacyTop === false && rowIdx !== headerRows.length - 1)",
                    "12885": "\t\t\t\t) {",
                    "12886": "\t\t\t\t\treturn;",
                    "12887": "\t\t\t\t}",
                    "12894": "\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting ) {",
                    "12899": "\t\t\t\t\tvar orderClasses = classes.order;",
                    "12900": "\t\t\t\t\tvar columns = ctx.api.columns( cell );",
                    "12901": "\t\t\t\t\tvar col = settings.aoColumns[columns.flatten()[0]];",
                    "12902": "\t\t\t\t\tvar orderable = columns.orderable().includes(true);",
                    "12903": "\t\t\t\t\tvar ariaType = '';",
                    "12904": "\t\t\t\t\tvar indexes = columns.indexes();",
                    "12905": "\t\t\t\t\tvar sortDirs = columns.orderable(true).flatten();",
                    "12906": "\t\t\t\t\tvar orderedColumns = sorting.map( function (val) {",
                    "12907": "\t\t\t\t\t\treturn val.col;",
                    "12908": "\t\t\t\t\t} ).join(',');",
                    "12912": "\t\t\t\t\t\t\torderClasses.isAsc +' '+",
                    "12913": "\t\t\t\t\t\t\torderClasses.isDesc",
                    "12915": "\t\t\t\t\t\t.toggleClass( orderClasses.none, ! orderable )",
                    "12916": "\t\t\t\t\t\t.toggleClass( orderClasses.canAsc, orderable && sortDirs.includes('asc') )",
                    "12917": "\t\t\t\t\t\t.toggleClass( orderClasses.canDesc, orderable && sortDirs.includes('desc') );",
                    "12918": "",
                    "12919": "\t\t\t\t\tvar sortIdx = orderedColumns.indexOf( indexes.toArray().join(',') );",
                    "12920": "",
                    "12921": "\t\t\t\t\tif ( sortIdx !== -1 ) {",
                    "12922": "\t\t\t\t\t\t// Get the ordering direction for the columns under this cell",
                    "12923": "\t\t\t\t\t\t// Note that it is possible for a cell to be asc and desc sorting",
                    "12924": "\t\t\t\t\t\t// (column spanning cells)",
                    "12925": "\t\t\t\t\t\tvar orderDirs = columns.order();",
                    "12926": "",
                    "12927": "\t\t\t\t\t\tcell.addClass(",
                    "12928": "\t\t\t\t\t\t\torderDirs.includes('asc') ? orderClasses.isAsc : '' +",
                    "12929": "\t\t\t\t\t\t\torderDirs.includes('desc') ? orderClasses.isDesc : ''",
                    "12931": "\t\t\t\t\t}",
                    "12933": "\t\t\t\t\t// The ARIA spec says that only one column should be marked with aria-sort",
                    "12934": "\t\t\t\t\tif ( sortIdx === 0 && orderedColumns.length === indexes.count() ) {",
                    "12935": "\t\t\t\t\t\tvar firstSort = sorting[0];",
                    "12936": "\t\t\t\t\t\tvar sortOrder = col.asSorting;",
                    "12938": "\t\t\t\t\t\tcell.attr('aria-sort', firstSort.dir === 'asc' ? 'ascending' : 'descending');",
                    "12939": "",
                    "12940": "\t\t\t\t\t\t// Determine if the next click will remove sorting or change the sort",
                    "12941": "\t\t\t\t\t\tariaType = ! sortOrder[firstSort.index + 1] ? 'Remove' : 'Reverse';",
                    "12942": "\t\t\t\t\t}",
                    "12943": "\t\t\t\t\telse {",
                    "12944": "\t\t\t\t\t\tcell.removeAttr('aria-sort');",
                    "12947": "\t\t\t\t\tcell.attr('aria-label', orderable",
                    "12948": "\t\t\t\t\t\t? col.ariaTitle + ctx.api.i18n('oAria.orderable' + ariaType)",
                    "12949": "\t\t\t\t\t\t: col.ariaTitle",
                    "12950": "\t\t\t\t\t);",
                    "12952": "\t\t\t\t\tif (orderable) {",
                    "12953": "\t\t\t\t\t\tcell.find('.dt-column-title').attr('role', 'button');",
                    "12954": "\t\t\t\t\t\tcell.attr('tabindex', 0)",
                    "12955": "\t\t\t\t\t}",
                    "12956": "\t\t\t\t} );",
                    "12957": "\t\t\t}",
                    "12958": "\t\t},",
                    "12960": "\t\tlayout: {",
                    "12961": "\t\t\t_: function ( settings, container, items ) {",
                    "12962": "\t\t\t\tvar row = $('<div/>')",
                    "12963": "\t\t\t\t\t.addClass('dt-layout-row')",
                    "12964": "\t\t\t\t\t.appendTo( container );",
                    "12965": "",
                    "12966": "\t\t\t\t$.each( items, function (key, val) {",
                    "12967": "\t\t\t\t\tvar klass = ! val.table ?",
                    "12968": "\t\t\t\t\t\t'dt-'+key+' ' :",
                    "12969": "\t\t\t\t\t\t'';",
                    "12970": "",
                    "12971": "\t\t\t\t\tif (val.table) {",
                    "12972": "\t\t\t\t\t\trow.addClass('dt-layout-table');",
                    "12973": "\t\t\t\t\t}",
                    "12974": "",
                    "12975": "\t\t\t\t\t$('<div/>')",
                    "12976": "\t\t\t\t\t\t.attr({",
                    "12977": "\t\t\t\t\t\t\tid: val.id || null,",
                    "12978": "\t\t\t\t\t\t\t\"class\": 'dt-layout-cell '+klass+(val.className || '')",
                    "12979": "\t\t\t\t\t\t})",
                    "12980": "\t\t\t\t\t\t.append( val.contents )",
                    "12981": "\t\t\t\t\t\t.appendTo( row );",
                    "12988": "\tDataTable.feature = {};",
                    "12990": "\t// Third parameter is internal only!",
                    "12991": "\tDataTable.feature.register = function ( name, cb, legacy ) {",
                    "12992": "\t\tDataTable.ext.features[ name ] = cb;",
                    "12993": "",
                    "12994": "\t\tif (legacy) {",
                    "12995": "\t\t\t_ext.feature.push({",
                    "12996": "\t\t\t\tcFeature: legacy,",
                    "12997": "\t\t\t\tfnInit: cb",
                    "12998": "\t\t\t});",
                    "12999": "\t\t}",
                    "13002": "\tDataTable.feature.register( 'info', function ( settings, opts ) {",
                    "13003": "\t\t// For compatibility with the legacy `info` top level option",
                    "13004": "\t\tif (! settings.oFeatures.bInfo) {",
                    "13005": "\t\t\treturn null;",
                    "13007": "",
                    "13008": "\t\tvar",
                    "13009": "\t\t\tlang  = settings.oLanguage,",
                    "13010": "\t\t\ttid = settings.sTableId,",
                    "13011": "\t\t\tn = $('<div/>', {",
                    "13012": "\t\t\t\t'class': settings.oClasses.info.container,",
                    "13013": "\t\t\t} );",
                    "13014": "",
                    "13015": "\t\topts = $.extend({",
                    "13016": "\t\t\tcallback: lang.fnInfoCallback,",
                    "13017": "\t\t\tempty: lang.sInfoEmpty,",
                    "13018": "\t\t\tpostfix: lang.sInfoPostFix,",
                    "13019": "\t\t\tsearch: lang.sInfoFiltered,",
                    "13020": "\t\t\ttext: lang.sInfo,",
                    "13021": "\t\t}, opts);",
                    "13022": "",
                    "13023": "",
                    "13024": "\t\t// Update display on each draw",
                    "13025": "\t\tsettings.aoDrawCallback.push(function (s) {",
                    "13026": "\t\t\t_fnUpdateInfo(s, opts, n);",
                    "13027": "\t\t});",
                    "13028": "",
                    "13029": "\t\t// For the first info display in the table, we add a callback and aria information.",
                    "13030": "\t\tif (! $('#' + tid+'_info', settings.nWrapper).length) {",
                    "13031": "\t\t\tn.attr({",
                    "13032": "\t\t\t\t'aria-live': 'polite',",
                    "13033": "\t\t\t\tid: tid+'_info',",
                    "13034": "\t\t\t\trole: 'status'",
                    "13035": "\t\t\t});",
                    "13036": "",
                    "13037": "\t\t\t// Table is described by our info div",
                    "13038": "\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );",
                    "13041": "\t\treturn n;",
                    "13042": "\t}, 'i' );",
                    "13044": "\t/**",
                    "13045": "\t * Update the information elements in the display",
                    "13046": "\t *  @param {object} settings dataTables settings object",
                    "13047": "\t *  @memberof DataTable#oApi",
                    "13048": "\t */",
                    "13049": "\tfunction _fnUpdateInfo ( settings, opts, node )",
                    "13050": "\t{",
                    "13051": "\t\tvar",
                    "13052": "\t\t\tstart = settings._iDisplayStart+1,",
                    "13053": "\t\t\tend   = settings.fnDisplayEnd(),",
                    "13054": "\t\t\tmax   = settings.fnRecordsTotal(),",
                    "13055": "\t\t\ttotal = settings.fnRecordsDisplay(),",
                    "13056": "\t\t\tout   = total",
                    "13057": "\t\t\t\t? opts.text",
                    "13058": "\t\t\t\t: opts.empty;",
                    "13060": "\t\tif ( total !== max ) {",
                    "13061": "\t\t\t// Record set after filtering",
                    "13062": "\t\t\tout += ' ' + opts.search;",
                    "13063": "\t\t}",
                    "13065": "\t\t// Convert the macros",
                    "13066": "\t\tout += opts.postfix;",
                    "13067": "\t\tout = _fnMacros( settings, out );",
                    "13068": "",
                    "13069": "\t\tif ( opts.callback ) {",
                    "13070": "\t\t\tout = opts.callback.call( settings.oInstance,",
                    "13071": "\t\t\t\tsettings, start, end, max, total, out",
                    "13072": "\t\t\t);",
                    "13075": "\t\tnode.html( out );",
                    "13077": "\t\t_fnCallbackFire(settings, null, 'info', [settings, node[0], out]);",
                    "13078": "\t}",
                    "13079": "",
                    "13080": "\tvar __searchCounter = 0;",
                    "13081": "",
                    "13082": "\t// opts",
                    "13083": "\t// - text",
                    "13084": "\t// - placeholder",
                    "13085": "\tDataTable.feature.register( 'search', function ( settings, opts ) {",
                    "13086": "\t\t// Don't show the input if filtering isn't available on the table",
                    "13087": "\t\tif (! settings.oFeatures.bFilter) {",
                    "13088": "\t\t\treturn null;",
                    "13090": "",
                    "13091": "\t\tvar classes = settings.oClasses.search;",
                    "13092": "\t\tvar tableId = settings.sTableId;",
                    "13093": "\t\tvar language = settings.oLanguage;",
                    "13094": "\t\tvar previousSearch = settings.oPreviousSearch;",
                    "13095": "\t\tvar input = '<input type=\"search\" class=\"'+classes.input+'\"/>';",
                    "13096": "",
                    "13097": "\t\topts = $.extend({",
                    "13098": "\t\t\tplaceholder: language.sSearchPlaceholder,",
                    "13099": "\t\t\ttext: language.sSearch",
                    "13100": "\t\t}, opts);",
                    "13101": "",
                    "13102": "\t\t// The _INPUT_ is optional - is appended if not present",
                    "13103": "\t\tif (opts.text.indexOf('_INPUT_') === -1) {",
                    "13104": "\t\t\topts.text += '_INPUT_';",
                    "13107": "\t\topts.text = _fnMacros(settings, opts.text);",
                    "13108": "",
                    "13109": "\t\t// We can put the <input> outside of the label if it is at the start or end",
                    "13110": "\t\t// which helps improve accessability (not all screen readers like implicit",
                    "13111": "\t\t// for elements).",
                    "13112": "\t\tvar end = opts.text.match(/_INPUT_$/);",
                    "13113": "\t\tvar start = opts.text.match(/^_INPUT_/);",
                    "13114": "\t\tvar removed = opts.text.replace(/_INPUT_/, '');",
                    "13115": "\t\tvar str = '<label>' + opts.text + '</label>';",
                    "13116": "",
                    "13117": "\t\tif (start) {",
                    "13118": "\t\t\tstr = '_INPUT_<label>' + removed + '</label>';",
                    "13119": "\t\t}",
                    "13120": "\t\telse if (end) {",
                    "13121": "\t\t\tstr = '<label>' + removed + '</label>_INPUT_';",
                    "13124": "\t\tvar filter = $('<div>')",
                    "13125": "\t\t\t.addClass(classes.container)",
                    "13126": "\t\t\t.append(str.replace(/_INPUT_/, input));",
                    "13128": "\t\t// add for and id to label and input",
                    "13129": "\t\tfilter.find('label').attr('for', 'dt-search-' + __searchCounter);",
                    "13130": "\t\tfilter.find('input').attr('id', 'dt-search-' + __searchCounter);",
                    "13131": "\t\t__searchCounter++;",
                    "13132": "",
                    "13133": "\t\tvar searchFn = function(event) {",
                    "13134": "\t\t\tvar val = this.value;",
                    "13135": "",
                    "13136": "\t\t\tif(previousSearch.return && event.key !== \"Enter\") {",
                    "13137": "\t\t\t\treturn;",
                    "13139": "",
                    "13140": "\t\t\t/* Now do the filter */",
                    "13141": "\t\t\tif ( val != previousSearch.search ) {",
                    "13142": "\t\t\t\tpreviousSearch.search = val;",
                    "13143": "",
                    "13144": "\t\t\t\t_fnFilterComplete( settings, previousSearch );",
                    "13145": "",
                    "13146": "\t\t\t\t// Need to redraw, without resorting",
                    "13147": "\t\t\t\tsettings._iDisplayStart = 0;",
                    "13148": "\t\t\t\t_fnDraw( settings );",
                    "13150": "\t\t};",
                    "13151": "",
                    "13152": "\t\tvar searchDelay = settings.searchDelay !== null ?",
                    "13153": "\t\t\tsettings.searchDelay :",
                    "13154": "\t\t\t0;",
                    "13155": "",
                    "13156": "\t\tvar jqFilter = $('input', filter)",
                    "13157": "\t\t\t.val( previousSearch.search )",
                    "13158": "\t\t\t.attr( 'placeholder', opts.placeholder )",
                    "13159": "\t\t\t.on(",
                    "13160": "\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',",
                    "13161": "\t\t\t\tsearchDelay ?",
                    "13162": "\t\t\t\t\tDataTable.util.debounce( searchFn, searchDelay ) :",
                    "13163": "\t\t\t\t\tsearchFn",
                    "13164": "\t\t\t)",
                    "13165": "\t\t\t.on( 'mouseup.DT', function(e) {",
                    "13166": "\t\t\t\t// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking",
                    "13167": "\t\t\t\t// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`",
                    "13168": "\t\t\t\t// checks the value to see if it has changed. In other browsers it won't have.",
                    "13169": "\t\t\t\tsetTimeout( function () {",
                    "13170": "\t\t\t\t\tsearchFn.call(jqFilter[0], e);",
                    "13171": "\t\t\t\t}, 10);",
                    "13172": "\t\t\t} )",
                    "13173": "\t\t\t.on( 'keypress.DT', function(e) {",
                    "13174": "\t\t\t\t/* Prevent form submission */",
                    "13175": "\t\t\t\tif ( e.keyCode == 13 ) {",
                    "13176": "\t\t\t\t\treturn false;",
                    "13177": "\t\t\t\t}",
                    "13178": "\t\t\t} )",
                    "13179": "\t\t\t.attr('aria-controls', tableId);",
                    "13180": "",
                    "13181": "\t\t// Update the input elements whenever the table is filtered",
                    "13182": "\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {",
                    "13183": "\t\t\tif ( settings === s && jqFilter[0] !== document.activeElement ) {",
                    "13184": "\t\t\t\tjqFilter.val( typeof previousSearch.search !== 'function'",
                    "13185": "\t\t\t\t\t? previousSearch.search",
                    "13186": "\t\t\t\t\t: ''",
                    "13187": "\t\t\t\t);",
                    "13189": "\t\t} );",
                    "13191": "\t\treturn filter;",
                    "13192": "\t}, 'f' );",
                    "13194": "\t// opts",
                    "13195": "\t// - type - button configuration",
                    "13196": "\t// - numbers - number of buttons to show - must be odd",
                    "13197": "\tDataTable.feature.register( 'paging', function ( settings, opts ) {",
                    "13198": "\t\t// Don't show the paging input if the table doesn't have paging enabled",
                    "13199": "\t\tif (! settings.oFeatures.bPaginate) {",
                    "13200": "\t\t\treturn null;",
                    "13201": "\t\t}",
                    "13203": "\t\topts = $.extend({",
                    "13204": "\t\t\tnumbers: DataTable.ext.pager.numbers_length,",
                    "13205": "\t\t\ttype: settings.sPaginationType",
                    "13206": "\t\t}, opts)",
                    "13208": "\t\tvar host = $('<div/>').addClass( settings.oClasses.paging.container + ' paging_' + opts.type );",
                    "13209": "\t\tvar draw = function () {",
                    "13210": "\t\t\t_pagingDraw(settings, host, opts);",
                    "13211": "\t\t};",
                    "13213": "\t\tsettings.aoDrawCallback.push(draw);",
                    "13215": "\t\t// Responsive redraw of paging control",
                    "13216": "\t\t$(settings.nTable).on('column-sizing.dt.DT', draw);",
                    "13218": "\t\treturn host;",
                    "13219": "\t}, 'p' );",
                    "13221": "\tfunction _pagingDraw(settings, host, opts) {",
                    "13222": "\t\tif (! settings._bInitComplete) {",
                    "13223": "\t\t\treturn;",
                    "13224": "\t\t}",
                    "13226": "\t\tvar",
                    "13227": "\t\t\tplugin = DataTable.ext.pager[ opts.type ],",
                    "13228": "\t\t\taria = settings.oLanguage.oAria.paginate || {},",
                    "13229": "\t\t\tstart      = settings._iDisplayStart,",
                    "13230": "\t\t\tlen        = settings._iDisplayLength,",
                    "13231": "\t\t\tvisRecords = settings.fnRecordsDisplay(),",
                    "13232": "\t\t\tall        = len === -1,",
                    "13233": "\t\t\tpage = all ? 0 : Math.ceil( start / len ),",
                    "13234": "\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),",
                    "13235": "\t\t\tbuttons = plugin()",
                    "13236": "\t\t\t\t.map(function (val) {",
                    "13237": "\t\t\t\t\treturn val === 'numbers'",
                    "13238": "\t\t\t\t\t\t? _pagingNumbers(page, pages, opts.numbers)",
                    "13239": "\t\t\t\t\t\t: val;",
                    "13240": "\t\t\t\t})",
                    "13241": "\t\t\t\t.flat();",
                    "13242": "",
                    "13243": "\t\tvar buttonEls = [];",
                    "13244": "",
                    "13245": "\t\tfor (var i=0 ; i<buttons.length ; i++) {",
                    "13246": "\t\t\tvar button = buttons[i];",
                    "13247": "",
                    "13248": "\t\t\tvar btnInfo = _pagingButtonInfo(settings, button, page, pages);",
                    "13249": "\t\t\tvar btn = _fnRenderer( settings, 'pagingButton' )(",
                    "13250": "\t\t\t\tsettings,",
                    "13251": "\t\t\t\tbutton,",
                    "13252": "\t\t\t\tbtnInfo.display,",
                    "13253": "\t\t\t\tbtnInfo.active,",
                    "13254": "\t\t\t\tbtnInfo.disabled",
                    "13255": "\t\t\t);",
                    "13256": "",
                    "13257": "\t\t\t// Common attributes",
                    "13258": "\t\t\t$(btn.clicker).attr({",
                    "13259": "\t\t\t\t'aria-controls': settings.sTableId,",
                    "13260": "\t\t\t\t'aria-disabled': btnInfo.disabled ? 'true' : null,",
                    "13261": "\t\t\t\t'aria-current': btnInfo.active ? 'page' : null,",
                    "13262": "\t\t\t\t'aria-label': aria[ button ],",
                    "13263": "\t\t\t\t'data-dt-idx': button,",
                    "13264": "\t\t\t\t'tabIndex': btnInfo.disabled ? -1 : settings.iTabIndex,",
                    "13265": "\t\t\t});",
                    "13266": "",
                    "13267": "\t\t\tif (typeof button !== 'number') {",
                    "13268": "\t\t\t\t$(btn.clicker).addClass(button);",
                    "13269": "\t\t\t}",
                    "13271": "\t\t\t_fnBindAction(",
                    "13272": "\t\t\t\tbtn.clicker, {action: button}, function(e) {",
                    "13273": "\t\t\t\t\te.preventDefault();",
                    "13275": "\t\t\t\t\t_fnPageChange( settings, e.data.action, true );",
                    "13277": "\t\t\t);",
                    "13279": "\t\t\tbuttonEls.push(btn.display);",
                    "13280": "\t\t}",
                    "13282": "\t\tvar wrapped = _fnRenderer(settings, 'pagingContainer')(",
                    "13283": "\t\t\tsettings, buttonEls",
                    "13284": "\t\t);",
                    "13285": "",
                    "13286": "\t\tvar activeEl = host.find(document.activeElement).data('dt-idx');",
                    "13287": "",
                    "13288": "\t\thost.empty().append(wrapped);",
                    "13289": "",
                    "13290": "\t\tif ( activeEl !== undefined ) {",
                    "13291": "\t\t\thost.find( '[data-dt-idx='+activeEl+']' ).trigger('focus');",
                    "13292": "\t\t}",
                    "13293": "",
                    "13294": "\t\t// Responsive - check if the buttons are over two lines based on the",
                    "13295": "\t\t// height of the buttons and the container.",
                    "13296": "\t\tif (",
                    "13297": "\t\t\tbuttonEls.length && // any buttons",
                    "13298": "\t\t\topts.numbers > 1 && // prevent infinite",
                    "13299": "\t\t\t$(host).outerHeight() >= ($(buttonEls[0]).outerHeight() * 2) - 10",
                    "13300": "\t\t) {",
                    "13301": "\t\t\t_pagingDraw(settings, host, $.extend({}, opts, { numbers: opts.numbers - 2 }));",
                    "13305": "\t/**",
                    "13306": "\t * Get properties for a button based on the current paging state of the table",
                    "13307": "\t *",
                    "13308": "\t * @param {*} settings DT settings object",
                    "13309": "\t * @param {*} button The button type in question",
                    "13310": "\t * @param {*} page Table's current page",
                    "13311": "\t * @param {*} pages Number of pages",
                    "13312": "\t * @returns Info object",
                    "13313": "\t */",
                    "13314": "\tfunction _pagingButtonInfo(settings, button, page, pages) {",
                    "13315": "\t\tvar lang = settings.oLanguage.oPaginate;",
                    "13316": "\t\tvar o = {",
                    "13317": "\t\t\tdisplay: '',",
                    "13318": "\t\t\tactive: false,",
                    "13319": "\t\t\tdisabled: false",
                    "13320": "\t\t};",
                    "13322": "\t\tswitch ( button ) {",
                    "13323": "\t\t\tcase 'ellipsis':",
                    "13324": "\t\t\t\to.display = '&#x2026;';",
                    "13325": "\t\t\t\to.disabled = true;",
                    "13326": "\t\t\t\tbreak;",
                    "13327": "",
                    "13328": "\t\t\tcase 'first':",
                    "13329": "\t\t\t\to.display = lang.sFirst;",
                    "13330": "",
                    "13331": "\t\t\t\tif (page === 0) {",
                    "13332": "\t\t\t\t\to.disabled = true;",
                    "13334": "\t\t\t\tbreak;",
                    "13335": "",
                    "13336": "\t\t\tcase 'previous':",
                    "13337": "\t\t\t\to.display = lang.sPrevious;",
                    "13338": "",
                    "13339": "\t\t\t\tif ( page === 0 ) {",
                    "13340": "\t\t\t\t\to.disabled = true;",
                    "13342": "\t\t\t\tbreak;",
                    "13344": "\t\t\tcase 'next':",
                    "13345": "\t\t\t\to.display = lang.sNext;",
                    "13347": "\t\t\t\tif ( pages === 0 || page === pages-1 ) {",
                    "13348": "\t\t\t\t\to.disabled = true;",
                    "13349": "\t\t\t\t}",
                    "13350": "\t\t\t\tbreak;",
                    "13352": "\t\t\tcase 'last':",
                    "13353": "\t\t\t\to.display = lang.sLast;",
                    "13355": "\t\t\t\tif ( pages === 0 || page === pages-1 ) {",
                    "13356": "\t\t\t\t\to.disabled = true;",
                    "13357": "\t\t\t\t}",
                    "13358": "\t\t\t\tbreak;",
                    "13359": "",
                    "13360": "\t\t\tdefault:",
                    "13361": "\t\t\t\tif ( typeof button === 'number' ) {",
                    "13362": "\t\t\t\t\to.display = settings.fnFormatNumber( button + 1 );",
                    "13363": "",
                    "13364": "\t\t\t\t\tif (page === button) {",
                    "13365": "\t\t\t\t\t\to.active = true;",
                    "13366": "\t\t\t\t\t}",
                    "13367": "\t\t\t\t}",
                    "13368": "\t\t\t\tbreak;",
                    "13370": "",
                    "13371": "\t\treturn o;",
                    "13375": "\t * Compute what number buttons to show in the paging control",
                    "13377": "\t * @param {*} page Current page",
                    "13378": "\t * @param {*} pages Total number of pages",
                    "13379": "\t * @param {*} buttons Target number of number buttons",
                    "13380": "\t * @returns Buttons to show",
                    "13382": "\tfunction _pagingNumbers ( page, pages, buttons ) {",
                    "13383": "\t\tvar",
                    "13384": "\t\t\tnumbers = [],",
                    "13385": "\t\t\thalf = Math.floor(buttons / 2);",
                    "13387": "\t\tif ( pages <= buttons ) {",
                    "13388": "\t\t\tnumbers = _range(0, pages);",
                    "13389": "\t\t}",
                    "13390": "\t\telse if (buttons === 1) {",
                    "13391": "\t\t\t// Single button - current page only",
                    "13392": "\t\t\tnumbers = [page];",
                    "13393": "\t\t}",
                    "13394": "\t\telse if (buttons === 3) {",
                    "13395": "\t\t\t// Special logic for just three buttons",
                    "13396": "\t\t\tif (page <= 1) {",
                    "13397": "\t\t\t\tnumbers = [0, 1, 'ellipsis'];",
                    "13399": "\t\t\telse if (page >= pages - 2) {",
                    "13400": "\t\t\t\tnumbers = _range(pages-2, pages);",
                    "13401": "\t\t\t\tnumbers.unshift('ellipsis');",
                    "13402": "\t\t\t}",
                    "13403": "\t\t\telse {",
                    "13404": "\t\t\t\tnumbers = ['ellipsis', page, 'ellipsis'];",
                    "13405": "\t\t\t}",
                    "13406": "\t\t}",
                    "13407": "\t\telse if ( page <= half ) {",
                    "13408": "\t\t\tnumbers = _range(0, buttons-2);",
                    "13409": "\t\t\tnumbers.push('ellipsis', pages-1);",
                    "13410": "\t\t}",
                    "13411": "\t\telse if ( page >= pages - 1 - half ) {",
                    "13412": "\t\t\tnumbers = _range(pages-(buttons-2), pages);",
                    "13413": "\t\t\tnumbers.unshift(0, 'ellipsis');",
                    "13414": "\t\t}",
                    "13415": "\t\telse {",
                    "13416": "\t\t\tnumbers = _range(page-half+2, page+half-1);",
                    "13417": "\t\t\tnumbers.push('ellipsis', pages-1);",
                    "13418": "\t\t\tnumbers.unshift(0, 'ellipsis');",
                    "13419": "\t\t}",
                    "13421": "\t\treturn numbers;",
                    "13422": "\t}",
                    "13424": "\tvar __lengthCounter = 0;",
                    "13426": "\t// opts",
                    "13427": "\t// - menu",
                    "13428": "\t// - text",
                    "13429": "\tDataTable.feature.register( 'pageLength', function ( settings, opts ) {",
                    "13430": "\t\tvar features = settings.oFeatures;",
                    "13432": "\t\t// For compatibility with the legacy `pageLength` top level option",
                    "13433": "\t\tif (! features.bPaginate || ! features.bLengthChange) {",
                    "13434": "\t\t\treturn null;",
                    "13435": "\t\t}",
                    "13437": "\t\topts = $.extend({",
                    "13438": "\t\t\tmenu: settings.aLengthMenu,",
                    "13439": "\t\t\ttext: settings.oLanguage.sLengthMenu",
                    "13440": "\t\t}, opts);",
                    "13442": "\t\tvar",
                    "13443": "\t\t\tclasses  = settings.oClasses.length,",
                    "13444": "\t\t\ttableId  = settings.sTableId,",
                    "13445": "\t\t\tmenu     = opts.menu,",
                    "13446": "\t\t\tlengths  = [],",
                    "13447": "\t\t\tlanguage = [],",
                    "13448": "\t\t\ti;",
                    "13450": "\t\t// Options can be given in a number of ways",
                    "13451": "\t\tif (Array.isArray( menu[0] )) {",
                    "13452": "\t\t\t// Old 1.x style - 2D array",
                    "13453": "\t\t\tlengths = menu[0];",
                    "13454": "\t\t\tlanguage = menu[1];",
                    "13455": "\t\t}",
                    "13456": "\t\telse {",
                    "13457": "\t\t\tfor ( i=0 ; i<menu.length ; i++ ) {",
                    "13458": "\t\t\t\t// An object with different label and value",
                    "13459": "\t\t\t\tif ($.isPlainObject(menu[i])) {",
                    "13460": "\t\t\t\t\tlengths.push(menu[i].value);",
                    "13461": "\t\t\t\t\tlanguage.push(menu[i].label);",
                    "13463": "\t\t\t\telse {",
                    "13464": "\t\t\t\t\t// Or just a number to display and use",
                    "13465": "\t\t\t\t\tlengths.push(menu[i]);",
                    "13466": "\t\t\t\t\tlanguage.push(menu[i]);",
                    "13467": "\t\t\t\t}",
                    "13468": "\t\t\t}",
                    "13469": "\t\t}",
                    "13471": "\t\t// We can put the <select> outside of the label if it is at the start or",
                    "13472": "\t\t// end which helps improve accessability (not all screen readers like",
                    "13473": "\t\t// implicit for elements).",
                    "13474": "\t\tvar end = opts.text.match(/_MENU_$/);",
                    "13475": "\t\tvar start = opts.text.match(/^_MENU_/);",
                    "13476": "\t\tvar removed = opts.text.replace(/_MENU_/, '');",
                    "13477": "\t\tvar str = '<label>' + opts.text + '</label>';",
                    "13478": "",
                    "13479": "\t\tif (start) {",
                    "13480": "\t\t\tstr = '_MENU_<label>' + removed + '</label>';",
                    "13481": "\t\t}",
                    "13482": "\t\telse if (end) {",
                    "13483": "\t\t\tstr = '<label>' + removed + '</label>_MENU_';",
                    "13486": "\t\t// Wrapper element - use a span as a holder for where the select will go",
                    "13487": "\t\tvar div = $('<div/>')",
                    "13488": "\t\t\t.addClass( classes.container )",
                    "13489": "\t\t\t.append(",
                    "13490": "\t\t\t\tstr.replace( '_MENU_', '<span></span>' )",
                    "13491": "\t\t\t);",
                    "13493": "\t\t// Save text node content for macro updating",
                    "13494": "\t\tvar textNodes = [];",
                    "13495": "\t\tdiv.find('label')[0].childNodes.forEach(function (el) {",
                    "13496": "\t\t\tif (el.nodeType === Node.TEXT_NODE) {",
                    "13497": "\t\t\t\ttextNodes.push({",
                    "13498": "\t\t\t\t\tel: el,",
                    "13499": "\t\t\t\t\ttext: el.textContent",
                    "13500": "\t\t\t\t});",
                    "13501": "\t\t\t}",
                    "13502": "\t\t})",
                    "13504": "\t\t// Update the label text in case it has an entries value",
                    "13505": "\t\tvar updateEntries = function (len) {",
                    "13506": "\t\t\ttextNodes.forEach(function (node) {",
                    "13507": "\t\t\t\tnode.el.textContent = _fnMacros(settings, node.text, len);",
                    "13508": "\t\t\t});",
                    "13509": "\t\t}",
                    "13511": "\t\t// Next, the select itself, along with the options",
                    "13512": "\t\tvar select = $('<select/>', {",
                    "13513": "\t\t\t'name':          tableId+'_length',",
                    "13514": "\t\t\t'aria-controls': tableId,",
                    "13515": "\t\t\t'class':         classes.select",
                    "13516": "\t\t} );",
                    "13517": "",
                    "13518": "\t\tfor ( i=0 ; i<lengths.length ; i++ ) {",
                    "13519": "\t\t\tselect[0][ i ] = new Option(",
                    "13520": "\t\t\t\ttypeof language[i] === 'number' ?",
                    "13521": "\t\t\t\t\tsettings.fnFormatNumber( language[i] ) :",
                    "13522": "\t\t\t\t\tlanguage[i],",
                    "13523": "\t\t\t\tlengths[i]",
                    "13525": "\t\t}",
                    "13527": "\t\t// add for and id to label and input",
                    "13528": "\t\tdiv.find('label').attr('for', 'dt-length-' + __lengthCounter);",
                    "13529": "\t\tselect.attr('id', 'dt-length-' + __lengthCounter);",
                    "13530": "\t\t__lengthCounter++;",
                    "13532": "\t\t// Swap in the select list",
                    "13533": "\t\tdiv.find('span').replaceWith(select);",
                    "13534": "",
                    "13535": "\t\t// Can't use `select` variable as user might provide their own and the",
                    "13536": "\t\t// reference is broken by the use of outerHTML",
                    "13537": "\t\t$('select', div)",
                    "13538": "\t\t\t.val( settings._iDisplayLength )",
                    "13539": "\t\t\t.on( 'change.DT', function() {",
                    "13540": "\t\t\t\t_fnLengthChange( settings, $(this).val() );",
                    "13541": "\t\t\t\t_fnDraw( settings );",
                    "13542": "\t\t\t} );",
                    "13543": "",
                    "13544": "\t\t// Update node value whenever anything changes the table's length",
                    "13545": "\t\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {",
                    "13546": "\t\t\tif ( settings === s ) {",
                    "13547": "\t\t\t\t$('select', div).val( len );",
                    "13548": "",
                    "13549": "\t\t\t\t// Resolve plurals in the text for the new length",
                    "13550": "\t\t\t\tupdateEntries(len);",
                    "13551": "\t\t\t}",
                    "13552": "\t\t} );",
                    "13553": "",
                    "13554": "\t\tupdateEntries(settings._iDisplayLength);",
                    "13556": "\t\treturn div;",
                    "13557": "\t}, 'l' );",
                    "13630": "}(function( $, window, document ) {",
                    "13638": " * DataTables 2 or newer.",
                    "13641": " * controls using Bootstrap. See https://datatables.net/manual/styling/bootstrap",
                    "13652": "$.extend( true, DataTable.ext.classes, {",
                    "13653": "\tcontainer: \"dt-container dt-bootstrap5\",",
                    "13654": "\tsearch: {",
                    "13655": "\t\tinput: \"form-control form-control-sm\"",
                    "13656": "\t},",
                    "13657": "\tlength: {",
                    "13658": "\t\tselect: \"form-select form-select-sm\"",
                    "13659": "\t},",
                    "13660": "\tprocessing: {",
                    "13661": "\t\tcontainer: \"dt-processing card\"",
                    "13662": "\t}",
                    "13667": "DataTable.ext.renderer.pagingButton.bootstrap = function (settings, buttonType, content, active, disabled) {",
                    "13668": "\tvar btnClasses = ['dt-paging-button', 'page-item'];",
                    "13670": "\tif (active) {",
                    "13671": "\t\tbtnClasses.push('active');",
                    "13672": "\t}",
                    "13674": "\tif (disabled) {",
                    "13675": "\t\tbtnClasses.push('disabled')",
                    "13676": "\t}",
                    "13678": "\tvar li = $('<li>').addClass(btnClasses.join(' '));",
                    "13679": "\tvar a = $('<a>', {",
                    "13680": "\t\t'href': disabled ? null : '#',",
                    "13681": "\t\t'class': 'page-link'",
                    "13682": "\t})",
                    "13683": "\t\t.html(content)",
                    "13684": "\t\t.appendTo(li);",
                    "13686": "\treturn {",
                    "13687": "\t\tdisplay: li,",
                    "13688": "\t\tclicker: a",
                    "13690": "};",
                    "13692": "DataTable.ext.renderer.pagingContainer.bootstrap = function (settings, buttonEls) {",
                    "13693": "\treturn $('<ul/>').addClass('pagination').append(buttonEls);",
                    "13694": "};",
                    "13696": "DataTable.ext.renderer.layout.bootstrap = function ( settings, container, items ) {",
                    "13697": "\tvar row = $( '<div/>', {",
                    "13698": "\t\t\t\"class\": items.full ?",
                    "13699": "\t\t\t\t'row mt-2 justify-content-md-center' :",
                    "13700": "\t\t\t\t'row mt-2 justify-content-between'",
                    "13701": "\t\t} )",
                    "13702": "\t\t.appendTo( container );",
                    "13704": "\t$.each( items, function (key, val) {",
                    "13705": "\t\tvar klass;",
                    "13707": "\t\t// Apply start / end (left / right when ltr) margins",
                    "13708": "\t\tif (val.table) {",
                    "13709": "\t\t\tklass = 'col-12';",
                    "13710": "\t\t}",
                    "13711": "\t\telse if (key === 'start') {",
                    "13712": "\t\t\tklass = 'col-md-auto me-auto';",
                    "13713": "\t\t}",
                    "13714": "\t\telse if (key === 'end') {",
                    "13715": "\t\t\tklass = 'col-md-auto ms-auto';",
                    "13716": "\t\t}",
                    "13717": "\t\telse {",
                    "13718": "\t\t\tklass = 'col-md';",
                    "13719": "\t\t}",
                    "13721": "\t\t$( '<div/>', {",
                    "13722": "\t\t\t\tid: val.id || null,",
                    "13723": "\t\t\t\t\"class\": klass + ' ' + (val.className || '')",
                    "13724": "\t\t\t} )",
                    "13725": "\t\t\t.append( val.contents )",
                    "13726": "\t\t\t.appendTo( row );",
                    "13727": "\t} );"
                },
                "deleted": {
                    "7": " *   https://datatables.net/download/#bs5/dt-1.13.6",
                    "10": " *   DataTables 1.13.6",
                    "13": "/*! DataTables 1.13.6",
                    "14": " * \u00a92008-2023 SpryMedia Ltd - datatables.net/license",
                    "20": " * @version     1.13.6",
                    "26": " *   MIT license - http://datatables.net/license",
                    "32": " * For details please refer to: http://www.datatables.net",
                    "35": "/*jslint evil: true, undef: true, browser: true */",
                    "36": "/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/",
                    "37": "",
                    "69": "\t\t\treturn factory( jq, window, window.document );",
                    "76": "}",
                    "77": "(function( $, window, document, undefined ) {",
                    "98": "\t\t/**",
                    "99": "\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and",
                    "100": "\t\t * return the resulting jQuery object.",
                    "101": "\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on",
                    "102": "\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included",
                    "103": "\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter",
                    "104": "\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).",
                    "105": "\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.",
                    "106": "\t\t *    Can be either 'current', whereby the current sorting of the table is used, or",
                    "107": "\t\t *    'original' whereby the original order the data was read into the table is used.",
                    "108": "\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page",
                    "109": "\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be",
                    "110": "\t\t *    'current' and filter is 'applied', regardless of what they might be given as.",
                    "111": "\t\t *  @returns {object} jQuery object, filtered by the given selector.",
                    "112": "\t\t *  @dtopt API",
                    "113": "\t\t *  @deprecated Since v1.10",
                    "114": "\t\t *",
                    "115": "\t\t *  @example",
                    "116": "\t\t *    $(document).ready(function() {",
                    "117": "\t\t *      var oTable = $('#example').dataTable();",
                    "118": "\t\t *",
                    "119": "\t\t *      // Highlight every second row",
                    "120": "\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');",
                    "121": "\t\t *    } );",
                    "122": "\t\t *",
                    "123": "\t\t *  @example",
                    "124": "\t\t *    $(document).ready(function() {",
                    "125": "\t\t *      var oTable = $('#example').dataTable();",
                    "126": "\t\t *",
                    "127": "\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then",
                    "128": "\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.",
                    "129": "\t\t *      oTable.fnFilter('Webkit');",
                    "130": "\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');",
                    "131": "\t\t *      oTable.fnFilter('');",
                    "132": "\t\t *    } );",
                    "133": "\t\t */",
                    "134": "\t\tthis.$ = function ( sSelector, oOpts )",
                    "135": "\t\t{",
                    "136": "\t\t\treturn this.api(true).$( sSelector, oOpts );",
                    "137": "\t\t};",
                    "138": "",
                    "139": "",
                    "140": "\t\t/**",
                    "141": "\t\t * Almost identical to $ in operation, but in this case returns the data for the matched",
                    "142": "\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes",
                    "143": "\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching",
                    "144": "\t\t * rows are found, the data returned is the original data array/object that was used to",
                    "145": "\t\t * create the row (or a generated array if from a DOM source).",
                    "146": "\t\t *",
                    "147": "\t\t * This method is often useful in-combination with $ where both functions are given the",
                    "148": "\t\t * same parameters and the array indexes will match identically.",
                    "149": "\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on",
                    "150": "\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included",
                    "151": "\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter",
                    "152": "\t\t *    criterion (\"applied\") or all elements (i.e. no filter).",
                    "153": "\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.",
                    "154": "\t\t *    Can be either 'current', whereby the current sorting of the table is used, or",
                    "155": "\t\t *    'original' whereby the original order the data was read into the table is used.",
                    "156": "\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page",
                    "157": "\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be",
                    "158": "\t\t *    'current' and filter is 'applied', regardless of what they might be given as.",
                    "159": "\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the",
                    "160": "\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null",
                    "161": "\t\t *    entry in the array.",
                    "162": "\t\t *  @dtopt API",
                    "163": "\t\t *  @deprecated Since v1.10",
                    "164": "\t\t *",
                    "165": "\t\t *  @example",
                    "166": "\t\t *    $(document).ready(function() {",
                    "167": "\t\t *      var oTable = $('#example').dataTable();",
                    "168": "\t\t *",
                    "169": "\t\t *      // Get the data from the first row in the table",
                    "170": "\t\t *      var data = oTable._('tr:first');",
                    "171": "\t\t *",
                    "172": "\t\t *      // Do something useful with the data",
                    "173": "\t\t *      alert( \"First cell is: \"+data[0] );",
                    "174": "\t\t *    } );",
                    "175": "\t\t *",
                    "176": "\t\t *  @example",
                    "177": "\t\t *    $(document).ready(function() {",
                    "178": "\t\t *      var oTable = $('#example').dataTable();",
                    "179": "\t\t *",
                    "180": "\t\t *      // Filter to 'Webkit' and get all data for",
                    "181": "\t\t *      oTable.fnFilter('Webkit');",
                    "182": "\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});",
                    "183": "\t\t *",
                    "184": "\t\t *      // Do something with the data",
                    "185": "\t\t *      alert( data.length+\" rows matched the search\" );",
                    "186": "\t\t *    } );",
                    "187": "\t\t */",
                    "188": "\t\tthis._ = function ( sSelector, oOpts )",
                    "189": "\t\t{",
                    "190": "\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();",
                    "191": "\t\t};",
                    "192": "",
                    "193": "",
                    "194": "\t\t/**",
                    "195": "\t\t * Create a DataTables Api instance, with the currently selected tables for",
                    "196": "\t\t * the Api's context.",
                    "197": "\t\t * @param {boolean} [traditional=false] Set the API instance's context to be",
                    "198": "\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was",
                    "199": "\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),",
                    "200": "\t\t *   or if all tables captured in the jQuery object should be used.",
                    "201": "\t\t * @return {DataTables.Api}",
                    "202": "\t\t */",
                    "203": "\t\tthis.api = function ( traditional )",
                    "204": "\t\t{",
                    "205": "\t\t\treturn traditional ?",
                    "206": "\t\t\t\tnew _Api(",
                    "207": "\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )",
                    "208": "\t\t\t\t) :",
                    "209": "\t\t\t\tnew _Api( this );",
                    "210": "\t\t};",
                    "211": "",
                    "212": "",
                    "213": "\t\t/**",
                    "214": "\t\t * Add a single new row or multiple rows of data to the table. Please note",
                    "215": "\t\t * that this is suitable for client-side processing only - if you are using",
                    "216": "\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you",
                    "217": "\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.",
                    "218": "\t\t *  @param {array|object} data The data to be added to the table. This can be:",
                    "219": "\t\t *    <ul>",
                    "220": "\t\t *      <li>1D array of data - add a single row with the data provided</li>",
                    "221": "\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>",
                    "222": "\t\t *      <li>object - data object when using <i>mData</i></li>",
                    "223": "\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>",
                    "224": "\t\t *    </ul>",
                    "225": "\t\t *  @param {bool} [redraw=true] redraw the table or not",
                    "226": "\t\t *  @returns {array} An array of integers, representing the list of indexes in",
                    "227": "\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to",
                    "228": "\t\t *    the table.",
                    "229": "\t\t *  @dtopt API",
                    "230": "\t\t *  @deprecated Since v1.10",
                    "231": "\t\t *",
                    "232": "\t\t *  @example",
                    "233": "\t\t *    // Global var for counter",
                    "234": "\t\t *    var giCount = 2;",
                    "235": "\t\t *",
                    "236": "\t\t *    $(document).ready(function() {",
                    "237": "\t\t *      $('#example').dataTable();",
                    "238": "\t\t *    } );",
                    "239": "\t\t *",
                    "240": "\t\t *    function fnClickAddRow() {",
                    "241": "\t\t *      $('#example').dataTable().fnAddData( [",
                    "242": "\t\t *        giCount+\".1\",",
                    "243": "\t\t *        giCount+\".2\",",
                    "244": "\t\t *        giCount+\".3\",",
                    "245": "\t\t *        giCount+\".4\" ]",
                    "246": "\t\t *      );",
                    "247": "\t\t *",
                    "248": "\t\t *      giCount++;",
                    "249": "\t\t *    }",
                    "250": "\t\t */",
                    "251": "\t\tthis.fnAddData = function( data, redraw )",
                    "252": "\t\t{",
                    "253": "\t\t\tvar api = this.api( true );",
                    "254": "",
                    "255": "\t\t\t/* Check if we want to add multiple rows or not */",
                    "256": "\t\t\tvar rows = Array.isArray(data) && ( Array.isArray(data[0]) || $.isPlainObject(data[0]) ) ?",
                    "257": "\t\t\t\tapi.rows.add( data ) :",
                    "258": "\t\t\t\tapi.row.add( data );",
                    "259": "",
                    "260": "\t\t\tif ( redraw === undefined || redraw ) {",
                    "261": "\t\t\t\tapi.draw();",
                    "262": "\t\t\t}",
                    "263": "",
                    "264": "\t\t\treturn rows.flatten().toArray();",
                    "265": "\t\t};",
                    "266": "",
                    "267": "",
                    "268": "\t\t/**",
                    "269": "\t\t * This function will make DataTables recalculate the column sizes, based on the data",
                    "270": "\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or",
                    "271": "\t\t * through the sWidth parameter). This can be useful when the width of the table's",
                    "272": "\t\t * parent element changes (for example a window resize).",
                    "273": "\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to",
                    "274": "\t\t *  @dtopt API",
                    "275": "\t\t *  @deprecated Since v1.10",
                    "276": "\t\t *",
                    "277": "\t\t *  @example",
                    "278": "\t\t *    $(document).ready(function() {",
                    "279": "\t\t *      var oTable = $('#example').dataTable( {",
                    "280": "\t\t *        \"sScrollY\": \"200px\",",
                    "281": "\t\t *        \"bPaginate\": false",
                    "282": "\t\t *      } );",
                    "283": "\t\t *",
                    "284": "\t\t *      $(window).on('resize', function () {",
                    "285": "\t\t *        oTable.fnAdjustColumnSizing();",
                    "286": "\t\t *      } );",
                    "287": "\t\t *    } );",
                    "288": "\t\t */",
                    "289": "\t\tthis.fnAdjustColumnSizing = function ( bRedraw )",
                    "290": "\t\t{",
                    "291": "\t\t\tvar api = this.api( true ).columns.adjust();",
                    "292": "\t\t\tvar settings = api.settings()[0];",
                    "293": "\t\t\tvar scroll = settings.oScroll;",
                    "294": "",
                    "295": "\t\t\tif ( bRedraw === undefined || bRedraw ) {",
                    "296": "\t\t\t\tapi.draw( false );",
                    "297": "\t\t\t}",
                    "298": "\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {",
                    "299": "\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */",
                    "300": "\t\t\t\t_fnScrollDraw( settings );",
                    "301": "\t\t\t}",
                    "302": "\t\t};",
                    "303": "",
                    "304": "",
                    "305": "\t\t/**",
                    "306": "\t\t * Quickly and simply clear a table",
                    "307": "\t\t *  @param {bool} [bRedraw=true] redraw the table or not",
                    "308": "\t\t *  @dtopt API",
                    "309": "\t\t *  @deprecated Since v1.10",
                    "310": "\t\t *",
                    "311": "\t\t *  @example",
                    "312": "\t\t *    $(document).ready(function() {",
                    "313": "\t\t *      var oTable = $('#example').dataTable();",
                    "314": "\t\t *",
                    "315": "\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)",
                    "316": "\t\t *      oTable.fnClearTable();",
                    "317": "\t\t *    } );",
                    "318": "\t\t */",
                    "319": "\t\tthis.fnClearTable = function( bRedraw )",
                    "320": "\t\t{",
                    "321": "\t\t\tvar api = this.api( true ).clear();",
                    "322": "",
                    "323": "\t\t\tif ( bRedraw === undefined || bRedraw ) {",
                    "324": "\t\t\t\tapi.draw();",
                    "325": "\t\t\t}",
                    "326": "\t\t};",
                    "327": "",
                    "328": "",
                    "329": "\t\t/**",
                    "330": "\t\t * The exact opposite of 'opening' a row, this function will close any rows which",
                    "331": "\t\t * are currently 'open'.",
                    "332": "\t\t *  @param {node} nTr the table row to 'close'",
                    "333": "\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)",
                    "334": "\t\t *  @dtopt API",
                    "335": "\t\t *  @deprecated Since v1.10",
                    "336": "\t\t *",
                    "337": "\t\t *  @example",
                    "338": "\t\t *    $(document).ready(function() {",
                    "339": "\t\t *      var oTable;",
                    "340": "\t\t *",
                    "341": "\t\t *      // 'open' an information row when a row is clicked on",
                    "342": "\t\t *      $('#example tbody tr').click( function () {",
                    "343": "\t\t *        if ( oTable.fnIsOpen(this) ) {",
                    "344": "\t\t *          oTable.fnClose( this );",
                    "345": "\t\t *        } else {",
                    "346": "\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );",
                    "347": "\t\t *        }",
                    "348": "\t\t *      } );",
                    "349": "\t\t *",
                    "350": "\t\t *      oTable = $('#example').dataTable();",
                    "351": "\t\t *    } );",
                    "352": "\t\t */",
                    "353": "\t\tthis.fnClose = function( nTr )",
                    "355": "\t\t\tthis.api( true ).row( nTr ).child.hide();",
                    "357": "",
                    "358": "",
                    "359": "\t\t/**",
                    "360": "\t\t * Remove a row for the table",
                    "361": "\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or",
                    "362": "\t\t *    the TR element you want to delete",
                    "363": "\t\t *  @param {function|null} [callBack] Callback function",
                    "364": "\t\t *  @param {bool} [redraw=true] Redraw the table or not",
                    "365": "\t\t *  @returns {array} The row that was deleted",
                    "366": "\t\t *  @dtopt API",
                    "367": "\t\t *  @deprecated Since v1.10",
                    "368": "\t\t *",
                    "369": "\t\t *  @example",
                    "370": "\t\t *    $(document).ready(function() {",
                    "371": "\t\t *      var oTable = $('#example').dataTable();",
                    "372": "\t\t *",
                    "373": "\t\t *      // Immediately remove the first row",
                    "374": "\t\t *      oTable.fnDeleteRow( 0 );",
                    "375": "\t\t *    } );",
                    "376": "\t\t */",
                    "377": "\t\tthis.fnDeleteRow = function( target, callback, redraw )",
                    "378": "\t\t{",
                    "379": "\t\t\tvar api = this.api( true );",
                    "380": "\t\t\tvar rows = api.rows( target );",
                    "381": "\t\t\tvar settings = rows.settings()[0];",
                    "382": "\t\t\tvar data = settings.aoData[ rows[0][0] ];",
                    "383": "",
                    "384": "\t\t\trows.remove();",
                    "385": "",
                    "386": "\t\t\tif ( callback ) {",
                    "387": "\t\t\t\tcallback.call( this, settings, data );",
                    "389": "",
                    "390": "\t\t\tif ( redraw === undefined || redraw ) {",
                    "391": "\t\t\t\tapi.draw();",
                    "393": "",
                    "394": "\t\t\treturn data;",
                    "395": "\t\t};",
                    "396": "",
                    "397": "",
                    "398": "\t\t/**",
                    "399": "\t\t * Restore the table to it's original state in the DOM by removing all of DataTables",
                    "400": "\t\t * enhancements, alterations to the DOM structure of the table and event listeners.",
                    "401": "\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM",
                    "402": "\t\t *  @dtopt API",
                    "403": "\t\t *  @deprecated Since v1.10",
                    "404": "\t\t *",
                    "405": "\t\t *  @example",
                    "406": "\t\t *    $(document).ready(function() {",
                    "407": "\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used",
                    "408": "\t\t *      var oTable = $('#example').dataTable();",
                    "409": "\t\t *      oTable.fnDestroy();",
                    "410": "\t\t *    } );",
                    "411": "\t\t */",
                    "412": "\t\tthis.fnDestroy = function ( remove )",
                    "413": "\t\t{",
                    "414": "\t\t\tthis.api( true ).destroy( remove );",
                    "415": "\t\t};",
                    "416": "",
                    "417": "",
                    "418": "\t\t/**",
                    "419": "\t\t * Redraw the table",
                    "420": "\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.",
                    "421": "\t\t *  @dtopt API",
                    "422": "\t\t *  @deprecated Since v1.10",
                    "423": "\t\t *",
                    "424": "\t\t *  @example",
                    "425": "\t\t *    $(document).ready(function() {",
                    "426": "\t\t *      var oTable = $('#example').dataTable();",
                    "427": "\t\t *",
                    "428": "\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)",
                    "429": "\t\t *      oTable.fnDraw();",
                    "430": "\t\t *    } );",
                    "431": "\t\t */",
                    "432": "\t\tthis.fnDraw = function( complete )",
                    "433": "\t\t{",
                    "434": "\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes",
                    "435": "\t\t\t// into account the new data, but can hold position.",
                    "436": "\t\t\tthis.api( true ).draw( complete );",
                    "437": "\t\t};",
                    "438": "",
                    "439": "",
                    "440": "\t\t/**",
                    "441": "\t\t * Filter the input based on data",
                    "442": "\t\t *  @param {string} sInput String to filter the table on",
                    "443": "\t\t *  @param {int|null} [iColumn] Column to limit filtering to",
                    "444": "\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not",
                    "445": "\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not",
                    "446": "\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)",
                    "447": "\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)",
                    "448": "\t\t *  @dtopt API",
                    "449": "\t\t *  @deprecated Since v1.10",
                    "450": "\t\t *",
                    "451": "\t\t *  @example",
                    "452": "\t\t *    $(document).ready(function() {",
                    "453": "\t\t *      var oTable = $('#example').dataTable();",
                    "454": "\t\t *",
                    "455": "\t\t *      // Sometime later - filter...",
                    "456": "\t\t *      oTable.fnFilter( 'test string' );",
                    "457": "\t\t *    } );",
                    "458": "\t\t */",
                    "459": "\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )",
                    "460": "\t\t{",
                    "461": "\t\t\tvar api = this.api( true );",
                    "462": "",
                    "463": "\t\t\tif ( iColumn === null || iColumn === undefined ) {",
                    "464": "\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );",
                    "466": "\t\t\telse {",
                    "467": "\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );",
                    "469": "",
                    "470": "\t\t\tapi.draw();",
                    "471": "\t\t};",
                    "472": "",
                    "473": "",
                    "474": "\t\t/**",
                    "475": "\t\t * Get the data for the whole table, an individual row or an individual cell based on the",
                    "476": "\t\t * provided parameters.",
                    "477": "\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as",
                    "478": "\t\t *    a TR node then the data source for the whole row will be returned. If given as a",
                    "479": "\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the",
                    "480": "\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal",
                    "481": "\t\t *    data index for the row (see fnGetPosition) and the data for that row used.",
                    "482": "\t\t *  @param {int} [col] Optional column index that you want the data of.",
                    "483": "\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is",
                    "484": "\t\t *    returned. If mRow is defined, just data for that row, and is iCol is",
                    "485": "\t\t *    defined, only data for the designated cell is returned.",
                    "486": "\t\t *  @dtopt API",
                    "487": "\t\t *  @deprecated Since v1.10",
                    "488": "\t\t *",
                    "489": "\t\t *  @example",
                    "490": "\t\t *    // Row data",
                    "491": "\t\t *    $(document).ready(function() {",
                    "492": "\t\t *      oTable = $('#example').dataTable();",
                    "493": "\t\t *",
                    "494": "\t\t *      oTable.$('tr').click( function () {",
                    "495": "\t\t *        var data = oTable.fnGetData( this );",
                    "496": "\t\t *        // ... do something with the array / object of data for the row",
                    "497": "\t\t *      } );",
                    "498": "\t\t *    } );",
                    "499": "\t\t *",
                    "500": "\t\t *  @example",
                    "501": "\t\t *    // Individual cell data",
                    "502": "\t\t *    $(document).ready(function() {",
                    "503": "\t\t *      oTable = $('#example').dataTable();",
                    "504": "\t\t *",
                    "505": "\t\t *      oTable.$('td').click( function () {",
                    "506": "\t\t *        var sData = oTable.fnGetData( this );",
                    "507": "\t\t *        alert( 'The cell clicked on had the value of '+sData );",
                    "508": "\t\t *      } );",
                    "509": "\t\t *    } );",
                    "510": "\t\t */",
                    "511": "\t\tthis.fnGetData = function( src, col )",
                    "512": "\t\t{",
                    "513": "\t\t\tvar api = this.api( true );",
                    "514": "",
                    "515": "\t\t\tif ( src !== undefined ) {",
                    "516": "\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';",
                    "517": "",
                    "518": "\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?",
                    "519": "\t\t\t\t\tapi.cell( src, col ).data() :",
                    "520": "\t\t\t\t\tapi.row( src ).data() || null;",
                    "521": "\t\t\t}",
                    "522": "",
                    "523": "\t\t\treturn api.data().toArray();",
                    "524": "\t\t};",
                    "525": "",
                    "526": "",
                    "527": "\t\t/**",
                    "528": "\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will",
                    "529": "\t\t * typically want to use the '$' API method in preference to this as it is more",
                    "530": "\t\t * flexible.",
                    "531": "\t\t *  @param {int} [iRow] Optional row index for the TR element you want",
                    "532": "\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements",
                    "533": "\t\t *    in the table's body, or iRow is defined, just the TR element requested.",
                    "534": "\t\t *  @dtopt API",
                    "535": "\t\t *  @deprecated Since v1.10",
                    "536": "\t\t *",
                    "537": "\t\t *  @example",
                    "538": "\t\t *    $(document).ready(function() {",
                    "539": "\t\t *      var oTable = $('#example').dataTable();",
                    "540": "\t\t *",
                    "541": "\t\t *      // Get the nodes from the table",
                    "542": "\t\t *      var nNodes = oTable.fnGetNodes( );",
                    "543": "\t\t *    } );",
                    "544": "\t\t */",
                    "545": "\t\tthis.fnGetNodes = function( iRow )",
                    "546": "\t\t{",
                    "547": "\t\t\tvar api = this.api( true );",
                    "548": "",
                    "549": "\t\t\treturn iRow !== undefined ?",
                    "550": "\t\t\t\tapi.row( iRow ).node() :",
                    "551": "\t\t\t\tapi.rows().nodes().flatten().toArray();",
                    "552": "\t\t};",
                    "553": "",
                    "554": "",
                    "555": "\t\t/**",
                    "556": "\t\t * Get the array indexes of a particular cell from it's DOM element",
                    "557": "\t\t * and column index including hidden columns",
                    "558": "\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body",
                    "559": "\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or",
                    "560": "\t\t *    if given as a cell, an array of [row index, column index (visible),",
                    "561": "\t\t *    column index (all)] is given.",
                    "562": "\t\t *  @dtopt API",
                    "563": "\t\t *  @deprecated Since v1.10",
                    "564": "\t\t *",
                    "565": "\t\t *  @example",
                    "566": "\t\t *    $(document).ready(function() {",
                    "567": "\t\t *      $('#example tbody td').click( function () {",
                    "568": "\t\t *        // Get the position of the current data from the node",
                    "569": "\t\t *        var aPos = oTable.fnGetPosition( this );",
                    "570": "\t\t *",
                    "571": "\t\t *        // Get the data array for this row",
                    "572": "\t\t *        var aData = oTable.fnGetData( aPos[0] );",
                    "573": "\t\t *",
                    "574": "\t\t *        // Update the data array and return the value",
                    "575": "\t\t *        aData[ aPos[1] ] = 'clicked';",
                    "576": "\t\t *        this.innerHTML = 'clicked';",
                    "577": "\t\t *      } );",
                    "578": "\t\t *",
                    "579": "\t\t *      // Init DataTables",
                    "580": "\t\t *      oTable = $('#example').dataTable();",
                    "581": "\t\t *    } );",
                    "582": "\t\t */",
                    "583": "\t\tthis.fnGetPosition = function( node )",
                    "584": "\t\t{",
                    "585": "\t\t\tvar api = this.api( true );",
                    "586": "\t\t\tvar nodeName = node.nodeName.toUpperCase();",
                    "587": "",
                    "588": "\t\t\tif ( nodeName == 'TR' ) {",
                    "589": "\t\t\t\treturn api.row( node ).index();",
                    "590": "\t\t\t}",
                    "591": "\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {",
                    "592": "\t\t\t\tvar cell = api.cell( node ).index();",
                    "593": "",
                    "594": "\t\t\t\treturn [",
                    "595": "\t\t\t\t\tcell.row,",
                    "596": "\t\t\t\t\tcell.columnVisible,",
                    "597": "\t\t\t\t\tcell.column",
                    "598": "\t\t\t\t];",
                    "599": "\t\t\t}",
                    "600": "\t\t\treturn null;",
                    "601": "\t\t};",
                    "602": "",
                    "603": "",
                    "604": "\t\t/**",
                    "605": "\t\t * Check to see if a row is 'open' or not.",
                    "606": "\t\t *  @param {node} nTr the table row to check",
                    "607": "\t\t *  @returns {boolean} true if the row is currently open, false otherwise",
                    "608": "\t\t *  @dtopt API",
                    "609": "\t\t *  @deprecated Since v1.10",
                    "610": "\t\t *",
                    "611": "\t\t *  @example",
                    "612": "\t\t *    $(document).ready(function() {",
                    "613": "\t\t *      var oTable;",
                    "614": "\t\t *",
                    "615": "\t\t *      // 'open' an information row when a row is clicked on",
                    "616": "\t\t *      $('#example tbody tr').click( function () {",
                    "617": "\t\t *        if ( oTable.fnIsOpen(this) ) {",
                    "618": "\t\t *          oTable.fnClose( this );",
                    "619": "\t\t *        } else {",
                    "620": "\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );",
                    "621": "\t\t *        }",
                    "622": "\t\t *      } );",
                    "623": "\t\t *",
                    "624": "\t\t *      oTable = $('#example').dataTable();",
                    "625": "\t\t *    } );",
                    "626": "\t\t */",
                    "627": "\t\tthis.fnIsOpen = function( nTr )",
                    "628": "\t\t{",
                    "629": "\t\t\treturn this.api( true ).row( nTr ).child.isShown();",
                    "630": "\t\t};",
                    "631": "",
                    "632": "",
                    "633": "\t\t/**",
                    "634": "\t\t * This function will place a new row directly after a row which is currently",
                    "635": "\t\t * on display on the page, with the HTML contents that is passed into the",
                    "636": "\t\t * function. This can be used, for example, to ask for confirmation that a",
                    "637": "\t\t * particular record should be deleted.",
                    "638": "\t\t *  @param {node} nTr The table row to 'open'",
                    "639": "\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row",
                    "640": "\t\t *  @param {string} sClass Class to give the new TD cell",
                    "641": "\t\t *  @returns {node} The row opened. Note that if the table row passed in as the",
                    "642": "\t\t *    first parameter, is not found in the table, this method will silently",
                    "643": "\t\t *    return.",
                    "644": "\t\t *  @dtopt API",
                    "645": "\t\t *  @deprecated Since v1.10",
                    "646": "\t\t *",
                    "647": "\t\t *  @example",
                    "648": "\t\t *    $(document).ready(function() {",
                    "649": "\t\t *      var oTable;",
                    "650": "\t\t *",
                    "651": "\t\t *      // 'open' an information row when a row is clicked on",
                    "652": "\t\t *      $('#example tbody tr').click( function () {",
                    "653": "\t\t *        if ( oTable.fnIsOpen(this) ) {",
                    "654": "\t\t *          oTable.fnClose( this );",
                    "655": "\t\t *        } else {",
                    "656": "\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );",
                    "657": "\t\t *        }",
                    "658": "\t\t *      } );",
                    "659": "\t\t *",
                    "660": "\t\t *      oTable = $('#example').dataTable();",
                    "661": "\t\t *    } );",
                    "662": "\t\t */",
                    "663": "\t\tthis.fnOpen = function( nTr, mHtml, sClass )",
                    "664": "\t\t{",
                    "665": "\t\t\treturn this.api( true )",
                    "666": "\t\t\t\t.row( nTr )",
                    "667": "\t\t\t\t.child( mHtml, sClass )",
                    "668": "\t\t\t\t.show()",
                    "669": "\t\t\t\t.child()[0];",
                    "670": "\t\t};",
                    "671": "",
                    "672": "",
                    "673": "\t\t/**",
                    "674": "\t\t * Change the pagination - provides the internal logic for pagination in a simple API",
                    "675": "\t\t * function. With this function you can have a DataTables table go to the next,",
                    "676": "\t\t * previous, first or last pages.",
                    "677": "\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"",
                    "678": "\t\t *    or page number to jump to (integer), note that page 0 is the first page.",
                    "679": "\t\t *  @param {bool} [bRedraw=true] Redraw the table or not",
                    "680": "\t\t *  @dtopt API",
                    "681": "\t\t *  @deprecated Since v1.10",
                    "682": "\t\t *",
                    "683": "\t\t *  @example",
                    "684": "\t\t *    $(document).ready(function() {",
                    "685": "\t\t *      var oTable = $('#example').dataTable();",
                    "686": "\t\t *      oTable.fnPageChange( 'next' );",
                    "687": "\t\t *    } );",
                    "688": "\t\t */",
                    "689": "\t\tthis.fnPageChange = function ( mAction, bRedraw )",
                    "690": "\t\t{",
                    "691": "\t\t\tvar api = this.api( true ).page( mAction );",
                    "692": "",
                    "693": "\t\t\tif ( bRedraw === undefined || bRedraw ) {",
                    "694": "\t\t\t\tapi.draw(false);",
                    "695": "\t\t\t}",
                    "696": "\t\t};",
                    "697": "",
                    "698": "",
                    "699": "\t\t/**",
                    "700": "\t\t * Show a particular column",
                    "701": "\t\t *  @param {int} iCol The column whose display should be changed",
                    "702": "\t\t *  @param {bool} bShow Show (true) or hide (false) the column",
                    "703": "\t\t *  @param {bool} [bRedraw=true] Redraw the table or not",
                    "704": "\t\t *  @dtopt API",
                    "705": "\t\t *  @deprecated Since v1.10",
                    "706": "\t\t *",
                    "707": "\t\t *  @example",
                    "708": "\t\t *    $(document).ready(function() {",
                    "709": "\t\t *      var oTable = $('#example').dataTable();",
                    "710": "\t\t *",
                    "711": "\t\t *      // Hide the second column after initialisation",
                    "712": "\t\t *      oTable.fnSetColumnVis( 1, false );",
                    "713": "\t\t *    } );",
                    "714": "\t\t */",
                    "715": "\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )",
                    "716": "\t\t{",
                    "717": "\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );",
                    "718": "",
                    "719": "\t\t\tif ( bRedraw === undefined || bRedraw ) {",
                    "720": "\t\t\t\tapi.columns.adjust().draw();",
                    "721": "\t\t\t}",
                    "722": "\t\t};",
                    "723": "",
                    "724": "",
                    "725": "\t\t/**",
                    "726": "\t\t * Get the settings for a particular table for external manipulation",
                    "727": "\t\t *  @returns {object} DataTables settings object. See",
                    "728": "\t\t *    {@link DataTable.models.oSettings}",
                    "729": "\t\t *  @dtopt API",
                    "730": "\t\t *  @deprecated Since v1.10",
                    "731": "\t\t *",
                    "732": "\t\t *  @example",
                    "733": "\t\t *    $(document).ready(function() {",
                    "734": "\t\t *      var oTable = $('#example').dataTable();",
                    "735": "\t\t *      var oSettings = oTable.fnSettings();",
                    "736": "\t\t *",
                    "737": "\t\t *      // Show an example parameter from the settings",
                    "738": "\t\t *      alert( oSettings._iDisplayStart );",
                    "739": "\t\t *    } );",
                    "740": "\t\t */",
                    "741": "\t\tthis.fnSettings = function()",
                    "742": "\t\t{",
                    "743": "\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );",
                    "744": "\t\t};",
                    "745": "",
                    "746": "",
                    "747": "\t\t/**",
                    "748": "\t\t * Sort the table by a particular column",
                    "749": "\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the",
                    "750": "\t\t *    'display index' if you have hidden data entries",
                    "751": "\t\t *  @dtopt API",
                    "752": "\t\t *  @deprecated Since v1.10",
                    "753": "\t\t *",
                    "754": "\t\t *  @example",
                    "755": "\t\t *    $(document).ready(function() {",
                    "756": "\t\t *      var oTable = $('#example').dataTable();",
                    "757": "\t\t *",
                    "758": "\t\t *      // Sort immediately with columns 0 and 1",
                    "759": "\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );",
                    "760": "\t\t *    } );",
                    "761": "\t\t */",
                    "762": "\t\tthis.fnSort = function( aaSort )",
                    "763": "\t\t{",
                    "764": "\t\t\tthis.api( true ).order( aaSort ).draw();",
                    "765": "\t\t};",
                    "766": "",
                    "767": "",
                    "768": "\t\t/**",
                    "769": "\t\t * Attach a sort listener to an element for a given column",
                    "770": "\t\t *  @param {node} nNode the element to attach the sort listener to",
                    "771": "\t\t *  @param {int} iColumn the column that a click on this node will sort on",
                    "772": "\t\t *  @param {function} [fnCallback] callback function when sort is run",
                    "773": "\t\t *  @dtopt API",
                    "774": "\t\t *  @deprecated Since v1.10",
                    "775": "\t\t *",
                    "776": "\t\t *  @example",
                    "777": "\t\t *    $(document).ready(function() {",
                    "778": "\t\t *      var oTable = $('#example').dataTable();",
                    "779": "\t\t *",
                    "780": "\t\t *      // Sort on column 1, when 'sorter' is clicked on",
                    "781": "\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );",
                    "782": "\t\t *    } );",
                    "783": "\t\t */",
                    "784": "\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )",
                    "785": "\t\t{",
                    "786": "\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );",
                    "787": "\t\t};",
                    "788": "",
                    "789": "",
                    "790": "\t\t/**",
                    "791": "\t\t * Update a table cell or row - this method will accept either a single value to",
                    "792": "\t\t * update the cell with, an array of values with one element for each column or",
                    "793": "\t\t * an object in the same format as the original data source. The function is",
                    "794": "\t\t * self-referencing in order to make the multi column updates easier.",
                    "795": "\t\t *  @param {object|array|string} mData Data to update the cell/row with",
                    "796": "\t\t *  @param {node|int} mRow TR element you want to update or the aoData index",
                    "797": "\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to",
                    "798": "\t\t *    update a whole row.",
                    "799": "\t\t *  @param {bool} [bRedraw=true] Redraw the table or not",
                    "800": "\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not",
                    "801": "\t\t *  @returns {int} 0 on success, 1 on error",
                    "802": "\t\t *  @dtopt API",
                    "803": "\t\t *  @deprecated Since v1.10",
                    "804": "\t\t *",
                    "805": "\t\t *  @example",
                    "806": "\t\t *    $(document).ready(function() {",
                    "807": "\t\t *      var oTable = $('#example').dataTable();",
                    "808": "\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell",
                    "809": "\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row",
                    "810": "\t\t *    } );",
                    "811": "\t\t */",
                    "812": "\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )",
                    "813": "\t\t{",
                    "814": "\t\t\tvar api = this.api( true );",
                    "815": "",
                    "816": "\t\t\tif ( iColumn === undefined || iColumn === null ) {",
                    "817": "\t\t\t\tapi.row( mRow ).data( mData );",
                    "818": "\t\t\t}",
                    "819": "\t\t\telse {",
                    "820": "\t\t\t\tapi.cell( mRow, iColumn ).data( mData );",
                    "821": "\t\t\t}",
                    "822": "",
                    "823": "\t\t\tif ( bAction === undefined || bAction ) {",
                    "824": "\t\t\t\tapi.columns.adjust();",
                    "825": "\t\t\t}",
                    "826": "",
                    "827": "\t\t\tif ( bRedraw === undefined || bRedraw ) {",
                    "828": "\t\t\t\tapi.draw();",
                    "829": "\t\t\t}",
                    "830": "\t\t\treturn 0;",
                    "831": "\t\t};",
                    "832": "",
                    "833": "",
                    "834": "\t\t/**",
                    "835": "\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order",
                    "836": "\t\t * to ensure compatibility.",
                    "837": "\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the",
                    "838": "\t\t *    formats \"X\" and \"X.Y\" are also acceptable.",
                    "839": "\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required",
                    "840": "\t\t *    version, or false if this version of DataTales is not suitable",
                    "841": "\t\t *  @method",
                    "842": "\t\t *  @dtopt API",
                    "843": "\t\t *  @deprecated Since v1.10",
                    "844": "\t\t *",
                    "845": "\t\t *  @example",
                    "846": "\t\t *    $(document).ready(function() {",
                    "847": "\t\t *      var oTable = $('#example').dataTable();",
                    "848": "\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );",
                    "849": "\t\t *    } );",
                    "850": "\t\t */",
                    "851": "\t\tthis.fnVersionCheck = _ext.fnVersionCheck;",
                    "852": "",
                    "853": "",
                    "854": "\t\tvar _that = this;",
                    "855": "\t\tvar emptyInit = options === undefined;",
                    "856": "\t\tvar len = this.length;",
                    "857": "",
                    "858": "\t\tif ( emptyInit ) {",
                    "859": "\t\t\toptions = {};",
                    "860": "\t\t}",
                    "861": "",
                    "862": "\t\tthis.oApi = this.internal = _ext.internal;",
                    "863": "",
                    "864": "\t\t// Extend with old style plug-in API methods",
                    "865": "\t\tfor ( var fn in DataTable.ext.internal ) {",
                    "866": "\t\t\tif ( fn ) {",
                    "867": "\t\t\t\tthis[fn] = _fnExternApiFunc(fn);",
                    "868": "\t\t\t}",
                    "869": "\t\t}",
                    "870": "",
                    "871": "\t\tthis.each(function() {",
                    "872": "\t\t\t// For each initialisation we want to give it a clean initialisation",
                    "873": "\t\t\t// object that can be bashed around",
                    "874": "\t\t\tvar o = {};",
                    "875": "\t\t\tvar oInit = len > 1 ? // optimisation for single table case",
                    "876": "\t\t\t\t_fnExtend( o, options, true ) :",
                    "877": "\t\t\t\toptions;",
                    "878": "",
                    "879": "\t\t\t/*global oInit,_that,emptyInit*/",
                    "880": "\t\t\tvar i=0, iLen, j, jLen, k, kLen;",
                    "881": "\t\t\tvar sId = this.getAttribute( 'id' );",
                    "882": "\t\t\tvar bInitHandedOff = false;",
                    "883": "\t\t\tvar defaults = DataTable.defaults;",
                    "884": "\t\t\tvar $this = $(this);",
                    "887": "\t\t\t/* Sanity check */",
                    "888": "\t\t\tif ( this.nodeName.toLowerCase() != 'table' )",
                    "889": "\t\t\t{",
                    "890": "\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );",
                    "891": "\t\t\t\treturn;",
                    "892": "\t\t\t}",
                    "894": "\t\t\t/* Backwards compatibility for the defaults */",
                    "895": "\t\t\t_fnCompatOpts( defaults );",
                    "896": "\t\t\t_fnCompatCols( defaults.column );",
                    "898": "\t\t\t/* Convert the camel-case defaults to Hungarian */",
                    "899": "\t\t\t_fnCamelToHungarian( defaults, defaults, true );",
                    "900": "\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );",
                    "902": "\t\t\t/* Setting up the initialisation object */",
                    "903": "\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );",
                    "907": "\t\t\t/* Check to see if we are re-initialising a table */",
                    "908": "\t\t\tvar allSettings = DataTable.settings;",
                    "909": "\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )",
                    "910": "\t\t\t{",
                    "911": "\t\t\t\tvar s = allSettings[i];",
                    "912": "",
                    "913": "\t\t\t\t/* Base check on table node */",
                    "914": "\t\t\t\tif (",
                    "915": "\t\t\t\t\ts.nTable == this ||",
                    "916": "\t\t\t\t\t(s.nTHead && s.nTHead.parentNode == this) ||",
                    "917": "\t\t\t\t\t(s.nTFoot && s.nTFoot.parentNode == this)",
                    "918": "\t\t\t\t) {",
                    "919": "\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;",
                    "920": "\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;",
                    "921": "",
                    "922": "\t\t\t\t\tif ( emptyInit || bRetrieve )",
                    "923": "\t\t\t\t\t{",
                    "924": "\t\t\t\t\t\treturn s.oInstance;",
                    "925": "\t\t\t\t\t}",
                    "926": "\t\t\t\t\telse if ( bDestroy )",
                    "927": "\t\t\t\t\t{",
                    "928": "\t\t\t\t\t\ts.oInstance.fnDestroy();",
                    "929": "\t\t\t\t\t\tbreak;",
                    "930": "\t\t\t\t\t}",
                    "931": "\t\t\t\t\telse",
                    "932": "\t\t\t\t\t{",
                    "933": "\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );",
                    "934": "\t\t\t\t\t\treturn;",
                    "935": "\t\t\t\t\t}",
                    "936": "\t\t\t\t}",
                    "937": "",
                    "938": "\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously",
                    "939": "\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old",
                    "940": "\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been",
                    "941": "\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually",
                    "942": "\t\t\t\t */",
                    "943": "\t\t\t\tif ( s.sTableId == this.id )",
                    "944": "\t\t\t\t{",
                    "945": "\t\t\t\t\tallSettings.splice( i, 1 );",
                    "946": "\t\t\t\t\tbreak;",
                    "947": "\t\t\t\t}",
                    "948": "\t\t\t}",
                    "949": "",
                    "950": "\t\t\t/* Ensure the table has an ID - required for accessibility */",
                    "951": "\t\t\tif ( sId === null || sId === \"\" )",
                    "952": "\t\t\t{",
                    "953": "\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);",
                    "954": "\t\t\t\tthis.id = sId;",
                    "955": "\t\t\t}",
                    "956": "",
                    "957": "\t\t\t/* Create the settings object for this table and set some of the default parameters */",
                    "958": "\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {",
                    "959": "\t\t\t\t\"sDestroyWidth\": $this[0].style.width,",
                    "960": "\t\t\t\t\"sInstance\":     sId,",
                    "961": "\t\t\t\t\"sTableId\":      sId",
                    "962": "\t\t\t} );",
                    "963": "\t\t\toSettings.nTable = this;",
                    "964": "\t\t\toSettings.oApi   = _that.internal;",
                    "965": "\t\t\toSettings.oInit  = oInit;",
                    "966": "",
                    "967": "\t\t\tallSettings.push( oSettings );",
                    "968": "",
                    "969": "\t\t\t// Need to add the instance after the instance after the settings object has been added",
                    "970": "\t\t\t// to the settings array, so we can self reference the table instance if more than one",
                    "971": "\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();",
                    "972": "",
                    "973": "\t\t\t// Backwards compatibility, before we apply all the defaults",
                    "974": "\t\t\t_fnCompatOpts( oInit );",
                    "975": "\t\t\t_fnLanguageCompat( oInit.oLanguage );",
                    "976": "",
                    "977": "\t\t\t// If the length menu is given, but the init display length is not, use the length menu",
                    "978": "\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )",
                    "979": "\t\t\t{",
                    "980": "\t\t\t\toInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?",
                    "981": "\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];",
                    "982": "\t\t\t}",
                    "983": "",
                    "984": "\t\t\t// Apply the defaults and init options to make a single init object will all",
                    "985": "\t\t\t// options defined from defaults and instance options.",
                    "986": "\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );",
                    "987": "",
                    "988": "",
                    "989": "\t\t\t// Map the initialisation options onto the settings object",
                    "990": "\t\t\t_fnMap( oSettings.oFeatures, oInit, [",
                    "991": "\t\t\t\t\"bPaginate\",",
                    "992": "\t\t\t\t\"bLengthChange\",",
                    "993": "\t\t\t\t\"bFilter\",",
                    "994": "\t\t\t\t\"bSort\",",
                    "995": "\t\t\t\t\"bSortMulti\",",
                    "996": "\t\t\t\t\"bInfo\",",
                    "997": "\t\t\t\t\"bProcessing\",",
                    "998": "\t\t\t\t\"bAutoWidth\",",
                    "999": "\t\t\t\t\"bSortClasses\",",
                    "1000": "\t\t\t\t\"bServerSide\",",
                    "1001": "\t\t\t\t\"bDeferRender\"",
                    "1002": "\t\t\t] );",
                    "1003": "\t\t\t_fnMap( oSettings, oInit, [",
                    "1004": "\t\t\t\t\"asStripeClasses\",",
                    "1005": "\t\t\t\t\"ajax\",",
                    "1006": "\t\t\t\t\"fnServerData\",",
                    "1007": "\t\t\t\t\"fnFormatNumber\",",
                    "1008": "\t\t\t\t\"sServerMethod\",",
                    "1009": "\t\t\t\t\"aaSorting\",",
                    "1010": "\t\t\t\t\"aaSortingFixed\",",
                    "1011": "\t\t\t\t\"aLengthMenu\",",
                    "1012": "\t\t\t\t\"sPaginationType\",",
                    "1013": "\t\t\t\t\"sAjaxSource\",",
                    "1014": "\t\t\t\t\"sAjaxDataProp\",",
                    "1015": "\t\t\t\t\"iStateDuration\",",
                    "1016": "\t\t\t\t\"sDom\",",
                    "1017": "\t\t\t\t\"bSortCellsTop\",",
                    "1018": "\t\t\t\t\"iTabIndex\",",
                    "1019": "\t\t\t\t\"fnStateLoadCallback\",",
                    "1020": "\t\t\t\t\"fnStateSaveCallback\",",
                    "1021": "\t\t\t\t\"renderer\",",
                    "1022": "\t\t\t\t\"searchDelay\",",
                    "1023": "\t\t\t\t\"rowId\",",
                    "1024": "\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat",
                    "1025": "\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],",
                    "1026": "\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],",
                    "1027": "\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ]",
                    "1028": "\t\t\t] );",
                    "1029": "\t\t\t_fnMap( oSettings.oScroll, oInit, [",
                    "1030": "\t\t\t\t[ \"sScrollX\", \"sX\" ],",
                    "1031": "\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],",
                    "1032": "\t\t\t\t[ \"sScrollY\", \"sY\" ],",
                    "1033": "\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]",
                    "1034": "\t\t\t] );",
                    "1035": "\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );",
                    "1036": "",
                    "1037": "\t\t\t/* Callback functions which are array driven */",
                    "1038": "\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );",
                    "1039": "\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );",
                    "1040": "\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );",
                    "1041": "\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );",
                    "1042": "\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );",
                    "1043": "\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );",
                    "1044": "\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );",
                    "1045": "\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );",
                    "1046": "\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );",
                    "1047": "\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );",
                    "1048": "\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );",
                    "1049": "",
                    "1050": "\t\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );",
                    "1051": "",
                    "1052": "\t\t\t/* Browser support detection */",
                    "1053": "\t\t\t_fnBrowserDetect( oSettings );",
                    "1054": "",
                    "1055": "\t\t\tvar oClasses = oSettings.oClasses;",
                    "1056": "",
                    "1057": "\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );",
                    "1058": "\t\t\t$this.addClass( oClasses.sTable );",
                    "1068": "\t\t\tif ( oInit.iDeferLoading !== null )",
                    "1069": "\t\t\t{",
                    "1070": "\t\t\t\toSettings.bDeferLoading = true;",
                    "1071": "\t\t\t\tvar tmp = Array.isArray( oInit.iDeferLoading );",
                    "1072": "\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;",
                    "1073": "\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;",
                    "1074": "\t\t\t}",
                    "1075": "",
                    "1091": "\t\t\t\t\t\t_fnLanguageCompat( json );",
                    "1098": "\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can",
                    "1108": "\t\t\t/*",
                    "1109": "\t\t\t * Stripes",
                    "1110": "\t\t\t */",
                    "1111": "\t\t\tif ( oInit.asStripeClasses === null )",
                    "1112": "\t\t\t{",
                    "1113": "\t\t\t\toSettings.asStripeClasses =[",
                    "1114": "\t\t\t\t\toClasses.sStripeOdd,",
                    "1115": "\t\t\t\t\toClasses.sStripeEven",
                    "1116": "\t\t\t\t];",
                    "1117": "\t\t\t}",
                    "1118": "",
                    "1119": "\t\t\t/* Remove row stripe classes if they are already on the table row */",
                    "1120": "\t\t\tvar stripeClasses = oSettings.asStripeClasses;",
                    "1121": "\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);",
                    "1122": "\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {",
                    "1123": "\t\t\t\treturn rowOne.hasClass(el);",
                    "1124": "\t\t\t} ) ) !== -1 ) {",
                    "1125": "\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );",
                    "1126": "\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();",
                    "1127": "\t\t\t}",
                    "1128": "",
                    "1133": "\t\t\tvar anThs = [];",
                    "1134": "\t\t\tvar aoColumnsInit;",
                    "1135": "\t\t\tvar nThead = this.getElementsByTagName('thead');",
                    "1136": "\t\t\tif ( nThead.length !== 0 )",
                    "1137": "\t\t\t{",
                    "1138": "\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );",
                    "1139": "\t\t\t\tanThs = _fnGetUniqueThs( oSettings );",
                    "1140": "\t\t\t}",
                    "1142": "\t\t\t/* If not given a column array, generate one with nulls */",
                    "1143": "\t\t\tif ( oInit.aoColumns === null )",
                    "1144": "\t\t\t{",
                    "1145": "\t\t\t\taoColumnsInit = [];",
                    "1146": "\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )",
                    "1147": "\t\t\t\t{",
                    "1148": "\t\t\t\t\taoColumnsInit.push( null );",
                    "1149": "\t\t\t\t}",
                    "1151": "\t\t\telse",
                    "1152": "\t\t\t{",
                    "1153": "\t\t\t\taoColumnsInit = oInit.aoColumns;",
                    "1156": "\t\t\t/* Add the columns */",
                    "1157": "\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )",
                    "1158": "\t\t\t{",
                    "1159": "\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );",
                    "1162": "\t\t\t/* Apply the column definitions */",
                    "1163": "\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {",
                    "1170": "\t\t\tif ( rowOne.length ) {",
                    "1171": "\t\t\t\tvar a = function ( cell, name ) {",
                    "1172": "\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;",
                    "1173": "\t\t\t\t};",
                    "1174": "",
                    "1175": "\t\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {",
                    "1176": "\t\t\t\t\tvar col = oSettings.aoColumns[i];",
                    "1177": "",
                    "1178": "\t\t\t\t\tif (! col) {",
                    "1179": "\t\t\t\t\t\t_fnLog( oSettings, 0, 'Incorrect column count', 18 );",
                    "1180": "\t\t\t\t\t}",
                    "1181": "",
                    "1182": "\t\t\t\t\tif ( col.mData === i ) {",
                    "1183": "\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );",
                    "1184": "\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );",
                    "1185": "",
                    "1186": "\t\t\t\t\t\tif ( sort !== null || filter !== null ) {",
                    "1187": "\t\t\t\t\t\t\tcol.mData = {",
                    "1188": "\t\t\t\t\t\t\t\t_:      i+'.display',",
                    "1189": "\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,",
                    "1190": "\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,",
                    "1191": "\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined",
                    "1192": "\t\t\t\t\t\t\t};",
                    "1193": "\t\t\t\t\t\t\tcol._isArrayHost = true;",
                    "1194": "",
                    "1195": "\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );",
                    "1196": "\t\t\t\t\t\t}",
                    "1197": "\t\t\t\t\t}",
                    "1198": "\t\t\t\t} );",
                    "1199": "\t\t\t}",
                    "1200": "",
                    "1201": "\t\t\tvar features = oSettings.oFeatures;",
                    "1202": "\t\t\tvar loadedInit = function () {",
                    "1203": "\t\t\t\t/*",
                    "1204": "\t\t\t\t * Sorting",
                    "1205": "\t\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler",
                    "1206": "\t\t\t\t */",
                    "1207": "",
                    "1208": "\t\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting",
                    "1209": "\t\t\t\t// in case that has been altered, so the default sort reflects that option",
                    "1210": "\t\t\t\tif ( oInit.aaSorting === undefined ) {",
                    "1211": "\t\t\t\t\tvar sorting = oSettings.aaSorting;",
                    "1212": "\t\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {",
                    "1213": "\t\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];",
                    "1214": "\t\t\t\t\t}",
                    "1215": "\t\t\t\t}",
                    "1216": "",
                    "1217": "\t\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into",
                    "1218": "\t\t\t\t * account, and also will apply sorting disabled classes if disabled",
                    "1219": "\t\t\t\t */",
                    "1220": "\t\t\t\t_fnSortingClasses( oSettings );",
                    "1221": "",
                    "1222": "\t\t\t\tif ( features.bSort ) {",
                    "1223": "\t\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {",
                    "1224": "\t\t\t\t\t\tif ( oSettings.bSorted ) {",
                    "1225": "\t\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );",
                    "1226": "\t\t\t\t\t\t\tvar sortedColumns = {};",
                    "1227": "",
                    "1228": "\t\t\t\t\t\t\t$.each( aSort, function (i, val) {",
                    "1229": "\t\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;",
                    "1230": "\t\t\t\t\t\t\t} );",
                    "1231": "",
                    "1232": "\t\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );",
                    "1233": "\t\t\t\t\t\t\t_fnSortAria( oSettings );",
                    "1234": "\t\t\t\t\t\t}",
                    "1235": "\t\t\t\t\t} );",
                    "1236": "\t\t\t\t}",
                    "1237": "",
                    "1238": "\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {",
                    "1239": "\t\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {",
                    "1240": "\t\t\t\t\t\t_fnSortingClasses( oSettings );",
                    "1241": "\t\t\t\t\t}",
                    "1242": "\t\t\t\t}, 'sc' );",
                    "1243": "",
                    "1244": "",
                    "1245": "\t\t\t\t/*",
                    "1246": "\t\t\t\t * Final init",
                    "1247": "\t\t\t\t * Cache the header, body and footer as required, creating them if needed",
                    "1248": "\t\t\t\t */",
                    "1249": "",
                    "1250": "\t\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc",
                    "1251": "\t\t\t\tvar captions = $this.children('caption').each( function () {",
                    "1252": "\t\t\t\t\tthis._captionSide = $(this).css('caption-side');",
                    "1253": "\t\t\t\t} );",
                    "1254": "",
                    "1255": "\t\t\t\tvar thead = $this.children('thead');",
                    "1256": "\t\t\t\tif ( thead.length === 0 ) {",
                    "1257": "\t\t\t\t\tthead = $('<thead/>').appendTo($this);",
                    "1258": "\t\t\t\t}",
                    "1259": "\t\t\t\toSettings.nTHead = thead[0];",
                    "1260": "",
                    "1261": "\t\t\t\tvar tbody = $this.children('tbody');",
                    "1262": "\t\t\t\tif ( tbody.length === 0 ) {",
                    "1263": "\t\t\t\t\ttbody = $('<tbody/>').insertAfter(thead);",
                    "1264": "\t\t\t\t}",
                    "1265": "\t\t\t\toSettings.nTBody = tbody[0];",
                    "1266": "",
                    "1267": "\t\t\t\tvar tfoot = $this.children('tfoot');",
                    "1268": "\t\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {",
                    "1269": "\t\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create",
                    "1270": "\t\t\t\t\t// a tfoot element for the caption element to be appended to",
                    "1271": "\t\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);",
                    "1272": "\t\t\t\t}",
                    "1273": "",
                    "1274": "\t\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {",
                    "1275": "\t\t\t\t\t$this.addClass( oClasses.sNoFooter );",
                    "1276": "\t\t\t\t}",
                    "1277": "\t\t\t\telse if ( tfoot.length > 0 ) {",
                    "1278": "\t\t\t\t\toSettings.nTFoot = tfoot[0];",
                    "1279": "\t\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );",
                    "1280": "\t\t\t\t}",
                    "1281": "",
                    "1282": "\t\t\t\t/* Check if there is data passing into the constructor */",
                    "1283": "\t\t\t\tif ( oInit.aaData ) {",
                    "1284": "\t\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {",
                    "1285": "\t\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );",
                    "1286": "\t\t\t\t\t}",
                    "1287": "\t\t\t\t}",
                    "1288": "\t\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {",
                    "1289": "\t\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax",
                    "1290": "\t\t\t\t\t * source since there is no point in reading the DOM data if we are then going",
                    "1291": "\t\t\t\t\t * to replace it with Ajax data",
                    "1292": "\t\t\t\t\t */",
                    "1293": "\t\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );",
                    "1294": "\t\t\t\t}",
                    "1295": "",
                    "1296": "\t\t\t\t/* Copy the data index array */",
                    "1297": "\t\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();",
                    "1298": "",
                    "1299": "\t\t\t\t/* Initialisation complete - table can be drawn */",
                    "1300": "\t\t\t\toSettings.bInitialised = true;",
                    "1301": "",
                    "1302": "\t\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the",
                    "1303": "\t\t\t\t * language processor)",
                    "1304": "\t\t\t\t */",
                    "1305": "\t\t\t\tif ( bInitHandedOff === false ) {",
                    "1306": "\t\t\t\t\t_fnInitialise( oSettings );",
                    "1307": "\t\t\t\t}",
                    "1308": "\t\t\t};",
                    "1309": "",
                    "1310": "\t\t\t/* Must be done after everything which can be overridden by the state saving! */",
                    "1311": "\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );",
                    "1312": "",
                    "1313": "\t\t\tif ( oInit.bStateSave )",
                    "1314": "\t\t\t{",
                    "1315": "\t\t\t\tfeatures.bStateSave = true;",
                    "1316": "\t\t\t\t_fnLoadState( oSettings, oInit, loadedInit );",
                    "1317": "\t\t\t}",
                    "1318": "\t\t\telse {",
                    "1319": "\t\t\t\tloadedInit();",
                    "1320": "\t\t\t}",
                    "1321": "",
                    "1322": "\t\t} );",
                    "1323": "\t\t_that = null;",
                    "1324": "\t\treturn this;",
                    "1341": "\t//  _selector_first",
                    "1355": "\tvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;",
                    "1360": "\t// http://en.wikipedia.org/wiki/Foreign_exchange_market",
                    "1430": "",
                    "1488": "\t\t\t\tout.push( a[ order[i] ][ prop ] );",
                    "1531": "",
                    "1583": "\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more",
                    "1618": "",
                    "1622": "\tvar _includes = function (search, start) {",
                    "1623": "\t\tif (start === undefined) {",
                    "1624": "\t\t\tstart = 0;",
                    "1626": "",
                    "1627": "\t\treturn this.indexOf(search, start) !== -1;",
                    "1628": "\t};",
                    "1629": "",
                    "1630": "\t// Array.isArray polyfill.",
                    "1631": "\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",
                    "1632": "\tif (! Array.isArray) {",
                    "1633": "\t    Array.isArray = function(arg) {",
                    "1634": "\t        return Object.prototype.toString.call(arg) === '[object Array]';",
                    "1635": "\t    };",
                    "1636": "\t}",
                    "1637": "",
                    "1638": "\tif (! Array.prototype.includes) {",
                    "1639": "\t\tArray.prototype.includes = _includes;",
                    "1640": "\t}",
                    "1641": "",
                    "1642": "\t// .trim() polyfill",
                    "1643": "\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim",
                    "1644": "\tif (!String.prototype.trim) {",
                    "1645": "\t  String.prototype.trim = function () {",
                    "1646": "\t    return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');",
                    "1647": "\t  };",
                    "1648": "\t}",
                    "1649": "",
                    "1650": "\tif (! String.prototype.includes) {",
                    "1651": "\t\tString.prototype.includes = _includes;",
                    "1700": "",
                    "1734": "\t\t\telse if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||",
                    "1735": "\t\t\t\t\t  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )",
                    "1736": "\t\t\t{",
                    "1852": "\t\t\telse if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||",
                    "1853": "\t\t\t\t\t  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )",
                    "1854": "\t\t\t{",
                    "1929": "\t\t\t\treturn function (data, type) { // row and meta also passed, but not used",
                    "1933": "\t\t}",
                    "1953": "\t\t$.each( o, function (key, val) {",
                    "1991": "\t\t$.each( user, function (key, val) {",
                    "2014": "",
                    "2015": "\t/**",
                    "2016": "\t * Language compatibility - when certain options are given, and others aren't, we",
                    "2017": "\t * need to duplicate the values over, in order to provide backwards compatibility",
                    "2018": "\t * with older language files.",
                    "2019": "\t *  @param {object} oSettings dataTables settings object",
                    "2020": "\t *  @memberof DataTable#oApi",
                    "2021": "\t */",
                    "2022": "\tfunction _fnLanguageCompat( lang )",
                    "2023": "\t{",
                    "2024": "\t\t// Note the use of the Hungarian notation for the parameters in this method as",
                    "2025": "\t\t// this is called after the mapping of camelCase to Hungarian",
                    "2026": "\t\tvar defaults = DataTable.defaults.oLanguage;",
                    "2027": "",
                    "2028": "\t\t// Default mapping",
                    "2029": "\t\tvar defaultDecimal = defaults.sDecimal;",
                    "2030": "\t\tif ( defaultDecimal ) {",
                    "2031": "\t\t\t_addNumericSort( defaultDecimal );",
                    "2032": "\t\t}",
                    "2033": "",
                    "2034": "\t\tif ( lang ) {",
                    "2035": "\t\t\tvar zeroRecords = lang.sZeroRecords;",
                    "2036": "",
                    "2037": "\t\t\t// Backwards compatibility - if there is no sEmptyTable given, then use the same as",
                    "2038": "\t\t\t// sZeroRecords - assuming that is given.",
                    "2039": "\t\t\tif ( ! lang.sEmptyTable && zeroRecords &&",
                    "2040": "\t\t\t\tdefaults.sEmptyTable === \"No data available in table\" )",
                    "2041": "\t\t\t{",
                    "2042": "\t\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );",
                    "2043": "\t\t\t}",
                    "2044": "",
                    "2045": "\t\t\t// Likewise with loading records",
                    "2046": "\t\t\tif ( ! lang.sLoadingRecords && zeroRecords &&",
                    "2047": "\t\t\t\tdefaults.sLoadingRecords === \"Loading...\" )",
                    "2048": "\t\t\t{",
                    "2049": "\t\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );",
                    "2050": "\t\t\t}",
                    "2051": "",
                    "2052": "\t\t\t// Old parameter name of the thousands separator mapped onto the new",
                    "2053": "\t\t\tif ( lang.sInfoThousands ) {",
                    "2054": "\t\t\t\tlang.sThousands = lang.sInfoThousands;",
                    "2055": "\t\t\t}",
                    "2056": "",
                    "2057": "\t\t\tvar decimal = lang.sDecimal;",
                    "2058": "\t\t\tif ( decimal && defaultDecimal !== decimal ) {",
                    "2059": "\t\t\t\t_addNumericSort( decimal );",
                    "2060": "\t\t\t}",
                    "2061": "\t\t}",
                    "2062": "\t}",
                    "2063": "",
                    "2064": "",
                    "2159": "\t\t\t\t\tleft: $(window).scrollLeft()*-1, // allow for scrolling",
                    "2186": "\t\t\t// Numbers below, in order, are:",
                    "2187": "\t\t\t// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth",
                    "2188": "\t\t\t//",
                    "2189": "\t\t\t// IE6 XP:                           100 100 100  83",
                    "2190": "\t\t\t// IE7 Vista:                        100 100 100  83",
                    "2191": "\t\t\t// IE 8+ Windows:                     83  83 100  83",
                    "2192": "\t\t\t// Evergreen Windows:                 83  83 100  83",
                    "2193": "\t\t\t// Evergreen Mac with scrollbars:     85  85 100  85",
                    "2194": "\t\t\t// Evergreen Mac without scrollbars: 100 100 100 100",
                    "2195": "",
                    "2199": "\t\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to",
                    "2200": "\t\t\t// include the width of the scrollbar, while other browsers ensure the inner",
                    "2201": "\t\t\t// element is contained without forcing scrolling",
                    "2202": "\t\t\tbrowser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;",
                    "2203": "",
                    "2208": "\t\t\t// IE8- don't provide height and width for getBoundingClientRect",
                    "2209": "\t\t\tbrowser.bBounding = n[0].getBoundingClientRect().width ? true : false;",
                    "2210": "",
                    "2218": "",
                    "2219": "\t/**",
                    "2220": "\t * Array.prototype reduce[Right] method, used for browsers which don't support",
                    "2221": "\t * JS 1.6. Done this way to reduce code size, since we iterate either way",
                    "2222": "\t *  @param {object} settings dataTables settings object",
                    "2223": "\t *  @memberof DataTable#oApi",
                    "2224": "\t */",
                    "2225": "\tfunction _fnReduce ( that, fn, init, start, end, inc )",
                    "2226": "\t{",
                    "2227": "\t\tvar",
                    "2228": "\t\t\ti = start,",
                    "2229": "\t\t\tvalue,",
                    "2230": "\t\t\tisSet = false;",
                    "2231": "",
                    "2232": "\t\tif ( init !== undefined ) {",
                    "2233": "\t\t\tvalue = init;",
                    "2234": "\t\t\tisSet = true;",
                    "2235": "\t\t}",
                    "2236": "",
                    "2237": "\t\twhile ( i !== end ) {",
                    "2238": "\t\t\tif ( ! that.hasOwnProperty(i) ) {",
                    "2239": "\t\t\t\tcontinue;",
                    "2240": "\t\t\t}",
                    "2241": "",
                    "2242": "\t\t\tvalue = isSet ?",
                    "2243": "\t\t\t\tfn( value, that[i], i, that ) :",
                    "2244": "\t\t\t\tthat[i];",
                    "2245": "",
                    "2246": "\t\t\tisSet = true;",
                    "2247": "\t\t\ti += inc;",
                    "2248": "\t\t}",
                    "2249": "",
                    "2250": "\t\treturn value;",
                    "2251": "\t}",
                    "2252": "",
                    "2256": "\t *  @param {node} nTh The th element for this column",
                    "2259": "\tfunction _fnAddColumn( oSettings, nTh )",
                    "2265": "\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),",
                    "2266": "\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',",
                    "2269": "\t\t\tidx: iCol",
                    "2278": "",
                    "2279": "\t\t// Use the default column options function to initialise classes etc",
                    "2280": "\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );",
                    "2294": "\t\tvar oClasses = oSettings.oClasses;",
                    "2295": "\t\tvar th = $(oCol.nTh);",
                    "2296": "",
                    "2297": "\t\t// Try to get width information from the DOM. We can't get it from CSS",
                    "2298": "\t\t// as we'd need to parse the CSS stylesheet. `width` option can override",
                    "2299": "\t\tif ( ! oCol.sWidthOrig ) {",
                    "2300": "\t\t\t// Width attribute",
                    "2301": "\t\t\toCol.sWidthOrig = th.attr('width') || null;",
                    "2302": "",
                    "2303": "\t\t\t// Style attribute",
                    "2304": "\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);",
                    "2305": "\t\t\tif ( t ) {",
                    "2306": "\t\t\t\toCol.sWidthOrig = t[1];",
                    "2307": "\t\t\t}",
                    "2308": "\t\t}",
                    "2329": "",
                    "2336": "\t\t\tif ( oOptions.sClass ) {",
                    "2337": "\t\t\t\tth.addClass( oOptions.sClass );",
                    "2338": "\t\t\t}",
                    "2359": "",
                    "2360": "\t\t\t// Fall back to the aria-label attribute on the table header if no ariaTitle is",
                    "2361": "\t\t\t// provided.",
                    "2362": "\t\t\tif (! oCol.ariaTitle) {",
                    "2363": "\t\t\t\toCol.ariaTitle = th.attr(\"aria-label\");",
                    "2364": "\t\t\t}",
                    "2370": "\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;",
                    "2383": "\t\t\treturn mRender && type ?",
                    "2384": "\t\t\t\tmRender( innerData, type, rowData, meta ) :",
                    "2401": "\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called",
                    "2402": "\t\t}",
                    "2403": "",
                    "2404": "\t\t/* Check that the class assignment is correct for sorting */",
                    "2405": "\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;",
                    "2406": "\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;",
                    "2407": "\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )",
                    "2408": "\t\t{",
                    "2409": "\t\t\toCol.sSortingClass = oClasses.sSortableNone;",
                    "2410": "\t\t\toCol.sSortingClassJUI = \"\";",
                    "2411": "\t\t}",
                    "2412": "\t\telse if ( bAsc && !bDesc )",
                    "2413": "\t\t{",
                    "2414": "\t\t\toCol.sSortingClass = oClasses.sSortableAsc;",
                    "2415": "\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;",
                    "2416": "\t\t}",
                    "2417": "\t\telse if ( !bAsc && bDesc )",
                    "2418": "\t\t{",
                    "2419": "\t\t\toCol.sSortingClass = oClasses.sSortableDesc;",
                    "2420": "\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;",
                    "2421": "\t\t}",
                    "2422": "\t\telse",
                    "2423": "\t\t{",
                    "2424": "\t\t\toCol.sSortingClass = oClasses.sSortable;",
                    "2425": "\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;",
                    "2438": "\t\t/* Not interested in doing column width calculation if auto-width is disabled */",
                    "2439": "\t\tif ( settings.oFeatures.bAutoWidth !== false )",
                    "2440": "\t\t{",
                    "2441": "\t\t\tvar columns = settings.aoColumns;",
                    "2442": "",
                    "2443": "\t\t\t_fnCalculateColumnWidths( settings );",
                    "2444": "\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )",
                    "2445": "\t\t\t{",
                    "2446": "\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;",
                    "2447": "\t\t\t}",
                    "2448": "\t\t}",
                    "2451": "\t\tif ( scroll.sY !== '' || scroll.sX !== '')",
                    "2452": "\t\t{",
                    "2489": "\t\tvar iPos = $.inArray( iMatch, aiVis );",
                    "2501": "\tfunction _fnVisbleColumns( oSettings )",
                    "2505": "\t\t// No reduce in IE8, use a loop for now",
                    "2506": "\t\t$.each( oSettings.aoColumns, function ( i, col ) {",
                    "2507": "\t\t\tif ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {",
                    "2508": "\t\t\t\tvis++;",
                    "2510": "\t\t} );",
                    "2528": "\t\t$.map( oSettings.aoColumns, function(val, i) {",
                    "2549": "\t\tvar col, cell, detectedType, cache;",
                    "2575": "\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {",
                    "2615": "\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )",
                    "2642": "\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )",
                    "2645": "\t\t\t\t\t\twhile( columns.length <= aTargets[j] )",
                    "2651": "\t\t\t\t\t\tfn( aTargets[j], def );",
                    "2653": "\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )",
                    "2656": "\t\t\t\t\t\tfn( columns.length+aTargets[j], def );",
                    "2658": "\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )",
                    "2660": "\t\t\t\t\t\t/* Class name matching on TH element */",
                    "2661": "\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )",
                    "2662": "\t\t\t\t\t\t{",
                    "2663": "\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||",
                    "2664": "\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )",
                    "2665": "\t\t\t\t\t\t\t{",
                    "2666": "\t\t\t\t\t\t\t\tfn( k, def );",
                    "2675": "\t\tif ( aoCols )",
                    "2676": "\t\t{",
                    "2677": "\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )",
                    "2678": "\t\t\t{",
                    "2688": "\t *  @param {object} oSettings dataTables settings object",
                    "2689": "\t *  @param {array} aData data array to be added",
                    "2690": "\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,",
                    "2692": "\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given",
                    "2697": "\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )",
                    "2700": "\t\tvar iRow = oSettings.aoData.length;",
                    "2701": "\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {",
                    "2702": "\t\t\tsrc: nTr ? 'dom' : 'data',",
                    "2703": "\t\t\tidx: iRow",
                    "2706": "\t\toData._aData = aDataIn;",
                    "2707": "\t\toSettings.aoData.push( oData );",
                    "2709": "\t\t/* Create the cells */",
                    "2710": "\t\tvar nTd, sThisType;",
                    "2711": "\t\tvar columns = oSettings.aoColumns;",
                    "2713": "\t\t// Invalidate the column types as the new data needs to be revalidated",
                    "2720": "\t\toSettings.aiDisplayMaster.push( iRow );",
                    "2722": "\t\tvar id = oSettings.rowIdFn( aDataIn );",
                    "2724": "\t\t\toSettings.aIds[ id ] = oData;",
                    "2728": "\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )",
                    "2730": "\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );",
                    "2733": "\t\treturn iRow;",
                    "2758": "\t\t\treturn _fnAddData( settings, row.data, el, row.cells );",
                    "2759": "\t\t} );",
                    "2760": "\t}",
                    "2761": "",
                    "2762": "",
                    "2763": "\t/**",
                    "2764": "\t * Take a TR element and convert it to an index in aoData",
                    "2765": "\t *  @param {object} oSettings dataTables settings object",
                    "2766": "\t *  @param {node} n the TR element to find",
                    "2767": "\t *  @returns {int} index if the node is found, null if not",
                    "2768": "\t *  @memberof DataTable#oApi",
                    "2769": "\t */",
                    "2770": "\tfunction _fnNodeToDataIndex( oSettings, n )",
                    "2771": "\t{",
                    "2772": "\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;",
                    "2773": "\t}",
                    "2774": "",
                    "2775": "",
                    "2776": "\t/**",
                    "2777": "\t * Take a TD element and convert it into a column data index (not the visible index)",
                    "2778": "\t *  @param {object} oSettings dataTables settings object",
                    "2779": "\t *  @param {int} iRow The row number the TD/TH can be found in",
                    "2780": "\t *  @param {node} n The TD/TH element to find",
                    "2781": "\t *  @returns {int} index if the node is found, -1 if not",
                    "2782": "\t *  @memberof DataTable#oApi",
                    "2783": "\t */",
                    "2784": "\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )",
                    "2785": "\t{",
                    "2786": "\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );",
                    "2887": "\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {",
                    "2939": "\t /**",
                    "2940": "\t * Take an array of integers (index array) and remove a target integer (value - not",
                    "2941": "\t * the key!)",
                    "2942": "\t *  @param {array} a Index array to target",
                    "2943": "\t *  @param {int} iTarget value to find",
                    "2944": "\t *  @memberof DataTable#oApi",
                    "2945": "\t */",
                    "2946": "\tfunction _fnDeleteIndex( a, iTarget, splice )",
                    "2947": "\t{",
                    "2948": "\t\tvar iTargetIndex = -1;",
                    "2949": "",
                    "2950": "\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )",
                    "2951": "\t\t{",
                    "2952": "\t\t\tif ( a[i] == iTarget )",
                    "2953": "\t\t\t{",
                    "2954": "\t\t\t\tiTargetIndex = i;",
                    "2955": "\t\t\t}",
                    "2956": "\t\t\telse if ( a[i] > iTarget )",
                    "2957": "\t\t\t{",
                    "2958": "\t\t\t\ta[i]--;",
                    "2959": "\t\t\t}",
                    "2960": "\t\t}",
                    "2961": "",
                    "2962": "\t\tif ( iTargetIndex != -1 && splice === undefined )",
                    "2963": "\t\t{",
                    "2964": "\t\t\ta.splice( iTargetIndex, 1 );",
                    "2965": "\t\t}",
                    "2966": "\t}",
                    "2967": "",
                    "2968": "",
                    "2989": "\t\tvar cellWrite = function ( cell, col ) {",
                    "2990": "\t\t\t// This is very frustrating, but in IE if you just write directly",
                    "2991": "\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,",
                    "2992": "\t\t\t// even if there is a reference to them elsewhere",
                    "2993": "\t\t\twhile ( cell.childNodes.length ) {",
                    "2994": "\t\t\t\tcell.removeChild( cell.firstChild );",
                    "2995": "\t\t\t}",
                    "2997": "\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );",
                    "2998": "\t\t};",
                    "3014": "\t\t\t\t\tcellWrite( cells[colIdx], colIdx );",
                    "3018": "\t\t\t\t\t\tcellWrite( cells[i], i );",
                    "3024": "\t\t// For both row and cell invalidation, the cached data for sorting and",
                    "3025": "\t\t// filtering is nulled out",
                    "3026": "\t\trow._aSortData = null;",
                    "3027": "\t\trow._aFilterData = null;",
                    "3028": "",
                    "3029": "\t\t// Invalidate the type for a specific column (if given) or all columns since",
                    "3030": "\t\t// the data might have changed",
                    "3068": "\t\t\tname, col, o, i=0, contents,",
                    "3179": "\t\t\ti, iLen, create;",
                    "3216": "\t\t\t\tif ( create || ((oCol.mRender || oCol.mData !== i) &&",
                    "3217": "\t\t\t\t\t (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')",
                    "3218": "\t\t\t\t)) {",
                    "3219": "\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );",
                    "3220": "\t\t\t\t}",
                    "3221": "",
                    "3222": "\t\t\t\t/* Add user defined class */",
                    "3223": "\t\t\t\tif ( oCol.sClass )",
                    "3224": "\t\t\t\t{",
                    "3225": "\t\t\t\t\tnTd.className += ' '+oCol.sClass;",
                    "3246": "\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );",
                    "3298": "\tfunction _fnBuildHead( oSettings )",
                    "3300": "\t\tvar i, ien, cell, row, column;",
                    "3301": "\t\tvar thead = oSettings.nTHead;",
                    "3302": "\t\tvar tfoot = oSettings.nTFoot;",
                    "3303": "\t\tvar createHeader = $('th, td', thead).length === 0;",
                    "3304": "\t\tvar classes = oSettings.oClasses;",
                    "3305": "\t\tvar columns = oSettings.aoColumns;",
                    "3306": "",
                    "3307": "\t\tif ( createHeader ) {",
                    "3308": "\t\t\trow = $('<tr/>').appendTo( thead );",
                    "3311": "\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {",
                    "3312": "\t\t\tcolumn = columns[i];",
                    "3313": "\t\t\tcell = $( column.nTh ).addClass( column.sClass );",
                    "3315": "\t\t\tif ( createHeader ) {",
                    "3316": "\t\t\t\tcell.appendTo( row );",
                    "3319": "\t\t\t// 1.11 move into sorting",
                    "3320": "\t\t\tif ( oSettings.oFeatures.bSort ) {",
                    "3321": "\t\t\t\tcell.addClass( column.sSortingClass );",
                    "3323": "\t\t\t\tif ( column.bSortable !== false ) {",
                    "3324": "\t\t\t\t\tcell",
                    "3325": "\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )",
                    "3326": "\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );",
                    "3328": "\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );",
                    "3329": "\t\t\t\t}",
                    "3330": "\t\t\t}",
                    "3332": "\t\t\tif ( column.sTitle != cell[0].innerHTML ) {",
                    "3333": "\t\t\t\tcell.html( column.sTitle );",
                    "3334": "\t\t\t}",
                    "3336": "\t\t\t_fnRenderer( oSettings, 'header' )(",
                    "3337": "\t\t\t\toSettings, cell, column, classes",
                    "3338": "\t\t\t);",
                    "3341": "\t\tif ( createHeader ) {",
                    "3342": "\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );",
                    "3345": "\t\t/* Deal with the footer - add classes if required */",
                    "3346": "\t\t$(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );",
                    "3347": "\t\t$(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );",
                    "3349": "\t\t// Cache the footer cells. Note that we only take the cells from the first",
                    "3350": "\t\t// row in the footer. If there is more than one row the user wants to",
                    "3351": "\t\t// interact with, they need to use the table().foot() method. Note also this",
                    "3352": "\t\t// allows cells to be used for multiple columns using colspan",
                    "3353": "\t\tif ( tfoot !== null ) {",
                    "3354": "\t\t\tvar cells = oSettings.aoFooter[0];",
                    "3356": "\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {",
                    "3357": "\t\t\t\tcolumn = columns[i];",
                    "3359": "\t\t\t\tif (column) {",
                    "3360": "\t\t\t\t\tcolumn.nTf = cells[i].cell;",
                    "3361": "",
                    "3362": "\t\t\t\t\tif ( column.sClass ) {",
                    "3363": "\t\t\t\t\t\t$(column.nTf).addClass( column.sClass );",
                    "3365": "\t\t\t\t}",
                    "3366": "\t\t\t\telse {",
                    "3367": "\t\t\t\t\t_fnLog( oSettings, 0, 'Incorrect column count', 18 );",
                    "3375": "\t * Draw the header (or footer) element based on the column visibility states. The",
                    "3376": "\t * methodology here is to use the layout array from _fnDetectHeader, modified for",
                    "3377": "\t * the instantaneous column visibility, to construct the new layout. The grid is",
                    "3378": "\t * traversed over cell at a time in a rows x columns grid fashion, although each",
                    "3379": "\t * cell insert can cover multiple elements in the grid - which is tracks using the",
                    "3380": "\t * aApplied array. Cell inserts in the grid will only occur where there isn't",
                    "3381": "\t * already a cell in that position.",
                    "3382": "\t *  @param {object} oSettings dataTables settings object",
                    "3383": "\t *  @param array {objects} aoSource Layout array from _fnDetectHeader",
                    "3384": "\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,",
                    "3387": "\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )",
                    "3389": "\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;",
                    "3390": "\t\tvar aoLocal = [];",
                    "3391": "\t\tvar aApplied = [];",
                    "3392": "\t\tvar iColumns = oSettings.aoColumns.length;",
                    "3393": "\t\tvar iRowspan, iColspan;",
                    "3394": "",
                    "3395": "\t\tif ( ! aoSource )",
                    "3396": "\t\t{",
                    "3397": "\t\t\treturn;",
                    "3398": "\t\t}",
                    "3399": "",
                    "3400": "\t\tif (  bIncludeHidden === undefined )",
                    "3401": "\t\t{",
                    "3402": "\t\t\tbIncludeHidden = false;",
                    "3403": "\t\t}",
                    "3404": "",
                    "3405": "\t\t/* Make a copy of the master layout array, but without the visible columns in it */",
                    "3406": "\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )",
                    "3407": "\t\t{",
                    "3408": "\t\t\taoLocal[i] = aoSource[i].slice();",
                    "3409": "\t\t\taoLocal[i].nTr = aoSource[i].nTr;",
                    "3410": "",
                    "3411": "\t\t\t/* Remove any columns which are currently hidden */",
                    "3412": "\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )",
                    "3413": "\t\t\t{",
                    "3414": "\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )",
                    "3415": "\t\t\t\t{",
                    "3416": "\t\t\t\t\taoLocal[i].splice( j, 1 );",
                    "3417": "\t\t\t\t}",
                    "3418": "\t\t\t}",
                    "3419": "",
                    "3420": "\t\t\t/* Prep the applied array - it needs an element for each row */",
                    "3421": "\t\t\taApplied.push( [] );",
                    "3422": "\t\t}",
                    "3424": "\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )",
                    "3425": "\t\t{",
                    "3426": "\t\t\tnLocalTr = aoLocal[i].nTr;",
                    "3428": "\t\t\t/* All cells are going to be replaced, so empty out the row */",
                    "3429": "\t\t\tif ( nLocalTr )",
                    "3430": "\t\t\t{",
                    "3431": "\t\t\t\twhile( (n = nLocalTr.firstChild) )",
                    "3432": "\t\t\t\t{",
                    "3433": "\t\t\t\t\tnLocalTr.removeChild( n );",
                    "3437": "\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )",
                    "3438": "\t\t\t{",
                    "3439": "\t\t\t\tiRowspan = 1;",
                    "3440": "\t\t\t\tiColspan = 1;",
                    "3441": "",
                    "3442": "\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target",
                    "3443": "\t\t\t\t * insert point. If there is, then there is nothing to do.",
                    "3444": "\t\t\t\t */",
                    "3445": "\t\t\t\tif ( aApplied[i][j] === undefined )",
                    "3446": "\t\t\t\t{",
                    "3447": "\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );",
                    "3448": "\t\t\t\t\taApplied[i][j] = 1;",
                    "3449": "",
                    "3450": "\t\t\t\t\t/* Expand the cell to cover as many rows as needed */",
                    "3451": "\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&",
                    "3452": "\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )",
                    "3453": "\t\t\t\t\t{",
                    "3454": "\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;",
                    "3455": "\t\t\t\t\t\tiRowspan++;",
                    "3456": "\t\t\t\t\t}",
                    "3457": "",
                    "3458": "\t\t\t\t\t/* Expand the cell to cover as many columns as needed */",
                    "3459": "\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&",
                    "3460": "\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )",
                    "3461": "\t\t\t\t\t{",
                    "3462": "\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */",
                    "3463": "\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )",
                    "3464": "\t\t\t\t\t\t{",
                    "3465": "\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;",
                    "3466": "\t\t\t\t\t\t}",
                    "3467": "\t\t\t\t\t\tiColspan++;",
                    "3468": "\t\t\t\t\t}",
                    "3470": "\t\t\t\t\t/* Do the actual expansion in the DOM */",
                    "3471": "\t\t\t\t\t$(aoLocal[i][j].cell)",
                    "3472": "\t\t\t\t\t\t.attr('rowspan', iRowspan)",
                    "3473": "\t\t\t\t\t\t.attr('colspan', iColspan);",
                    "3493": "\t\tif ( $.inArray( false, aPreDraw ) !== -1 )",
                    "3501": "\t\tvar asStripeClasses = oSettings.asStripeClasses;",
                    "3502": "\t\tvar iStripes = asStripeClasses.length;",
                    "3503": "\t\tvar oLang = oSettings.oLanguage;",
                    "3512": "\t\tif ( oSettings.bDeferLoading )",
                    "3513": "\t\t{",
                    "3514": "\t\t\toSettings.bDeferLoading = false;",
                    "3515": "\t\t\toSettings.iDraw++;",
                    "3516": "\t\t\t_fnProcessingDisplay( oSettings, false );",
                    "3517": "\t\t}",
                    "3518": "\t\telse if ( !bServerSide )",
                    "3544": "\t\t\t\t/* Remove the old striping classes and then add the new one */",
                    "3545": "\t\t\t\tif ( iStripes !== 0 )",
                    "3546": "\t\t\t\t{",
                    "3547": "\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];",
                    "3548": "\t\t\t\t\tif ( aoData._sRowStripe != sStripe )",
                    "3549": "\t\t\t\t\t{",
                    "3550": "\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );",
                    "3551": "\t\t\t\t\t\taoData._sRowStripe = sStripe;",
                    "3552": "\t\t\t\t\t}",
                    "3567": "\t\t\t/* Table is empty - create a row with an empty message in it */",
                    "3568": "\t\t\tvar sZero = oLang.sZeroRecords;",
                    "3569": "\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )",
                    "3570": "\t\t\t{",
                    "3571": "\t\t\t\tsZero = oLang.sLoadingRecords;",
                    "3572": "\t\t\t}",
                    "3573": "\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )",
                    "3574": "\t\t\t{",
                    "3575": "\t\t\t\tsZero = oLang.sEmptyTable;",
                    "3576": "\t\t\t}",
                    "3577": "",
                    "3578": "\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )",
                    "3579": "\t\t\t\t.append( $('<td />', {",
                    "3580": "\t\t\t\t\t'valign':  'top',",
                    "3581": "\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),",
                    "3582": "\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty",
                    "3583": "\t\t\t\t} ).html( sZero ) )[0];",
                    "3593": "\t\tvar body = $(oSettings.nTBody);",
                    "3594": "",
                    "3599": "\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );",
                    "3615": "\tfunction _fnReDraw( settings, holdPosition )",
                    "3622": "\t\tif ( sort ) {",
                    "3623": "\t\t\t_fnSort( settings );",
                    "3624": "\t\t}",
                    "3626": "\t\tif ( filter ) {",
                    "3627": "\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );",
                    "3628": "\t\t}",
                    "3629": "\t\telse {",
                    "3630": "\t\t\t// No filtering, so we want to just use the display master",
                    "3631": "\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();",
                    "3632": "\t\t}",
                    "3634": "\t\tif ( holdPosition !== true ) {",
                    "3635": "\t\t\tsettings._iDisplayStart = 0;",
                    "3638": "\t\t// Let any modules know about the draw hold position state (used by",
                    "3639": "\t\t// scrolling internally)",
                    "3640": "\t\tsettings._drawHold = holdPosition;",
                    "3642": "\t\t_fnDraw( settings );",
                    "3644": "\t\tsettings._drawHold = false;",
                    "3647": "",
                    "3649": "\t * Add the options to the page HTML for the table",
                    "3650": "\t *  @param {object} oSettings dataTables settings object",
                    "3651": "\t *  @memberof DataTable#oApi",
                    "3653": "\tfunction _fnAddOptionsHtml ( oSettings )",
                    "3655": "\t\tvar classes = oSettings.oClasses;",
                    "3656": "\t\tvar table = $(oSettings.nTable);",
                    "3657": "\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed",
                    "3658": "\t\tvar features = oSettings.oFeatures;",
                    "3659": "",
                    "3660": "\t\t// All DataTables are wrapped in a div",
                    "3661": "\t\tvar insert = $('<div/>', {",
                    "3662": "\t\t\tid:      oSettings.sTableId+'_wrapper',",
                    "3663": "\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)",
                    "3664": "\t\t} );",
                    "3665": "",
                    "3666": "\t\toSettings.nHolding = holding[0];",
                    "3667": "\t\toSettings.nTableWrapper = insert[0];",
                    "3668": "\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;",
                    "3670": "\t\t/* Loop over the user set positioning and place the elements as needed */",
                    "3671": "\t\tvar aDom = oSettings.sDom.split('');",
                    "3672": "\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;",
                    "3673": "\t\tfor ( var i=0 ; i<aDom.length ; i++ )",
                    "3674": "\t\t{",
                    "3676": "\t\t\tcOption = aDom[i];",
                    "3678": "\t\t\tif ( cOption == '<' )",
                    "3679": "\t\t\t{",
                    "3680": "\t\t\t\t/* New container div */",
                    "3681": "\t\t\t\tnNewNode = $('<div/>')[0];",
                    "3683": "\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */",
                    "3684": "\t\t\t\tcNext = aDom[i+1];",
                    "3685": "\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )",
                    "3686": "\t\t\t\t{",
                    "3687": "\t\t\t\t\tsAttr = \"\";",
                    "3688": "\t\t\t\t\tj = 2;",
                    "3689": "\t\t\t\t\twhile ( aDom[i+j] != cNext )",
                    "3690": "\t\t\t\t\t{",
                    "3691": "\t\t\t\t\t\tsAttr += aDom[i+j];",
                    "3692": "\t\t\t\t\t\tj++;",
                    "3693": "\t\t\t\t\t}",
                    "3695": "\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */",
                    "3696": "\t\t\t\t\tif ( sAttr == \"H\" )",
                    "3697": "\t\t\t\t\t{",
                    "3698": "\t\t\t\t\t\tsAttr = classes.sJUIHeader;",
                    "3699": "\t\t\t\t\t}",
                    "3700": "\t\t\t\t\telse if ( sAttr == \"F\" )",
                    "3701": "\t\t\t\t\t{",
                    "3702": "\t\t\t\t\t\tsAttr = classes.sJUIFooter;",
                    "3703": "\t\t\t\t\t}",
                    "3708": "\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )",
                    "3709": "\t\t\t\t\t{",
                    "3710": "\t\t\t\t\t\tvar aSplit = sAttr.split('.');",
                    "3711": "\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);",
                    "3712": "\t\t\t\t\t\tnNewNode.className = aSplit[1];",
                    "3714": "\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )",
                    "3715": "\t\t\t\t\t{",
                    "3716": "\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);",
                    "3718": "\t\t\t\t\telse",
                    "3719": "\t\t\t\t\t{",
                    "3720": "\t\t\t\t\t\tnNewNode.className = sAttr;",
                    "3723": "\t\t\t\t\ti += j; /* Move along the position array */",
                    "3726": "\t\t\t\tinsert.append( nNewNode );",
                    "3727": "\t\t\t\tinsert = $(nNewNode);",
                    "3729": "\t\t\telse if ( cOption == '>' )",
                    "3730": "\t\t\t{",
                    "3731": "\t\t\t\t/* End container div */",
                    "3734": "\t\t\t// @todo Move options into their own plugins?",
                    "3735": "\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )",
                    "3736": "\t\t\t{",
                    "3737": "\t\t\t\t/* Length */",
                    "3738": "\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );",
                    "3739": "\t\t\t}",
                    "3740": "\t\t\telse if ( cOption == 'f' && features.bFilter )",
                    "3741": "\t\t\t{",
                    "3742": "\t\t\t\t/* Filter */",
                    "3743": "\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );",
                    "3744": "\t\t\t}",
                    "3745": "\t\t\telse if ( cOption == 'r' && features.bProcessing )",
                    "3746": "\t\t\t{",
                    "3747": "\t\t\t\t/* pRocessing */",
                    "3748": "\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );",
                    "3749": "\t\t\t}",
                    "3750": "\t\t\telse if ( cOption == 't' )",
                    "3751": "\t\t\t{",
                    "3752": "\t\t\t\t/* Table */",
                    "3753": "\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );",
                    "3754": "\t\t\t}",
                    "3755": "\t\t\telse if ( cOption ==  'i' && features.bInfo )",
                    "3756": "\t\t\t{",
                    "3757": "\t\t\t\t/* Info */",
                    "3758": "\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );",
                    "3759": "\t\t\t}",
                    "3760": "\t\t\telse if ( cOption == 'p' && features.bPaginate )",
                    "3761": "\t\t\t{",
                    "3762": "\t\t\t\t/* Pagination */",
                    "3763": "\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );",
                    "3765": "\t\t\telse if ( DataTable.ext.feature.length !== 0 )",
                    "3767": "\t\t\t\t/* Plug-in features */",
                    "3768": "\t\t\t\tvar aoFeatures = DataTable.ext.feature;",
                    "3769": "\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )",
                    "3770": "\t\t\t\t{",
                    "3771": "\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )",
                    "3772": "\t\t\t\t\t{",
                    "3773": "\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );",
                    "3774": "\t\t\t\t\t\tbreak;",
                    "3776": "\t\t\t\t}",
                    "3779": "\t\t\t/* Add to the 2D features array */",
                    "3780": "\t\t\tif ( featureNode )",
                    "3781": "\t\t\t{",
                    "3782": "\t\t\t\tvar aanFeatures = oSettings.aanFeatures;",
                    "3783": "",
                    "3784": "\t\t\t\tif ( ! aanFeatures[cOption] )",
                    "3785": "\t\t\t\t{",
                    "3786": "\t\t\t\t\taanFeatures[cOption] = [];",
                    "3787": "\t\t\t\t}",
                    "3788": "",
                    "3789": "\t\t\t\taanFeatures[cOption].push( featureNode );",
                    "3793": "",
                    "3794": "\t\t/* Built our DOM structure - replace the holding div with what we want */",
                    "3795": "\t\tholding.replaceWith( insert );",
                    "3796": "\t\toSettings.nHolding = null;",
                    "3805": "\t *  @param array {object} aLayout Array to store the calculated layout in",
                    "3806": "\t *  @param {node} nThead The header/footer element for the table",
                    "3809": "\tfunction _fnDetectHeader ( aLayout, nThead )",
                    "3811": "\t\tvar nTrs = $(nThead).children('tr');",
                    "3812": "\t\tvar nTr, nCell;",
                    "3813": "\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;",
                    "3814": "\t\tvar bUnique;",
                    "3815": "\t\tvar fnShiftCol = function ( a, i, j ) {",
                    "3817": "\t                while ( k[j] ) {",
                    "3823": "\t\taLayout.splice( 0, aLayout.length );",
                    "3824": "",
                    "3825": "\t\t/* We know how many rows there are in the layout - so prep it */",
                    "3826": "\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )",
                    "3827": "\t\t{",
                    "3828": "\t\t\taLayout.push( [] );",
                    "3831": "\t\t/* Calculate a layout array */",
                    "3832": "\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )",
                    "3833": "\t\t{",
                    "3834": "\t\t\tnTr = nTrs[i];",
                    "3835": "\t\t\tiColumn = 0;",
                    "3836": "",
                    "3837": "\t\t\t/* For every cell in the row... */",
                    "3838": "\t\t\tnCell = nTr.firstChild;",
                    "3839": "\t\t\twhile ( nCell ) {",
                    "3840": "\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||",
                    "3841": "\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )",
                    "3842": "\t\t\t\t{",
                    "3843": "\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */",
                    "3844": "\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;",
                    "3845": "\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;",
                    "3846": "\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;",
                    "3847": "\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;",
                    "3848": "",
                    "3849": "\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target",
                    "3850": "\t\t\t\t\t * accordingly",
                    "3851": "\t\t\t\t\t */",
                    "3852": "\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );",
                    "3854": "\t\t\t\t\t/* Cache calculation for unique columns */",
                    "3855": "\t\t\t\t\tbUnique = iColspan === 1 ? true : false;",
                    "3857": "\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */",
                    "3858": "\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )",
                    "3859": "\t\t\t\t\t{",
                    "3860": "\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )",
                    "3861": "\t\t\t\t\t\t{",
                    "3862": "\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {",
                    "3863": "\t\t\t\t\t\t\t\t\"cell\": nCell,",
                    "3864": "\t\t\t\t\t\t\t\t\"unique\": bUnique",
                    "3865": "\t\t\t\t\t\t\t};",
                    "3866": "\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;",
                    "3869": "\t\t\t\t}",
                    "3870": "\t\t\t\tnCell = nCell.nextSibling;",
                    "3871": "\t\t\t}",
                    "3872": "\t\t}",
                    "3873": "\t}",
                    "3876": "\t/**",
                    "3877": "\t * Get an array of unique th elements, one for each column",
                    "3878": "\t *  @param {object} oSettings dataTables settings object",
                    "3879": "\t *  @param {node} nHeader automatically detect the layout from this node - optional",
                    "3880": "\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional",
                    "3881": "\t *  @returns array {node} aReturn list of unique th's",
                    "3882": "\t *  @memberof DataTable#oApi",
                    "3883": "\t */",
                    "3884": "\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )",
                    "3885": "\t{",
                    "3886": "\t\tvar aReturn = [];",
                    "3887": "\t\tif ( !aLayout )",
                    "3888": "\t\t{",
                    "3889": "\t\t\taLayout = oSettings.aoHeader;",
                    "3890": "\t\t\tif ( nHeader )",
                    "3891": "\t\t\t{",
                    "3892": "\t\t\t\taLayout = [];",
                    "3893": "\t\t\t\t_fnDetectHeader( aLayout, nHeader );",
                    "3894": "\t\t\t}",
                    "3895": "\t\t}",
                    "3897": "\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )",
                    "3898": "\t\t{",
                    "3899": "\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )",
                    "3900": "\t\t\t{",
                    "3901": "\t\t\t\tif ( aLayout[i][j].unique &&",
                    "3902": "\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )",
                    "3903": "\t\t\t\t{",
                    "3904": "\t\t\t\t\taReturn[j] = aLayout[i][j].cell;",
                    "3909": "\t\treturn aReturn;",
                    "3945": "\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate",
                    "3946": "\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );",
                    "3947": "",
                    "3948": "\t\t// Convert to object based for 1.10+ if using the old array scheme which can",
                    "3949": "\t\t// come from server-side processing or serverParams",
                    "3950": "\t\tif ( data && Array.isArray(data) ) {",
                    "3951": "\t\t\tvar tmp = {};",
                    "3952": "\t\t\tvar rbracket = /(.*?)\\[\\]$/;",
                    "3953": "",
                    "3954": "\t\t\t$.each( data, function (key, val) {",
                    "3955": "\t\t\t\tvar match = val.name.match(rbracket);",
                    "3956": "",
                    "3957": "\t\t\t\tif ( match ) {",
                    "3958": "\t\t\t\t\t// Support for arrays",
                    "3959": "\t\t\t\t\tvar name = match[0];",
                    "3960": "",
                    "3961": "\t\t\t\t\tif ( ! tmp[ name ] ) {",
                    "3962": "\t\t\t\t\t\ttmp[ name ] = [];",
                    "3963": "\t\t\t\t\t}",
                    "3964": "\t\t\t\t\ttmp[ name ].push( val.value );",
                    "3965": "\t\t\t\t}",
                    "3966": "\t\t\t\telse {",
                    "3967": "\t\t\t\t\ttmp[val.name] = val.value;",
                    "3968": "\t\t\t\t}",
                    "3969": "\t\t\t} );",
                    "3970": "\t\t\tdata = tmp;",
                    "3971": "\t\t}",
                    "3972": "",
                    "3993": "\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );",
                    "4021": "\t\t\t\"error\": function (xhr, error, thrown) {",
                    "4022": "\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );",
                    "4024": "\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {",
                    "4041": "\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );",
                    "4043": "\t\tif ( oSettings.fnServerData )",
                    "4044": "\t\t{",
                    "4045": "\t\t\t// DataTables 1.9- compatibility",
                    "4046": "\t\t\toSettings.fnServerData.call( instance,",
                    "4047": "\t\t\t\toSettings.sAjaxSource,",
                    "4048": "\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format",
                    "4049": "\t\t\t\t\treturn { name: key, value: val };",
                    "4050": "\t\t\t\t} ),",
                    "4051": "\t\t\t\tcallback,",
                    "4052": "\t\t\t\toSettings",
                    "4053": "\t\t\t);",
                    "4054": "\t\t}",
                    "4055": "\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )",
                    "4056": "\t\t{",
                    "4057": "\t\t\t// DataTables 1.9- compatibility",
                    "4058": "\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {",
                    "4059": "\t\t\t\turl: ajax || oSettings.sAjaxSource",
                    "4060": "\t\t\t} ) );",
                    "4061": "\t\t}",
                    "4062": "\t\telse if ( typeof ajax === 'function' )",
                    "4067": "\t\telse",
                    "4068": "\t\t{",
                    "4070": "\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );",
                    "4073": "\t\t\tajax.data = ajaxData;",
                    "4089": "\t\t// Keep track of drawHold state to handle scrolling after the Ajax call",
                    "4090": "\t\tvar drawHold = settings._drawHold;",
                    "4091": "",
                    "4096": "\t\t\t\tsettings._drawHold = drawHold;",
                    "4098": "\t\t\t\tsettings._drawHold = false;",
                    "4106": "\t * request. Note that this is basically done twice, is different ways - a modern",
                    "4107": "\t * method which is used by default in DataTables 1.10 which uses objects and",
                    "4108": "\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if",
                    "4109": "\t * the sAjaxSource option is used in the initialisation, or the legacyAjax",
                    "4110": "\t * option is set.",
                    "4119": "\t\t\tcolumnCount = columns.length,",
                    "4123": "\t\t\ti, data = [], dataProp, column, columnSearch,",
                    "4124": "\t\t\tsort = _fnSortFlatten( settings ),",
                    "4125": "\t\t\tdisplayStart = settings._iDisplayStart,",
                    "4126": "\t\t\tdisplayLength = features.bPaginate !== false ?",
                    "4127": "\t\t\t\tsettings._iDisplayLength :",
                    "4128": "\t\t\t\t-1;",
                    "4129": "",
                    "4130": "\t\tvar param = function ( name, value ) {",
                    "4131": "\t\t\tdata.push( { 'name': name, 'value': value } );",
                    "4132": "\t\t};",
                    "4134": "\t\t// DataTables 1.9- compatible method",
                    "4135": "\t\tparam( 'sEcho',          settings.iDraw );",
                    "4136": "\t\tparam( 'iColumns',       columnCount );",
                    "4137": "\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );",
                    "4138": "\t\tparam( 'iDisplayStart',  displayStart );",
                    "4139": "\t\tparam( 'iDisplayLength', displayLength );",
                    "4140": "",
                    "4141": "\t\t// DataTables 1.10+ method",
                    "4142": "\t\tvar d = {",
                    "4143": "\t\t\tdraw:    settings.iDraw,",
                    "4144": "\t\t\tcolumns: [],",
                    "4145": "\t\t\torder:   [],",
                    "4146": "\t\t\tstart:   displayStart,",
                    "4147": "\t\t\tlength:  displayLength,",
                    "4148": "\t\t\tsearch:  {",
                    "4149": "\t\t\t\tvalue: preSearch.sSearch,",
                    "4150": "\t\t\t\tregex: preSearch.bRegex",
                    "4153": "",
                    "4154": "\t\tfor ( i=0 ; i<columnCount ; i++ ) {",
                    "4155": "\t\t\tcolumn = columns[i];",
                    "4156": "\t\t\tcolumnSearch = preColSearch[i];",
                    "4157": "\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;",
                    "4158": "",
                    "4159": "\t\t\td.columns.push( {",
                    "4160": "\t\t\t\tdata:       dataProp,",
                    "4161": "\t\t\t\tname:       column.sName,",
                    "4162": "\t\t\t\tsearchable: column.bSearchable,",
                    "4163": "\t\t\t\torderable:  column.bSortable,",
                    "4164": "\t\t\t\tsearch:     {",
                    "4165": "\t\t\t\t\tvalue: columnSearch.sSearch,",
                    "4166": "\t\t\t\t\tregex: columnSearch.bRegex",
                    "4167": "\t\t\t\t}",
                    "4168": "\t\t\t} );",
                    "4169": "",
                    "4170": "\t\t\tparam( \"mDataProp_\"+i, dataProp );",
                    "4171": "",
                    "4172": "\t\t\tif ( features.bFilter ) {",
                    "4173": "\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );",
                    "4174": "\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );",
                    "4175": "\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );",
                    "4176": "\t\t\t}",
                    "4177": "",
                    "4178": "\t\t\tif ( features.bSort ) {",
                    "4179": "\t\t\t\tparam( 'bSortable_'+i, column.bSortable );",
                    "4180": "\t\t\t}",
                    "4181": "\t\t}",
                    "4182": "",
                    "4183": "\t\tif ( features.bFilter ) {",
                    "4184": "\t\t\tparam( 'sSearch', preSearch.sSearch );",
                    "4185": "\t\t\tparam( 'bRegex', preSearch.bRegex );",
                    "4186": "\t\t}",
                    "4187": "",
                    "4188": "\t\tif ( features.bSort ) {",
                    "4189": "\t\t\t$.each( sort, function ( i, val ) {",
                    "4190": "\t\t\t\td.order.push( { column: val.col, dir: val.dir } );",
                    "4191": "",
                    "4192": "\t\t\t\tparam( 'iSortCol_'+i, val.col );",
                    "4193": "\t\t\t\tparam( 'sSortDir_'+i, val.dir );",
                    "4194": "\t\t\t} );",
                    "4195": "",
                    "4196": "\t\t\tparam( 'iSortingCols', sort.length );",
                    "4197": "\t\t}",
                    "4198": "",
                    "4199": "\t\t// If the legacy.ajax parameter is null, then we automatically decide which",
                    "4200": "\t\t// form to use, based on sAjaxSource",
                    "4201": "\t\tvar legacy = DataTable.ext.legacy.ajax;",
                    "4202": "\t\tif ( legacy === null ) {",
                    "4203": "\t\t\treturn settings.sAjaxSource ? data : d;",
                    "4204": "\t\t}",
                    "4205": "",
                    "4206": "\t\t// Otherwise, if legacy has been specified then we use that to decide on the",
                    "4207": "\t\t// form",
                    "4208": "\t\treturn legacy ? data : d;",
                    "4225": "\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.",
                    "4226": "\t\t// Support both",
                    "4227": "\t\tvar compat = function ( old, modern ) {",
                    "4228": "\t\t\treturn json[old] !== undefined ? json[old] : json[modern];",
                    "4229": "\t\t};",
                    "4230": "",
                    "4231": "\t\tvar data = _fnAjaxDataSrc( settings, json );",
                    "4232": "\t\tvar draw            = compat( 'sEcho',                'draw' );",
                    "4233": "\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );",
                    "4234": "\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );",
                    "4259": "",
                    "4260": "\t\tif ( ! settings._bInitComplete ) {",
                    "4261": "\t\t\t_fnInitComplete( settings, json );",
                    "4262": "\t\t}",
                    "4263": "",
                    "4272": "\t *  @param {object} oSettings dataTables settings object",
                    "4276": "\t function _fnAjaxDataSrc ( oSettings, json, write )",
                    "4277": "\t {",
                    "4278": "\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?",
                    "4279": "\t\t\toSettings.ajax.dataSrc :",
                    "4280": "\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.",
                    "4283": "\t\t\tif ( dataSrc === 'data' ) {",
                    "4286": "\t\t\t\treturn json.aaData || json[dataSrc];",
                    "4289": "\t\t\treturn dataSrc !== \"\" ?",
                    "4290": "\t\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :",
                    "4293": "",
                    "4295": "\t\t_fnSetObjectDataFn( dataSrc )( json, write );",
                    "4299": "\t * Generate the node required for filtering text",
                    "4300": "\t *  @returns {node} Filter control element",
                    "4301": "\t *  @param {object} oSettings dataTables settings object",
                    "4302": "\t *  @memberof DataTable#oApi",
                    "4304": "\tfunction _fnFeatureHtmlFilter ( settings )",
                    "4305": "\t{",
                    "4306": "\t\tvar classes = settings.oClasses;",
                    "4307": "\t\tvar tableId = settings.sTableId;",
                    "4308": "\t\tvar language = settings.oLanguage;",
                    "4309": "\t\tvar previousSearch = settings.oPreviousSearch;",
                    "4310": "\t\tvar features = settings.aanFeatures;",
                    "4311": "\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';",
                    "4312": "",
                    "4313": "\t\tvar str = language.sSearch;",
                    "4314": "\t\tstr = str.match(/_INPUT_/) ?",
                    "4315": "\t\t\tstr.replace('_INPUT_', input) :",
                    "4316": "\t\t\tstr+input;",
                    "4317": "",
                    "4318": "\t\tvar filter = $('<div/>', {",
                    "4319": "\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,",
                    "4320": "\t\t\t\t'class': classes.sFilter",
                    "4321": "\t\t\t} )",
                    "4322": "\t\t\t.append( $('<label/>' ).append( str ) );",
                    "4323": "",
                    "4324": "\t\tvar searchFn = function(event) {",
                    "4325": "\t\t\t/* Update all other filter input elements for the new display */",
                    "4326": "\t\t\tvar n = features.f;",
                    "4327": "\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(",
                    "4328": "\t\t\tif(previousSearch.return && event.key !== \"Enter\") {",
                    "4329": "\t\t\t\treturn;",
                    "4330": "\t\t\t}",
                    "4331": "\t\t\t/* Now do the filter */",
                    "4332": "\t\t\tif ( val != previousSearch.sSearch ) {",
                    "4333": "\t\t\t\t_fnFilterComplete( settings, {",
                    "4334": "\t\t\t\t\t\"sSearch\": val,",
                    "4335": "\t\t\t\t\t\"bRegex\": previousSearch.bRegex,",
                    "4336": "\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,",
                    "4337": "\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive,",
                    "4338": "\t\t\t\t\t\"return\": previousSearch.return",
                    "4339": "\t\t\t\t} );",
                    "4340": "",
                    "4341": "\t\t\t\t// Need to redraw, without resorting",
                    "4342": "\t\t\t\tsettings._iDisplayStart = 0;",
                    "4343": "\t\t\t\t_fnDraw( settings );",
                    "4344": "\t\t\t}",
                    "4345": "\t\t};",
                    "4347": "\t\tvar searchDelay = settings.searchDelay !== null ?",
                    "4348": "\t\t\tsettings.searchDelay :",
                    "4349": "\t\t\t_fnDataSource( settings ) === 'ssp' ?",
                    "4350": "\t\t\t\t400 :",
                    "4351": "\t\t\t\t0;",
                    "4353": "\t\tvar jqFilter = $('input', filter)",
                    "4354": "\t\t\t.val( previousSearch.sSearch )",
                    "4355": "\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )",
                    "4356": "\t\t\t.on(",
                    "4357": "\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',",
                    "4358": "\t\t\t\tsearchDelay ?",
                    "4359": "\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :",
                    "4360": "\t\t\t\t\tsearchFn",
                    "4361": "\t\t\t)",
                    "4362": "\t\t\t.on( 'mouseup.DT', function(e) {",
                    "4363": "\t\t\t\t// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking",
                    "4364": "\t\t\t\t// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`",
                    "4365": "\t\t\t\t// checks the value to see if it has changed. In other browsers it won't have.",
                    "4366": "\t\t\t\tsetTimeout( function () {",
                    "4367": "\t\t\t\t\tsearchFn.call(jqFilter[0], e);",
                    "4368": "\t\t\t\t}, 10);",
                    "4369": "\t\t\t} )",
                    "4370": "\t\t\t.on( 'keypress.DT', function(e) {",
                    "4371": "\t\t\t\t/* Prevent form submission */",
                    "4372": "\t\t\t\tif ( e.keyCode == 13 ) {",
                    "4373": "\t\t\t\t\treturn false;",
                    "4374": "\t\t\t\t}",
                    "4375": "\t\t\t} )",
                    "4376": "\t\t\t.attr('aria-controls', tableId);",
                    "4378": "\t\t// Update the input elements whenever the table is filtered",
                    "4379": "\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {",
                    "4380": "\t\t\tif ( settings === s ) {",
                    "4381": "\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used",
                    "4382": "\t\t\t\t// inside an iframe or frame...",
                    "4383": "\t\t\t\ttry {",
                    "4384": "\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {",
                    "4385": "\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );",
                    "4386": "\t\t\t\t\t}",
                    "4387": "\t\t\t\t}",
                    "4388": "\t\t\t\tcatch ( e ) {}",
                    "4389": "\t\t\t}",
                    "4390": "\t\t} );",
                    "4392": "\t\treturn filter[0];",
                    "4398": "\t *  @param {object} oSettings dataTables settings object",
                    "4399": "\t *  @param {object} oSearch search information",
                    "4400": "\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)",
                    "4403": "\tfunction _fnFilterComplete ( oSettings, oInput, iForce )",
                    "4404": "\t{",
                    "4405": "\t\tvar oPrevSearch = oSettings.oPreviousSearch;",
                    "4406": "\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;",
                    "4407": "\t\tvar fnSaveFilter = function ( oFilter ) {",
                    "4408": "\t\t\t/* Save the filtering values */",
                    "4409": "\t\t\toPrevSearch.sSearch = oFilter.sSearch;",
                    "4410": "\t\t\toPrevSearch.bRegex = oFilter.bRegex;",
                    "4411": "\t\t\toPrevSearch.bSmart = oFilter.bSmart;",
                    "4412": "\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;",
                    "4413": "\t\t\toPrevSearch.return = oFilter.return;",
                    "4414": "\t\t};",
                    "4415": "\t\tvar fnRegex = function ( o ) {",
                    "4416": "\t\t\t// Backwards compatibility with the bEscapeRegex option",
                    "4417": "\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;",
                    "4418": "\t\t};",
                    "4422": "\t\t_fnColumnTypes( oSettings );",
                    "4424": "\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */",
                    "4425": "\t\tif ( _fnDataSource( oSettings ) != 'ssp' )",
                    "4427": "\t\t\t/* Global filter */",
                    "4428": "\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );",
                    "4429": "\t\t\tfnSaveFilter( oInput );",
                    "4431": "\t\t\t/* Now do the individual column filter */",
                    "4432": "\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )",
                    "4434": "\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),",
                    "4435": "\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );",
                    "4438": "\t\t\t/* Custom filtering */",
                    "4439": "\t\t\t_fnFilterCustom( oSettings );",
                    "4440": "\t\t}",
                    "4441": "\t\telse",
                    "4442": "\t\t{",
                    "4443": "\t\t\tfnSaveFilter( oInput );",
                    "4446": "\t\t/* Tell the draw function we have been filtering */",
                    "4447": "\t\toSettings.bFiltered = true;",
                    "4448": "\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );",
                    "4479": "\t\t\t$.merge( displayRows, rows );",
                    "4480": "\t\t}",
                    "4481": "\t}",
                    "4482": "",
                    "4483": "",
                    "4484": "\t/**",
                    "4485": "\t * Filter the table on a per-column basis",
                    "4486": "\t *  @param {object} oSettings dataTables settings object",
                    "4487": "\t *  @param {string} sInput string to filter on",
                    "4488": "\t *  @param {int} iColumn column to filter",
                    "4489": "\t *  @param {bool} bRegex treat search string as a regular expression or not",
                    "4490": "\t *  @param {bool} bSmart use smart filtering or not",
                    "4491": "\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not",
                    "4492": "\t *  @memberof DataTable#oApi",
                    "4493": "\t */",
                    "4494": "\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )",
                    "4495": "\t{",
                    "4496": "\t\tif ( searchStr === '' ) {",
                    "4497": "\t\t\treturn;",
                    "4498": "\t\t}",
                    "4499": "",
                    "4500": "\t\tvar data;",
                    "4501": "\t\tvar out = [];",
                    "4502": "\t\tvar display = settings.aiDisplay;",
                    "4503": "\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );",
                    "4504": "",
                    "4505": "\t\tfor ( var i=0 ; i<display.length ; i++ ) {",
                    "4506": "\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];",
                    "4507": "",
                    "4508": "\t\t\tif ( rpSearch.test( data ) ) {",
                    "4509": "\t\t\t\tout.push( display[i] );",
                    "4510": "\t\t\t}",
                    "4512": "",
                    "4513": "\t\tsettings.aiDisplay = out;",
                    "4519": "\t *  @param {object} settings dataTables settings object",
                    "4520": "\t *  @param {string} input string to filter on",
                    "4521": "\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)",
                    "4522": "\t *  @param {bool} regex treat as a regular expression or not",
                    "4523": "\t *  @param {bool} smart perform smart filtering or not",
                    "4524": "\t *  @param {bool} caseInsensitive Do case insensitive matching or not",
                    "4525": "\t *  @memberof DataTable#oApi",
                    "4527": "\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )",
                    "4529": "\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );",
                    "4530": "\t\tvar prevSearch = settings.oPreviousSearch.sSearch;",
                    "4531": "\t\tvar displayMaster = settings.aiDisplayMaster;",
                    "4532": "\t\tvar display, invalidated, i;",
                    "4533": "\t\tvar filtered = [];",
                    "4534": "",
                    "4535": "\t\t// Need to take account of custom filtering functions - always filter",
                    "4536": "\t\tif ( DataTable.ext.search.length !== 0 ) {",
                    "4537": "\t\t\tforce = true;",
                    "4540": "\t\t// Check if any of the rows were invalidated",
                    "4541": "\t\tinvalidated = _fnFilterData( settings );",
                    "4543": "\t\t// If the input is blank - we just want the full data set",
                    "4544": "\t\tif ( input.length <= 0 ) {",
                    "4545": "\t\t\tsettings.aiDisplay = displayMaster.slice();",
                    "4546": "\t\t}",
                    "4547": "\t\telse {",
                    "4548": "\t\t\t// New search - start from the master array",
                    "4549": "\t\t\tif ( invalidated ||",
                    "4550": "\t\t\t\t force ||",
                    "4551": "\t\t\t\t regex ||",
                    "4552": "\t\t\t\t prevSearch.length > input.length ||",
                    "4553": "\t\t\t\t input.indexOf(prevSearch) !== 0 ||",
                    "4554": "\t\t\t\t settings.bSorted // On resort, the display master needs to be",
                    "4555": "\t\t\t\t                  // re-filtered since indexes will have changed",
                    "4556": "\t\t\t) {",
                    "4557": "\t\t\t\tsettings.aiDisplay = displayMaster.slice();",
                    "4558": "\t\t\t}",
                    "4560": "\t\t\t// Search the display array",
                    "4561": "\t\t\tdisplay = settings.aiDisplay;",
                    "4563": "\t\t\tfor ( i=0 ; i<display.length ; i++ ) {",
                    "4564": "\t\t\t\tif ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {",
                    "4565": "\t\t\t\t\tfiltered.push( display[i] );",
                    "4566": "\t\t\t\t}",
                    "4569": "\t\t\tsettings.aiDisplay = filtered;",
                    "4583": "\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )",
                    "4585": "\t\tsearch = regex ?",
                    "4589": "\t\tif ( smart ) {",
                    "4592": "\t\t\t * order is important - a la google. So this is what we want to",
                    "4593": "\t\t\t * generate:",
                    "4597": "\t\t\tvar a = $.map( search.match( /[\"\\u201C][^\"\\u201D]+[\"\\u201D]|[^ ]+/g ) || [''], function ( word ) {",
                    "4599": "\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );",
                    "4603": "\t\t\t\t\tvar m = word.match( /^\\u201C(.*)\\u201D$/ );",
                    "4610": "\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';",
                    "4613": "\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );",
                    "4633": "\t\tvar i, j, ien, jen, filterData, cellData, row;",
                    "4636": "\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {",
                    "4637": "\t\t\trow = settings.aoData[i];",
                    "4646": "\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );",
                    "4648": "\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this",
                    "4649": "\t\t\t\t\t\t// should be altered to also allow strict type checking.",
                    "4665": "\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode",
                    "4690": "\t/**",
                    "4691": "\t * Convert from the internal Hungarian notation to camelCase for external",
                    "4692": "\t * interaction",
                    "4693": "\t *  @param {object} obj Object to convert",
                    "4694": "\t *  @returns {object} Inverted object",
                    "4695": "\t *  @memberof DataTable#oApi",
                    "4696": "\t */",
                    "4697": "\tfunction _fnSearchToCamel ( obj )",
                    "4698": "\t{",
                    "4699": "\t\treturn {",
                    "4700": "\t\t\tsearch:          obj.sSearch,",
                    "4701": "\t\t\tsmart:           obj.bSmart,",
                    "4702": "\t\t\tregex:           obj.bRegex,",
                    "4703": "\t\t\tcaseInsensitive: obj.bCaseInsensitive",
                    "4704": "\t\t};",
                    "4705": "\t}",
                    "4706": "",
                    "4707": "",
                    "4708": "",
                    "4709": "\t/**",
                    "4710": "\t * Convert from camelCase notation to the internal Hungarian. We could use the",
                    "4711": "\t * Hungarian convert function here, but this is cleaner",
                    "4712": "\t *  @param {object} obj Object to convert",
                    "4713": "\t *  @returns {object} Inverted object",
                    "4714": "\t *  @memberof DataTable#oApi",
                    "4715": "\t */",
                    "4716": "\tfunction _fnSearchToHung ( obj )",
                    "4717": "\t{",
                    "4718": "\t\treturn {",
                    "4719": "\t\t\tsSearch:          obj.search,",
                    "4720": "\t\t\tbSmart:           obj.smart,",
                    "4721": "\t\t\tbRegex:           obj.regex,",
                    "4722": "\t\t\tbCaseInsensitive: obj.caseInsensitive",
                    "4723": "\t\t};",
                    "4724": "\t}",
                    "4725": "",
                    "4726": "\t/**",
                    "4727": "\t * Generate the node required for the info display",
                    "4728": "\t *  @param {object} oSettings dataTables settings object",
                    "4729": "\t *  @returns {node} Information element",
                    "4730": "\t *  @memberof DataTable#oApi",
                    "4731": "\t */",
                    "4732": "\tfunction _fnFeatureHtmlInfo ( settings )",
                    "4733": "\t{",
                    "4734": "\t\tvar",
                    "4735": "\t\t\ttid = settings.sTableId,",
                    "4736": "\t\t\tnodes = settings.aanFeatures.i,",
                    "4737": "\t\t\tn = $('<div/>', {",
                    "4738": "\t\t\t\t'class': settings.oClasses.sInfo,",
                    "4739": "\t\t\t\t'id': ! nodes ? tid+'_info' : null",
                    "4740": "\t\t\t} );",
                    "4741": "",
                    "4742": "\t\tif ( ! nodes ) {",
                    "4743": "\t\t\t// Update display on each draw",
                    "4744": "\t\t\tsettings.aoDrawCallback.push( {",
                    "4745": "\t\t\t\t\"fn\": _fnUpdateInfo,",
                    "4746": "\t\t\t\t\"sName\": \"information\"",
                    "4747": "\t\t\t} );",
                    "4748": "",
                    "4749": "\t\t\tn",
                    "4750": "\t\t\t\t.attr( 'role', 'status' )",
                    "4751": "\t\t\t\t.attr( 'aria-live', 'polite' );",
                    "4752": "",
                    "4753": "\t\t\t// Table is described by our info div",
                    "4754": "\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );",
                    "4755": "\t\t}",
                    "4756": "",
                    "4757": "\t\treturn n[0];",
                    "4758": "\t}",
                    "4759": "",
                    "4760": "",
                    "4761": "\t/**",
                    "4762": "\t * Update the information elements in the display",
                    "4763": "\t *  @param {object} settings dataTables settings object",
                    "4764": "\t *  @memberof DataTable#oApi",
                    "4765": "\t */",
                    "4766": "\tfunction _fnUpdateInfo ( settings )",
                    "4767": "\t{",
                    "4768": "\t\t/* Show information about the table */",
                    "4769": "\t\tvar nodes = settings.aanFeatures.i;",
                    "4770": "\t\tif ( nodes.length === 0 ) {",
                    "4771": "\t\t\treturn;",
                    "4772": "\t\t}",
                    "4773": "",
                    "4774": "\t\tvar",
                    "4775": "\t\t\tlang  = settings.oLanguage,",
                    "4776": "\t\t\tstart = settings._iDisplayStart+1,",
                    "4777": "\t\t\tend   = settings.fnDisplayEnd(),",
                    "4778": "\t\t\tmax   = settings.fnRecordsTotal(),",
                    "4779": "\t\t\ttotal = settings.fnRecordsDisplay(),",
                    "4780": "\t\t\tout   = total ?",
                    "4781": "\t\t\t\tlang.sInfo :",
                    "4782": "\t\t\t\tlang.sInfoEmpty;",
                    "4783": "",
                    "4784": "\t\tif ( total !== max ) {",
                    "4785": "\t\t\t/* Record set after filtering */",
                    "4786": "\t\t\tout += ' ' + lang.sInfoFiltered;",
                    "4787": "\t\t}",
                    "4788": "",
                    "4789": "\t\t// Convert the macros",
                    "4790": "\t\tout += lang.sInfoPostFix;",
                    "4791": "\t\tout = _fnInfoMacros( settings, out );",
                    "4792": "",
                    "4793": "\t\tvar callback = lang.fnInfoCallback;",
                    "4794": "\t\tif ( callback !== null ) {",
                    "4795": "\t\t\tout = callback.call( settings.oInstance,",
                    "4796": "\t\t\t\tsettings, start, end, max, total, out",
                    "4797": "\t\t\t);",
                    "4798": "\t\t}",
                    "4799": "",
                    "4800": "\t\t$(nodes).html( out );",
                    "4801": "\t}",
                    "4802": "",
                    "4803": "",
                    "4804": "\tfunction _fnInfoMacros ( settings, str )",
                    "4805": "\t{",
                    "4806": "\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only",
                    "4807": "\t\t// internally",
                    "4808": "\t\tvar",
                    "4809": "\t\t\tformatter  = settings.fnFormatNumber,",
                    "4810": "\t\t\tstart      = settings._iDisplayStart+1,",
                    "4811": "\t\t\tlen        = settings._iDisplayLength,",
                    "4812": "\t\t\tvis        = settings.fnRecordsDisplay(),",
                    "4813": "\t\t\tall        = len === -1;",
                    "4814": "",
                    "4815": "\t\treturn str.",
                    "4816": "\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).",
                    "4817": "\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).",
                    "4818": "\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).",
                    "4819": "\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).",
                    "4820": "\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).",
                    "4821": "\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );",
                    "4822": "\t}",
                    "4823": "",
                    "4824": "",
                    "4825": "",
                    "4833": "\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;",
                    "4834": "\t\tvar columns = settings.aoColumns, column;",
                    "4835": "\t\tvar features = settings.oFeatures;",
                    "4836": "\t\tvar deferLoading = settings.bDeferLoading; // value modified by the draw",
                    "4844": "\t\t/* Show the display HTML options */",
                    "4845": "\t\t_fnAddOptionsHtml( settings );",
                    "4846": "",
                    "4848": "\t\t_fnBuildHead( settings );",
                    "4852": "\t\t/* Okay to show that something is going on now */",
                    "4853": "\t\t_fnProcessingDisplay( settings, true );",
                    "4854": "",
                    "4855": "\t\t/* Calculate sizes for columns */",
                    "4856": "\t\tif ( features.bAutoWidth ) {",
                    "4857": "\t\t\t_fnCalculateColumnWidths( settings );",
                    "4858": "\t\t}",
                    "4860": "\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {",
                    "4861": "\t\t\tcolumn = columns[i];",
                    "4863": "\t\t\tif ( column.sWidth ) {",
                    "4864": "\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );",
                    "4865": "\t\t\t}",
                    "4866": "\t\t}",
                    "4868": "\t\t_fnCallbackFire( settings, null, 'preInit', [settings] );",
                    "4876": "\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw",
                    "4878": "\t\tif ( dataSrc != 'ssp' || deferLoading ) {",
                    "4881": "\t\t\t\t_fnBuildAjax( settings, [], function(json) {",
                    "4895": "",
                    "4897": "\t\t\t\t\t_fnInitComplete( settings, json );",
                    "4901": "\t\t\t\t_fnProcessingDisplay( settings, false );",
                    "4910": "\t *  @param {object} oSettings dataTables settings object",
                    "4911": "\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source",
                    "4912": "\t *    with client-side processing (optional)",
                    "4915": "\tfunction _fnInitComplete ( settings, json )",
                    "4919": "\t\t// When data was added after the initialisation (data or Ajax) we need to",
                    "4920": "\t\t// calculate the column sizing",
                    "4921": "\t\tif ( json || settings.oInit.aaData ) {",
                    "4922": "\t\t\t_fnAdjustColumnSizing( settings );",
                    "4923": "\t\t}",
                    "4925": "\t\t_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );",
                    "4926": "\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );",
                    "4929": "",
                    "4941": "",
                    "4942": "\t/**",
                    "4943": "\t * Generate the node required for user display length changing",
                    "4944": "\t *  @param {object} settings dataTables settings object",
                    "4945": "\t *  @returns {node} Display length feature node",
                    "4946": "\t *  @memberof DataTable#oApi",
                    "4947": "\t */",
                    "4948": "\tfunction _fnFeatureHtmlLength ( settings )",
                    "4949": "\t{",
                    "4950": "\t\tvar",
                    "4951": "\t\t\tclasses  = settings.oClasses,",
                    "4952": "\t\t\ttableId  = settings.sTableId,",
                    "4953": "\t\t\tmenu     = settings.aLengthMenu,",
                    "4954": "\t\t\td2       = Array.isArray( menu[0] ),",
                    "4955": "\t\t\tlengths  = d2 ? menu[0] : menu,",
                    "4956": "\t\t\tlanguage = d2 ? menu[1] : menu;",
                    "4957": "",
                    "4958": "\t\tvar select = $('<select/>', {",
                    "4959": "\t\t\t'name':          tableId+'_length',",
                    "4960": "\t\t\t'aria-controls': tableId,",
                    "4961": "\t\t\t'class':         classes.sLengthSelect",
                    "4962": "\t\t} );",
                    "4963": "",
                    "4964": "\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {",
                    "4965": "\t\t\tselect[0][ i ] = new Option(",
                    "4966": "\t\t\t\ttypeof language[i] === 'number' ?",
                    "4967": "\t\t\t\t\tsettings.fnFormatNumber( language[i] ) :",
                    "4968": "\t\t\t\t\tlanguage[i],",
                    "4969": "\t\t\t\tlengths[i]",
                    "4970": "\t\t\t);",
                    "4971": "\t\t}",
                    "4972": "",
                    "4973": "\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );",
                    "4974": "\t\tif ( ! settings.aanFeatures.l ) {",
                    "4975": "\t\t\tdiv[0].id = tableId+'_length';",
                    "4976": "\t\t}",
                    "4977": "",
                    "4978": "\t\tdiv.children().append(",
                    "4979": "\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )",
                    "4980": "\t\t);",
                    "4981": "",
                    "4982": "\t\t// Can't use `select` variable as user might provide their own and the",
                    "4983": "\t\t// reference is broken by the use of outerHTML",
                    "4984": "\t\t$('select', div)",
                    "4985": "\t\t\t.val( settings._iDisplayLength )",
                    "4986": "\t\t\t.on( 'change.DT', function(e) {",
                    "4987": "\t\t\t\t_fnLengthChange( settings, $(this).val() );",
                    "4988": "\t\t\t\t_fnDraw( settings );",
                    "4989": "\t\t\t} );",
                    "4990": "",
                    "4991": "\t\t// Update node value whenever anything changes the table's length",
                    "4992": "\t\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {",
                    "4993": "\t\t\tif ( settings === s ) {",
                    "4994": "\t\t\t\t$('select', div).val( len );",
                    "4995": "\t\t\t}",
                    "4996": "\t\t} );",
                    "4997": "",
                    "4998": "\t\treturn div[0];",
                    "4999": "\t}",
                    "5000": "",
                    "5001": "",
                    "5002": "",
                    "5003": "\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *",
                    "5004": "\t * Note that most of the paging logic is done in",
                    "5005": "\t * DataTable.ext.pager",
                    "5006": "\t */",
                    "5007": "",
                    "5008": "\t/**",
                    "5009": "\t * Generate the node required for default pagination",
                    "5010": "\t *  @param {object} oSettings dataTables settings object",
                    "5011": "\t *  @returns {node} Pagination feature node",
                    "5012": "\t *  @memberof DataTable#oApi",
                    "5013": "\t */",
                    "5014": "\tfunction _fnFeatureHtmlPaginate ( settings )",
                    "5015": "\t{",
                    "5016": "\t\tvar",
                    "5017": "\t\t\ttype   = settings.sPaginationType,",
                    "5018": "\t\t\tplugin = DataTable.ext.pager[ type ],",
                    "5019": "\t\t\tmodern = typeof plugin === 'function',",
                    "5020": "\t\t\tredraw = function( settings ) {",
                    "5021": "\t\t\t\t_fnDraw( settings );",
                    "5022": "\t\t\t},",
                    "5023": "\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],",
                    "5024": "\t\t\tfeatures = settings.aanFeatures;",
                    "5025": "",
                    "5026": "\t\tif ( ! modern ) {",
                    "5027": "\t\t\tplugin.fnInit( settings, node, redraw );",
                    "5028": "\t\t}",
                    "5029": "",
                    "5030": "\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */",
                    "5031": "\t\tif ( ! features.p )",
                    "5032": "\t\t{",
                    "5033": "\t\t\tnode.id = settings.sTableId+'_paginate';",
                    "5034": "",
                    "5035": "\t\t\tsettings.aoDrawCallback.push( {",
                    "5036": "\t\t\t\t\"fn\": function( settings ) {",
                    "5037": "\t\t\t\t\tif ( modern ) {",
                    "5038": "\t\t\t\t\t\tvar",
                    "5039": "\t\t\t\t\t\t\tstart      = settings._iDisplayStart,",
                    "5040": "\t\t\t\t\t\t\tlen        = settings._iDisplayLength,",
                    "5041": "\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),",
                    "5042": "\t\t\t\t\t\t\tall        = len === -1,",
                    "5043": "\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),",
                    "5044": "\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),",
                    "5045": "\t\t\t\t\t\t\tbuttons = plugin(page, pages),",
                    "5046": "\t\t\t\t\t\t\ti, ien;",
                    "5047": "",
                    "5048": "\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {",
                    "5049": "\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(",
                    "5050": "\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages",
                    "5051": "\t\t\t\t\t\t\t);",
                    "5052": "\t\t\t\t\t\t}",
                    "5053": "\t\t\t\t\t}",
                    "5054": "\t\t\t\t\telse {",
                    "5055": "\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );",
                    "5056": "\t\t\t\t\t}",
                    "5057": "\t\t\t\t},",
                    "5058": "\t\t\t\t\"sName\": \"pagination\"",
                    "5059": "\t\t\t} );",
                    "5060": "\t\t}",
                    "5061": "",
                    "5062": "\t\treturn node;",
                    "5063": "\t}",
                    "5064": "",
                    "5065": "",
                    "5107": "\t\t\t  start = 0;",
                    "5129": "\t\tif ( changed ) {",
                    "5130": "\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );",
                    "5132": "\t\t\tif ( redraw ) {",
                    "5133": "\t\t\t\t_fnDraw( settings );",
                    "5134": "\t\t\t}",
                    "5135": "\t\t}",
                    "5136": "\t\telse {",
                    "5137": "\t\t\t// No change event - paging was called, but no change",
                    "5138": "\t\t\t_fnCallbackFire( settings, null, 'page-nc', [settings] );",
                    "5145": "",
                    "5148": "\t *  @param {object} settings dataTables settings object",
                    "5149": "\t *  @returns {node} Processing element",
                    "5150": "\t *  @memberof DataTable#oApi",
                    "5152": "\tfunction _fnFeatureHtmlProcessing ( settings )",
                    "5154": "\t\treturn $('<div/>', {",
                    "5155": "\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,",
                    "5156": "\t\t\t\t'class': settings.oClasses.sProcessing,",
                    "5157": "\t\t\t\t'role': 'status'",
                    "5158": "\t\t\t} )",
                    "5159": "\t\t\t.html( settings.oLanguage.sProcessing )",
                    "5160": "\t\t\t.append('<div><div></div><div></div><div></div><div></div></div>')",
                    "5161": "\t\t\t.insertBefore( settings.nTable )[0];",
                    "5167": "\t *  @param {object} settings dataTables settings object",
                    "5169": "\t *  @memberof DataTable#oApi",
                    "5173": "\t\tif ( settings.oFeatures.bProcessing ) {",
                    "5174": "\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );",
                    "5175": "\t\t}",
                    "5176": "",
                    "5179": "",
                    "5199": "\t\tvar classes = settings.oClasses;",
                    "5200": "\t\tvar caption = table.children('caption');",
                    "5201": "\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;",
                    "5230": "\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )",
                    "5232": "\t\t\t\t$(_div, { 'class': classes.sScrollHead } )",
                    "5240": "\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )",
                    "5257": "\t\t\t\t$(_div, { 'class': classes.sScrollBody } )",
                    "5268": "\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )",
                    "5275": "\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )",
                    "5295": "\t\tif ( scrollX ) {",
                    "5296": "\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {",
                    "5297": "\t\t\t\tvar scrollLeft = this.scrollLeft;",
                    "5299": "\t\t\t\tscrollHead.scrollLeft = scrollLeft;",
                    "5301": "\t\t\t\tif ( footer ) {",
                    "5302": "\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;",
                    "5303": "\t\t\t\t}",
                    "5304": "\t\t\t} );",
                    "5305": "\t\t}",
                    "5317": "\t\tsettings.aoDrawCallback.push( {",
                    "5318": "\t\t\t\"fn\": _fnScrollDraw,",
                    "5319": "\t\t\t\"sName\": \"scrolling\"",
                    "5320": "\t\t} );",
                    "5334": "\t *   2. Take live measurements from the DOM",
                    "5335": "\t *   3. Apply the measurements to align the columns",
                    "5347": "\t\t\tscrollX        = scroll.sX,",
                    "5348": "\t\t\tscrollXInner   = scroll.sXInner,",
                    "5349": "\t\t\tscrollY        = scroll.sY,",
                    "5352": "\t\t\tdivHeaderStyle = divHeader[0].style,",
                    "5354": "\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,",
                    "5358": "\t\t\tdivBodyStyle   = divBodyEl.style,",
                    "5364": "\t\t\ttableEl        = table[0],",
                    "5365": "\t\t\ttableStyle     = tableEl.style,",
                    "5366": "\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,",
                    "5368": "\t\t\tie67           = browser.bScrollOversize,",
                    "5369": "\t\t\tdtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),",
                    "5370": "\t\t\theaderTrgEls, footerTrgEls,",
                    "5371": "\t\t\theaderSrcEls, footerSrcEls,",
                    "5372": "\t\t\theaderCopy, footerCopy,",
                    "5373": "\t\t\theaderWidths=[], footerWidths=[],",
                    "5374": "\t\t\theaderContent=[], footerContent=[],",
                    "5375": "\t\t\tidx, correction, sanityWidth,",
                    "5376": "\t\t\tzeroOut = function(nSizer) {",
                    "5377": "\t\t\t\tvar style = nSizer.style;",
                    "5378": "\t\t\t\tstyle.paddingTop = \"0\";",
                    "5379": "\t\t\t\tstyle.paddingBottom = \"0\";",
                    "5380": "\t\t\t\tstyle.borderTopWidth = \"0\";",
                    "5381": "\t\t\t\tstyle.borderBottomWidth = \"0\";",
                    "5382": "\t\t\t\tstyle.height = 0;",
                    "5383": "\t\t\t};",
                    "5399": "\t\t/*",
                    "5400": "\t\t * 1. Re-create the table inside the scrolling div",
                    "5401": "\t\t */",
                    "5402": "",
                    "5406": "\t\tif ( footer ) {",
                    "5407": "\t\t\tfooterCopy = footer.clone().prependTo( table );",
                    "5408": "\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized",
                    "5409": "\t\t\tfooterSrcEls = footerCopy.find('tr');",
                    "5410": "\t\t\tfooterCopy.find('[id]').removeAttr('id');",
                    "5411": "\t\t}",
                    "5412": "",
                    "5415": "\t\theaderTrgEls = header.find('tr'); // original header is in its own table",
                    "5416": "\t\theaderSrcEls = headerCopy.find('tr');",
                    "5420": "",
                    "5421": "\t\t/*",
                    "5422": "\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!",
                    "5423": "\t\t */",
                    "5424": "",
                    "5425": "\t\t// Remove old sizing and apply the calculated column widths",
                    "5426": "\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the",
                    "5427": "\t\t// calculated sizes to this header",
                    "5428": "\t\tif ( ! scrollX )",
                    "5429": "\t\t{",
                    "5430": "\t\t\tdivBodyStyle.width = '100%';",
                    "5431": "\t\t\tdivHeader[0].style.width = '100%';",
                    "5432": "\t\t}",
                    "5433": "",
                    "5434": "\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {",
                    "5435": "\t\t\tidx = _fnVisibleToColumnIndex( settings, i );",
                    "5436": "\t\t\tel.style.width = settings.aoColumns[idx].sWidth;",
                    "5437": "\t\t} );",
                    "5438": "",
                    "5440": "\t\t\t_fnApplyToChildren( function(n) {",
                    "5441": "\t\t\t\tn.style.width = \"\";",
                    "5442": "\t\t\t}, footerSrcEls );",
                    "5443": "\t\t}",
                    "5444": "",
                    "5445": "\t\t// Size the table as a whole",
                    "5446": "\t\tsanityWidth = table.outerWidth();",
                    "5447": "\t\tif ( scrollX === \"\" ) {",
                    "5448": "\t\t\t// No x scrolling",
                    "5449": "\t\t\ttableStyle.width = \"100%\";",
                    "5450": "",
                    "5451": "\t\t\t// IE7 will make the width of the table when 100% include the scrollbar",
                    "5452": "\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this",
                    "5453": "\t\t\t// into account.",
                    "5454": "\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||",
                    "5455": "\t\t\t\tdivBody.css('overflow-y') == \"scroll\")",
                    "5456": "\t\t\t) {",
                    "5457": "\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);",
                    "5458": "\t\t\t}",
                    "5459": "",
                    "5460": "\t\t\t// Recalculate the sanity width",
                    "5461": "\t\t\tsanityWidth = table.outerWidth();",
                    "5462": "\t\t}",
                    "5463": "\t\telse if ( scrollXInner !== \"\" ) {",
                    "5464": "\t\t\t// legacy x scroll inner has been given - use it",
                    "5465": "\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);",
                    "5466": "",
                    "5467": "\t\t\t// Recalculate the sanity width",
                    "5468": "\t\t\tsanityWidth = table.outerWidth();",
                    "5471": "\t\t// Hidden header should have zero height, so remove padding and borders. Then",
                    "5472": "\t\t// set the width based on the real headers",
                    "5473": "",
                    "5474": "\t\t// Apply all styles in one pass",
                    "5475": "\t\t_fnApplyToChildren( zeroOut, headerSrcEls );",
                    "5476": "",
                    "5477": "\t\t// Read all widths in next pass",
                    "5478": "\t\t_fnApplyToChildren( function(nSizer) {",
                    "5479": "\t\t\tvar style = window.getComputedStyle ?",
                    "5480": "\t\t\t\twindow.getComputedStyle(nSizer).width :",
                    "5481": "\t\t\t\t_fnStringToCss( $(nSizer).width() );",
                    "5482": "",
                    "5483": "\t\t\theaderContent.push( nSizer.innerHTML );",
                    "5484": "\t\t\theaderWidths.push( style );",
                    "5485": "\t\t}, headerSrcEls );",
                    "5487": "\t\t// Apply all widths in final pass",
                    "5488": "\t\t_fnApplyToChildren( function(nToSize, i) {",
                    "5489": "\t\t\tnToSize.style.width = headerWidths[i];",
                    "5490": "\t\t}, headerTrgEls );",
                    "5492": "\t\t$(headerSrcEls).css('height', 0);",
                    "5494": "\t\t/* Same again with the footer if we have one */",
                    "5495": "\t\tif ( footer )",
                    "5496": "\t\t{",
                    "5497": "\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );",
                    "5499": "\t\t\t_fnApplyToChildren( function(nSizer) {",
                    "5500": "\t\t\t\tfooterContent.push( nSizer.innerHTML );",
                    "5501": "\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );",
                    "5502": "\t\t\t}, footerSrcEls );",
                    "5504": "\t\t\t_fnApplyToChildren( function(nToSize, i) {",
                    "5505": "\t\t\t\tnToSize.style.width = footerWidths[i];",
                    "5506": "\t\t\t}, footerTrgEls );",
                    "5508": "\t\t\t$(footerSrcEls).height(0);",
                    "5511": "",
                    "5512": "\t\t/*",
                    "5513": "\t\t * 3. Apply the measurements",
                    "5514": "\t\t */",
                    "5515": "",
                    "5518": "\t\t// both match, but we want to hide it completely. We want to also fix their",
                    "5519": "\t\t// width to what they currently are",
                    "5520": "\t\t_fnApplyToChildren( function(nSizer, i) {",
                    "5521": "\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+headerContent[i]+'</div>';",
                    "5522": "\t\t\tnSizer.childNodes[0].style.height = \"0\";",
                    "5523": "\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";",
                    "5524": "\t\t\tnSizer.style.width = headerWidths[i];",
                    "5525": "\t\t}, headerSrcEls );",
                    "5526": "",
                    "5527": "\t\tif ( footer )",
                    "5528": "\t\t{",
                    "5529": "\t\t\t_fnApplyToChildren( function(nSizer, i) {",
                    "5530": "\t\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+footerContent[i]+'</div>';",
                    "5531": "\t\t\t\tnSizer.childNodes[0].style.height = \"0\";",
                    "5532": "\t\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";",
                    "5533": "\t\t\t\tnSizer.style.width = footerWidths[i];",
                    "5534": "\t\t\t}, footerSrcEls );",
                    "5535": "\t\t}",
                    "5536": "",
                    "5537": "\t\t// Sanity check that the table is of a sensible width. If not then we are going to get",
                    "5538": "\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width",
                    "5539": "\t\tif ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )",
                    "5540": "\t\t{",
                    "5541": "\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */",
                    "5542": "\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||",
                    "5543": "\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?",
                    "5544": "\t\t\t\t\tsanityWidth+barWidth :",
                    "5545": "\t\t\t\t\tsanityWidth;",
                    "5546": "",
                    "5547": "\t\t\t// IE6/7 are a law unto themselves...",
                    "5548": "\t\t\tif ( ie67 && (divBodyEl.scrollHeight >",
                    "5549": "\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")",
                    "5550": "\t\t\t) {",
                    "5551": "\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );",
                    "5552": "\t\t\t}",
                    "5553": "",
                    "5554": "\t\t\t// And give the user a warning that we've stopped the table getting too small",
                    "5555": "\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {",
                    "5556": "\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );",
                    "5557": "\t\t\t}",
                    "5558": "\t\t}",
                    "5559": "\t\telse",
                    "5560": "\t\t{",
                    "5561": "\t\t\tcorrection = '100%';",
                    "5562": "\t\t}",
                    "5563": "",
                    "5564": "\t\t// Apply to the container elements",
                    "5565": "\t\tdivBodyStyle.width = _fnStringToCss( correction );",
                    "5566": "\t\tdivHeaderStyle.width = _fnStringToCss( correction );",
                    "5569": "\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );",
                    "5570": "\t\t}",
                    "5571": "",
                    "5572": "",
                    "5573": "\t\t/*",
                    "5574": "\t\t * 4. Clean up",
                    "5575": "\t\t */",
                    "5576": "\t\tif ( ! scrollY ) {",
                    "5577": "\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting",
                    "5578": "\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to",
                    "5579": "\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.",
                    "5580": "\t\t\t */",
                    "5581": "\t\t\tif ( ie67 ) {",
                    "5582": "\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );",
                    "5583": "\t\t\t}",
                    "5586": "\t\t/* Finally set the width's of the header and footer tables */",
                    "5587": "\t\tvar iOuterWidth = table.outerWidth();",
                    "5588": "\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );",
                    "5589": "\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );",
                    "5590": "",
                    "5593": "\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";",
                    "5594": "\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );",
                    "5595": "\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";",
                    "5598": "\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );",
                    "5599": "\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );",
                    "5600": "\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";",
                    "5604": "\t\ttable.children('colgroup').insertBefore( table.children('thead') );",
                    "5606": "\t\t/* Adjust the position of the header in case we loose the y-scrollbar */",
                    "5616": "",
                    "5617": "",
                    "5619": "\t * Apply a given function to the display child nodes of an element array (typically",
                    "5620": "\t * TD children of TR rows",
                    "5621": "\t *  @param {function} fn Method to apply to the objects",
                    "5622": "\t *  @param array {nodes} an1 List of elements to look through for display children",
                    "5623": "\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional",
                    "5626": "\tfunction _fnApplyToChildren( fn, an1, an2 )",
                    "5628": "\t\tvar index=0, i=0, iLen=an1.length;",
                    "5629": "\t\tvar nNode1, nNode2;",
                    "5630": "",
                    "5631": "\t\twhile ( i < iLen ) {",
                    "5632": "\t\t\tnNode1 = an1[i].firstChild;",
                    "5633": "\t\t\tnNode2 = an2 ? an2[i].firstChild : null;",
                    "5634": "",
                    "5635": "\t\t\twhile ( nNode1 ) {",
                    "5636": "\t\t\t\tif ( nNode1.nodeType === 1 ) {",
                    "5637": "\t\t\t\t\tif ( an2 ) {",
                    "5638": "\t\t\t\t\t\tfn( nNode1, nNode2, index );",
                    "5639": "\t\t\t\t\t}",
                    "5640": "\t\t\t\t\telse {",
                    "5641": "\t\t\t\t\t\tfn( nNode1, index );",
                    "5642": "\t\t\t\t\t}",
                    "5643": "",
                    "5644": "\t\t\t\t\tindex++;",
                    "5645": "\t\t\t\t}",
                    "5646": "",
                    "5647": "\t\t\t\tnNode1 = nNode1.nextSibling;",
                    "5648": "\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;",
                    "5649": "\t\t\t}",
                    "5650": "",
                    "5651": "\t\t\ti++;",
                    "5653": "\t}",
                    "5654": "",
                    "5656": "",
                    "5657": "\tvar __re_html_remove = /<.*?>/g;",
                    "5658": "",
                    "5659": "",
                    "5660": "\t/**",
                    "5661": "\t * Calculate the width of columns for the table",
                    "5662": "\t *  @param {object} oSettings dataTables settings object",
                    "5663": "\t *  @memberof DataTable#oApi",
                    "5664": "\t */",
                    "5665": "\tfunction _fnCalculateColumnWidths ( oSettings )",
                    "5666": "\t{",
                    "5668": "\t\t\ttable = oSettings.nTable,",
                    "5669": "\t\t\tcolumns = oSettings.aoColumns,",
                    "5670": "\t\t\tscroll = oSettings.oScroll,",
                    "5674": "\t\t\tcolumnCount = columns.length,",
                    "5675": "\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),",
                    "5676": "\t\t\theaderCells = $('th', oSettings.nTHead),",
                    "5679": "\t\t\tuserInputs = false,",
                    "5680": "\t\t\ti, column, columnIdx, width, outerWidth,",
                    "5681": "\t\t\tbrowser = oSettings.oBrowser,",
                    "5682": "\t\t\tie67 = browser.bScrollOversize;",
                    "5689": "\t\t/* Convert any user input sizes into pixel sizes */",
                    "5690": "\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {",
                    "5691": "\t\t\tcolumn = columns[ visibleColumns[i] ];",
                    "5693": "\t\t\tif ( column.sWidth !== null ) {",
                    "5694": "\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );",
                    "5696": "\t\t\t\tuserInputs = true;",
                    "5697": "\t\t\t}",
                    "5698": "\t\t}",
                    "5700": "\t\t/* If the number of columns in the DOM equals the number that we have to",
                    "5701": "\t\t * process in DataTables, then we can use the offsets that are created by",
                    "5702": "\t\t * the web- browser. No custom sizes can be set in order for this to happen,",
                    "5703": "\t\t * nor scrolling used",
                    "5704": "\t\t */",
                    "5705": "\t\tif ( ie67 || ! userInputs && ! scrollX && ! scrollY &&",
                    "5706": "\t\t     columnCount == _fnVisbleColumns( oSettings ) &&",
                    "5707": "\t\t     columnCount == headerCells.length",
                    "5708": "\t\t) {",
                    "5709": "\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {",
                    "5710": "\t\t\t\tvar colIdx = _fnVisibleToColumnIndex( oSettings, i );",
                    "5712": "\t\t\t\tif ( colIdx !== null ) {",
                    "5713": "\t\t\t\t\tcolumns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );",
                    "5714": "\t\t\t\t}",
                    "5715": "\t\t\t}",
                    "5716": "\t\t}",
                    "5717": "\t\telse",
                    "5718": "\t\t{",
                    "5719": "\t\t\t// Otherwise construct a single row, worst case, table with the widest",
                    "5720": "\t\t\t// node in the data, assign any user defined widths, then insert it into",
                    "5721": "\t\t\t// the DOM and allow the browser to do all the hard work of calculating",
                    "5722": "\t\t\t// table widths",
                    "5723": "\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table",
                    "5724": "\t\t\t\t.css( 'visibility', 'hidden' )",
                    "5725": "\t\t\t\t.removeAttr( 'id' );",
                    "5726": "",
                    "5727": "\t\t\t// Clean up the table body",
                    "5728": "\t\t\ttmpTable.find('tbody tr').remove();",
                    "5729": "\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );",
                    "5730": "",
                    "5731": "\t\t\t// Clone the table header and footer - we can't use the header / footer",
                    "5732": "\t\t\t// from the cloned table, since if scrolling is active, the table's",
                    "5733": "\t\t\t// real header and footer are contained in different table tags",
                    "5734": "\t\t\ttmpTable.find('thead, tfoot').remove();",
                    "5735": "\t\t\ttmpTable",
                    "5736": "\t\t\t\t.append( $(oSettings.nTHead).clone() )",
                    "5737": "\t\t\t\t.append( $(oSettings.nTFoot).clone() );",
                    "5738": "",
                    "5739": "\t\t\t// Remove any assigned widths from the footer (from scrolling)",
                    "5740": "\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');",
                    "5741": "",
                    "5742": "\t\t\t// Apply custom sizing to the cloned header",
                    "5743": "\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );",
                    "5744": "",
                    "5745": "\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {",
                    "5746": "\t\t\t\tcolumn = columns[ visibleColumns[i] ];",
                    "5747": "",
                    "5748": "\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?",
                    "5749": "\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :",
                    "5750": "\t\t\t\t\t'';",
                    "5755": "\t\t\t\tif ( column.sWidthOrig && scrollX ) {",
                    "5756": "\t\t\t\t\t$( headerCells[i] ).append( $('<div/>').css( {",
                    "5757": "\t\t\t\t\t\twidth: column.sWidthOrig,",
                    "5765": "",
                    "5766": "\t\t\t// Find the widest cell for each column and put it into the table",
                    "5767": "\t\t\tif ( oSettings.aoData.length ) {",
                    "5768": "\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {",
                    "5769": "\t\t\t\t\tcolumnIdx = visibleColumns[i];",
                    "5770": "\t\t\t\t\tcolumn = columns[ columnIdx ];",
                    "5771": "",
                    "5772": "\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )",
                    "5773": "\t\t\t\t\t\t.clone( false )",
                    "5774": "\t\t\t\t\t\t.append( column.sContentPadding )",
                    "5775": "\t\t\t\t\t\t.appendTo( tr );",
                    "5776": "\t\t\t\t}",
                    "5777": "\t\t\t}",
                    "5778": "",
                    "5779": "\t\t\t// Tidy the temporary table - remove name attributes so there aren't",
                    "5780": "\t\t\t// duplicated in the dom (radio elements for example)",
                    "5781": "\t\t\t$('[name]', tmpTable).removeAttr('name');",
                    "5782": "",
                    "5783": "\t\t\t// Table has been built, attach to the document so we can work with it.",
                    "5784": "\t\t\t// A holding element is used, positioned at the top of the container",
                    "5785": "\t\t\t// with minimal height, so it has no effect on if the container scrolls",
                    "5786": "\t\t\t// or not. Otherwise it might trigger scrolling when it actually isn't",
                    "5787": "\t\t\t// needed",
                    "5788": "\t\t\tvar holder = $('<div/>').css( scrollX || scrollY ?",
                    "5789": "\t\t\t\t\t{",
                    "5790": "\t\t\t\t\t\tposition: 'absolute',",
                    "5791": "\t\t\t\t\t\ttop: 0,",
                    "5792": "\t\t\t\t\t\tleft: 0,",
                    "5793": "\t\t\t\t\t\theight: 1,",
                    "5794": "\t\t\t\t\t\tright: 0,",
                    "5795": "\t\t\t\t\t\toverflow: 'hidden'",
                    "5796": "\t\t\t\t\t} :",
                    "5797": "\t\t\t\t\t{}",
                    "5798": "\t\t\t\t)",
                    "5799": "\t\t\t\t.append( tmpTable )",
                    "5800": "\t\t\t\t.appendTo( tableContainer );",
                    "5801": "",
                    "5802": "\t\t\t// When scrolling (X or Y) we want to set the width of the table as",
                    "5803": "\t\t\t// appropriate. However, when not scrolling leave the table width as it",
                    "5804": "\t\t\t// is. This results in slightly different, but I think correct behaviour",
                    "5805": "\t\t\tif ( scrollX && scrollXInner ) {",
                    "5806": "\t\t\t\ttmpTable.width( scrollXInner );",
                    "5808": "\t\t\telse if ( scrollX ) {",
                    "5809": "\t\t\t\ttmpTable.css( 'width', 'auto' );",
                    "5810": "\t\t\t\ttmpTable.removeAttr('width');",
                    "5812": "\t\t\t\t// If there is no width attribute or style, then allow the table to",
                    "5813": "\t\t\t\t// collapse",
                    "5814": "\t\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {",
                    "5815": "\t\t\t\t\ttmpTable.width( tableContainer.clientWidth );",
                    "5816": "\t\t\t\t}",
                    "5817": "\t\t\t}",
                    "5818": "\t\t\telse if ( scrollY ) {",
                    "5821": "\t\t\telse if ( tableWidthAttr ) {",
                    "5822": "\t\t\t\ttmpTable.width( tableWidthAttr );",
                    "5823": "\t\t\t}",
                    "5825": "\t\t\t// Get the width of each column in the constructed table - we need to",
                    "5826": "\t\t\t// know the inner width (so it can be assigned to the other table's",
                    "5827": "\t\t\t// cells) and the outer width so we can calculate the full width of the",
                    "5828": "\t\t\t// table. This is safe since DataTables requires a unique cell for each",
                    "5829": "\t\t\t// column, but if ever a header can span multiple columns, this will",
                    "5830": "\t\t\t// need to be modified.",
                    "5831": "\t\t\tvar total = 0;",
                    "5832": "\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {",
                    "5833": "\t\t\t\tvar cell = $(headerCells[i]);",
                    "5834": "\t\t\t\tvar border = cell.outerWidth() - cell.width();",
                    "5836": "\t\t\t\t// Use getBounding... where possible (not IE8-) because it can give",
                    "5837": "\t\t\t\t// sub-pixel accuracy, which we then want to round up!",
                    "5838": "\t\t\t\tvar bounding = browser.bBounding ?",
                    "5839": "\t\t\t\t\tMath.ceil( headerCells[i].getBoundingClientRect().width ) :",
                    "5840": "\t\t\t\t\tcell.outerWidth();",
                    "5842": "\t\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth",
                    "5843": "\t\t\t\t// of the table might not equal the total given here (IE!).",
                    "5844": "\t\t\t\ttotal += bounding;",
                    "5846": "\t\t\t\t// Width for each column to use",
                    "5847": "\t\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );",
                    "5848": "\t\t\t}",
                    "5850": "\t\t\ttable.style.width = _fnStringToCss( total );",
                    "5852": "\t\t\t// Finished with the table - ditch it",
                    "5853": "\t\t\tholder.remove();",
                    "5854": "\t\t}",
                    "5864": "\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {",
                    "5866": "\t\t\t\t$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {",
                    "5867": "\t\t\t\t\t_fnAdjustColumnSizing( oSettings );",
                    "5871": "\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.",
                    "5872": "\t\t\t// To be removed in 1.11 which drops IE6/7 support",
                    "5873": "\t\t\tif ( ie67 ) {",
                    "5874": "\t\t\t\tsetTimeout( bindResize, 1000 );",
                    "5875": "\t\t\t}",
                    "5876": "\t\t\telse {",
                    "5877": "\t\t\t\tbindResize();",
                    "5878": "\t\t\t}",
                    "5879": "",
                    "5880": "\t\t\toSettings._reszEvt = true;",
                    "5881": "\t\t}",
                    "5882": "\t}",
                    "5883": "",
                    "5884": "",
                    "5885": "\t/**",
                    "5886": "\t * Throttle the calls to a function. Arguments and context are maintained for",
                    "5887": "\t * the throttled function",
                    "5888": "\t *  @param {function} fn Function to be called",
                    "5889": "\t *  @param {int} [freq=200] call frequency in mS",
                    "5890": "\t *  @returns {function} wrapped function",
                    "5891": "\t *  @memberof DataTable#oApi",
                    "5892": "\t */",
                    "5893": "\tvar _fnThrottle = DataTable.util.throttle;",
                    "5894": "",
                    "5895": "",
                    "5896": "\t/**",
                    "5897": "\t * Convert a CSS unit width to pixels (e.g. 2em)",
                    "5898": "\t *  @param {string} width width to be converted",
                    "5899": "\t *  @param {node} parent parent to get the with for (required for relative widths) - optional",
                    "5900": "\t *  @returns {int} width in pixels",
                    "5901": "\t *  @memberof DataTable#oApi",
                    "5902": "\t */",
                    "5903": "\tfunction _fnConvertToWidth ( width, parent )",
                    "5904": "\t{",
                    "5905": "\t\tif ( ! width ) {",
                    "5906": "\t\t\treturn 0;",
                    "5907": "\t\t}",
                    "5908": "",
                    "5909": "\t\tvar n = $('<div/>')",
                    "5910": "\t\t\t.css( 'width', _fnStringToCss( width ) )",
                    "5911": "\t\t\t.appendTo( parent || document.body );",
                    "5913": "\t\tvar val = n[0].offsetWidth;",
                    "5914": "\t\tn.remove();",
                    "5915": "",
                    "5916": "\t\treturn val;",
                    "5917": "\t}",
                    "5918": "",
                    "5919": "",
                    "5920": "\t/**",
                    "5921": "\t * Get the widest node",
                    "5922": "\t *  @param {object} settings dataTables settings object",
                    "5923": "\t *  @param {int} colIdx column of interest",
                    "5924": "\t *  @returns {node} widest table node",
                    "5925": "\t *  @memberof DataTable#oApi",
                    "5926": "\t */",
                    "5927": "\tfunction _fnGetWidestNode( settings, colIdx )",
                    "5928": "\t{",
                    "5929": "\t\tvar idx = _fnGetMaxLenString( settings, colIdx );",
                    "5930": "\t\tif ( idx < 0 ) {",
                    "5931": "\t\t\treturn null;",
                    "5933": "",
                    "5934": "\t\tvar data = settings.aoData[ idx ];",
                    "5935": "\t\treturn ! data.nTr ? // Might not have been created when deferred rendering",
                    "5936": "\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :",
                    "5937": "\t\t\tdata.anCells[ colIdx ];",
                    "5945": "\t *  @returns {string} max string length for each column",
                    "5950": "\t\tvar s, max=-1, maxIdx = -1;",
                    "5952": "\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {",
                    "5953": "\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';",
                    "5954": "\t\t\ts = s.replace( __re_html_remove, '' );",
                    "5955": "\t\t\ts = s.replace( /&nbsp;/g, ' ' );",
                    "5956": "",
                    "5957": "\t\t\tif ( s.length > max ) {",
                    "5958": "\t\t\t\tmax = s.length;",
                    "5959": "\t\t\t\tmaxIdx = i;",
                    "5963": "\t\treturn maxIdx;",
                    "5984": "",
                    "5985": "\t\t// Check it has a unit character already",
                    "5986": "\t\treturn s.match(/\\d$/) ?",
                    "5987": "\t\t\ts+'px' :",
                    "5988": "\t\t\ts;",
                    "5992": "",
                    "5996": "\t\t\ti, iLen, k, kLen,",
                    "5998": "\t\t\taiOrig = [],",
                    "6003": "\t\t\tnestedSort = [],",
                    "6004": "\t\t\tadd = function ( a ) {",
                    "6005": "\t\t\t\tif ( a.length && ! Array.isArray( a[0] ) ) {",
                    "6006": "\t\t\t\t\t// 1D array",
                    "6007": "\t\t\t\t\tnestedSort.push( a );",
                    "6008": "\t\t\t\t}",
                    "6009": "\t\t\t\telse {",
                    "6010": "\t\t\t\t\t// 2D array",
                    "6011": "\t\t\t\t\t$.merge( nestedSort, a );",
                    "6012": "\t\t\t\t}",
                    "6013": "\t\t\t};",
                    "6018": "\t\t\tadd( fixed );",
                    "6022": "\t\t\tadd( fixed.pre );",
                    "6025": "\t\tadd( settings.aaSorting );",
                    "6028": "\t\t\tadd( fixed.post );",
                    "6034": "\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;",
                    "6036": "\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )",
                    "6037": "\t\t\t{",
                    "6038": "\t\t\t\tiCol = aDataSort[k];",
                    "6039": "\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';",
                    "6041": "\t\t\t\tif ( nestedSort[i]._idx === undefined ) {",
                    "6042": "\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );",
                    "6043": "\t\t\t\t}",
                    "6045": "\t\t\t\taSort.push( {",
                    "6046": "\t\t\t\t\tsrc:       srcCol,",
                    "6047": "\t\t\t\t\tcol:       iCol,",
                    "6048": "\t\t\t\t\tdir:       nestedSort[i][1],",
                    "6049": "\t\t\t\t\tindex:     nestedSort[i]._idx,",
                    "6050": "\t\t\t\t\ttype:      sType,",
                    "6051": "\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]",
                    "6052": "\t\t\t\t} );",
                    "6063": "\t *  @todo This really needs split up!",
                    "6065": "\tfunction _fnSort ( oSettings )",
                    "6068": "\t\t\ti, ien, iLen, j, jLen, k, kLen,",
                    "6069": "\t\t\tsDataType, nTh,",
                    "6071": "\t\t\toExtSort = DataTable.ext.type.order,",
                    "6073": "\t\t\taoColumns = oSettings.aoColumns,",
                    "6074": "\t\t\taDataSort, data, iCol, sType, oSort,",
                    "6075": "\t\t\tformatters = 0,",
                    "6085": "\t\taSort = _fnSortFlatten( oSettings );",
                    "6090": "\t\t\t// Track if we can use the fast sort algorithm",
                    "6091": "\t\t\tif ( sortCol.formatter ) {",
                    "6092": "\t\t\t\tformatters++;",
                    "6093": "\t\t\t}",
                    "6094": "",
                    "6102": "\t\t\t// Create a value - key array of the current row positions such that we can use their",
                    "6103": "\t\t\t// current position during the sort, if values match, in order to perform stable sorting",
                    "6105": "\t\t\t\taiOrig[ displayMaster[i] ] = i;",
                    "6112": "\t\t\t *    var iTest;",
                    "6113": "\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');",
                    "6114": "\t\t\t *      if (iTest !== 0)",
                    "6115": "\t\t\t *        return iTest;",
                    "6116": "\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');",
                    "6117": "\t\t\t *    if (iTest !== 0)",
                    "6118": "\t\t\t *      return iTest;",
                    "6124": "\t\t\t *",
                    "6125": "\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around",
                    "6126": "\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting",
                    "6127": "\t\t\t * methods which do not have a pre-sort formatting function.",
                    "6129": "\t\t\tif ( formatters === aSort.length ) {",
                    "6130": "\t\t\t\t// All sort types have formatting functions",
                    "6131": "\t\t\t\tdisplayMaster.sort( function ( a, b ) {",
                    "6132": "\t\t\t\t\tvar",
                    "6133": "\t\t\t\t\t\tx, y, k, test, sort,",
                    "6134": "\t\t\t\t\t\tlen=aSort.length,",
                    "6135": "\t\t\t\t\t\tdataA = aoData[a]._aSortData,",
                    "6136": "\t\t\t\t\t\tdataB = aoData[b]._aSortData;",
                    "6138": "\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {",
                    "6139": "\t\t\t\t\t\tsort = aSort[k];",
                    "6141": "\t\t\t\t\t\tx = dataA[ sort.col ];",
                    "6142": "\t\t\t\t\t\ty = dataB[ sort.col ];",
                    "6144": "\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;",
                    "6146": "\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;",
                    "6150": "\t\t\t\t\tx = aiOrig[a];",
                    "6151": "\t\t\t\t\ty = aiOrig[b];",
                    "6152": "\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;",
                    "6153": "\t\t\t\t} );",
                    "6154": "\t\t\t}",
                    "6155": "\t\t\telse {",
                    "6156": "\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)",
                    "6157": "\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting",
                    "6158": "\t\t\t\t// methods.",
                    "6159": "\t\t\t\tdisplayMaster.sort( function ( a, b ) {",
                    "6160": "\t\t\t\t\tvar",
                    "6161": "\t\t\t\t\t\tx, y, k, l, test, sort, fn,",
                    "6162": "\t\t\t\t\t\tlen=aSort.length,",
                    "6163": "\t\t\t\t\t\tdataA = aoData[a]._aSortData,",
                    "6164": "\t\t\t\t\t\tdataB = aoData[b]._aSortData;",
                    "6165": "",
                    "6166": "\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {",
                    "6167": "\t\t\t\t\t\tsort = aSort[k];",
                    "6168": "",
                    "6169": "\t\t\t\t\t\tx = dataA[ sort.col ];",
                    "6170": "\t\t\t\t\t\ty = dataB[ sort.col ];",
                    "6171": "",
                    "6172": "\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];",
                    "6173": "\t\t\t\t\t\ttest = fn( x, y );",
                    "6175": "\t\t\t\t\t\t\treturn test;",
                    "6179": "\t\t\t\t\tx = aiOrig[a];",
                    "6180": "\t\t\t\t\ty = aiOrig[b];",
                    "6181": "\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;",
                    "6182": "\t\t\t\t} );",
                    "6183": "\t\t\t}",
                    "6184": "\t\t}",
                    "6185": "",
                    "6186": "\t\t/* Tell the draw function that we have sorted the data */",
                    "6187": "\t\toSettings.bSorted = true;",
                    "6188": "\t}",
                    "6189": "",
                    "6190": "",
                    "6191": "\tfunction _fnSortAria ( settings )",
                    "6192": "\t{",
                    "6193": "\t\tvar label;",
                    "6194": "\t\tvar nextSort;",
                    "6195": "\t\tvar columns = settings.aoColumns;",
                    "6196": "\t\tvar aSort = _fnSortFlatten( settings );",
                    "6197": "\t\tvar oAria = settings.oLanguage.oAria;",
                    "6198": "",
                    "6199": "\t\t// ARIA attributes - need to loop all columns, to update all (removing old",
                    "6200": "\t\t// attributes as needed)",
                    "6201": "\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )",
                    "6202": "\t\t{",
                    "6203": "\t\t\tvar col = columns[i];",
                    "6204": "\t\t\tvar asSorting = col.asSorting;",
                    "6205": "\t\t\tvar sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, \"\" );",
                    "6206": "\t\t\tvar th = col.nTh;",
                    "6207": "",
                    "6208": "\t\t\t// IE7 is throwing an error when setting these properties with jQuery's",
                    "6209": "\t\t\t// attr() and removeAttr() methods...",
                    "6210": "\t\t\tth.removeAttribute('aria-sort');",
                    "6212": "\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */",
                    "6213": "\t\t\tif ( col.bSortable ) {",
                    "6214": "\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {",
                    "6215": "\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );",
                    "6216": "\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];",
                    "6217": "\t\t\t\t}",
                    "6218": "\t\t\t\telse {",
                    "6219": "\t\t\t\t\tnextSort = asSorting[0];",
                    "6220": "\t\t\t\t}",
                    "6222": "\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?",
                    "6223": "\t\t\t\t\toAria.sSortAscending :",
                    "6224": "\t\t\t\t\toAria.sSortDescending",
                    "6225": "\t\t\t\t);",
                    "6226": "\t\t\t}",
                    "6227": "\t\t\telse {",
                    "6228": "\t\t\t\tlabel = sTitle;",
                    "6229": "\t\t\t}",
                    "6231": "\t\t\tth.setAttribute('aria-label', label);",
                    "6246": "\tfunction _fnSortListener ( settings, colIdx, append, callback )",
                    "6255": "\t\t\t\tidx = $.inArray( a[1], asSorting );",
                    "6273": "\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );",
                    "6311": "",
                    "6312": "\t\t// Run the sort by calling a full redraw",
                    "6313": "\t\t_fnReDraw( settings );",
                    "6314": "",
                    "6315": "\t\t// callback used for async user interaction",
                    "6316": "\t\tif ( typeof callback == 'function' ) {",
                    "6317": "\t\t\tcallback( settings );",
                    "6318": "\t\t}",
                    "6319": "\t}",
                    "6320": "",
                    "6321": "",
                    "6322": "\t/**",
                    "6323": "\t * Attach a sort handler (click) to a node",
                    "6324": "\t *  @param {object} settings dataTables settings object",
                    "6325": "\t *  @param {node} attachTo node to attach the handler to",
                    "6326": "\t *  @param {int} colIdx column sorting index",
                    "6327": "\t *  @param {function} [callback] callback function",
                    "6328": "\t *  @memberof DataTable#oApi",
                    "6329": "\t */",
                    "6330": "\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )",
                    "6331": "\t{",
                    "6332": "\t\tvar col = settings.aoColumns[ colIdx ];",
                    "6333": "",
                    "6334": "\t\t_fnBindAction( attachTo, {}, function (e) {",
                    "6335": "\t\t\t/* If the column is not sortable - don't to anything */",
                    "6336": "\t\t\tif ( col.bSortable === false ) {",
                    "6337": "\t\t\t\treturn;",
                    "6338": "\t\t\t}",
                    "6339": "",
                    "6340": "\t\t\t// If processing is enabled use a timeout to allow the processing",
                    "6341": "\t\t\t// display to be shown - otherwise to it synchronously",
                    "6342": "\t\t\tif ( settings.oFeatures.bProcessing ) {",
                    "6343": "\t\t\t\t_fnProcessingDisplay( settings, true );",
                    "6344": "",
                    "6345": "\t\t\t\tsetTimeout( function() {",
                    "6346": "\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );",
                    "6347": "",
                    "6348": "\t\t\t\t\t// In server-side processing, the draw callback will remove the",
                    "6349": "\t\t\t\t\t// processing display",
                    "6350": "\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {",
                    "6351": "\t\t\t\t\t\t_fnProcessingDisplay( settings, false );",
                    "6352": "\t\t\t\t\t}",
                    "6353": "\t\t\t\t}, 0 );",
                    "6354": "\t\t\t}",
                    "6355": "\t\t\telse {",
                    "6356": "\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );",
                    "6357": "\t\t\t}",
                    "6358": "\t\t} );",
                    "6371": "\t\tvar sortClass = settings.oClasses.sSortColumn;",
                    "6401": "\tfunction _fnSortData( settings, idx )",
                    "6404": "\t\tvar column = settings.aoColumns[ idx ];",
                    "6409": "\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,",
                    "6410": "\t\t\t\t_fnColumnIndexToVisible( settings, idx )",
                    "6418": "\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {",
                    "6419": "\t\t\trow = settings.aoData[i];",
                    "6425": "\t\t\tif ( ! row._aSortData[idx] || customSort ) {",
                    "6427": "\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there",
                    "6428": "\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );",
                    "6430": "\t\t\t\trow._aSortData[ idx ] = formatter ?",
                    "6431": "\t\t\t\t\tformatter( cellData ) :",
                    "6438": "",
                    "6440": "\t * Save the state of a table",
                    "6441": "\t *  @param {object} oSettings dataTables settings object",
                    "6442": "\t *  @memberof DataTable#oApi",
                    "6456": "\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),",
                    "6457": "\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {",
                    "6460": "\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )",
                    "6482": "\tfunction _fnLoadState ( settings, oInit, callback )",
                    "6518": "\t\t// Allow custom and plug-in manipulation functions to alter the saved data set and",
                    "6519": "\t\t// cancelling of loading by returning false",
                    "6520": "\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );",
                    "6521": "\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {",
                    "6527": "\t\t// Reject old data",
                    "6528": "\t\tvar duration = settings.iStateDuration;",
                    "6529": "\t\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {",
                    "6581": "\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );",
                    "6603": "\t\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );",
                    "6616": "\t};",
                    "6617": "",
                    "6618": "",
                    "6619": "\t/**",
                    "6620": "\t * Return the settings object for a particular table",
                    "6621": "\t *  @param {node} table table we are using as a dataTable",
                    "6622": "\t *  @returns {object} Settings object - or null if not found",
                    "6623": "\t *  @memberof DataTable#oApi",
                    "6624": "\t */",
                    "6625": "\tfunction _fnSettingsFromNode ( table )",
                    "6626": "\t{",
                    "6627": "\t\tvar settings = DataTable.settings;",
                    "6628": "\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );",
                    "6629": "",
                    "6630": "\t\treturn idx !== -1 ?",
                    "6631": "\t\t\tsettings[ idx ] :",
                    "6632": "\t\t\tnull;",
                    "6635": "",
                    "6651": "\t\t\t'http://datatables.net/tn/'+tn;",
                    "6660": "\t\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );",
                    "6734": "\t\t\tif ( extender.hasOwnProperty(prop) ) {",
                    "6761": "\t *  @param {object} oData Data object to pass to the triggered function",
                    "6765": "\tfunction _fnBindAction( n, oData, fn )",
                    "6768": "\t\t\t.on( 'click.DT', oData, function (e) {",
                    "6769": "\t\t\t\t\t$(n).trigger('blur'); // Remove focus outline for mouse users",
                    "6771": "\t\t\t\t} )",
                    "6772": "\t\t\t.on( 'keypress.DT', oData, function (e){",
                    "6773": "\t\t\t\t\tif ( e.which === 13 ) {",
                    "6774": "\t\t\t\t\t\te.preventDefault();",
                    "6775": "\t\t\t\t\t\tfn(e);",
                    "6776": "\t\t\t\t\t}",
                    "6777": "\t\t\t\t} )",
                    "6778": "\t\t\t.on( 'selectstart.DT', function () {",
                    "6779": "\t\t\t\t\t/* Take the brutal approach to cancelling text selection */",
                    "6780": "\t\t\t\t\treturn false;",
                    "6781": "\t\t\t\t} );",
                    "6788": "\t *  @param {object} oSettings dataTables settings object",
                    "6789": "\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings",
                    "6791": "\t *  @param {string} sName Identifying name for the callback (i.e. a label)",
                    "6794": "\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )",
                    "6796": "\t\tif ( fn )",
                    "6797": "\t\t{",
                    "6798": "\t\t\toSettings[sStore].push( {",
                    "6799": "\t\t\t\t\"fn\": fn,",
                    "6800": "\t\t\t\t\"sName\": sName",
                    "6801": "\t\t\t} );",
                    "6820": "\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )",
                    "6825": "\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {",
                    "6826": "\t\t\t\treturn val.fn.apply( settings.oInstance, args );",
                    "6830": "\t\tif ( eventName !== null ) {",
                    "6834": "\t\t\ttable.trigger( e, args );",
                    "6838": "\t\t\tif (table.parents('body').length === 0) {",
                    "6908": "\t\telse if ( settings.ajax || settings.sAjaxSource ) {",
                    "6989": "\t\tvar tables = $.map( settings, function (el, i) {",
                    "6990": "\t\t\treturn el.nTable;",
                    "6991": "\t\t} );",
                    "6996": "\t\telse if ( mixed.nTable && mixed.oApi ) {",
                    "7002": "\t\t\tidx = $.inArray( mixed, tables );",
                    "7010": "\t\t\tjq = $(mixed);",
                    "7014": "\t\t\tjq = mixed;",
                    "7018": "\t\t\treturn jq.map( function(i) {",
                    "7019": "\t\t\t\tidx = $.inArray( this, tables );",
                    "7020": "\t\t\t\treturn idx !== -1 ? settings[idx] : null;",
                    "7021": "\t\t\t} ).toArray();",
                    "7078": "\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );",
                    "7104": "\t\tthis.context = _unique( settings );",
                    "7108": "\t\t\t$.merge( this, data );",
                    "7131": "",
                    "7132": "\t\tconcat:  __arrayProto.concat,",
                    "7133": "",
                    "7134": "",
                    "7137": "",
                    "7143": "",
                    "7153": "",
                    "7163": "",
                    "7166": "\t\t\tvar a = [];",
                    "7167": "",
                    "7168": "\t\t\tif ( __arrayProto.filter ) {",
                    "7169": "\t\t\t\ta = __arrayProto.filter.call( this, fn, this );",
                    "7170": "\t\t\t}",
                    "7171": "\t\t\telse {",
                    "7172": "\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)",
                    "7173": "\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {",
                    "7174": "\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {",
                    "7175": "\t\t\t\t\t\ta.push( this[i] );",
                    "7176": "\t\t\t\t\t}",
                    "7177": "\t\t\t\t}",
                    "7178": "\t\t\t}",
                    "7183": "",
                    "7193": "",
                    "7194": "\t\tindexOf: __arrayProto.indexOf || function (obj, start)",
                    "7195": "\t\t{",
                    "7196": "\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {",
                    "7197": "\t\t\t\tif ( this[i] === obj ) {",
                    "7198": "\t\t\t\t\treturn i;",
                    "7199": "\t\t\t\t}",
                    "7200": "\t\t\t}",
                    "7201": "\t\t\treturn -1;",
                    "7238": "\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {",
                    "7275": "",
                    "7276": "\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)",
                    "7277": "\t\t{",
                    "7278": "\t\t\t// Bit cheeky...",
                    "7279": "\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );",
                    "7280": "\t\t},",
                    "7281": "",
                    "7285": "",
                    "7288": "\t\t\tvar a = [];",
                    "7289": "",
                    "7290": "\t\t\tif ( __arrayProto.map ) {",
                    "7291": "\t\t\t\ta = __arrayProto.map.call( this, fn, this );",
                    "7292": "\t\t\t}",
                    "7293": "\t\t\telse {",
                    "7294": "\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)",
                    "7295": "\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {",
                    "7296": "\t\t\t\t\ta.push( fn.call( this, this[i], i ) );",
                    "7297": "\t\t\t\t}",
                    "7298": "\t\t\t}",
                    "7303": "",
                    "7315": "",
                    "7319": "\t\t// Does not return an API instance",
                    "7320": "\t\treduce: __arrayProto.reduce || function ( fn, init )",
                    "7321": "\t\t{",
                    "7322": "\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );",
                    "7323": "\t\t},",
                    "7324": "",
                    "7325": "",
                    "7326": "\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )",
                    "7327": "\t\t{",
                    "7328": "\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );",
                    "7329": "\t\t},",
                    "7330": "",
                    "7334": "",
                    "7338": "",
                    "7341": "",
                    "7346": "",
                    "7347": "\t\tsort:    __arrayProto.sort, // ? name - order?",
                    "7348": "",
                    "7352": "",
                    "7358": "",
                    "7364": "",
                    "7370": "",
                    "7373": "\t\t\treturn new _Api( this.context, _unique(this) );",
                    "7376": "",
                    "7390": "\t\t\tstruct,",
                    "7391": "\t\t\tmethodScoping = function ( scope, fn, struc ) {",
                    "7392": "\t\t\t\treturn function () {",
                    "7393": "\t\t\t\t\tvar ret = fn.apply( scope, arguments );",
                    "7394": "",
                    "7395": "\t\t\t\t\t// Method extension",
                    "7396": "\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );",
                    "7397": "\t\t\t\t\treturn ret;",
                    "7398": "\t\t\t\t};",
                    "7399": "\t\t\t};",
                    "7406": "\t\t\t\tmethodScoping( scope, struct.val, struct ) :",
                    "7418": "",
                    "7419": "\t// @todo - Is there need for an augment function?",
                    "7420": "\t// _Api.augment = function ( inst, name )",
                    "7421": "\t// {",
                    "7422": "\t// \t// Find src object in the structure from the name",
                    "7423": "\t// \tvar parts = name.split('.');",
                    "7424": "",
                    "7425": "\t// \t_Api.extend( inst, obj );",
                    "7426": "\t// };",
                    "7427": "",
                    "7428": "",
                    "7467": "\t\tvar find = function ( src, name ) {",
                    "7468": "\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {",
                    "7469": "\t\t\t\tif ( src[i].name === name ) {",
                    "7470": "\t\t\t\t\treturn src[i];",
                    "7471": "\t\t\t\t}",
                    "7472": "\t\t\t}",
                    "7473": "\t\t\treturn null;",
                    "7474": "\t\t};",
                    "7475": "",
                    "7482": "\t\t\tvar src = find( struct, key );",
                    "7548": "\t\t\treturn $.map( selector, function (item) {",
                    "7549": "\t\t\t\treturn __table_selector(item, a);",
                    "7550": "\t\t\t} );",
                    "7559": "\t\tvar nodes = $.map( a, function (el, i) {",
                    "7565": "\t\t\t.map( function (i) {",
                    "7567": "\t\t\t\tvar idx = $.inArray( this, nodes );",
                    "7605": "\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {",
                    "7607": "\t\t\treturn ctx.nTable;",
                    "7612": "\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {",
                    "7613": "\t\treturn this.iterator( 'table', function ( ctx ) {",
                    "7614": "\t\t\treturn ctx.nTBody;",
                    "7615": "\t\t}, 1 );",
                    "7616": "\t} );",
                    "7619": "\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {",
                    "7620": "\t\treturn this.iterator( 'table', function ( ctx ) {",
                    "7621": "\t\t\treturn ctx.nTHead;",
                    "7622": "\t\t}, 1 );",
                    "7623": "\t} );",
                    "7626": "\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {",
                    "7628": "\t\t\treturn ctx.nTFoot;",
                    "7629": "\t\t}, 1 );",
                    "7630": "\t} );",
                    "7633": "\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {",
                    "7634": "\t\treturn this.iterator( 'table', function ( ctx ) {",
                    "7635": "\t\t\treturn ctx.nTableWrapper;",
                    "7712": "\t_api_register( 'page.info()', function ( action ) {",
                    "7789": "\t\t\t_fnBuildAjax( settings, [], function( json ) {",
                    "7874": "\t\t\treturn ctx.ajax ?",
                    "7875": "\t\t\t\t$.isPlainObject( ctx.ajax ) ?",
                    "7876": "\t\t\t\t\tctx.ajax.url :",
                    "7877": "\t\t\t\t\tctx.ajax :",
                    "7878": "\t\t\t\tctx.sAjaxSource;",
                    "7889": "\t\t\t// No need to consider sAjaxSource here since DataTables gives priority",
                    "7890": "\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any",
                    "7891": "\t\t\t// value of `sAjaxSource` redundant.",
                    "7931": "\t\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?",
                    "7976": "\tvar _selector_first = function ( inst )",
                    "7978": "\t\t// Reduce the API instance to the first item found",
                    "7979": "\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {",
                    "7980": "\t\t\tif ( inst[i].length > 0 ) {",
                    "7981": "\t\t\t\t// Assign the first element to the first item in the instance",
                    "7982": "\t\t\t\t// and truncate the instance and context",
                    "7983": "\t\t\t\tinst[0] = inst[i];",
                    "7984": "\t\t\t\tinst[0].length = 1;",
                    "7985": "\t\t\t\tinst.length = 1;",
                    "7986": "\t\t\t\tinst.context = [ inst.context[i] ];",
                    "7988": "\t\t\t\treturn inst;",
                    "7989": "\t\t\t}",
                    "7992": "\t\t// Not found - return an empty instance",
                    "7993": "\t\tinst.length = 0;",
                    "8038": "\t\t\t\tfor ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {",
                    "8042": "\t\t\t\ta = $.map( displayMaster, function (el) {",
                    "8043": "\t\t\t\t\treturn ! displayFilteredMap.hasOwnProperty(el) ?",
                    "8044": "\t\t\t\t\t\tel :",
                    "8045": "\t\t\t\t\t\tnull;",
                    "8046": "\t\t\t\t} );",
                    "8055": "\t\t\t\t\ttmp = $.inArray( i, displayFiltered );",
                    "8085": "\t\t\tvar i, ien;",
                    "8099": "\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {",
                    "8110": "\t\t\t\treturn $.map( rows, function (idx) {",
                    "8176": "\t\treturn _selector_run( 'row', selector, run, settings, opts );",
                    "8250": "\t\tvar that = this;",
                    "8251": "",
                    "8252": "\t\tthis.iterator( 'row', function ( settings, row, thatIdx ) {",
                    "8255": "\t\t\tvar i, ien, j, jen;",
                    "8256": "\t\t\tvar loopRow, loopCells;",
                    "8257": "",
                    "8258": "\t\t\tdata.splice( row, 1 );",
                    "8259": "",
                    "8260": "\t\t\t// Update the cached indexes",
                    "8261": "\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {",
                    "8262": "\t\t\t\tloopRow = data[i];",
                    "8263": "\t\t\t\tloopCells = loopRow.anCells;",
                    "8264": "",
                    "8265": "\t\t\t\t// Rows",
                    "8266": "\t\t\t\tif ( loopRow.nTr !== null ) {",
                    "8267": "\t\t\t\t\tloopRow.nTr._DT_RowIndex = i;",
                    "8268": "\t\t\t\t}",
                    "8270": "\t\t\t\t// Cells",
                    "8271": "\t\t\t\tif ( loopCells !== null ) {",
                    "8272": "\t\t\t\t\tfor ( j=0, jen=loopCells.length ; j<jen ; j++ ) {",
                    "8273": "\t\t\t\t\t\tloopCells[j]._DT_CellIndex.row = i;",
                    "8274": "\t\t\t\t\t}",
                    "8275": "\t\t\t\t}",
                    "8278": "\t\t\t// Delete from the display arrays",
                    "8279": "\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );",
                    "8280": "\t\t\t_fnDeleteIndex( settings.aiDisplay, row );",
                    "8281": "\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes",
                    "8296": "\t\t} );",
                    "8298": "\t\tthis.iterator( 'table', function ( settings ) {",
                    "8299": "\t\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {",
                    "8300": "\t\t\t\tsettings.aoData[i].idx = i;",
                    "8301": "\t\t\t}",
                    "8330": "\t\t$.merge( modRows, newRows );",
                    "8352": "\t\t\treturn ctx.length && this.length ?",
                    "8376": "\t\treturn ctx.length && this.length ?",
                    "8403": "\t\tvar namespace = 'on-plugin-init';",
                    "8404": "\t\tvar stateSaveParamsEvent = 'stateSaveParams.' + namespace;",
                    "8405": "\t\tvar destroyEvent = 'destroy. ' + namespace;",
                    "8407": "\t\tapi.on( stateSaveParamsEvent, function ( e, settings, d ) {",
                    "8411": "\t\t\tvar data = settings.aoData;",
                    "8414": "\t\t\tfor (var i=0 ; i<data.length ; i++) {",
                    "8415": "\t\t\t\tif (data[i]._detailsShow) {",
                    "8416": "\t\t\t\t\tids.push( '#' + idFn(data[i]._aData) );",
                    "8423": "\t\tapi.on( destroyEvent, function () {",
                    "8424": "\t\t\tapi.off(stateSaveParamsEvent + ' ' + destroyEvent);",
                    "8427": "\t\tvar loaded = api.state.loaded();",
                    "8429": "\t\tif ( loaded && loaded.childRows ) {",
                    "8431": "\t\t\t\t.rows( $.map(loaded.childRows, function (id){",
                    "8435": "\t\t\t\t\t_fnCallbackFire( context, null, 'requestChild', [ this ] )",
                    "8438": "\t});",
                    "8460": "\t\t\t\tvar created = $('<tr><td></td></tr>').addClass( k );",
                    "8463": "\t\t\t\t\t.html( r )",
                    "8464": "\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );",
                    "8569": "\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {",
                    "8582": "\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );",
                    "8640": "\t], function ( show ) {   // it returns an object and this method is not executed)",
                    "8690": "\tvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;",
                    "8695": "\tvar __columnData = function ( settings, column, r1, r2, rows ) {",
                    "8698": "\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );",
                    "8709": "\t\t\tnodes = _pluck( columns, 'nTh' );",
                    "8710": "",
                    "8731": "\t\t\t\treturn $.map( columns, function (col, idx) {",
                    "8734": "\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),",
                    "8735": "\t\t\t\t\t\t\tnodes[ idx ]",
                    "8737": "\t\t\t\t} );",
                    "8753": "\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {",
                    "8763": "\t\t\t\t\t\treturn $.map( names, function (name, i) {",
                    "8781": "\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order",
                    "8806": "\t\t\trow, cells, i, ien, tr;",
                    "8816": "\t\t\treturn;",
                    "8822": "\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );",
                    "8825": "\t\t\t\ttr = data[i].nTr;",
                    "8826": "\t\t\t\tcells = data[i].anCells;",
                    "8828": "\t\t\t\tif ( tr ) {",
                    "8829": "\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null",
                    "8830": "\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );",
                    "8867": "\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {",
                    "8869": "\t\t\treturn settings.aoColumns[column].nTh;",
                    "8873": "\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {",
                    "8875": "\t\t\treturn settings.aoColumns[column].nTf;",
                    "8909": "\t\t\t__setColumnVis( settings, column, vis );",
                    "8929": "\t\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );",
                    "8932": "\t\t\t\tif ( calc === undefined || calc ) {",
                    "9019": "\t\t\t\treturn s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?",
                    "9031": "\t \t\t\t\t};",
                    "9249": "\t\telse if ( order.length && ! Array.isArray( order[0] ) ) {",
                    "9251": "\t\t\torder = Array.prototype.slice.call( arguments );",
                    "9256": "\t\t\tsettings.aaSorting = order.slice();",
                    "9273": "\t\t\t_fnSortAttachListener( settings, node, column, callback );",
                    "9303": "\t\treturn this.iterator( 'table', function ( settings, i ) {",
                    "9304": "\t\t\tvar sort = [];",
                    "9306": "\t\t\t$.each( that[i], function (j, col) {",
                    "9307": "\t\t\t\tsort.push( [ col, dir ] );",
                    "9310": "\t\t\tsettings.aaSorting = sort;",
                    "9311": "\t\t} );",
                    "9322": "\t\t\t\tctx[0].oPreviousSearch.sSearch :",
                    "9332": "\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {",
                    "9333": "\t\t\t\t\"sSearch\": input+\"\",",
                    "9334": "\t\t\t\t\"bRegex\":  regex === null ? false : regex,",
                    "9335": "\t\t\t\t\"bSmart\":  smart === null ? true  : smart,",
                    "9336": "\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen",
                    "9337": "\t\t\t} ), 1 );",
                    "9351": "\t\t\t\t\treturn preSearch[ column ].sSearch;",
                    "9359": "\t\t\t\t$.extend( preSearch[ column ], {",
                    "9360": "\t\t\t\t\t\"sSearch\": input+\"\",",
                    "9361": "\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,",
                    "9362": "\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,",
                    "9363": "\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen",
                    "9364": "\t\t\t\t} );",
                    "9366": "\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );",
                    "9375": "\t_api_register( 'state()', function () {",
                    "9376": "\t\treturn this.context.length ?",
                    "9377": "\t\t\tthis.context[0].oSavedState :",
                    "9378": "\t\t\tnull;",
                    "9403": "",
                    "9404": "",
                    "9466": "\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )",
                    "9468": "\t\tvar aThis = DataTable.version.split('.');",
                    "9504": "\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )",
                    "9542": "\tDataTable.tables = DataTable.fnTables = function ( visible )",
                    "9551": "\t\tvar a = $.map( DataTable.settings, function (o) {",
                    "9552": "\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {",
                    "9554": "\t\t\t}",
                    "9555": "\t\t} );",
                    "9601": "\t\t\targs[0] = $.map( args[0].split( /\\s/ ), function ( e ) {",
                    "9651": "\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );",
                    "9652": "\t\t\tvar i, ien;",
                    "9659": "\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );",
                    "9687": "\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );",
                    "9688": "",
                    "9689": "\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+",
                    "9690": "\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone",
                    "9691": "\t\t\t);",
                    "9707": "\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );",
                    "9713": "\t\t\t\t\t.removeClass( classes.sTable );",
                    "9714": "",
                    "9715": "\t\t\t\t// If the were originally stripe classes - then we add them back here.",
                    "9716": "\t\t\t\t// Note this is not fool proof (for example if not all rows had stripe",
                    "9717": "\t\t\t\t// classes - but it's a good effort without getting carried away",
                    "9718": "\t\t\t\tien = settings.asDestroyStripes.length;",
                    "9719": "",
                    "9720": "\t\t\t\tif ( ien ) {",
                    "9721": "\t\t\t\t\tjqTbody.children().each( function (i) {",
                    "9722": "\t\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );",
                    "9723": "\t\t\t\t\t} );",
                    "9724": "\t\t\t\t}",
                    "9728": "\t\t\tvar idx = $.inArray( settings, DataTable.settings );",
                    "9742": "\t\t\treturn this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {",
                    "9743": "\t\t\t\t// Rows and columns:",
                    "9744": "\t\t\t\t//  arg1 - index",
                    "9745": "\t\t\t\t//  arg2 - table counter",
                    "9746": "\t\t\t\t//  arg3 - loop counter",
                    "9747": "\t\t\t\t//  arg4 - undefined",
                    "9748": "\t\t\t\t// Cells:",
                    "9749": "\t\t\t\t//  arg1 - row index",
                    "9750": "\t\t\t\t//  arg2 - column index",
                    "9751": "\t\t\t\t//  arg3 - table counter",
                    "9752": "\t\t\t\t//  arg4 - loop counter",
                    "9753": "\t\t\t\tfn.call(",
                    "9754": "\t\t\t\t\tapi[ type ](",
                    "9755": "\t\t\t\t\t\targ1,",
                    "9756": "\t\t\t\t\t\ttype==='cell' ? arg2 : opts,",
                    "9757": "\t\t\t\t\t\ttype==='cell' ? opts : undefined",
                    "9758": "\t\t\t\t\t),",
                    "9759": "\t\t\t\t\targ1, arg2, arg3, arg4",
                    "9760": "\t\t\t\t);",
                    "9776": "\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {",
                    "9777": "\t\t\tresolved = resolved[ plural ] !== undefined ?",
                    "9785": "\t} );",
                    "9789": "\t * only for non-release builds. See http://semver.org/ for more information.",
                    "9794": "\tDataTable.version = \"1.13.6\";",
                    "9828": "\t\t *  @type boolean",
                    "9829": "\t\t *  @default true",
                    "9831": "\t\t\"bCaseInsensitive\": true,",
                    "9835": "\t\t *  @type string",
                    "9836": "\t\t *  @default <i>Empty string</i>",
                    "9838": "\t\t\"sSearch\": \"\",",
                    "9844": "\t\t *  @type boolean",
                    "9845": "\t\t *  @default false",
                    "9847": "\t\t\"bRegex\": false,",
                    "9851": "\t\t *  @type boolean",
                    "9852": "\t\t *  @default true",
                    "9854": "\t\t\"bSmart\": true,",
                    "9859": "\t\t *  @type boolean",
                    "9860": "\t\t *  @default false",
                    "9877": "\t\t *  @type node",
                    "9878": "\t\t *  @default null",
                    "9885": "\t\t *  @type array nodes",
                    "9886": "\t\t *  @default []",
                    "9896": "\t\t *  @type array|object",
                    "9897": "\t\t *  @default []",
                    "9909": "\t\t *  @type array",
                    "9910": "\t\t *  @default null",
                    "9911": "\t\t *  @private",
                    "9918": "\t\t *  @type array",
                    "9919": "\t\t *  @default null",
                    "9920": "\t\t *  @private",
                    "9929": "\t\t *  @type array",
                    "9930": "\t\t *  @default null",
                    "9931": "\t\t *  @private",
                    "9935": "\t\t/**",
                    "9936": "\t\t * Cache of the class name that DataTables has applied to the row, so we",
                    "9937": "\t\t * can quickly look at this variable rather than needing to do a DOM check",
                    "9938": "\t\t * on className for the nTr property.",
                    "9939": "\t\t *  @type string",
                    "9940": "\t\t *  @default <i>Empty string</i>",
                    "9941": "\t\t *  @private",
                    "9942": "\t\t */",
                    "9943": "\t\t\"_sRowStripe\": \"\",",
                    "9944": "",
                    "9950": "\t\t *  @type string",
                    "9951": "\t\t *  @default null",
                    "9952": "\t\t *  @private",
                    "9959": "\t\t *  @type integer",
                    "9960": "\t\t *  @default -1",
                    "9961": "\t\t *  @private",
                    "9963": "\t\t\"idx\": -1",
                    "9980": "\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it",
                    "9981": "\t\t * is faster to just hold it as a variable",
                    "9982": "\t\t *  @type integer",
                    "9983": "\t\t *  @default null",
                    "9994": "\t\t *  @type array",
                    "10004": "\t\t *  @type array",
                    "10011": "\t\t *  @type boolean",
                    "10017": "\t\t *  @type boolean",
                    "10023": "\t\t *  @type boolean",
                    "10030": "\t\t *  @type string",
                    "10031": "\t\t *  @default null",
                    "10032": "\t\t *  @private",
                    "10039": "\t\t *  @type boolean",
                    "10040": "\t\t *  @default false",
                    "10041": "\t\t *  @private",
                    "10050": "\t\t *  @type function",
                    "10051": "\t\t *  @param {element} nTd The TD node that has been created",
                    "10052": "\t\t *  @param {*} sData The Data for the cell",
                    "10053": "\t\t *  @param {array|object} oData The data for the whole row",
                    "10054": "\t\t *  @param {int} iRow The row index for the aoData data store",
                    "10055": "\t\t *  @default null",
                    "10065": "\t\t *  @type function",
                    "10066": "\t\t *  @param {array|object} oData The data array/object for the array",
                    "10067": "\t\t *    (i.e. aoData[]._aData)",
                    "10068": "\t\t *  @param {string} sSpecific The specific data type you want to get -",
                    "10069": "\t\t *    'display', 'type' 'filter' 'sort'",
                    "10070": "\t\t *  @returns {*} The data for the cell from the given row's data",
                    "10071": "\t\t *  @default null",
                    "10080": "\t\t *  @type function",
                    "10081": "\t\t *  @param {array|object} oData The data array/object for the array",
                    "10082": "\t\t *    (i.e. aoData[]._aData)",
                    "10083": "\t\t *  @param {*} sValue Value to set",
                    "10084": "\t\t *  @default null",
                    "10092": "\t\t *  @type function|int|string|null",
                    "10093": "\t\t *  @default null",
                    "10102": "\t\t *  @type function|int|string|null",
                    "10103": "\t\t *  @default null",
                    "10107": "\t\t/**",
                    "10108": "\t\t * Unique header TH/TD element for this column - this is what the sorting",
                    "10109": "\t\t * listener is attached to (if sorting is enabled.)",
                    "10110": "\t\t *  @type node",
                    "10111": "\t\t *  @default null",
                    "10112": "\t\t */",
                    "10113": "\t\t\"nTh\": null,",
                    "10114": "",
                    "10115": "\t\t/**",
                    "10116": "\t\t * Unique footer TH/TD element for this column (if there is one). Not used",
                    "10117": "\t\t * in DataTables as such, but can be used for plug-ins to reference the",
                    "10118": "\t\t * footer for each column.",
                    "10119": "\t\t *  @type node",
                    "10120": "\t\t *  @default null",
                    "10121": "\t\t */",
                    "10122": "\t\t\"nTf\": null,",
                    "10123": "",
                    "10126": "\t\t *  @type string",
                    "10127": "\t\t *  @default null",
                    "10140": "\t\t *  @type string",
                    "10148": "\t\t *  @type string",
                    "10149": "\t\t *  @default null",
                    "10156": "\t\t *  @type string",
                    "10163": "\t\t *  @type string",
                    "10164": "\t\t *  @default std",
                    "10170": "\t\t *  @type string",
                    "10171": "\t\t *  @default null",
                    "10175": "\t\t/**",
                    "10176": "\t\t * Class to be applied to the header element when sorting on this column -",
                    "10177": "\t\t * when jQuery UI theming is used.",
                    "10178": "\t\t *  @type string",
                    "10179": "\t\t *  @default null",
                    "10180": "\t\t */",
                    "10181": "\t\t\"sSortingClassJUI\": null,",
                    "10182": "",
                    "10185": "\t\t *  @type string",
                    "10191": "\t\t *  @type string",
                    "10192": "\t\t *  @default null",
                    "10198": "\t\t *  @type string",
                    "10199": "\t\t *  @default null",
                    "10205": "\t\t *  @type string",
                    "10206": "\t\t *  @default null",
                    "10208": "\t\t\"sWidthOrig\": null",
                    "10239": "\t\t *  @type array",
                    "10240": "\t\t *  @default null",
                    "10241": "\t\t *",
                    "10242": "\t\t *  @dtopt Option",
                    "10243": "\t\t *  @name DataTable.defaults.data",
                    "10244": "\t\t *",
                    "10245": "\t\t *  @example",
                    "10246": "\t\t *    // Using a 2D array data source",
                    "10247": "\t\t *    $(document).ready( function () {",
                    "10248": "\t\t *      $('#example').dataTable( {",
                    "10249": "\t\t *        \"data\": [",
                    "10250": "\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],",
                    "10251": "\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],",
                    "10252": "\t\t *        ],",
                    "10253": "\t\t *        \"columns\": [",
                    "10254": "\t\t *          { \"title\": \"Engine\" },",
                    "10255": "\t\t *          { \"title\": \"Browser\" },",
                    "10256": "\t\t *          { \"title\": \"Platform\" },",
                    "10257": "\t\t *          { \"title\": \"Version\" },",
                    "10258": "\t\t *          { \"title\": \"Grade\" }",
                    "10259": "\t\t *        ]",
                    "10260": "\t\t *      } );",
                    "10261": "\t\t *    } );",
                    "10262": "\t\t *",
                    "10263": "\t\t *  @example",
                    "10264": "\t\t *    // Using an array of objects as a data source (`data`)",
                    "10265": "\t\t *    $(document).ready( function () {",
                    "10266": "\t\t *      $('#example').dataTable( {",
                    "10267": "\t\t *        \"data\": [",
                    "10268": "\t\t *          {",
                    "10269": "\t\t *            \"engine\":   \"Trident\",",
                    "10270": "\t\t *            \"browser\":  \"Internet Explorer 4.0\",",
                    "10271": "\t\t *            \"platform\": \"Win 95+\",",
                    "10272": "\t\t *            \"version\":  4,",
                    "10273": "\t\t *            \"grade\":    \"X\"",
                    "10274": "\t\t *          },",
                    "10275": "\t\t *          {",
                    "10276": "\t\t *            \"engine\":   \"Trident\",",
                    "10277": "\t\t *            \"browser\":  \"Internet Explorer 5.0\",",
                    "10278": "\t\t *            \"platform\": \"Win 95+\",",
                    "10279": "\t\t *            \"version\":  5,",
                    "10280": "\t\t *            \"grade\":    \"C\"",
                    "10281": "\t\t *          }",
                    "10282": "\t\t *        ],",
                    "10283": "\t\t *        \"columns\": [",
                    "10284": "\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },",
                    "10285": "\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },",
                    "10286": "\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },",
                    "10287": "\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },",
                    "10288": "\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }",
                    "10289": "\t\t *        ]",
                    "10290": "\t\t *      } );",
                    "10291": "\t\t *    } );",
                    "10302": "\t\t *  @type array",
                    "10303": "\t\t *  @default [[0,'asc']]",
                    "10304": "\t\t *",
                    "10305": "\t\t *  @dtopt Option",
                    "10306": "\t\t *  @name DataTable.defaults.order",
                    "10307": "\t\t *",
                    "10308": "\t\t *  @example",
                    "10309": "\t\t *    // Sort by 3rd column first, and then 4th column",
                    "10310": "\t\t *    $(document).ready( function() {",
                    "10311": "\t\t *      $('#example').dataTable( {",
                    "10312": "\t\t *        \"order\": [[2,'asc'], [3,'desc']]",
                    "10313": "\t\t *      } );",
                    "10314": "\t\t *    } );",
                    "10315": "\t\t *",
                    "10316": "\t\t *    // No initial sorting",
                    "10317": "\t\t *    $(document).ready( function() {",
                    "10318": "\t\t *      $('#example').dataTable( {",
                    "10319": "\t\t *        \"order\": []",
                    "10320": "\t\t *      } );",
                    "10321": "\t\t *    } );",
                    "10333": "\t\t *  @type array",
                    "10334": "\t\t *  @default null",
                    "10335": "\t\t *",
                    "10336": "\t\t *  @dtopt Option",
                    "10337": "\t\t *  @name DataTable.defaults.orderFixed",
                    "10338": "\t\t *",
                    "10339": "\t\t *  @example",
                    "10340": "\t\t *    $(document).ready( function() {",
                    "10341": "\t\t *      $('#example').dataTable( {",
                    "10342": "\t\t *        \"orderFixed\": [[0,'asc']]",
                    "10343": "\t\t *      } );",
                    "10344": "\t\t *    } )",
                    "10370": "\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control",
                    "10394": "\t\t *   data source for the table. This supersedes `sAjaxDataProp` from",
                    "10395": "\t\t *   DataTables 1.9-.",
                    "10417": "\t\t *",
                    "10418": "\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.",
                    "10419": "\t\t *",
                    "10420": "\t\t *  @type string|object|function",
                    "10421": "\t\t *  @default null",
                    "10422": "\t\t *",
                    "10423": "\t\t *  @dtopt Option",
                    "10424": "\t\t *  @name DataTable.defaults.ajax",
                    "10425": "\t\t *  @since 1.10.0",
                    "10426": "\t\t *",
                    "10427": "\t\t * @example",
                    "10428": "\t\t *   // Get JSON data from a file via Ajax.",
                    "10429": "\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).",
                    "10430": "\t\t *   $('#example').dataTable( {",
                    "10431": "\t\t *     \"ajax\": \"data.json\"",
                    "10432": "\t\t *   } );",
                    "10433": "\t\t *",
                    "10434": "\t\t * @example",
                    "10435": "\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change",
                    "10436": "\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)",
                    "10437": "\t\t *   $('#example').dataTable( {",
                    "10438": "\t\t *     \"ajax\": {",
                    "10439": "\t\t *       \"url\": \"data.json\",",
                    "10440": "\t\t *       \"dataSrc\": \"tableData\"",
                    "10441": "\t\t *     }",
                    "10442": "\t\t *   } );",
                    "10443": "\t\t *",
                    "10444": "\t\t * @example",
                    "10445": "\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data",
                    "10446": "\t\t *   // from a plain array rather than an array in an object",
                    "10447": "\t\t *   $('#example').dataTable( {",
                    "10448": "\t\t *     \"ajax\": {",
                    "10449": "\t\t *       \"url\": \"data.json\",",
                    "10450": "\t\t *       \"dataSrc\": \"\"",
                    "10451": "\t\t *     }",
                    "10452": "\t\t *   } );",
                    "10453": "\t\t *",
                    "10454": "\t\t * @example",
                    "10455": "\t\t *   // Manipulate the data returned from the server - add a link to data",
                    "10456": "\t\t *   // (note this can, should, be done using `render` for the column - this",
                    "10457": "\t\t *   // is just a simple example of how the data can be manipulated).",
                    "10458": "\t\t *   $('#example').dataTable( {",
                    "10459": "\t\t *     \"ajax\": {",
                    "10460": "\t\t *       \"url\": \"data.json\",",
                    "10461": "\t\t *       \"dataSrc\": function ( json ) {",
                    "10462": "\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {",
                    "10463": "\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';",
                    "10464": "\t\t *         }",
                    "10465": "\t\t *         return json;",
                    "10466": "\t\t *       }",
                    "10467": "\t\t *     }",
                    "10468": "\t\t *   } );",
                    "10469": "\t\t *",
                    "10470": "\t\t * @example",
                    "10471": "\t\t *   // Add data to the request",
                    "10472": "\t\t *   $('#example').dataTable( {",
                    "10473": "\t\t *     \"ajax\": {",
                    "10474": "\t\t *       \"url\": \"data.json\",",
                    "10475": "\t\t *       \"data\": function ( d ) {",
                    "10476": "\t\t *         return {",
                    "10477": "\t\t *           \"extra_search\": $('#extra').val()",
                    "10478": "\t\t *         };",
                    "10479": "\t\t *       }",
                    "10480": "\t\t *     }",
                    "10481": "\t\t *   } );",
                    "10482": "\t\t *",
                    "10483": "\t\t * @example",
                    "10484": "\t\t *   // Send request as POST",
                    "10485": "\t\t *   $('#example').dataTable( {",
                    "10486": "\t\t *     \"ajax\": {",
                    "10487": "\t\t *       \"url\": \"data.json\",",
                    "10488": "\t\t *       \"type\": \"POST\"",
                    "10489": "\t\t *     }",
                    "10490": "\t\t *   } );",
                    "10491": "\t\t *",
                    "10492": "\t\t * @example",
                    "10493": "\t\t *   // Get the data from localStorage (could interface with a form for",
                    "10494": "\t\t *   // adding, editing and removing rows).",
                    "10495": "\t\t *   $('#example').dataTable( {",
                    "10496": "\t\t *     \"ajax\": function (data, callback, settings) {",
                    "10497": "\t\t *       callback(",
                    "10498": "\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )",
                    "10499": "\t\t *       );",
                    "10500": "\t\t *     }",
                    "10501": "\t\t *   } );",
                    "10516": "\t\t *  @type array",
                    "10517": "\t\t *  @default [ 10, 25, 50, 100 ]",
                    "10518": "\t\t *",
                    "10519": "\t\t *  @dtopt Option",
                    "10520": "\t\t *  @name DataTable.defaults.lengthMenu",
                    "10521": "\t\t *",
                    "10522": "\t\t *  @example",
                    "10523": "\t\t *    $(document).ready( function() {",
                    "10524": "\t\t *      $('#example').dataTable( {",
                    "10525": "\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]",
                    "10526": "\t\t *      } );",
                    "10527": "\t\t *    } );",
                    "10540": "\t\t *  @member",
                    "10541": "\t\t *",
                    "10542": "\t\t *  @name DataTable.defaults.column",
                    "10561": "\t\t *  @member",
                    "10562": "\t\t *",
                    "10563": "\t\t *  @name DataTable.defaults.columnDefs",
                    "10574": "\t\t *  @type array",
                    "10575": "\t\t *  @default []",
                    "10576": "\t\t *",
                    "10577": "\t\t *  @dtopt Option",
                    "10578": "\t\t *  @name DataTable.defaults.searchCols",
                    "10579": "\t\t *",
                    "10580": "\t\t *  @example",
                    "10581": "\t\t *    $(document).ready( function() {",
                    "10582": "\t\t *      $('#example').dataTable( {",
                    "10583": "\t\t *        \"searchCols\": [",
                    "10584": "\t\t *          null,",
                    "10585": "\t\t *          { \"search\": \"My filter\" },",
                    "10586": "\t\t *          null,",
                    "10587": "\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }",
                    "10588": "\t\t *        ]",
                    "10589": "\t\t *      } );",
                    "10590": "\t\t *    } )",
                    "10595": "\t\t/**",
                    "10596": "\t\t * An array of CSS classes that should be applied to displayed rows. This",
                    "10597": "\t\t * array may be of any length, and DataTables will apply each class",
                    "10598": "\t\t * sequentially, looping when required.",
                    "10599": "\t\t *  @type array",
                    "10600": "\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`",
                    "10601": "\t\t *    options</i>",
                    "10602": "\t\t *",
                    "10603": "\t\t *  @dtopt Option",
                    "10604": "\t\t *  @name DataTable.defaults.stripeClasses",
                    "10605": "\t\t *",
                    "10606": "\t\t *  @example",
                    "10607": "\t\t *    $(document).ready( function() {",
                    "10608": "\t\t *      $('#example').dataTable( {",
                    "10609": "\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]",
                    "10610": "\t\t *      } );",
                    "10611": "\t\t *    } )",
                    "10612": "\t\t */",
                    "10613": "\t\t\"asStripeClasses\": null,",
                    "10614": "",
                    "10615": "",
                    "10620": "\t\t *  @type boolean",
                    "10621": "\t\t *  @default true",
                    "10622": "\t\t *",
                    "10623": "\t\t *  @dtopt Features",
                    "10624": "\t\t *  @name DataTable.defaults.autoWidth",
                    "10625": "\t\t *",
                    "10626": "\t\t *  @example",
                    "10627": "\t\t *    $(document).ready( function () {",
                    "10628": "\t\t *      $('#example').dataTable( {",
                    "10629": "\t\t *        \"autoWidth\": false",
                    "10630": "\t\t *      } );",
                    "10631": "\t\t *    } );",
                    "10642": "\t\t *  @type boolean",
                    "10643": "\t\t *  @default false",
                    "10644": "\t\t *",
                    "10645": "\t\t *  @dtopt Features",
                    "10646": "\t\t *  @name DataTable.defaults.deferRender",
                    "10647": "\t\t *",
                    "10648": "\t\t *  @example",
                    "10649": "\t\t *    $(document).ready( function() {",
                    "10650": "\t\t *      $('#example').dataTable( {",
                    "10651": "\t\t *        \"ajax\": \"sources/arrays.txt\",",
                    "10652": "\t\t *        \"deferRender\": true",
                    "10653": "\t\t *      } );",
                    "10654": "\t\t *    } );",
                    "10656": "\t\t\"bDeferRender\": false,",
                    "10664": "\t\t *  @type boolean",
                    "10665": "\t\t *  @default false",
                    "10666": "\t\t *",
                    "10667": "\t\t *  @dtopt Options",
                    "10668": "\t\t *  @name DataTable.defaults.destroy",
                    "10669": "\t\t *",
                    "10670": "\t\t *  @example",
                    "10671": "\t\t *    $(document).ready( function() {",
                    "10672": "\t\t *      $('#example').dataTable( {",
                    "10673": "\t\t *        \"srollY\": \"200px\",",
                    "10674": "\t\t *        \"paginate\": false",
                    "10675": "\t\t *      } );",
                    "10676": "\t\t *",
                    "10677": "\t\t *      // Some time later....",
                    "10678": "\t\t *      $('#example').dataTable( {",
                    "10679": "\t\t *        \"filter\": false,",
                    "10680": "\t\t *        \"destroy\": true",
                    "10681": "\t\t *      } );",
                    "10682": "\t\t *    } );",
                    "10695": "\t\t *  @type boolean",
                    "10696": "\t\t *  @default true",
                    "10697": "\t\t *",
                    "10698": "\t\t *  @dtopt Features",
                    "10699": "\t\t *  @name DataTable.defaults.searching",
                    "10700": "\t\t *",
                    "10701": "\t\t *  @example",
                    "10702": "\t\t *    $(document).ready( function () {",
                    "10703": "\t\t *      $('#example').dataTable( {",
                    "10704": "\t\t *        \"searching\": false",
                    "10705": "\t\t *      } );",
                    "10706": "\t\t *    } );",
                    "10710": "",
                    "10712": "\t\t * Enable or disable the table information display. This shows information",
                    "10713": "\t\t * about the data that is currently visible on the page, including information",
                    "10714": "\t\t * about filtered data if that action is being performed.",
                    "10715": "\t\t *  @type boolean",
                    "10716": "\t\t *  @default true",
                    "10717": "\t\t *",
                    "10718": "\t\t *  @dtopt Features",
                    "10719": "\t\t *  @name DataTable.defaults.info",
                    "10720": "\t\t *",
                    "10721": "\t\t *  @example",
                    "10722": "\t\t *    $(document).ready( function () {",
                    "10723": "\t\t *      $('#example').dataTable( {",
                    "10724": "\t\t *        \"info\": false",
                    "10725": "\t\t *      } );",
                    "10726": "\t\t *    } );",
                    "10730": "",
                    "10732": "\t\t * Allows the end user to select the size of a formatted page from a select",
                    "10733": "\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).",
                    "10734": "\t\t *  @type boolean",
                    "10735": "\t\t *  @default true",
                    "10736": "\t\t *",
                    "10737": "\t\t *  @dtopt Features",
                    "10738": "\t\t *  @name DataTable.defaults.lengthChange",
                    "10739": "\t\t *",
                    "10740": "\t\t *  @example",
                    "10741": "\t\t *    $(document).ready( function () {",
                    "10742": "\t\t *      $('#example').dataTable( {",
                    "10743": "\t\t *        \"lengthChange\": false",
                    "10744": "\t\t *      } );",
                    "10745": "\t\t *    } );",
                    "10749": "",
                    "10752": "\t\t *  @type boolean",
                    "10753": "\t\t *  @default true",
                    "10754": "\t\t *",
                    "10755": "\t\t *  @dtopt Features",
                    "10756": "\t\t *  @name DataTable.defaults.paging",
                    "10757": "\t\t *",
                    "10758": "\t\t *  @example",
                    "10759": "\t\t *    $(document).ready( function () {",
                    "10760": "\t\t *      $('#example').dataTable( {",
                    "10761": "\t\t *        \"paging\": false",
                    "10762": "\t\t *      } );",
                    "10763": "\t\t *    } );",
                    "10773": "\t\t *  @type boolean",
                    "10774": "\t\t *  @default false",
                    "10775": "\t\t *",
                    "10776": "\t\t *  @dtopt Features",
                    "10777": "\t\t *  @name DataTable.defaults.processing",
                    "10778": "\t\t *",
                    "10779": "\t\t *  @example",
                    "10780": "\t\t *    $(document).ready( function () {",
                    "10781": "\t\t *      $('#example').dataTable( {",
                    "10782": "\t\t *        \"processing\": true",
                    "10783": "\t\t *      } );",
                    "10784": "\t\t *    } );",
                    "10797": "\t\t *  @type boolean",
                    "10798": "\t\t *  @default false",
                    "10799": "\t\t *",
                    "10800": "\t\t *  @dtopt Options",
                    "10801": "\t\t *  @name DataTable.defaults.retrieve",
                    "10802": "\t\t *",
                    "10803": "\t\t *  @example",
                    "10804": "\t\t *    $(document).ready( function() {",
                    "10805": "\t\t *      initTable();",
                    "10806": "\t\t *      tableActions();",
                    "10807": "\t\t *    } );",
                    "10808": "\t\t *",
                    "10809": "\t\t *    function initTable ()",
                    "10810": "\t\t *    {",
                    "10811": "\t\t *      return $('#example').dataTable( {",
                    "10812": "\t\t *        \"scrollY\": \"200px\",",
                    "10813": "\t\t *        \"paginate\": false,",
                    "10814": "\t\t *        \"retrieve\": true",
                    "10815": "\t\t *      } );",
                    "10816": "\t\t *    }",
                    "10817": "\t\t *",
                    "10818": "\t\t *    function tableActions ()",
                    "10819": "\t\t *    {",
                    "10820": "\t\t *      var table = initTable();",
                    "10821": "\t\t *      // perform API operations with oTable",
                    "10822": "\t\t *    }",
                    "10834": "\t\t *  @type boolean",
                    "10835": "\t\t *  @default false",
                    "10836": "\t\t *",
                    "10837": "\t\t *  @dtopt Options",
                    "10838": "\t\t *  @name DataTable.defaults.scrollCollapse",
                    "10839": "\t\t *",
                    "10840": "\t\t *  @example",
                    "10841": "\t\t *    $(document).ready( function() {",
                    "10842": "\t\t *      $('#example').dataTable( {",
                    "10843": "\t\t *        \"scrollY\": \"200\",",
                    "10844": "\t\t *        \"scrollCollapse\": true",
                    "10845": "\t\t *      } );",
                    "10846": "\t\t *    } );",
                    "10855": "\t\t *  @type boolean",
                    "10856": "\t\t *  @default false",
                    "10857": "\t\t *",
                    "10858": "\t\t *  @dtopt Features",
                    "10859": "\t\t *  @dtopt Server-side",
                    "10860": "\t\t *  @name DataTable.defaults.serverSide",
                    "10861": "\t\t *",
                    "10862": "\t\t *  @example",
                    "10863": "\t\t *    $(document).ready( function () {",
                    "10864": "\t\t *      $('#example').dataTable( {",
                    "10865": "\t\t *        \"serverSide\": true,",
                    "10866": "\t\t *        \"ajax\": \"xhr.php\"",
                    "10867": "\t\t *      } );",
                    "10868": "\t\t *    } );",
                    "10876": "\t\t *  @type boolean",
                    "10877": "\t\t *  @default true",
                    "10878": "\t\t *",
                    "10879": "\t\t *  @dtopt Features",
                    "10880": "\t\t *  @name DataTable.defaults.ordering",
                    "10881": "\t\t *",
                    "10882": "\t\t *  @example",
                    "10883": "\t\t *    $(document).ready( function () {",
                    "10884": "\t\t *      $('#example').dataTable( {",
                    "10885": "\t\t *        \"ordering\": false",
                    "10886": "\t\t *      } );",
                    "10887": "\t\t *    } );",
                    "10895": "\t\t *  @type boolean",
                    "10896": "\t\t *  @default true",
                    "10897": "\t\t *",
                    "10898": "\t\t *  @dtopt Options",
                    "10899": "\t\t *  @name DataTable.defaults.orderMulti",
                    "10900": "\t\t *",
                    "10901": "\t\t *  @example",
                    "10902": "\t\t *    // Disable multiple column sorting ability",
                    "10903": "\t\t *    $(document).ready( function () {",
                    "10904": "\t\t *      $('#example').dataTable( {",
                    "10905": "\t\t *        \"orderMulti\": false",
                    "10906": "\t\t *      } );",
                    "10907": "\t\t *    } );",
                    "10916": "\t\t *  @type boolean",
                    "10917": "\t\t *  @default false",
                    "10918": "\t\t *",
                    "10919": "\t\t *  @dtopt Options",
                    "10920": "\t\t *  @name DataTable.defaults.orderCellsTop",
                    "10921": "\t\t *",
                    "10922": "\t\t *  @example",
                    "10923": "\t\t *    $(document).ready( function() {",
                    "10924": "\t\t *      $('#example').dataTable( {",
                    "10925": "\t\t *        \"orderCellsTop\": true",
                    "10926": "\t\t *      } );",
                    "10927": "\t\t *    } );",
                    "10929": "\t\t\"bSortCellsTop\": false,",
                    "10938": "\t\t *  @type boolean",
                    "10939": "\t\t *  @default true",
                    "10940": "\t\t *",
                    "10941": "\t\t *  @dtopt Features",
                    "10942": "\t\t *  @name DataTable.defaults.orderClasses",
                    "10943": "\t\t *",
                    "10944": "\t\t *  @example",
                    "10945": "\t\t *    $(document).ready( function () {",
                    "10946": "\t\t *      $('#example').dataTable( {",
                    "10947": "\t\t *        \"orderClasses\": false",
                    "10948": "\t\t *      } );",
                    "10949": "\t\t *    } );",
                    "10959": "\t\t *",
                    "10960": "\t\t * Due to the use of `localStorage` the default state saving is not supported",
                    "10961": "\t\t * in IE6 or 7. If state saving is required in those browsers, use",
                    "10962": "\t\t * `stateSaveCallback` to provide a storage solution such as cookies.",
                    "10963": "\t\t *  @type boolean",
                    "10964": "\t\t *  @default false",
                    "10965": "\t\t *",
                    "10966": "\t\t *  @dtopt Features",
                    "10967": "\t\t *  @name DataTable.defaults.stateSave",
                    "10968": "\t\t *",
                    "10969": "\t\t *  @example",
                    "10970": "\t\t *    $(document).ready( function () {",
                    "10971": "\t\t *      $('#example').dataTable( {",
                    "10972": "\t\t *        \"stateSave\": true",
                    "10973": "\t\t *      } );",
                    "10974": "\t\t *    } );",
                    "10983": "\t\t *  @type function",
                    "10984": "\t\t *  @param {node} row \"TR\" element for the current row",
                    "10985": "\t\t *  @param {array} data Raw data array for this row",
                    "10986": "\t\t *  @param {int} dataIndex The index of this row in the internal aoData array",
                    "10987": "\t\t *",
                    "10988": "\t\t *  @dtopt Callbacks",
                    "10989": "\t\t *  @name DataTable.defaults.createdRow",
                    "10990": "\t\t *",
                    "10991": "\t\t *  @example",
                    "10992": "\t\t *    $(document).ready( function() {",
                    "10993": "\t\t *      $('#example').dataTable( {",
                    "10994": "\t\t *        \"createdRow\": function( row, data, dataIndex ) {",
                    "10995": "\t\t *          // Bold the grade for all 'A' grade browsers",
                    "10996": "\t\t *          if ( data[4] == \"A\" )",
                    "10997": "\t\t *          {",
                    "10998": "\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );",
                    "10999": "\t\t *          }",
                    "11000": "\t\t *        }",
                    "11001": "\t\t *      } );",
                    "11002": "\t\t *    } );",
                    "11010": "\t\t *  @type function",
                    "11011": "\t\t *  @param {object} settings DataTables settings object",
                    "11012": "\t\t *",
                    "11013": "\t\t *  @dtopt Callbacks",
                    "11014": "\t\t *  @name DataTable.defaults.drawCallback",
                    "11015": "\t\t *",
                    "11016": "\t\t *  @example",
                    "11017": "\t\t *    $(document).ready( function() {",
                    "11018": "\t\t *      $('#example').dataTable( {",
                    "11019": "\t\t *        \"drawCallback\": function( settings ) {",
                    "11020": "\t\t *          alert( 'DataTables has redrawn the table' );",
                    "11021": "\t\t *        }",
                    "11022": "\t\t *      } );",
                    "11023": "\t\t *    } );",
                    "11031": "\t\t *  @type function",
                    "11032": "\t\t *  @param {node} foot \"TR\" element for the footer",
                    "11033": "\t\t *  @param {array} data Full table data (as derived from the original HTML)",
                    "11034": "\t\t *  @param {int} start Index for the current display starting point in the",
                    "11035": "\t\t *    display array",
                    "11036": "\t\t *  @param {int} end Index for the current display ending point in the",
                    "11037": "\t\t *    display array",
                    "11038": "\t\t *  @param {array int} display Index array to translate the visual position",
                    "11039": "\t\t *    to the full data array",
                    "11040": "\t\t *",
                    "11041": "\t\t *  @dtopt Callbacks",
                    "11042": "\t\t *  @name DataTable.defaults.footerCallback",
                    "11043": "\t\t *",
                    "11044": "\t\t *  @example",
                    "11045": "\t\t *    $(document).ready( function() {",
                    "11046": "\t\t *      $('#example').dataTable( {",
                    "11047": "\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {",
                    "11048": "\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;",
                    "11049": "\t\t *        }",
                    "11050": "\t\t *      } );",
                    "11051": "\t\t *    } )",
                    "11062": "\t\t *  @type function",
                    "11063": "\t\t *  @member",
                    "11064": "\t\t *  @param {int} toFormat number to be formatted",
                    "11065": "\t\t *  @returns {string} formatted string for DataTables to show the number",
                    "11066": "\t\t *",
                    "11067": "\t\t *  @dtopt Callbacks",
                    "11068": "\t\t *  @name DataTable.defaults.formatNumber",
                    "11069": "\t\t *",
                    "11070": "\t\t *  @example",
                    "11071": "\t\t *    // Format a number using a single quote for the separator (note that",
                    "11072": "\t\t *    // this can also be done with the language.thousands option)",
                    "11073": "\t\t *    $(document).ready( function() {",
                    "11074": "\t\t *      $('#example').dataTable( {",
                    "11075": "\t\t *        \"formatNumber\": function ( toFormat ) {",
                    "11076": "\t\t *          return toFormat.toString().replace(",
                    "11077": "\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"",
                    "11078": "\t\t *          );",
                    "11079": "\t\t *        };",
                    "11080": "\t\t *      } );",
                    "11081": "\t\t *    } );",
                    "11095": "\t\t *  @type function",
                    "11096": "\t\t *  @param {node} head \"TR\" element for the header",
                    "11097": "\t\t *  @param {array} data Full table data (as derived from the original HTML)",
                    "11098": "\t\t *  @param {int} start Index for the current display starting point in the",
                    "11099": "\t\t *    display array",
                    "11100": "\t\t *  @param {int} end Index for the current display ending point in the",
                    "11101": "\t\t *    display array",
                    "11102": "\t\t *  @param {array int} display Index array to translate the visual position",
                    "11103": "\t\t *    to the full data array",
                    "11104": "\t\t *",
                    "11105": "\t\t *  @dtopt Callbacks",
                    "11106": "\t\t *  @name DataTable.defaults.headerCallback",
                    "11107": "\t\t *",
                    "11108": "\t\t *  @example",
                    "11109": "\t\t *    $(document).ready( function() {",
                    "11110": "\t\t *      $('#example').dataTable( {",
                    "11111": "\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {",
                    "11112": "\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";",
                    "11113": "\t\t *        }",
                    "11114": "\t\t *      } );",
                    "11115": "\t\t *    } )",
                    "11126": "\t\t *  @type function",
                    "11127": "\t\t *  @param {object} oSettings DataTables settings object",
                    "11128": "\t\t *  @param {int} start Starting position in data for the draw",
                    "11129": "\t\t *  @param {int} end End position in data for the draw",
                    "11130": "\t\t *  @param {int} max Total number of rows in the table (regardless of",
                    "11131": "\t\t *    filtering)",
                    "11132": "\t\t *  @param {int} total Total number of rows in the data set, after filtering",
                    "11133": "\t\t *  @param {string} pre The string that DataTables has formatted using it's",
                    "11134": "\t\t *    own rules",
                    "11135": "\t\t *  @returns {string} The string to be displayed in the information element.",
                    "11136": "\t\t *",
                    "11137": "\t\t *  @dtopt Callbacks",
                    "11138": "\t\t *  @name DataTable.defaults.infoCallback",
                    "11139": "\t\t *",
                    "11140": "\t\t *  @example",
                    "11141": "\t\t *    $('#example').dataTable( {",
                    "11142": "\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {",
                    "11143": "\t\t *        return start +\" to \"+ end;",
                    "11144": "\t\t *      }",
                    "11145": "\t\t *    } );",
                    "11155": "\t\t *  @type function",
                    "11156": "\t\t *  @param {object} settings DataTables settings object",
                    "11157": "\t\t *  @param {object} json The JSON object request from the server - only",
                    "11158": "\t\t *    present if client-side Ajax sourced data is used",
                    "11159": "\t\t *",
                    "11160": "\t\t *  @dtopt Callbacks",
                    "11161": "\t\t *  @name DataTable.defaults.initComplete",
                    "11162": "\t\t *",
                    "11163": "\t\t *  @example",
                    "11164": "\t\t *    $(document).ready( function() {",
                    "11165": "\t\t *      $('#example').dataTable( {",
                    "11166": "\t\t *        \"initComplete\": function(settings, json) {",
                    "11167": "\t\t *          alert( 'DataTables has finished its initialisation.' );",
                    "11168": "\t\t *        }",
                    "11169": "\t\t *      } );",
                    "11170": "\t\t *    } )",
                    "11179": "\t\t *  @type function",
                    "11180": "\t\t *  @param {object} settings DataTables settings object",
                    "11181": "\t\t *  @returns {boolean} False will cancel the draw, anything else (including no",
                    "11182": "\t\t *    return) will allow it to complete.",
                    "11183": "\t\t *",
                    "11184": "\t\t *  @dtopt Callbacks",
                    "11185": "\t\t *  @name DataTable.defaults.preDrawCallback",
                    "11186": "\t\t *",
                    "11187": "\t\t *  @example",
                    "11188": "\t\t *    $(document).ready( function() {",
                    "11189": "\t\t *      $('#example').dataTable( {",
                    "11190": "\t\t *        \"preDrawCallback\": function( settings ) {",
                    "11191": "\t\t *          if ( $('#test').val() == 1 ) {",
                    "11192": "\t\t *            return false;",
                    "11193": "\t\t *          }",
                    "11194": "\t\t *        }",
                    "11195": "\t\t *      } );",
                    "11196": "\t\t *    } );",
                    "11205": "\t\t *  @type function",
                    "11206": "\t\t *  @param {node} row \"TR\" element for the current row",
                    "11207": "\t\t *  @param {array} data Raw data array for this row",
                    "11208": "\t\t *  @param {int} displayIndex The display index for the current table draw",
                    "11209": "\t\t *  @param {int} displayIndexFull The index of the data in the full list of",
                    "11210": "\t\t *    rows (after filtering)",
                    "11211": "\t\t *",
                    "11212": "\t\t *  @dtopt Callbacks",
                    "11213": "\t\t *  @name DataTable.defaults.rowCallback",
                    "11214": "\t\t *",
                    "11215": "\t\t *  @example",
                    "11216": "\t\t *    $(document).ready( function() {",
                    "11217": "\t\t *      $('#example').dataTable( {",
                    "11218": "\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {",
                    "11219": "\t\t *          // Bold the grade for all 'A' grade browsers",
                    "11220": "\t\t *          if ( data[4] == \"A\" ) {",
                    "11221": "\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );",
                    "11222": "\t\t *          }",
                    "11223": "\t\t *        }",
                    "11224": "\t\t *      } );",
                    "11225": "\t\t *    } );",
                    "11230": "\t\t/**",
                    "11231": "\t\t * __Deprecated__ The functionality provided by this parameter has now been",
                    "11232": "\t\t * superseded by that provided through `ajax`, which should be used instead.",
                    "11233": "\t\t *",
                    "11234": "\t\t * This parameter allows you to override the default function which obtains",
                    "11235": "\t\t * the data from the server so something more suitable for your application.",
                    "11236": "\t\t * For example you could use POST data, or pull information from a Gears or",
                    "11237": "\t\t * AIR database.",
                    "11238": "\t\t *  @type function",
                    "11239": "\t\t *  @member",
                    "11240": "\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)",
                    "11241": "\t\t *  @param {array} data A key/value pair object containing the data to send",
                    "11242": "\t\t *    to the server",
                    "11243": "\t\t *  @param {function} callback to be called on completion of the data get",
                    "11244": "\t\t *    process that will draw the data on the page.",
                    "11245": "\t\t *  @param {object} settings DataTables settings object",
                    "11246": "\t\t *",
                    "11247": "\t\t *  @dtopt Callbacks",
                    "11248": "\t\t *  @dtopt Server-side",
                    "11249": "\t\t *  @name DataTable.defaults.serverData",
                    "11250": "\t\t *",
                    "11251": "\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.",
                    "11252": "\t\t */",
                    "11253": "\t\t\"fnServerData\": null,",
                    "11254": "",
                    "11255": "",
                    "11256": "\t\t/**",
                    "11257": "\t\t * __Deprecated__ The functionality provided by this parameter has now been",
                    "11258": "\t\t * superseded by that provided through `ajax`, which should be used instead.",
                    "11259": "\t\t *",
                    "11260": "\t\t *  It is often useful to send extra data to the server when making an Ajax",
                    "11261": "\t\t * request - for example custom filtering information, and this callback",
                    "11262": "\t\t * function makes it trivial to send extra information to the server. The",
                    "11263": "\t\t * passed in parameter is the data set that has been constructed by",
                    "11264": "\t\t * DataTables, and you can add to this or modify it as you require.",
                    "11265": "\t\t *  @type function",
                    "11266": "\t\t *  @param {array} data Data array (array of objects which are name/value",
                    "11267": "\t\t *    pairs) that has been constructed by DataTables and will be sent to the",
                    "11268": "\t\t *    server. In the case of Ajax sourced data with server-side processing",
                    "11269": "\t\t *    this will be an empty array, for server-side processing there will be a",
                    "11270": "\t\t *    significant number of parameters!",
                    "11271": "\t\t *  @returns {undefined} Ensure that you modify the data array passed in,",
                    "11272": "\t\t *    as this is passed by reference.",
                    "11273": "\t\t *",
                    "11274": "\t\t *  @dtopt Callbacks",
                    "11275": "\t\t *  @dtopt Server-side",
                    "11276": "\t\t *  @name DataTable.defaults.serverParams",
                    "11277": "\t\t *",
                    "11278": "\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.",
                    "11279": "\t\t */",
                    "11280": "\t\t\"fnServerParams\": null,",
                    "11281": "",
                    "11282": "",
                    "11287": "\t\t *  @type function",
                    "11288": "\t\t *  @member",
                    "11289": "\t\t *  @param {object} settings DataTables settings object",
                    "11290": "\t\t *  @param {object} callback Callback that can be executed when done. It",
                    "11291": "\t\t *    should be passed the loaded state object.",
                    "11292": "\t\t *  @return {object} The DataTables state object to be loaded",
                    "11293": "\t\t *",
                    "11294": "\t\t *  @dtopt Callbacks",
                    "11295": "\t\t *  @name DataTable.defaults.stateLoadCallback",
                    "11296": "\t\t *",
                    "11297": "\t\t *  @example",
                    "11298": "\t\t *    $(document).ready( function() {",
                    "11299": "\t\t *      $('#example').dataTable( {",
                    "11300": "\t\t *        \"stateSave\": true,",
                    "11301": "\t\t *        \"stateLoadCallback\": function (settings, callback) {",
                    "11302": "\t\t *          $.ajax( {",
                    "11303": "\t\t *            \"url\": \"/state_load\",",
                    "11304": "\t\t *            \"dataType\": \"json\",",
                    "11305": "\t\t *            \"success\": function (json) {",
                    "11306": "\t\t *              callback( json );",
                    "11307": "\t\t *            }",
                    "11308": "\t\t *          } );",
                    "11309": "\t\t *        }",
                    "11310": "\t\t *      } );",
                    "11311": "\t\t *    } );",
                    "11326": "\t\t/**",
                    "11327": "\t\t * Callback which allows modification of the saved state prior to loading that state.",
                    "11328": "\t\t * This callback is called when the table is loading state from the stored data, but",
                    "11329": "\t\t * prior to the settings object being modified by the saved state. Note that for",
                    "11330": "\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for",
                    "11331": "\t\t * a plug-in.",
                    "11332": "\t\t *  @type function",
                    "11333": "\t\t *  @param {object} settings DataTables settings object",
                    "11334": "\t\t *  @param {object} data The state object that is to be loaded",
                    "11335": "\t\t *",
                    "11336": "\t\t *  @dtopt Callbacks",
                    "11337": "\t\t *  @name DataTable.defaults.stateLoadParams",
                    "11338": "\t\t *",
                    "11339": "\t\t *  @example",
                    "11340": "\t\t *    // Remove a saved filter, so filtering is never loaded",
                    "11341": "\t\t *    $(document).ready( function() {",
                    "11342": "\t\t *      $('#example').dataTable( {",
                    "11343": "\t\t *        \"stateSave\": true,",
                    "11344": "\t\t *        \"stateLoadParams\": function (settings, data) {",
                    "11345": "\t\t *          data.oSearch.sSearch = \"\";",
                    "11346": "\t\t *        }",
                    "11347": "\t\t *      } );",
                    "11348": "\t\t *    } );",
                    "11349": "\t\t *",
                    "11350": "\t\t *  @example",
                    "11351": "\t\t *    // Disallow state loading by returning false",
                    "11352": "\t\t *    $(document).ready( function() {",
                    "11353": "\t\t *      $('#example').dataTable( {",
                    "11354": "\t\t *        \"stateSave\": true,",
                    "11355": "\t\t *        \"stateLoadParams\": function (settings, data) {",
                    "11356": "\t\t *          return false;",
                    "11357": "\t\t *        }",
                    "11358": "\t\t *      } );",
                    "11359": "\t\t *    } );",
                    "11367": "\t\t *  @type function",
                    "11368": "\t\t *  @param {object} settings DataTables settings object",
                    "11369": "\t\t *  @param {object} data The state object that was loaded",
                    "11370": "\t\t *",
                    "11371": "\t\t *  @dtopt Callbacks",
                    "11372": "\t\t *  @name DataTable.defaults.stateLoaded",
                    "11373": "\t\t *",
                    "11374": "\t\t *  @example",
                    "11375": "\t\t *    // Show an alert with the filtering value that was saved",
                    "11376": "\t\t *    $(document).ready( function() {",
                    "11377": "\t\t *      $('#example').dataTable( {",
                    "11378": "\t\t *        \"stateSave\": true,",
                    "11379": "\t\t *        \"stateLoaded\": function (settings, data) {",
                    "11380": "\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );",
                    "11381": "\t\t *        }",
                    "11382": "\t\t *      } );",
                    "11383": "\t\t *    } );",
                    "11392": "\t\t *  @type function",
                    "11393": "\t\t *  @member",
                    "11394": "\t\t *  @param {object} settings DataTables settings object",
                    "11395": "\t\t *  @param {object} data The state object to be saved",
                    "11396": "\t\t *",
                    "11397": "\t\t *  @dtopt Callbacks",
                    "11398": "\t\t *  @name DataTable.defaults.stateSaveCallback",
                    "11399": "\t\t *",
                    "11400": "\t\t *  @example",
                    "11401": "\t\t *    $(document).ready( function() {",
                    "11402": "\t\t *      $('#example').dataTable( {",
                    "11403": "\t\t *        \"stateSave\": true,",
                    "11404": "\t\t *        \"stateSaveCallback\": function (settings, data) {",
                    "11405": "\t\t *          // Send an Ajax request to the server with the state object",
                    "11406": "\t\t *          $.ajax( {",
                    "11407": "\t\t *            \"url\": \"/state_save\",",
                    "11408": "\t\t *            \"data\": data,",
                    "11409": "\t\t *            \"dataType\": \"json\",",
                    "11410": "\t\t *            \"method\": \"POST\"",
                    "11411": "\t\t *            \"success\": function () {}",
                    "11412": "\t\t *          } );",
                    "11413": "\t\t *        }",
                    "11414": "\t\t *      } );",
                    "11415": "\t\t *    } );",
                    "11423": "\t\t\t} catch (e) {}",
                    "11433": "\t\t *  @type function",
                    "11434": "\t\t *  @param {object} settings DataTables settings object",
                    "11435": "\t\t *  @param {object} data The state object to be saved",
                    "11436": "\t\t *",
                    "11437": "\t\t *  @dtopt Callbacks",
                    "11438": "\t\t *  @name DataTable.defaults.stateSaveParams",
                    "11439": "\t\t *",
                    "11440": "\t\t *  @example",
                    "11441": "\t\t *    // Remove a saved filter, so filtering is never saved",
                    "11442": "\t\t *    $(document).ready( function() {",
                    "11443": "\t\t *      $('#example').dataTable( {",
                    "11444": "\t\t *        \"stateSave\": true,",
                    "11445": "\t\t *        \"stateSaveParams\": function (settings, data) {",
                    "11446": "\t\t *          data.oSearch.sSearch = \"\";",
                    "11447": "\t\t *        }",
                    "11448": "\t\t *      } );",
                    "11449": "\t\t *    } );",
                    "11458": "\t\t *  @type int",
                    "11459": "\t\t *  @default 7200 <i>(2 hours)</i>",
                    "11460": "\t\t *",
                    "11461": "\t\t *  @dtopt Options",
                    "11462": "\t\t *  @name DataTable.defaults.stateDuration",
                    "11463": "\t\t *",
                    "11464": "\t\t *  @example",
                    "11465": "\t\t *    $(document).ready( function() {",
                    "11466": "\t\t *      $('#example').dataTable( {",
                    "11467": "\t\t *        \"stateDuration\": 60*60*24; // 1 day",
                    "11468": "\t\t *      } );",
                    "11469": "\t\t *    } )",
                    "11474": "\t\t/**",
                    "11475": "\t\t * When enabled DataTables will not make a request to the server for the first",
                    "11476": "\t\t * page draw - rather it will use the data already on the page (no sorting etc",
                    "11477": "\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`",
                    "11478": "\t\t * is used to indicate that deferred loading is required, but it is also used",
                    "11479": "\t\t * to tell DataTables how many records there are in the full table (allowing",
                    "11480": "\t\t * the information element and pagination to be displayed correctly). In the case",
                    "11481": "\t\t * where a filtering is applied to the table on initial load, this can be",
                    "11482": "\t\t * indicated by giving the parameter as an array, where the first element is",
                    "11483": "\t\t * the number of records available after filtering and the second element is the",
                    "11484": "\t\t * number of records without filtering (allowing the table information element",
                    "11485": "\t\t * to be shown correctly).",
                    "11486": "\t\t *  @type int | array",
                    "11487": "\t\t *  @default null",
                    "11488": "\t\t *",
                    "11489": "\t\t *  @dtopt Options",
                    "11490": "\t\t *  @name DataTable.defaults.deferLoading",
                    "11491": "\t\t *",
                    "11492": "\t\t *  @example",
                    "11493": "\t\t *    // 57 records available in the table, no filtering applied",
                    "11494": "\t\t *    $(document).ready( function() {",
                    "11495": "\t\t *      $('#example').dataTable( {",
                    "11496": "\t\t *        \"serverSide\": true,",
                    "11497": "\t\t *        \"ajax\": \"scripts/server_processing.php\",",
                    "11498": "\t\t *        \"deferLoading\": 57",
                    "11499": "\t\t *      } );",
                    "11500": "\t\t *    } );",
                    "11501": "\t\t *",
                    "11502": "\t\t *  @example",
                    "11503": "\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)",
                    "11504": "\t\t *    $(document).ready( function() {",
                    "11505": "\t\t *      $('#example').dataTable( {",
                    "11506": "\t\t *        \"serverSide\": true,",
                    "11507": "\t\t *        \"ajax\": \"scripts/server_processing.php\",",
                    "11508": "\t\t *        \"deferLoading\": [ 57, 100 ],",
                    "11509": "\t\t *        \"search\": {",
                    "11510": "\t\t *          \"search\": \"my_filter\"",
                    "11511": "\t\t *        }",
                    "11512": "\t\t *      } );",
                    "11513": "\t\t *    } );",
                    "11514": "\t\t */",
                    "11515": "\t\t\"iDeferLoading\": null,",
                    "11516": "",
                    "11517": "",
                    "11522": "\t\t *  @type int",
                    "11523": "\t\t *  @default 10",
                    "11524": "\t\t *",
                    "11525": "\t\t *  @dtopt Options",
                    "11526": "\t\t *  @name DataTable.defaults.pageLength",
                    "11527": "\t\t *",
                    "11528": "\t\t *  @example",
                    "11529": "\t\t *    $(document).ready( function() {",
                    "11530": "\t\t *      $('#example').dataTable( {",
                    "11531": "\t\t *        \"pageLength\": 50",
                    "11532": "\t\t *      } );",
                    "11533": "\t\t *    } )",
                    "11543": "\t\t *  @type int",
                    "11544": "\t\t *  @default 0",
                    "11545": "\t\t *",
                    "11546": "\t\t *  @dtopt Options",
                    "11547": "\t\t *  @name DataTable.defaults.displayStart",
                    "11548": "\t\t *",
                    "11549": "\t\t *  @example",
                    "11550": "\t\t *    $(document).ready( function() {",
                    "11551": "\t\t *      $('#example').dataTable( {",
                    "11552": "\t\t *        \"displayStart\": 20",
                    "11553": "\t\t *      } );",
                    "11554": "\t\t *    } )",
                    "11566": "\t\t *  @type int",
                    "11567": "\t\t *  @default 0",
                    "11568": "\t\t *",
                    "11569": "\t\t *  @dtopt Options",
                    "11570": "\t\t *  @name DataTable.defaults.tabIndex",
                    "11571": "\t\t *",
                    "11572": "\t\t *  @example",
                    "11573": "\t\t *    $(document).ready( function() {",
                    "11574": "\t\t *      $('#example').dataTable( {",
                    "11575": "\t\t *        \"tabIndex\": 1",
                    "11576": "\t\t *      } );",
                    "11577": "\t\t *    } );",
                    "11587": "\t\t *  @namespace",
                    "11588": "\t\t *  @name DataTable.defaults.classes",
                    "11597": "\t\t *  @namespace",
                    "11598": "\t\t *  @name DataTable.defaults.language",
                    "11605": "\t\t\t *  @namespace",
                    "11606": "\t\t\t *  @name DataTable.defaults.language.aria",
                    "11610": "\t\t\t\t * ARIA label that is added to the table headers when the column may be",
                    "11611": "\t\t\t\t * sorted ascending by activing the column (click or return when focused).",
                    "11612": "\t\t\t\t * Note that the column header is prefixed to this string.",
                    "11613": "\t\t\t\t *  @type string",
                    "11614": "\t\t\t\t *  @default : activate to sort column ascending",
                    "11615": "\t\t\t\t *",
                    "11616": "\t\t\t\t *  @dtopt Language",
                    "11617": "\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending",
                    "11618": "\t\t\t\t *",
                    "11619": "\t\t\t\t *  @example",
                    "11620": "\t\t\t\t *    $(document).ready( function() {",
                    "11621": "\t\t\t\t *      $('#example').dataTable( {",
                    "11622": "\t\t\t\t *        \"language\": {",
                    "11623": "\t\t\t\t *          \"aria\": {",
                    "11624": "\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"",
                    "11625": "\t\t\t\t *          }",
                    "11626": "\t\t\t\t *        }",
                    "11627": "\t\t\t\t *      } );",
                    "11628": "\t\t\t\t *    } );",
                    "11630": "\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",",
                    "11633": "\t\t\t\t * ARIA label that is added to the table headers when the column may be",
                    "11634": "\t\t\t\t * sorted descending by activing the column (click or return when focused).",
                    "11635": "\t\t\t\t * Note that the column header is prefixed to this string.",
                    "11636": "\t\t\t\t *  @type string",
                    "11637": "\t\t\t\t *  @default : activate to sort column ascending",
                    "11638": "\t\t\t\t *",
                    "11639": "\t\t\t\t *  @dtopt Language",
                    "11640": "\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending",
                    "11641": "\t\t\t\t *",
                    "11642": "\t\t\t\t *  @example",
                    "11643": "\t\t\t\t *    $(document).ready( function() {",
                    "11644": "\t\t\t\t *      $('#example').dataTable( {",
                    "11645": "\t\t\t\t *        \"language\": {",
                    "11646": "\t\t\t\t *          \"aria\": {",
                    "11647": "\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"",
                    "11648": "\t\t\t\t *          }",
                    "11649": "\t\t\t\t *        }",
                    "11650": "\t\t\t\t *      } );",
                    "11651": "\t\t\t\t *    } );",
                    "11653": "\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"",
                    "11659": "\t\t\t *  @namespace",
                    "11660": "\t\t\t *  @name DataTable.defaults.language.paginate",
                    "11664": "\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the",
                    "11665": "\t\t\t\t * button to take the user to the first page.",
                    "11666": "\t\t\t\t *  @type string",
                    "11667": "\t\t\t\t *  @default First",
                    "11668": "\t\t\t\t *",
                    "11669": "\t\t\t\t *  @dtopt Language",
                    "11670": "\t\t\t\t *  @name DataTable.defaults.language.paginate.first",
                    "11671": "\t\t\t\t *",
                    "11672": "\t\t\t\t *  @example",
                    "11673": "\t\t\t\t *    $(document).ready( function() {",
                    "11674": "\t\t\t\t *      $('#example').dataTable( {",
                    "11675": "\t\t\t\t *        \"language\": {",
                    "11676": "\t\t\t\t *          \"paginate\": {",
                    "11677": "\t\t\t\t *            \"first\": \"First page\"",
                    "11678": "\t\t\t\t *          }",
                    "11679": "\t\t\t\t *        }",
                    "11680": "\t\t\t\t *      } );",
                    "11681": "\t\t\t\t *    } );",
                    "11683": "\t\t\t\t\"sFirst\": \"First\",",
                    "11684": "",
                    "11687": "\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the",
                    "11688": "\t\t\t\t * button to take the user to the last page.",
                    "11689": "\t\t\t\t *  @type string",
                    "11690": "\t\t\t\t *  @default Last",
                    "11691": "\t\t\t\t *",
                    "11692": "\t\t\t\t *  @dtopt Language",
                    "11693": "\t\t\t\t *  @name DataTable.defaults.language.paginate.last",
                    "11694": "\t\t\t\t *",
                    "11695": "\t\t\t\t *  @example",
                    "11696": "\t\t\t\t *    $(document).ready( function() {",
                    "11697": "\t\t\t\t *      $('#example').dataTable( {",
                    "11698": "\t\t\t\t *        \"language\": {",
                    "11699": "\t\t\t\t *          \"paginate\": {",
                    "11700": "\t\t\t\t *            \"last\": \"Last page\"",
                    "11701": "\t\t\t\t *          }",
                    "11702": "\t\t\t\t *        }",
                    "11703": "\t\t\t\t *      } );",
                    "11704": "\t\t\t\t *    } );",
                    "11706": "\t\t\t\t\"sLast\": \"Last\",",
                    "11707": "",
                    "11710": "\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the",
                    "11711": "\t\t\t\t * next page).",
                    "11712": "\t\t\t\t *  @type string",
                    "11713": "\t\t\t\t *  @default Next",
                    "11714": "\t\t\t\t *",
                    "11715": "\t\t\t\t *  @dtopt Language",
                    "11716": "\t\t\t\t *  @name DataTable.defaults.language.paginate.next",
                    "11717": "\t\t\t\t *",
                    "11718": "\t\t\t\t *  @example",
                    "11719": "\t\t\t\t *    $(document).ready( function() {",
                    "11720": "\t\t\t\t *      $('#example').dataTable( {",
                    "11721": "\t\t\t\t *        \"language\": {",
                    "11722": "\t\t\t\t *          \"paginate\": {",
                    "11723": "\t\t\t\t *            \"next\": \"Next page\"",
                    "11724": "\t\t\t\t *          }",
                    "11725": "\t\t\t\t *        }",
                    "11726": "\t\t\t\t *      } );",
                    "11727": "\t\t\t\t *    } );",
                    "11729": "\t\t\t\t\"sNext\": \"Next\",",
                    "11730": "",
                    "11733": "\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to",
                    "11734": "\t\t\t\t * the previous page).",
                    "11735": "\t\t\t\t *  @type string",
                    "11736": "\t\t\t\t *  @default Previous",
                    "11737": "\t\t\t\t *",
                    "11738": "\t\t\t\t *  @dtopt Language",
                    "11739": "\t\t\t\t *  @name DataTable.defaults.language.paginate.previous",
                    "11740": "\t\t\t\t *",
                    "11741": "\t\t\t\t *  @example",
                    "11742": "\t\t\t\t *    $(document).ready( function() {",
                    "11743": "\t\t\t\t *      $('#example').dataTable( {",
                    "11744": "\t\t\t\t *        \"language\": {",
                    "11745": "\t\t\t\t *          \"paginate\": {",
                    "11746": "\t\t\t\t *            \"previous\": \"Previous page\"",
                    "11747": "\t\t\t\t *          }",
                    "11748": "\t\t\t\t *        }",
                    "11749": "\t\t\t\t *      } );",
                    "11750": "\t\t\t\t *    } );",
                    "11752": "\t\t\t\t\"sPrevious\": \"Previous\"",
                    "11760": "\t\t\t *  @type string",
                    "11761": "\t\t\t *  @default No data available in table",
                    "11762": "\t\t\t *",
                    "11763": "\t\t\t *  @dtopt Language",
                    "11764": "\t\t\t *  @name DataTable.defaults.language.emptyTable",
                    "11765": "\t\t\t *",
                    "11766": "\t\t\t *  @example",
                    "11767": "\t\t\t *    $(document).ready( function() {",
                    "11768": "\t\t\t *      $('#example').dataTable( {",
                    "11769": "\t\t\t *        \"language\": {",
                    "11770": "\t\t\t *          \"emptyTable\": \"No data available in table\"",
                    "11771": "\t\t\t *        }",
                    "11772": "\t\t\t *      } );",
                    "11773": "\t\t\t *    } );",
                    "11791": "\t\t\t *",
                    "11792": "\t\t\t *  @type string",
                    "11793": "\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries",
                    "11794": "\t\t\t *",
                    "11795": "\t\t\t *  @dtopt Language",
                    "11796": "\t\t\t *  @name DataTable.defaults.language.info",
                    "11797": "\t\t\t *",
                    "11798": "\t\t\t *  @example",
                    "11799": "\t\t\t *    $(document).ready( function() {",
                    "11800": "\t\t\t *      $('#example').dataTable( {",
                    "11801": "\t\t\t *        \"language\": {",
                    "11802": "\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"",
                    "11803": "\t\t\t *        }",
                    "11804": "\t\t\t *      } );",
                    "11805": "\t\t\t *    } );",
                    "11807": "\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",",
                    "11813": "\t\t\t *  @type string",
                    "11814": "\t\t\t *  @default Showing 0 to 0 of 0 entries",
                    "11815": "\t\t\t *",
                    "11816": "\t\t\t *  @dtopt Language",
                    "11817": "\t\t\t *  @name DataTable.defaults.language.infoEmpty",
                    "11818": "\t\t\t *",
                    "11819": "\t\t\t *  @example",
                    "11820": "\t\t\t *    $(document).ready( function() {",
                    "11821": "\t\t\t *      $('#example').dataTable( {",
                    "11822": "\t\t\t *        \"language\": {",
                    "11823": "\t\t\t *          \"infoEmpty\": \"No entries to show\"",
                    "11824": "\t\t\t *        }",
                    "11825": "\t\t\t *      } );",
                    "11826": "\t\t\t *    } );",
                    "11828": "\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",",
                    "11835": "\t\t\t *  @type string",
                    "11836": "\t\t\t *  @default (filtered from _MAX_ total entries)",
                    "11837": "\t\t\t *",
                    "11838": "\t\t\t *  @dtopt Language",
                    "11839": "\t\t\t *  @name DataTable.defaults.language.infoFiltered",
                    "11840": "\t\t\t *",
                    "11841": "\t\t\t *  @example",
                    "11842": "\t\t\t *    $(document).ready( function() {",
                    "11843": "\t\t\t *      $('#example').dataTable( {",
                    "11844": "\t\t\t *        \"language\": {",
                    "11845": "\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"",
                    "11846": "\t\t\t *        }",
                    "11847": "\t\t\t *      } );",
                    "11848": "\t\t\t *    } );",
                    "11850": "\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",",
                    "11858": "\t\t\t *  @type string",
                    "11859": "\t\t\t *  @default <i>Empty string</i>",
                    "11860": "\t\t\t *",
                    "11861": "\t\t\t *  @dtopt Language",
                    "11862": "\t\t\t *  @name DataTable.defaults.language.infoPostFix",
                    "11863": "\t\t\t *",
                    "11864": "\t\t\t *  @example",
                    "11865": "\t\t\t *    $(document).ready( function() {",
                    "11866": "\t\t\t *      $('#example').dataTable( {",
                    "11867": "\t\t\t *        \"language\": {",
                    "11868": "\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"",
                    "11869": "\t\t\t *        }",
                    "11870": "\t\t\t *      } );",
                    "11871": "\t\t\t *    } );",
                    "11888": "\t\t\t *  @type string",
                    "11889": "\t\t\t *  @default",
                    "11890": "\t\t\t *",
                    "11891": "\t\t\t *  @dtopt Language",
                    "11892": "\t\t\t *  @name DataTable.defaults.language.decimal",
                    "11893": "\t\t\t *",
                    "11894": "\t\t\t *  @example",
                    "11895": "\t\t\t *    $(document).ready( function() {",
                    "11896": "\t\t\t *      $('#example').dataTable( {",
                    "11897": "\t\t\t *        \"language\": {",
                    "11898": "\t\t\t *          \"decimal\": \",\"",
                    "11899": "\t\t\t *          \"thousands\": \".\"",
                    "11900": "\t\t\t *        }",
                    "11901": "\t\t\t *      } );",
                    "11902": "\t\t\t *    } );",
                    "11912": "\t\t\t *  @type string",
                    "11913": "\t\t\t *  @default ,",
                    "11914": "\t\t\t *",
                    "11915": "\t\t\t *  @dtopt Language",
                    "11916": "\t\t\t *  @name DataTable.defaults.language.thousands",
                    "11917": "\t\t\t *",
                    "11918": "\t\t\t *  @example",
                    "11919": "\t\t\t *    $(document).ready( function() {",
                    "11920": "\t\t\t *      $('#example').dataTable( {",
                    "11921": "\t\t\t *        \"language\": {",
                    "11922": "\t\t\t *          \"thousands\": \"'\"",
                    "11923": "\t\t\t *        }",
                    "11924": "\t\t\t *      } );",
                    "11925": "\t\t\t *    } );",
                    "11935": "\t\t\t *  @type string",
                    "11936": "\t\t\t *  @default Show _MENU_ entries",
                    "11937": "\t\t\t *",
                    "11938": "\t\t\t *  @dtopt Language",
                    "11939": "\t\t\t *  @name DataTable.defaults.language.lengthMenu",
                    "11940": "\t\t\t *",
                    "11941": "\t\t\t *  @example",
                    "11942": "\t\t\t *    // Language change only",
                    "11943": "\t\t\t *    $(document).ready( function() {",
                    "11944": "\t\t\t *      $('#example').dataTable( {",
                    "11945": "\t\t\t *        \"language\": {",
                    "11946": "\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"",
                    "11947": "\t\t\t *        }",
                    "11948": "\t\t\t *      } );",
                    "11949": "\t\t\t *    } );",
                    "11950": "\t\t\t *",
                    "11951": "\t\t\t *  @example",
                    "11952": "\t\t\t *    // Language and options change",
                    "11953": "\t\t\t *    $(document).ready( function() {",
                    "11954": "\t\t\t *      $('#example').dataTable( {",
                    "11955": "\t\t\t *        \"language\": {",
                    "11956": "\t\t\t *          \"lengthMenu\": 'Display <select>'+",
                    "11957": "\t\t\t *            '<option value=\"10\">10</option>'+",
                    "11958": "\t\t\t *            '<option value=\"20\">20</option>'+",
                    "11959": "\t\t\t *            '<option value=\"30\">30</option>'+",
                    "11960": "\t\t\t *            '<option value=\"40\">40</option>'+",
                    "11961": "\t\t\t *            '<option value=\"50\">50</option>'+",
                    "11962": "\t\t\t *            '<option value=\"-1\">All</option>'+",
                    "11963": "\t\t\t *            '</select> records'",
                    "11964": "\t\t\t *        }",
                    "11965": "\t\t\t *      } );",
                    "11966": "\t\t\t *    } );",
                    "11968": "\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",",
                    "11977": "\t\t\t *  @type string",
                    "11978": "\t\t\t *  @default Loading...",
                    "11979": "\t\t\t *",
                    "11980": "\t\t\t *  @dtopt Language",
                    "11981": "\t\t\t *  @name DataTable.defaults.language.loadingRecords",
                    "11982": "\t\t\t *",
                    "11983": "\t\t\t *  @example",
                    "11984": "\t\t\t *    $(document).ready( function() {",
                    "11985": "\t\t\t *      $('#example').dataTable( {",
                    "11986": "\t\t\t *        \"language\": {",
                    "11987": "\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"",
                    "11988": "\t\t\t *        }",
                    "11989": "\t\t\t *      } );",
                    "11990": "\t\t\t *    } );",
                    "11998": "\t\t\t *  @type string",
                    "11999": "\t\t\t *",
                    "12000": "\t\t\t *  @dtopt Language",
                    "12001": "\t\t\t *  @name DataTable.defaults.language.processing",
                    "12002": "\t\t\t *",
                    "12003": "\t\t\t *  @example",
                    "12004": "\t\t\t *    $(document).ready( function() {",
                    "12005": "\t\t\t *      $('#example').dataTable( {",
                    "12006": "\t\t\t *        \"language\": {",
                    "12007": "\t\t\t *          \"processing\": \"DataTables is currently busy\"",
                    "12008": "\t\t\t *        }",
                    "12009": "\t\t\t *      } );",
                    "12010": "\t\t\t *    } );",
                    "12021": "\t\t\t *  @type string",
                    "12022": "\t\t\t *  @default Search:",
                    "12023": "\t\t\t *",
                    "12024": "\t\t\t *  @dtopt Language",
                    "12025": "\t\t\t *  @name DataTable.defaults.language.search",
                    "12026": "\t\t\t *",
                    "12027": "\t\t\t *  @example",
                    "12028": "\t\t\t *    // Input text box will be appended at the end automatically",
                    "12029": "\t\t\t *    $(document).ready( function() {",
                    "12030": "\t\t\t *      $('#example').dataTable( {",
                    "12031": "\t\t\t *        \"language\": {",
                    "12032": "\t\t\t *          \"search\": \"Filter records:\"",
                    "12033": "\t\t\t *        }",
                    "12034": "\t\t\t *      } );",
                    "12035": "\t\t\t *    } );",
                    "12036": "\t\t\t *",
                    "12037": "\t\t\t *  @example",
                    "12038": "\t\t\t *    // Specify where the filter should appear",
                    "12039": "\t\t\t *    $(document).ready( function() {",
                    "12040": "\t\t\t *      $('#example').dataTable( {",
                    "12041": "\t\t\t *        \"language\": {",
                    "12042": "\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"",
                    "12043": "\t\t\t *        }",
                    "12044": "\t\t\t *      } );",
                    "12045": "\t\t\t *    } );",
                    "12068": "\t\t\t *  @type string",
                    "12069": "\t\t\t *  @default <i>Empty string - i.e. disabled</i>",
                    "12070": "\t\t\t *",
                    "12071": "\t\t\t *  @dtopt Language",
                    "12072": "\t\t\t *  @name DataTable.defaults.language.url",
                    "12073": "\t\t\t *",
                    "12074": "\t\t\t *  @example",
                    "12075": "\t\t\t *    $(document).ready( function() {",
                    "12076": "\t\t\t *      $('#example').dataTable( {",
                    "12077": "\t\t\t *        \"language\": {",
                    "12078": "\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"",
                    "12079": "\t\t\t *        }",
                    "12080": "\t\t\t *      } );",
                    "12081": "\t\t\t *    } );",
                    "12090": "\t\t\t *  @type string",
                    "12091": "\t\t\t *  @default No matching records found",
                    "12092": "\t\t\t *",
                    "12093": "\t\t\t *  @dtopt Language",
                    "12094": "\t\t\t *  @name DataTable.defaults.language.zeroRecords",
                    "12095": "\t\t\t *",
                    "12096": "\t\t\t *  @example",
                    "12097": "\t\t\t *    $(document).ready( function() {",
                    "12098": "\t\t\t *      $('#example').dataTable( {",
                    "12099": "\t\t\t *        \"language\": {",
                    "12100": "\t\t\t *          \"zeroRecords\": \"No records to display\"",
                    "12101": "\t\t\t *        }",
                    "12102": "\t\t\t *      } );",
                    "12103": "\t\t\t *    } );",
                    "12117": "\t\t *  @namespace",
                    "12118": "\t\t *  @extends DataTable.models.oSearch",
                    "12119": "\t\t *",
                    "12120": "\t\t *  @dtopt Options",
                    "12121": "\t\t *  @name DataTable.defaults.search",
                    "12122": "\t\t *",
                    "12123": "\t\t *  @example",
                    "12124": "\t\t *    $(document).ready( function() {",
                    "12125": "\t\t *      $('#example').dataTable( {",
                    "12126": "\t\t *        \"search\": {\"search\": \"Initial search\"}",
                    "12127": "\t\t *      } );",
                    "12128": "\t\t *    } )",
                    "12134": "\t\t * __Deprecated__ The functionality provided by this parameter has now been",
                    "12135": "\t\t * superseded by that provided through `ajax`, which should be used instead.",
                    "12136": "\t\t *",
                    "12137": "\t\t * By default DataTables will look for the property `data` (or `aaData` for",
                    "12138": "\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax",
                    "12139": "\t\t * source or for server-side processing - this parameter allows that",
                    "12140": "\t\t * property to be changed. You can use Javascript dotted object notation to",
                    "12141": "\t\t * get a data source for multiple levels of nesting.",
                    "12142": "\t\t *  @type string",
                    "12143": "\t\t *  @default data",
                    "12144": "\t\t *",
                    "12145": "\t\t *  @dtopt Options",
                    "12146": "\t\t *  @dtopt Server-side",
                    "12147": "\t\t *  @name DataTable.defaults.ajaxDataProp",
                    "12148": "\t\t *",
                    "12149": "\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.",
                    "12150": "\t\t */",
                    "12151": "\t\t\"sAjaxDataProp\": \"data\",",
                    "12152": "",
                    "12153": "",
                    "12154": "\t\t/**",
                    "12155": "\t\t * __Deprecated__ The functionality provided by this parameter has now been",
                    "12156": "\t\t * superseded by that provided through `ajax`, which should be used instead.",
                    "12157": "\t\t *",
                    "12158": "\t\t * You can instruct DataTables to load data from an external",
                    "12159": "\t\t * source using this parameter (use aData if you want to pass data in you",
                    "12160": "\t\t * already have). Simply provide a url a JSON object can be obtained from.",
                    "12161": "\t\t *  @type string",
                    "12162": "\t\t *  @default null",
                    "12163": "\t\t *",
                    "12164": "\t\t *  @dtopt Options",
                    "12165": "\t\t *  @dtopt Server-side",
                    "12166": "\t\t *  @name DataTable.defaults.ajaxSource",
                    "12167": "\t\t *",
                    "12168": "\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.",
                    "12170": "\t\t\"sAjaxSource\": null,",
                    "12174": "\t\t * This initialisation variable allows you to specify exactly where in the",
                    "12175": "\t\t * DOM you want DataTables to inject the various controls it adds to the page",
                    "12176": "\t\t * (for example you might want the pagination controls at the top of the",
                    "12177": "\t\t * table). DIV elements (with or without a custom class) can also be added to",
                    "12178": "\t\t * aid styling. The follow syntax is used:",
                    "12179": "\t\t *   <ul>",
                    "12180": "\t\t *     <li>The following options are allowed:",
                    "12181": "\t\t *       <ul>",
                    "12182": "\t\t *         <li>'l' - Length changing</li>",
                    "12183": "\t\t *         <li>'f' - Filtering input</li>",
                    "12184": "\t\t *         <li>'t' - The table!</li>",
                    "12185": "\t\t *         <li>'i' - Information</li>",
                    "12186": "\t\t *         <li>'p' - Pagination</li>",
                    "12187": "\t\t *         <li>'r' - pRocessing</li>",
                    "12188": "\t\t *       </ul>",
                    "12189": "\t\t *     </li>",
                    "12190": "\t\t *     <li>The following constants are allowed:",
                    "12191": "\t\t *       <ul>",
                    "12192": "\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>",
                    "12193": "\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>",
                    "12194": "\t\t *       </ul>",
                    "12195": "\t\t *     </li>",
                    "12196": "\t\t *     <li>The following syntax is expected:",
                    "12197": "\t\t *       <ul>",
                    "12198": "\t\t *         <li>'&lt;' and '&gt;' - div elements</li>",
                    "12199": "\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>",
                    "12200": "\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>",
                    "12201": "\t\t *       </ul>",
                    "12202": "\t\t *     </li>",
                    "12203": "\t\t *     <li>Examples:",
                    "12204": "\t\t *       <ul>",
                    "12205": "\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>",
                    "12206": "\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>",
                    "12207": "\t\t *       </ul>",
                    "12208": "\t\t *     </li>",
                    "12209": "\t\t *   </ul>",
                    "12210": "\t\t *  @type string",
                    "12211": "\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>",
                    "12212": "\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>",
                    "12213": "\t\t *",
                    "12214": "\t\t *  @dtopt Options",
                    "12215": "\t\t *  @name DataTable.defaults.dom",
                    "12216": "\t\t *",
                    "12217": "\t\t *  @example",
                    "12218": "\t\t *    $(document).ready( function() {",
                    "12219": "\t\t *      $('#example').dataTable( {",
                    "12220": "\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'",
                    "12221": "\t\t *      } );",
                    "12222": "\t\t *    } );",
                    "12224": "\t\t\"sDom\": \"lfrtip\",",
                    "12231": "\t\t *  @type integer",
                    "12232": "\t\t *  @default 0",
                    "12233": "\t\t *",
                    "12234": "\t\t *  @dtopt Options",
                    "12235": "\t\t *  @name DataTable.defaults.searchDelay",
                    "12236": "\t\t *",
                    "12237": "\t\t *  @example",
                    "12238": "\t\t *    $(document).ready( function() {",
                    "12239": "\t\t *      $('#example').dataTable( {",
                    "12240": "\t\t *        \"searchDelay\": 200",
                    "12241": "\t\t *      } );",
                    "12242": "\t\t *    } )",
                    "12257": "\t\t *",
                    "12258": "\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.",
                    "12259": "\t\t *  @type string",
                    "12260": "\t\t *  @default simple_numbers",
                    "12261": "\t\t *",
                    "12262": "\t\t *  @dtopt Options",
                    "12263": "\t\t *  @name DataTable.defaults.pagingType",
                    "12264": "\t\t *",
                    "12265": "\t\t *  @example",
                    "12266": "\t\t *    $(document).ready( function() {",
                    "12267": "\t\t *      $('#example').dataTable( {",
                    "12268": "\t\t *        \"pagingType\": \"full_numbers\"",
                    "12269": "\t\t *      } );",
                    "12270": "\t\t *    } )",
                    "12272": "\t\t\"sPaginationType\": \"simple_numbers\",",
                    "12283": "\t\t *  @type boolean|string",
                    "12284": "\t\t *  @default <i>blank string - i.e. disabled</i>",
                    "12285": "\t\t *",
                    "12286": "\t\t *  @dtopt Features",
                    "12287": "\t\t *  @name DataTable.defaults.scrollX",
                    "12288": "\t\t *",
                    "12289": "\t\t *  @example",
                    "12290": "\t\t *    $(document).ready( function() {",
                    "12291": "\t\t *      $('#example').dataTable( {",
                    "12292": "\t\t *        \"scrollX\": true,",
                    "12293": "\t\t *        \"scrollCollapse\": true",
                    "12294": "\t\t *      } );",
                    "12295": "\t\t *    } );",
                    "12307": "\t\t *  @type string",
                    "12308": "\t\t *  @default <i>blank string - i.e. disabled</i>",
                    "12309": "\t\t *",
                    "12310": "\t\t *  @dtopt Options",
                    "12311": "\t\t *  @name DataTable.defaults.scrollXInner",
                    "12312": "\t\t *",
                    "12313": "\t\t *  @example",
                    "12314": "\t\t *    $(document).ready( function() {",
                    "12315": "\t\t *      $('#example').dataTable( {",
                    "12316": "\t\t *        \"scrollX\": \"100%\",",
                    "12317": "\t\t *        \"scrollXInner\": \"110%\"",
                    "12318": "\t\t *      } );",
                    "12319": "\t\t *    } );",
                    "12331": "\t\t *  @type string",
                    "12332": "\t\t *  @default <i>blank string - i.e. disabled</i>",
                    "12333": "\t\t *",
                    "12334": "\t\t *  @dtopt Features",
                    "12335": "\t\t *  @name DataTable.defaults.scrollY",
                    "12336": "\t\t *",
                    "12337": "\t\t *  @example",
                    "12338": "\t\t *    $(document).ready( function() {",
                    "12339": "\t\t *      $('#example').dataTable( {",
                    "12340": "\t\t *        \"scrollY\": \"200px\",",
                    "12341": "\t\t *        \"paginate\": false",
                    "12342": "\t\t *      } );",
                    "12343": "\t\t *    } );",
                    "12354": "\t\t *  @type string",
                    "12355": "\t\t *  @default GET",
                    "12356": "\t\t *",
                    "12357": "\t\t *  @dtopt Options",
                    "12358": "\t\t *  @dtopt Server-side",
                    "12359": "\t\t *  @name DataTable.defaults.serverMethod",
                    "12360": "\t\t *",
                    "12361": "\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.",
                    "12375": "\t\t *  @type string|object",
                    "12376": "\t\t *  @default null",
                    "12377": "\t\t *",
                    "12378": "\t\t *  @name DataTable.defaults.renderer",
                    "12379": "\t\t *",
                    "12387": "\t\t *  @type string",
                    "12388": "\t\t *  @default DT_RowId",
                    "12389": "\t\t *",
                    "12390": "\t\t *  @name DataTable.defaults.rowId",
                    "12392": "\t\t\"rowId\": \"DT_RowId\"",
                    "12415": "\t\t *  @type array|int",
                    "12416": "\t\t *  @default null <i>Takes the value of the column index automatically</i>",
                    "12417": "\t\t *",
                    "12418": "\t\t *  @name DataTable.defaults.column.orderData",
                    "12419": "\t\t *  @dtopt Columns",
                    "12420": "\t\t *",
                    "12421": "\t\t *  @example",
                    "12422": "\t\t *    // Using `columnDefs`",
                    "12423": "\t\t *    $(document).ready( function() {",
                    "12424": "\t\t *      $('#example').dataTable( {",
                    "12425": "\t\t *        \"columnDefs\": [",
                    "12426": "\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },",
                    "12427": "\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },",
                    "12428": "\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }",
                    "12429": "\t\t *        ]",
                    "12430": "\t\t *      } );",
                    "12431": "\t\t *    } );",
                    "12432": "\t\t *",
                    "12433": "\t\t *  @example",
                    "12434": "\t\t *    // Using `columns`",
                    "12435": "\t\t *    $(document).ready( function() {",
                    "12436": "\t\t *      $('#example').dataTable( {",
                    "12437": "\t\t *        \"columns\": [",
                    "12438": "\t\t *          { \"orderData\": [ 0, 1 ] },",
                    "12439": "\t\t *          { \"orderData\": [ 1, 0 ] },",
                    "12440": "\t\t *          { \"orderData\": 2 },",
                    "12441": "\t\t *          null,",
                    "12442": "\t\t *          null",
                    "12443": "\t\t *        ]",
                    "12444": "\t\t *      } );",
                    "12445": "\t\t *    } );",
                    "12455": "\t\t *  @type array",
                    "12456": "\t\t *  @default [ 'asc', 'desc' ]",
                    "12457": "\t\t *",
                    "12458": "\t\t *  @name DataTable.defaults.column.orderSequence",
                    "12459": "\t\t *  @dtopt Columns",
                    "12460": "\t\t *",
                    "12461": "\t\t *  @example",
                    "12462": "\t\t *    // Using `columnDefs`",
                    "12463": "\t\t *    $(document).ready( function() {",
                    "12464": "\t\t *      $('#example').dataTable( {",
                    "12465": "\t\t *        \"columnDefs\": [",
                    "12466": "\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },",
                    "12467": "\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },",
                    "12468": "\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }",
                    "12469": "\t\t *        ]",
                    "12470": "\t\t *      } );",
                    "12471": "\t\t *    } );",
                    "12472": "\t\t *",
                    "12473": "\t\t *  @example",
                    "12474": "\t\t *    // Using `columns`",
                    "12475": "\t\t *    $(document).ready( function() {",
                    "12476": "\t\t *      $('#example').dataTable( {",
                    "12477": "\t\t *        \"columns\": [",
                    "12478": "\t\t *          null,",
                    "12479": "\t\t *          { \"orderSequence\": [ \"asc\" ] },",
                    "12480": "\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },",
                    "12481": "\t\t *          { \"orderSequence\": [ \"desc\" ] },",
                    "12482": "\t\t *          null",
                    "12483": "\t\t *        ]",
                    "12484": "\t\t *      } );",
                    "12485": "\t\t *    } );",
                    "12487": "\t\t\"asSorting\": [ 'asc', 'desc' ],",
                    "12491": "\t\t * Enable or disable filtering on the data in this column.",
                    "12492": "\t\t *  @type boolean",
                    "12493": "\t\t *  @default true",
                    "12494": "\t\t *",
                    "12495": "\t\t *  @name DataTable.defaults.column.searchable",
                    "12496": "\t\t *  @dtopt Columns",
                    "12497": "\t\t *",
                    "12498": "\t\t *  @example",
                    "12499": "\t\t *    // Using `columnDefs`",
                    "12500": "\t\t *    $(document).ready( function() {",
                    "12501": "\t\t *      $('#example').dataTable( {",
                    "12502": "\t\t *        \"columnDefs\": [",
                    "12503": "\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }",
                    "12504": "\t\t *        ] } );",
                    "12505": "\t\t *    } );",
                    "12506": "\t\t *",
                    "12507": "\t\t *  @example",
                    "12508": "\t\t *    // Using `columns`",
                    "12509": "\t\t *    $(document).ready( function() {",
                    "12510": "\t\t *      $('#example').dataTable( {",
                    "12511": "\t\t *        \"columns\": [",
                    "12512": "\t\t *          { \"searchable\": false },",
                    "12513": "\t\t *          null,",
                    "12514": "\t\t *          null,",
                    "12515": "\t\t *          null,",
                    "12516": "\t\t *          null",
                    "12517": "\t\t *        ] } );",
                    "12518": "\t\t *    } );",
                    "12525": "\t\t *  @type boolean",
                    "12526": "\t\t *  @default true",
                    "12527": "\t\t *",
                    "12528": "\t\t *  @name DataTable.defaults.column.orderable",
                    "12529": "\t\t *  @dtopt Columns",
                    "12530": "\t\t *",
                    "12531": "\t\t *  @example",
                    "12532": "\t\t *    // Using `columnDefs`",
                    "12533": "\t\t *    $(document).ready( function() {",
                    "12534": "\t\t *      $('#example').dataTable( {",
                    "12535": "\t\t *        \"columnDefs\": [",
                    "12536": "\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }",
                    "12537": "\t\t *        ] } );",
                    "12538": "\t\t *    } );",
                    "12539": "\t\t *",
                    "12540": "\t\t *  @example",
                    "12541": "\t\t *    // Using `columns`",
                    "12542": "\t\t *    $(document).ready( function() {",
                    "12543": "\t\t *      $('#example').dataTable( {",
                    "12544": "\t\t *        \"columns\": [",
                    "12545": "\t\t *          { \"orderable\": false },",
                    "12546": "\t\t *          null,",
                    "12547": "\t\t *          null,",
                    "12548": "\t\t *          null,",
                    "12549": "\t\t *          null",
                    "12550": "\t\t *        ] } );",
                    "12551": "\t\t *    } );",
                    "12558": "\t\t *  @type boolean",
                    "12559": "\t\t *  @default true",
                    "12560": "\t\t *",
                    "12561": "\t\t *  @name DataTable.defaults.column.visible",
                    "12562": "\t\t *  @dtopt Columns",
                    "12563": "\t\t *",
                    "12564": "\t\t *  @example",
                    "12565": "\t\t *    // Using `columnDefs`",
                    "12566": "\t\t *    $(document).ready( function() {",
                    "12567": "\t\t *      $('#example').dataTable( {",
                    "12568": "\t\t *        \"columnDefs\": [",
                    "12569": "\t\t *          { \"visible\": false, \"targets\": [ 0 ] }",
                    "12570": "\t\t *        ] } );",
                    "12571": "\t\t *    } );",
                    "12572": "\t\t *",
                    "12573": "\t\t *  @example",
                    "12574": "\t\t *    // Using `columns`",
                    "12575": "\t\t *    $(document).ready( function() {",
                    "12576": "\t\t *      $('#example').dataTable( {",
                    "12577": "\t\t *        \"columns\": [",
                    "12578": "\t\t *          { \"visible\": false },",
                    "12579": "\t\t *          null,",
                    "12580": "\t\t *          null,",
                    "12581": "\t\t *          null,",
                    "12582": "\t\t *          null",
                    "12583": "\t\t *        ] } );",
                    "12584": "\t\t *    } );",
                    "12594": "\t\t *  @type function",
                    "12595": "\t\t *  @param {element} td The TD node that has been created",
                    "12596": "\t\t *  @param {*} cellData The Data for the cell",
                    "12597": "\t\t *  @param {array|object} rowData The data for the whole row",
                    "12598": "\t\t *  @param {int} row The row index for the aoData data store",
                    "12599": "\t\t *  @param {int} col The column index for aoColumns",
                    "12600": "\t\t *",
                    "12601": "\t\t *  @name DataTable.defaults.column.createdCell",
                    "12602": "\t\t *  @dtopt Columns",
                    "12603": "\t\t *",
                    "12604": "\t\t *  @example",
                    "12605": "\t\t *    $(document).ready( function() {",
                    "12606": "\t\t *      $('#example').dataTable( {",
                    "12607": "\t\t *        \"columnDefs\": [ {",
                    "12608": "\t\t *          \"targets\": [3],",
                    "12609": "\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {",
                    "12610": "\t\t *            if ( cellData == \"1.7\" ) {",
                    "12611": "\t\t *              $(td).css('color', 'blue')",
                    "12612": "\t\t *            }",
                    "12613": "\t\t *          }",
                    "12614": "\t\t *        } ]",
                    "12615": "\t\t *      });",
                    "12616": "\t\t *    } );",
                    "12621": "\t\t/**",
                    "12622": "\t\t * This parameter has been replaced by `data` in DataTables to ensure naming",
                    "12623": "\t\t * consistency. `dataProp` can still be used, as there is backwards",
                    "12624": "\t\t * compatibility in DataTables for this option, but it is strongly",
                    "12625": "\t\t * recommended that you use `data` in preference to `dataProp`.",
                    "12626": "\t\t *  @name DataTable.defaults.column.dataProp",
                    "12627": "\t\t */",
                    "12628": "",
                    "12629": "",
                    "12691": "\t\t *",
                    "12692": "\t\t *  @type string|int|function|null",
                    "12693": "\t\t *  @default null <i>Use automatically calculated column index</i>",
                    "12694": "\t\t *",
                    "12695": "\t\t *  @name DataTable.defaults.column.data",
                    "12696": "\t\t *  @dtopt Columns",
                    "12697": "\t\t *",
                    "12698": "\t\t *  @example",
                    "12699": "\t\t *    // Read table data from objects",
                    "12700": "\t\t *    // JSON structure for each row:",
                    "12701": "\t\t *    //   {",
                    "12702": "\t\t *    //      \"engine\": {value},",
                    "12703": "\t\t *    //      \"browser\": {value},",
                    "12704": "\t\t *    //      \"platform\": {value},",
                    "12705": "\t\t *    //      \"version\": {value},",
                    "12706": "\t\t *    //      \"grade\": {value}",
                    "12707": "\t\t *    //   }",
                    "12708": "\t\t *    $(document).ready( function() {",
                    "12709": "\t\t *      $('#example').dataTable( {",
                    "12710": "\t\t *        \"ajaxSource\": \"sources/objects.txt\",",
                    "12711": "\t\t *        \"columns\": [",
                    "12712": "\t\t *          { \"data\": \"engine\" },",
                    "12713": "\t\t *          { \"data\": \"browser\" },",
                    "12714": "\t\t *          { \"data\": \"platform\" },",
                    "12715": "\t\t *          { \"data\": \"version\" },",
                    "12716": "\t\t *          { \"data\": \"grade\" }",
                    "12717": "\t\t *        ]",
                    "12718": "\t\t *      } );",
                    "12719": "\t\t *    } );",
                    "12720": "\t\t *",
                    "12721": "\t\t *  @example",
                    "12722": "\t\t *    // Read information from deeply nested objects",
                    "12723": "\t\t *    // JSON structure for each row:",
                    "12724": "\t\t *    //   {",
                    "12725": "\t\t *    //      \"engine\": {value},",
                    "12726": "\t\t *    //      \"browser\": {value},",
                    "12727": "\t\t *    //      \"platform\": {",
                    "12728": "\t\t *    //         \"inner\": {value}",
                    "12729": "\t\t *    //      },",
                    "12730": "\t\t *    //      \"details\": [",
                    "12731": "\t\t *    //         {value}, {value}",
                    "12732": "\t\t *    //      ]",
                    "12733": "\t\t *    //   }",
                    "12734": "\t\t *    $(document).ready( function() {",
                    "12735": "\t\t *      $('#example').dataTable( {",
                    "12736": "\t\t *        \"ajaxSource\": \"sources/deep.txt\",",
                    "12737": "\t\t *        \"columns\": [",
                    "12738": "\t\t *          { \"data\": \"engine\" },",
                    "12739": "\t\t *          { \"data\": \"browser\" },",
                    "12740": "\t\t *          { \"data\": \"platform.inner\" },",
                    "12741": "\t\t *          { \"data\": \"details.0\" },",
                    "12742": "\t\t *          { \"data\": \"details.1\" }",
                    "12743": "\t\t *        ]",
                    "12744": "\t\t *      } );",
                    "12745": "\t\t *    } );",
                    "12746": "\t\t *",
                    "12747": "\t\t *  @example",
                    "12748": "\t\t *    // Using `data` as a function to provide different information for",
                    "12749": "\t\t *    // sorting, filtering and display. In this case, currency (price)",
                    "12750": "\t\t *    $(document).ready( function() {",
                    "12751": "\t\t *      $('#example').dataTable( {",
                    "12752": "\t\t *        \"columnDefs\": [ {",
                    "12753": "\t\t *          \"targets\": [ 0 ],",
                    "12754": "\t\t *          \"data\": function ( source, type, val ) {",
                    "12755": "\t\t *            if (type === 'set') {",
                    "12756": "\t\t *              source.price = val;",
                    "12757": "\t\t *              // Store the computed display and filter values for efficiency",
                    "12758": "\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);",
                    "12759": "\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;",
                    "12760": "\t\t *              return;",
                    "12761": "\t\t *            }",
                    "12762": "\t\t *            else if (type === 'display') {",
                    "12763": "\t\t *              return source.price_display;",
                    "12764": "\t\t *            }",
                    "12765": "\t\t *            else if (type === 'filter') {",
                    "12766": "\t\t *              return source.price_filter;",
                    "12767": "\t\t *            }",
                    "12768": "\t\t *            // 'sort', 'type' and undefined all just use the integer",
                    "12769": "\t\t *            return source.price;",
                    "12770": "\t\t *          }",
                    "12771": "\t\t *        } ]",
                    "12772": "\t\t *      } );",
                    "12773": "\t\t *    } );",
                    "12774": "\t\t *",
                    "12775": "\t\t *  @example",
                    "12776": "\t\t *    // Using default content",
                    "12777": "\t\t *    $(document).ready( function() {",
                    "12778": "\t\t *      $('#example').dataTable( {",
                    "12779": "\t\t *        \"columnDefs\": [ {",
                    "12780": "\t\t *          \"targets\": [ 0 ],",
                    "12781": "\t\t *          \"data\": null,",
                    "12782": "\t\t *          \"defaultContent\": \"Click to edit\"",
                    "12783": "\t\t *        } ]",
                    "12784": "\t\t *      } );",
                    "12785": "\t\t *    } );",
                    "12786": "\t\t *",
                    "12787": "\t\t *  @example",
                    "12788": "\t\t *    // Using array notation - outputting a list from an array",
                    "12789": "\t\t *    $(document).ready( function() {",
                    "12790": "\t\t *      $('#example').dataTable( {",
                    "12791": "\t\t *        \"columnDefs\": [ {",
                    "12792": "\t\t *          \"targets\": [ 0 ],",
                    "12793": "\t\t *          \"data\": \"name[, ]\"",
                    "12794": "\t\t *        } ]",
                    "12795": "\t\t *      } );",
                    "12796": "\t\t *    } );",
                    "12797": "\t\t *",
                    "12851": "\t\t *",
                    "12852": "\t\t *  @type string|int|function|object|null",
                    "12853": "\t\t *  @default null Use the data source value.",
                    "12854": "\t\t *",
                    "12855": "\t\t *  @name DataTable.defaults.column.render",
                    "12856": "\t\t *  @dtopt Columns",
                    "12857": "\t\t *",
                    "12858": "\t\t *  @example",
                    "12859": "\t\t *    // Create a comma separated list from an array of objects",
                    "12860": "\t\t *    $(document).ready( function() {",
                    "12861": "\t\t *      $('#example').dataTable( {",
                    "12862": "\t\t *        \"ajaxSource\": \"sources/deep.txt\",",
                    "12863": "\t\t *        \"columns\": [",
                    "12864": "\t\t *          { \"data\": \"engine\" },",
                    "12865": "\t\t *          { \"data\": \"browser\" },",
                    "12866": "\t\t *          {",
                    "12867": "\t\t *            \"data\": \"platform\",",
                    "12868": "\t\t *            \"render\": \"[, ].name\"",
                    "12869": "\t\t *          }",
                    "12870": "\t\t *        ]",
                    "12871": "\t\t *      } );",
                    "12872": "\t\t *    } );",
                    "12873": "\t\t *",
                    "12874": "\t\t *  @example",
                    "12875": "\t\t *    // Execute a function to obtain data",
                    "12876": "\t\t *    $(document).ready( function() {",
                    "12877": "\t\t *      $('#example').dataTable( {",
                    "12878": "\t\t *        \"columnDefs\": [ {",
                    "12879": "\t\t *          \"targets\": [ 0 ],",
                    "12880": "\t\t *          \"data\": null, // Use the full data source object for the renderer's source",
                    "12881": "\t\t *          \"render\": \"browserName()\"",
                    "12882": "\t\t *        } ]",
                    "12883": "\t\t *      } );",
                    "12884": "\t\t *    } );",
                    "12885": "\t\t *",
                    "12886": "\t\t *  @example",
                    "12887": "\t\t *    // As an object, extracting different data for the different types",
                    "12888": "\t\t *    // This would be used with a data source such as:",
                    "12889": "\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }",
                    "12890": "\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`",
                    "12891": "\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while",
                    "12892": "\t\t *    // the formatted phone number is the one that is shown in the table.",
                    "12893": "\t\t *    $(document).ready( function() {",
                    "12894": "\t\t *      $('#example').dataTable( {",
                    "12895": "\t\t *        \"columnDefs\": [ {",
                    "12896": "\t\t *          \"targets\": [ 0 ],",
                    "12897": "\t\t *          \"data\": null, // Use the full data source object for the renderer's source",
                    "12898": "\t\t *          \"render\": {",
                    "12899": "\t\t *            \"_\": \"phone\",",
                    "12900": "\t\t *            \"filter\": \"phone_filter\",",
                    "12901": "\t\t *            \"display\": \"phone_display\"",
                    "12902": "\t\t *          }",
                    "12903": "\t\t *        } ]",
                    "12904": "\t\t *      } );",
                    "12905": "\t\t *    } );",
                    "12906": "\t\t *",
                    "12907": "\t\t *  @example",
                    "12908": "\t\t *    // Use as a function to create a link from the data source",
                    "12909": "\t\t *    $(document).ready( function() {",
                    "12910": "\t\t *      $('#example').dataTable( {",
                    "12911": "\t\t *        \"columnDefs\": [ {",
                    "12912": "\t\t *          \"targets\": [ 0 ],",
                    "12913": "\t\t *          \"data\": \"download_link\",",
                    "12914": "\t\t *          \"render\": function ( data, type, full ) {",
                    "12915": "\t\t *            return '<a href=\"'+data+'\">Download</a>';",
                    "12916": "\t\t *          }",
                    "12917": "\t\t *        } ]",
                    "12918": "\t\t *      } );",
                    "12919": "\t\t *    } );",
                    "12928": "\t\t *  @type string",
                    "12929": "\t\t *  @default td",
                    "12930": "\t\t *",
                    "12931": "\t\t *  @name DataTable.defaults.column.cellType",
                    "12932": "\t\t *  @dtopt Columns",
                    "12933": "\t\t *",
                    "12934": "\t\t *  @example",
                    "12935": "\t\t *    // Make the first column use TH cells",
                    "12936": "\t\t *    $(document).ready( function() {",
                    "12937": "\t\t *      $('#example').dataTable( {",
                    "12938": "\t\t *        \"columnDefs\": [ {",
                    "12939": "\t\t *          \"targets\": [ 0 ],",
                    "12940": "\t\t *          \"cellType\": \"th\"",
                    "12941": "\t\t *        } ]",
                    "12942": "\t\t *      } );",
                    "12943": "\t\t *    } );",
                    "12950": "\t\t *  @type string",
                    "12951": "\t\t *  @default <i>Empty string</i>",
                    "12952": "\t\t *",
                    "12953": "\t\t *  @name DataTable.defaults.column.class",
                    "12954": "\t\t *  @dtopt Columns",
                    "12955": "\t\t *",
                    "12956": "\t\t *  @example",
                    "12957": "\t\t *    // Using `columnDefs`",
                    "12958": "\t\t *    $(document).ready( function() {",
                    "12959": "\t\t *      $('#example').dataTable( {",
                    "12960": "\t\t *        \"columnDefs\": [",
                    "12961": "\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }",
                    "12962": "\t\t *        ]",
                    "12963": "\t\t *      } );",
                    "12964": "\t\t *    } );",
                    "12965": "\t\t *",
                    "12966": "\t\t *  @example",
                    "12967": "\t\t *    // Using `columns`",
                    "12968": "\t\t *    $(document).ready( function() {",
                    "12969": "\t\t *      $('#example').dataTable( {",
                    "12970": "\t\t *        \"columns\": [",
                    "12971": "\t\t *          { \"class\": \"my_class\" },",
                    "12972": "\t\t *          null,",
                    "12973": "\t\t *          null,",
                    "12974": "\t\t *          null,",
                    "12975": "\t\t *          null",
                    "12976": "\t\t *        ]",
                    "12977": "\t\t *      } );",
                    "12978": "\t\t *    } );",
                    "12992": "\t\t *  @type string",
                    "12993": "\t\t *  @default <i>Empty string<i>",
                    "12994": "\t\t *",
                    "12995": "\t\t *  @name DataTable.defaults.column.contentPadding",
                    "12996": "\t\t *  @dtopt Columns",
                    "12997": "\t\t *",
                    "12998": "\t\t *  @example",
                    "12999": "\t\t *    // Using `columns`",
                    "13000": "\t\t *    $(document).ready( function() {",
                    "13001": "\t\t *      $('#example').dataTable( {",
                    "13002": "\t\t *        \"columns\": [",
                    "13003": "\t\t *          null,",
                    "13004": "\t\t *          null,",
                    "13005": "\t\t *          null,",
                    "13006": "\t\t *          {",
                    "13007": "\t\t *            \"contentPadding\": \"mmm\"",
                    "13008": "\t\t *          }",
                    "13009": "\t\t *        ]",
                    "13010": "\t\t *      } );",
                    "13011": "\t\t *    } );",
                    "13020": "\t\t *  @type string",
                    "13021": "\t\t *  @default null",
                    "13022": "\t\t *",
                    "13023": "\t\t *  @name DataTable.defaults.column.defaultContent",
                    "13024": "\t\t *  @dtopt Columns",
                    "13025": "\t\t *",
                    "13026": "\t\t *  @example",
                    "13027": "\t\t *    // Using `columnDefs`",
                    "13028": "\t\t *    $(document).ready( function() {",
                    "13029": "\t\t *      $('#example').dataTable( {",
                    "13030": "\t\t *        \"columnDefs\": [",
                    "13031": "\t\t *          {",
                    "13032": "\t\t *            \"data\": null,",
                    "13033": "\t\t *            \"defaultContent\": \"Edit\",",
                    "13034": "\t\t *            \"targets\": [ -1 ]",
                    "13035": "\t\t *          }",
                    "13036": "\t\t *        ]",
                    "13037": "\t\t *      } );",
                    "13038": "\t\t *    } );",
                    "13039": "\t\t *",
                    "13040": "\t\t *  @example",
                    "13041": "\t\t *    // Using `columns`",
                    "13042": "\t\t *    $(document).ready( function() {",
                    "13043": "\t\t *      $('#example').dataTable( {",
                    "13044": "\t\t *        \"columns\": [",
                    "13045": "\t\t *          null,",
                    "13046": "\t\t *          null,",
                    "13047": "\t\t *          null,",
                    "13048": "\t\t *          {",
                    "13049": "\t\t *            \"data\": null,",
                    "13050": "\t\t *            \"defaultContent\": \"Edit\"",
                    "13051": "\t\t *          }",
                    "13052": "\t\t *        ]",
                    "13053": "\t\t *      } );",
                    "13054": "\t\t *    } );",
                    "13066": "\t\t *  @type string",
                    "13067": "\t\t *  @default <i>Empty string</i>",
                    "13068": "\t\t *",
                    "13069": "\t\t *  @name DataTable.defaults.column.name",
                    "13070": "\t\t *  @dtopt Columns",
                    "13071": "\t\t *",
                    "13072": "\t\t *  @example",
                    "13073": "\t\t *    // Using `columnDefs`",
                    "13074": "\t\t *    $(document).ready( function() {",
                    "13075": "\t\t *      $('#example').dataTable( {",
                    "13076": "\t\t *        \"columnDefs\": [",
                    "13077": "\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },",
                    "13078": "\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },",
                    "13079": "\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },",
                    "13080": "\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },",
                    "13081": "\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }",
                    "13082": "\t\t *        ]",
                    "13083": "\t\t *      } );",
                    "13084": "\t\t *    } );",
                    "13085": "\t\t *",
                    "13086": "\t\t *  @example",
                    "13087": "\t\t *    // Using `columns`",
                    "13088": "\t\t *    $(document).ready( function() {",
                    "13089": "\t\t *      $('#example').dataTable( {",
                    "13090": "\t\t *        \"columns\": [",
                    "13091": "\t\t *          { \"name\": \"engine\" },",
                    "13092": "\t\t *          { \"name\": \"browser\" },",
                    "13093": "\t\t *          { \"name\": \"platform\" },",
                    "13094": "\t\t *          { \"name\": \"version\" },",
                    "13095": "\t\t *          { \"name\": \"grade\" }",
                    "13096": "\t\t *        ]",
                    "13097": "\t\t *      } );",
                    "13098": "\t\t *    } );",
                    "13108": "\t\t *  @type string",
                    "13109": "\t\t *  @default std",
                    "13110": "\t\t *",
                    "13111": "\t\t *  @name DataTable.defaults.column.orderDataType",
                    "13112": "\t\t *  @dtopt Columns",
                    "13113": "\t\t *",
                    "13114": "\t\t *  @example",
                    "13115": "\t\t *    // Using `columnDefs`",
                    "13116": "\t\t *    $(document).ready( function() {",
                    "13117": "\t\t *      $('#example').dataTable( {",
                    "13118": "\t\t *        \"columnDefs\": [",
                    "13119": "\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },",
                    "13120": "\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },",
                    "13121": "\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },",
                    "13122": "\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }",
                    "13123": "\t\t *        ]",
                    "13124": "\t\t *      } );",
                    "13125": "\t\t *    } );",
                    "13126": "\t\t *",
                    "13127": "\t\t *  @example",
                    "13128": "\t\t *    // Using `columns`",
                    "13129": "\t\t *    $(document).ready( function() {",
                    "13130": "\t\t *      $('#example').dataTable( {",
                    "13131": "\t\t *        \"columns\": [",
                    "13132": "\t\t *          null,",
                    "13133": "\t\t *          null,",
                    "13134": "\t\t *          { \"orderDataType\": \"dom-text\" },",
                    "13135": "\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },",
                    "13136": "\t\t *          { \"orderDataType\": \"dom-select\" },",
                    "13137": "\t\t *          { \"orderDataType\": \"dom-checkbox\" }",
                    "13138": "\t\t *        ]",
                    "13139": "\t\t *      } );",
                    "13140": "\t\t *    } );",
                    "13147": "\t\t *  @type string",
                    "13148": "\t\t *  @default null <i>Derived from the 'TH' value for this column in the",
                    "13149": "\t\t *    original HTML table.</i>",
                    "13150": "\t\t *",
                    "13151": "\t\t *  @name DataTable.defaults.column.title",
                    "13152": "\t\t *  @dtopt Columns",
                    "13153": "\t\t *",
                    "13154": "\t\t *  @example",
                    "13155": "\t\t *    // Using `columnDefs`",
                    "13156": "\t\t *    $(document).ready( function() {",
                    "13157": "\t\t *      $('#example').dataTable( {",
                    "13158": "\t\t *        \"columnDefs\": [",
                    "13159": "\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }",
                    "13160": "\t\t *        ]",
                    "13161": "\t\t *      } );",
                    "13162": "\t\t *    } );",
                    "13163": "\t\t *",
                    "13164": "\t\t *  @example",
                    "13165": "\t\t *    // Using `columns`",
                    "13166": "\t\t *    $(document).ready( function() {",
                    "13167": "\t\t *      $('#example').dataTable( {",
                    "13168": "\t\t *        \"columns\": [",
                    "13169": "\t\t *          { \"title\": \"My column title\" },",
                    "13170": "\t\t *          null,",
                    "13171": "\t\t *          null,",
                    "13172": "\t\t *          null,",
                    "13173": "\t\t *          null",
                    "13174": "\t\t *        ]",
                    "13175": "\t\t *      } );",
                    "13176": "\t\t *    } );",
                    "13189": "\t\t *  @type string",
                    "13190": "\t\t *  @default null <i>Auto-detected from raw data</i>",
                    "13191": "\t\t *",
                    "13192": "\t\t *  @name DataTable.defaults.column.type",
                    "13193": "\t\t *  @dtopt Columns",
                    "13194": "\t\t *",
                    "13195": "\t\t *  @example",
                    "13196": "\t\t *    // Using `columnDefs`",
                    "13197": "\t\t *    $(document).ready( function() {",
                    "13198": "\t\t *      $('#example').dataTable( {",
                    "13199": "\t\t *        \"columnDefs\": [",
                    "13200": "\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }",
                    "13201": "\t\t *        ]",
                    "13202": "\t\t *      } );",
                    "13203": "\t\t *    } );",
                    "13204": "\t\t *",
                    "13205": "\t\t *  @example",
                    "13206": "\t\t *    // Using `columns`",
                    "13207": "\t\t *    $(document).ready( function() {",
                    "13208": "\t\t *      $('#example').dataTable( {",
                    "13209": "\t\t *        \"columns\": [",
                    "13210": "\t\t *          { \"type\": \"html\" },",
                    "13211": "\t\t *          null,",
                    "13212": "\t\t *          null,",
                    "13213": "\t\t *          null,",
                    "13214": "\t\t *          null",
                    "13215": "\t\t *        ]",
                    "13216": "\t\t *      } );",
                    "13217": "\t\t *    } );",
                    "13227": "\t\t *  @type string",
                    "13228": "\t\t *  @default null <i>Automatic</i>",
                    "13229": "\t\t *",
                    "13230": "\t\t *  @name DataTable.defaults.column.width",
                    "13231": "\t\t *  @dtopt Columns",
                    "13232": "\t\t *",
                    "13233": "\t\t *  @example",
                    "13234": "\t\t *    // Using `columnDefs`",
                    "13235": "\t\t *    $(document).ready( function() {",
                    "13236": "\t\t *      $('#example').dataTable( {",
                    "13237": "\t\t *        \"columnDefs\": [",
                    "13238": "\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }",
                    "13239": "\t\t *        ]",
                    "13240": "\t\t *      } );",
                    "13241": "\t\t *    } );",
                    "13242": "\t\t *",
                    "13243": "\t\t *  @example",
                    "13244": "\t\t *    // Using `columns`",
                    "13245": "\t\t *    $(document).ready( function() {",
                    "13246": "\t\t *      $('#example').dataTable( {",
                    "13247": "\t\t *        \"columns\": [",
                    "13248": "\t\t *          { \"width\": \"20%\" },",
                    "13249": "\t\t *          null,",
                    "13250": "\t\t *          null,",
                    "13251": "\t\t *          null,",
                    "13252": "\t\t *          null",
                    "13253": "\t\t *        ]",
                    "13254": "\t\t *      } );",
                    "13255": "\t\t *    } );",
                    "13277": "\t *  @namespace",
                    "13278": "\t *  @todo Really should attach the settings object to individual instances so we",
                    "13279": "\t *    don't need to create new instances on each $().dataTable() call (if the",
                    "13280": "\t *    table already exists). It would also save passing oSettings around and",
                    "13281": "\t *    into every single function. However, this is a very significant",
                    "13282": "\t *    architecture change for DataTables and will almost certainly break",
                    "13283": "\t *    backwards compatibility with older installations. This is something that",
                    "13284": "\t *    will be done in 2.0.",
                    "13289": "\t\t *  @namespace",
                    "13298": "\t\t\t *  @type boolean",
                    "13309": "\t\t\t *  @type boolean",
                    "13319": "\t\t\t *  @type boolean",
                    "13324": "\t\t\t * Table information element (the 'Showing x of y records' div) enable",
                    "13325": "\t\t\t * flag.",
                    "13326": "\t\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13327": "\t\t\t * set a default use {@link DataTable.defaults}.",
                    "13328": "\t\t\t *  @type boolean",
                    "13330": "\t\t\t\"bInfo\": null,",
                    "13333": "\t\t\t * Present a user control allowing the end user to change the page size",
                    "13334": "\t\t\t * when pagination is enabled.",
                    "13335": "\t\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13336": "\t\t\t * set a default use {@link DataTable.defaults}.",
                    "13337": "\t\t\t *  @type boolean",
                    "13339": "\t\t\t\"bLengthChange\": null,",
                    "13346": "\t\t\t *  @type boolean",
                    "13355": "\t\t\t *  @type boolean",
                    "13365": "\t\t\t *  @type boolean",
                    "13373": "\t\t\t *  @type boolean",
                    "13381": "\t\t\t *  @type boolean",
                    "13391": "\t\t\t *  @type boolean",
                    "13399": "\t\t\t *  @type boolean",
                    "13407": "\t\t *  @namespace",
                    "13415": "\t\t\t *  @type boolean",
                    "13422": "\t\t\t *  @type int",
                    "13423": "\t\t\t *  @default 0",
                    "13432": "\t\t\t *  @type string",
                    "13441": "\t\t\t *  @type string",
                    "13451": "\t\t\t *  @type string",
                    "13458": "\t\t *  @namespace",
                    "13459": "\t\t *  @extends DataTable.defaults.oLanguage",
                    "13465": "\t\t\t *  @type function",
                    "13466": "\t\t\t *  @default null",
                    "13473": "\t\t *  @namespace",
                    "13476": "\t\t\t/**",
                    "13477": "\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a",
                    "13478": "\t\t\t * scrolling element (IE6/7)",
                    "13479": "\t\t\t *  @type boolean",
                    "13480": "\t\t\t *  @default false",
                    "13481": "\t\t\t */",
                    "13482": "\t\t\t\"bScrollOversize\": false,",
                    "13483": "",
                    "13488": "\t\t\t *  @type boolean",
                    "13489": "\t\t\t *  @default false",
                    "13493": "\t\t\t/**",
                    "13494": "\t\t\t * Flag for if `getBoundingClientRect` is fully supported or not",
                    "13495": "\t\t\t *  @type boolean",
                    "13496": "\t\t\t *  @default false",
                    "13497": "\t\t\t */",
                    "13498": "\t\t\t\"bBounding\": false,",
                    "13499": "",
                    "13502": "\t\t\t *  @type integer",
                    "13503": "\t\t\t *  @default 0",
                    "13523": "\t\t *  @type array",
                    "13524": "\t\t *  @default []",
                    "13531": "\t\t *  @type array",
                    "13532": "\t\t *  @default []",
                    "13538": "\t\t *  @type array",
                    "13539": "\t\t *  @default []",
                    "13545": "\t\t *  @type array",
                    "13546": "\t\t *  @default []",
                    "13552": "\t\t *  @type object",
                    "13553": "\t\t *  @default {}",
                    "13559": "\t\t *  @type array",
                    "13560": "\t\t *  @default []",
                    "13566": "\t\t *  @type array",
                    "13567": "\t\t *  @default []",
                    "13573": "\t\t *  @type array",
                    "13574": "\t\t *  @default []",
                    "13583": "\t\t *  @namespace",
                    "13584": "\t\t *  @extends DataTable.models.oSearch",
                    "13592": "\t\t *  @type array",
                    "13593": "\t\t *  @default []",
                    "13606": "\t\t *  @type array",
                    "13607": "\t\t *  @todo These inner arrays should really be objects",
                    "13616": "\t\t *  @type array",
                    "13617": "\t\t *  @default []",
                    "13621": "\t\t/**",
                    "13622": "\t\t * Classes to use for the striping of a table.",
                    "13623": "\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13624": "\t\t * set a default use {@link DataTable.defaults}.",
                    "13625": "\t\t *  @type array",
                    "13626": "\t\t *  @default []",
                    "13627": "\t\t */",
                    "13628": "\t\t\"asStripeClasses\": null,",
                    "13629": "",
                    "13630": "\t\t/**",
                    "13631": "\t\t * If restoring a table - we should restore its striping classes as well",
                    "13632": "\t\t *  @type array",
                    "13633": "\t\t *  @default []",
                    "13634": "\t\t */",
                    "13635": "\t\t\"asDestroyStripes\": [],",
                    "13636": "",
                    "13639": "\t\t *  @type int",
                    "13640": "\t\t *  @default 0",
                    "13646": "\t\t *  @type array",
                    "13647": "\t\t *  @default []",
                    "13653": "\t\t *  @type array",
                    "13654": "\t\t *  @default []",
                    "13660": "\t\t *  @type array",
                    "13661": "\t\t *  @default []",
                    "13667": "\t\t *  @type array",
                    "13668": "\t\t *  @default []",
                    "13674": "\t\t *  @type array",
                    "13675": "\t\t *  @default []",
                    "13682": "\t\t *  @type array",
                    "13683": "\t\t *  @default []",
                    "13689": "\t\t *  @type array",
                    "13690": "\t\t *  @default []",
                    "13698": "\t\t *  @type array",
                    "13699": "\t\t *  @default []",
                    "13706": "\t\t *  @type array",
                    "13707": "\t\t *  @default []",
                    "13714": "\t\t *  @type array",
                    "13715": "\t\t *  @default []",
                    "13721": "\t\t *  @type string",
                    "13722": "\t\t *  @default <i>Empty string</i>",
                    "13728": "\t\t *  @type node",
                    "13729": "\t\t *  @default null",
                    "13735": "\t\t *  @type node",
                    "13736": "\t\t *  @default null",
                    "13742": "\t\t *  @type node",
                    "13743": "\t\t *  @default null",
                    "13749": "\t\t *  @type node",
                    "13750": "\t\t *  @default null",
                    "13756": "\t\t *  @type node",
                    "13757": "\t\t *  @default null",
                    "13761": "\t\t/**",
                    "13762": "\t\t * Indicate if when using server-side processing the loading of data",
                    "13763": "\t\t * should be deferred until the second draw.",
                    "13764": "\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13765": "\t\t * set a default use {@link DataTable.defaults}.",
                    "13766": "\t\t *  @type boolean",
                    "13767": "\t\t *  @default false",
                    "13768": "\t\t */",
                    "13769": "\t\t\"bDeferLoading\": false,",
                    "13770": "",
                    "13773": "\t\t *  @type boolean",
                    "13774": "\t\t *  @default false",
                    "13781": "\t\t *  @type array",
                    "13782": "\t\t *  @default []",
                    "13791": "\t\t *  @type string",
                    "13792": "\t\t *  @default null",
                    "13798": "\t\t *  @type integer",
                    "13799": "\t\t *  @default null",
                    "13807": "\t\t *  @type string",
                    "13808": "\t\t *  @default two_button",
                    "13816": "\t\t *  @type int",
                    "13817": "\t\t *  @default 0",
                    "13831": "\t\t *  @type array",
                    "13832": "\t\t *  @default []",
                    "13844": "\t\t *  @type array",
                    "13845": "\t\t *  @default []",
                    "13851": "\t\t *  @type object",
                    "13852": "\t\t *  @default null",
                    "13858": "\t\t *  @type object",
                    "13859": "\t\t *  @default null",
                    "13864": "\t\t * Source url for AJAX data for the table.",
                    "13865": "\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13866": "\t\t * set a default use {@link DataTable.defaults}.",
                    "13867": "\t\t *  @type string",
                    "13868": "\t\t *  @default null",
                    "13869": "\t\t */",
                    "13870": "\t\t\"sAjaxSource\": null,",
                    "13871": "",
                    "13872": "\t\t/**",
                    "13873": "\t\t * Property from a given object from which to read the table data from. This",
                    "13874": "\t\t * can be an empty string (when not server-side processing), in which case",
                    "13875": "\t\t * it is  assumed an an array is given directly.",
                    "13876": "\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13877": "\t\t * set a default use {@link DataTable.defaults}.",
                    "13878": "\t\t *  @type string",
                    "13880": "\t\t\"sAjaxDataProp\": null,",
                    "13886": "\t\t *  @type object",
                    "13887": "\t\t *  @default null",
                    "13893": "\t\t *  @type object",
                    "13894": "\t\t *  @default undefined",
                    "13900": "\t\t *  @type object",
                    "13901": "\t\t *  @default undefined",
                    "13905": "\t\t/**",
                    "13906": "\t\t * Function to get the server-side data.",
                    "13907": "\t\t * Note that this parameter will be set by the initialisation routine. To",
                    "13908": "\t\t * set a default use {@link DataTable.defaults}.",
                    "13909": "\t\t *  @type function",
                    "13910": "\t\t */",
                    "13911": "\t\t\"fnServerData\": null,",
                    "13912": "",
                    "13913": "\t\t/**",
                    "13914": "\t\t * Functions which are called prior to sending an Ajax request so extra",
                    "13915": "\t\t * parameters can easily be sent to the server",
                    "13916": "\t\t *  @type array",
                    "13917": "\t\t *  @default []",
                    "13918": "\t\t */",
                    "13919": "\t\t\"aoServerParams\": [],",
                    "13920": "",
                    "13926": "\t\t *  @type string",
                    "13934": "\t\t *  @type function",
                    "13942": "\t\t *  @type array",
                    "13943": "\t\t *  @default []",
                    "13950": "\t\t *  @type int",
                    "13951": "\t\t *  @default 0",
                    "13957": "\t\t *  @type boolean",
                    "13958": "\t\t *  @default false",
                    "13964": "\t\t *  @type int",
                    "13965": "\t\t *  @default -1",
                    "13971": "\t\t *  @type int",
                    "13972": "\t\t *  @default 10",
                    "13978": "\t\t *  @type int",
                    "13979": "\t\t *  @default 0",
                    "13988": "\t\t *  @type int",
                    "13989": "\t\t *  @default 0",
                    "13990": "\t\t *  @private",
                    "13999": "\t\t *  @type boolean",
                    "14000": "\t\t *  @default 0",
                    "14001": "\t\t *  @private",
                    "14007": "\t\t *  @type object",
                    "14008": "\t\t *  @default {}",
                    "14016": "\t\t *  @type boolean",
                    "14017": "\t\t *  @default false",
                    "14026": "\t\t *  @type boolean",
                    "14027": "\t\t *  @default false",
                    "14038": "\t\t *  @type boolean",
                    "14044": "\t\t *  @type object",
                    "14045": "\t\t *  @default null",
                    "14052": "\t\t *  @type array",
                    "14053": "\t\t *  @default []",
                    "14060": "\t\t *  @type function",
                    "14071": "\t\t *  @type function",
                    "14082": "\t\t *  @type function",
                    "14108": "\t\t *  @type object",
                    "14109": "\t\t *  @default null",
                    "14117": "\t\t *  @type string",
                    "14118": "\t\t *  @default null",
                    "14140": "\t\t *  @type array",
                    "14141": "\t\t *  @default []",
                    "14147": "\t\t *  @type object",
                    "14148": "\t\t *  @default {}",
                    "14154": "\t\t *  @type function",
                    "14155": "\t\t *  @default null",
                    "14161": "\t\t *  @type string",
                    "14162": "\t\t *  @default null",
                    "14164": "\t\t\"rowId\": null",
                    "14218": "\t\tbuild:\"bs5/dt-1.13.6\",",
                    "14236": "\t\t * This is an array of objects which describe the feature plug-ins that are",
                    "14237": "\t\t * available to DataTables. These feature plug-ins are then available for",
                    "14238": "\t\t * use through the `dom` initialisation option.",
                    "14239": "\t\t *",
                    "14240": "\t\t * Each feature plug-in is described by an object which must have the",
                    "14241": "\t\t * following properties:",
                    "14242": "\t\t *",
                    "14243": "\t\t * * `fnInit` - function that is used to initialise the plug-in,",
                    "14244": "\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`",
                    "14245": "\t\t *   instillation option. This is case sensitive.",
                    "14246": "\t\t *",
                    "14247": "\t\t * The `fnInit` function has the following input parameters:",
                    "14248": "\t\t *",
                    "14249": "\t\t * 1. `{object}` DataTables settings object: see",
                    "14250": "\t\t *    {@link DataTable.models.oSettings}",
                    "14251": "\t\t *",
                    "14252": "\t\t * And the following return is expected:",
                    "14253": "\t\t *",
                    "14254": "\t\t * * {node|null} The element which contains your feature. Note that the",
                    "14255": "\t\t *   return may also be void if your plug-in does not require to inject any",
                    "14256": "\t\t *   DOM elements into DataTables control (`dom`) - for example this might",
                    "14257": "\t\t *   be useful when developing a plug-in which allows table control via",
                    "14258": "\t\t *   keyboard entry",
                    "14259": "\t\t *",
                    "14260": "\t\t *  @type array",
                    "14261": "\t\t *",
                    "14262": "\t\t *  @example",
                    "14263": "\t\t *    $.fn.dataTable.ext.features.push( {",
                    "14264": "\t\t *      \"fnInit\": function( oSettings ) {",
                    "14265": "\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );",
                    "14266": "\t\t *      },",
                    "14267": "\t\t *      \"cFeature\": \"T\"",
                    "14268": "\t\t *    } );",
                    "14270": "\t\tfeature: [],",
                    "14365": "\t\t/**",
                    "14366": "\t\t * Internal functions, exposed for used in plug-ins.",
                    "14367": "\t\t *",
                    "14368": "\t\t * Please note that you should not need to use the internal methods for",
                    "14369": "\t\t * anything other than a plug-in (and even then, try to avoid if possible).",
                    "14370": "\t\t * The internal function may change between releases.",
                    "14371": "\t\t *",
                    "14372": "\t\t *  @type object",
                    "14373": "\t\t *  @default {}",
                    "14374": "\t\t */",
                    "14375": "\t\tinternal: {},",
                    "14376": "",
                    "14377": "",
                    "14685": "\t\t/**",
                    "14686": "\t\t * jQuery UI class container",
                    "14687": "\t\t *  @type object",
                    "14688": "\t\t *  @deprecated Since v1.10",
                    "14689": "\t\t */",
                    "14690": "\t\toJUIClasses: {},",
                    "14691": "",
                    "14692": "",
                    "14712": "\t\toApi:         _ext.internal,",
                    "14719": "\t\t\"sTable\": \"dataTable\",",
                    "14720": "\t\t\"sNoFooter\": \"no-footer\",",
                    "14721": "",
                    "14722": "\t\t/* Paging buttons */",
                    "14723": "\t\t\"sPageButton\": \"paginate_button\",",
                    "14724": "\t\t\"sPageButtonActive\": \"current\",",
                    "14725": "\t\t\"sPageButtonDisabled\": \"disabled\",",
                    "14726": "",
                    "14727": "\t\t/* Striping classes */",
                    "14728": "\t\t\"sStripeOdd\": \"odd\",",
                    "14729": "\t\t\"sStripeEven\": \"even\",",
                    "14730": "",
                    "14731": "\t\t/* Empty row */",
                    "14732": "\t\t\"sRowEmpty\": \"dataTables_empty\",",
                    "14733": "",
                    "14734": "\t\t/* Features */",
                    "14735": "\t\t\"sWrapper\": \"dataTables_wrapper\",",
                    "14736": "\t\t\"sFilter\": \"dataTables_filter\",",
                    "14737": "\t\t\"sInfo\": \"dataTables_info\",",
                    "14738": "\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */",
                    "14739": "\t\t\"sLength\": \"dataTables_length\",",
                    "14740": "\t\t\"sProcessing\": \"dataTables_processing\",",
                    "14741": "",
                    "14742": "\t\t/* Sorting */",
                    "14743": "\t\t\"sSortAsc\": \"sorting_asc\",",
                    "14744": "\t\t\"sSortDesc\": \"sorting_desc\",",
                    "14745": "\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */",
                    "14746": "\t\t\"sSortableAsc\": \"sorting_desc_disabled\",",
                    "14747": "\t\t\"sSortableDesc\": \"sorting_asc_disabled\",",
                    "14748": "\t\t\"sSortableNone\": \"sorting_disabled\",",
                    "14749": "\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */",
                    "14750": "",
                    "14751": "\t\t/* Filtering */",
                    "14752": "\t\t\"sFilterInput\": \"\",",
                    "14753": "",
                    "14754": "\t\t/* Page length */",
                    "14755": "\t\t\"sLengthSelect\": \"\",",
                    "14756": "",
                    "14757": "\t\t/* Scrolling */",
                    "14758": "\t\t\"sScrollWrapper\": \"dataTables_scroll\",",
                    "14759": "\t\t\"sScrollHead\": \"dataTables_scrollHead\",",
                    "14760": "\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",",
                    "14761": "\t\t\"sScrollBody\": \"dataTables_scrollBody\",",
                    "14762": "\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",",
                    "14763": "\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",",
                    "14764": "",
                    "14765": "\t\t/* Misc */",
                    "14766": "\t\t\"sHeaderTH\": \"\",",
                    "14767": "\t\t\"sFooterTH\": \"\",",
                    "14768": "",
                    "14769": "\t\t// Deprecated",
                    "14770": "\t\t\"sSortJUIAsc\": \"\",",
                    "14771": "\t\t\"sSortJUIDesc\": \"\",",
                    "14772": "\t\t\"sSortJUI\": \"\",",
                    "14773": "\t\t\"sSortJUIAscAllowed\": \"\",",
                    "14774": "\t\t\"sSortJUIDescAllowed\": \"\",",
                    "14775": "\t\t\"sSortJUIWrapper\": \"\",",
                    "14776": "\t\t\"sSortIcon\": \"\",",
                    "14777": "\t\t\"sJUIHeader\": \"\",",
                    "14778": "\t\t\"sJUIFooter\": \"\"",
                    "14782": "\tvar extPagination = DataTable.ext.pager;",
                    "14784": "\tfunction _numbers ( page, pages ) {",
                    "14785": "\t\tvar",
                    "14786": "\t\t\tnumbers = [],",
                    "14787": "\t\t\tbuttons = extPagination.numbers_length,",
                    "14788": "\t\t\thalf = Math.floor( buttons / 2 ),",
                    "14789": "\t\t\ti = 1;",
                    "14791": "\t\tif ( pages <= buttons ) {",
                    "14792": "\t\t\tnumbers = _range( 0, pages );",
                    "14793": "\t\t}",
                    "14794": "\t\telse if ( page <= half ) {",
                    "14795": "\t\t\tnumbers = _range( 0, buttons-2 );",
                    "14796": "\t\t\tnumbers.push( 'ellipsis' );",
                    "14797": "\t\t\tnumbers.push( pages-1 );",
                    "14798": "\t\t}",
                    "14799": "\t\telse if ( page >= pages - 1 - half ) {",
                    "14800": "\t\t\tnumbers = _range( pages-(buttons-2), pages );",
                    "14801": "\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6",
                    "14802": "\t\t\tnumbers.splice( 0, 0, 0 );",
                    "14804": "\t\telse {",
                    "14805": "\t\t\tnumbers = _range( page-half+2, page+half-1 );",
                    "14806": "\t\t\tnumbers.push( 'ellipsis' );",
                    "14807": "\t\t\tnumbers.push( pages-1 );",
                    "14808": "\t\t\tnumbers.splice( 0, 0, 'ellipsis' );",
                    "14809": "\t\t\tnumbers.splice( 0, 0, 0 );",
                    "14811": "",
                    "14812": "\t\tnumbers.DT_el = 'span';",
                    "14813": "\t\treturn numbers;",
                    "14817": "\t$.extend( extPagination, {",
                    "14818": "\t\tsimple: function ( page, pages ) {",
                    "14819": "\t\t\treturn [ 'previous', 'next' ];",
                    "14820": "\t\t},",
                    "14822": "\t\tfull: function ( page, pages ) {",
                    "14823": "\t\t\treturn [  'first', 'previous', 'next', 'last' ];",
                    "14824": "\t\t},",
                    "14826": "\t\tnumbers: function ( page, pages ) {",
                    "14827": "\t\t\treturn [ _numbers(page, pages) ];",
                    "14828": "\t\t},",
                    "14830": "\t\tsimple_numbers: function ( page, pages ) {",
                    "14831": "\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];",
                    "14832": "\t\t},",
                    "14834": "\t\tfull_numbers: function ( page, pages ) {",
                    "14835": "\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];",
                    "14836": "\t\t},",
                    "14837": "",
                    "14838": "\t\tfirst_last_numbers: function (page, pages) {",
                    "14839": "\t \t\treturn ['first', _numbers(page, pages), 'last'];",
                    "14840": "\t \t},",
                    "14842": "\t\t// For testing and plug-ins to use",
                    "14843": "\t\t_numbers: _numbers,",
                    "14845": "\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_",
                    "14846": "\t\tnumbers_length: 7",
                    "14847": "\t} );",
                    "14850": "\t$.extend( true, DataTable.ext.renderer, {",
                    "14851": "\t\tpageButton: {",
                    "14852": "\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {",
                    "14853": "\t\t\t\tvar classes = settings.oClasses;",
                    "14854": "\t\t\t\tvar lang = settings.oLanguage.oPaginate;",
                    "14855": "\t\t\t\tvar aria = settings.oLanguage.oAria.paginate || {};",
                    "14856": "\t\t\t\tvar btnDisplay, btnClass;",
                    "14857": "",
                    "14858": "\t\t\t\tvar attach = function( container, buttons ) {",
                    "14859": "\t\t\t\t\tvar i, ien, node, button;",
                    "14860": "\t\t\t\t\tvar disabledClass = classes.sPageButtonDisabled;",
                    "14861": "\t\t\t\t\tvar clickHandler = function ( e ) {",
                    "14862": "\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );",
                    "14863": "\t\t\t\t\t};",
                    "14865": "\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {",
                    "14866": "\t\t\t\t\t\tbutton = buttons[i];",
                    "14868": "\t\t\t\t\t\tif ( Array.isArray( button ) ) {",
                    "14869": "\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )",
                    "14870": "\t\t\t\t\t\t\t\t.appendTo( container );",
                    "14871": "\t\t\t\t\t\t\tattach( inner, button );",
                    "14872": "\t\t\t\t\t\t}",
                    "14873": "\t\t\t\t\t\telse {",
                    "14874": "\t\t\t\t\t\t\tvar disabled = false;",
                    "14876": "\t\t\t\t\t\t\tbtnDisplay = null;",
                    "14877": "\t\t\t\t\t\t\tbtnClass = button;",
                    "14879": "\t\t\t\t\t\t\tswitch ( button ) {",
                    "14880": "\t\t\t\t\t\t\t\tcase 'ellipsis':",
                    "14881": "\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');",
                    "14882": "\t\t\t\t\t\t\t\t\tbreak;",
                    "14884": "\t\t\t\t\t\t\t\tcase 'first':",
                    "14885": "\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;",
                    "14887": "\t\t\t\t\t\t\t\t\tif ( page === 0 ) {",
                    "14888": "\t\t\t\t\t\t\t\t\t\tdisabled = true;",
                    "14889": "\t\t\t\t\t\t\t\t\t}",
                    "14890": "\t\t\t\t\t\t\t\t\tbreak;",
                    "14892": "\t\t\t\t\t\t\t\tcase 'previous':",
                    "14893": "\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;",
                    "14895": "\t\t\t\t\t\t\t\t\tif ( page === 0 ) {",
                    "14896": "\t\t\t\t\t\t\t\t\t\tdisabled = true;",
                    "14897": "\t\t\t\t\t\t\t\t\t}",
                    "14898": "\t\t\t\t\t\t\t\t\tbreak;",
                    "14900": "\t\t\t\t\t\t\t\tcase 'next':",
                    "14901": "\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;",
                    "14903": "\t\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {",
                    "14904": "\t\t\t\t\t\t\t\t\t\tdisabled = true;",
                    "14905": "\t\t\t\t\t\t\t\t\t}",
                    "14906": "\t\t\t\t\t\t\t\t\tbreak;",
                    "14908": "\t\t\t\t\t\t\t\tcase 'last':",
                    "14909": "\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;",
                    "14911": "\t\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {",
                    "14912": "\t\t\t\t\t\t\t\t\t\tdisabled = true;",
                    "14913": "\t\t\t\t\t\t\t\t\t}",
                    "14914": "\t\t\t\t\t\t\t\t\tbreak;",
                    "14916": "\t\t\t\t\t\t\t\tdefault:",
                    "14917": "\t\t\t\t\t\t\t\t\tbtnDisplay = settings.fnFormatNumber( button + 1 );",
                    "14918": "\t\t\t\t\t\t\t\t\tbtnClass = page === button ?",
                    "14919": "\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';",
                    "14920": "\t\t\t\t\t\t\t\t\tbreak;",
                    "14921": "\t\t\t\t\t\t\t}",
                    "14923": "\t\t\t\t\t\t\tif ( btnDisplay !== null ) {",
                    "14924": "\t\t\t\t\t\t\t\tvar tag = settings.oInit.pagingTag || 'a';",
                    "14926": "\t\t\t\t\t\t\t\tif (disabled) {",
                    "14927": "\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;",
                    "14928": "\t\t\t\t\t\t\t\t}",
                    "14930": "\t\t\t\t\t\t\t\tnode = $('<'+tag+'>', {",
                    "14931": "\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,",
                    "14932": "\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,",
                    "14933": "\t\t\t\t\t\t\t\t\t\t'aria-disabled': disabled ? 'true' : null,",
                    "14934": "\t\t\t\t\t\t\t\t\t\t'aria-label': aria[ button ],",
                    "14935": "\t\t\t\t\t\t\t\t\t\t'role': 'link',",
                    "14936": "\t\t\t\t\t\t\t\t\t\t'aria-current': btnClass === classes.sPageButtonActive ? 'page' : null,",
                    "14937": "\t\t\t\t\t\t\t\t\t\t'data-dt-idx': button,",
                    "14938": "\t\t\t\t\t\t\t\t\t\t'tabindex': disabled ? -1 : settings.iTabIndex,",
                    "14939": "\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?",
                    "14940": "\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :",
                    "14941": "\t\t\t\t\t\t\t\t\t\t\tnull",
                    "14942": "\t\t\t\t\t\t\t\t\t} )",
                    "14943": "\t\t\t\t\t\t\t\t\t.html( btnDisplay )",
                    "14944": "\t\t\t\t\t\t\t\t\t.appendTo( container );",
                    "14945": "",
                    "14946": "\t\t\t\t\t\t\t\t_fnBindAction(",
                    "14947": "\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler",
                    "14948": "\t\t\t\t\t\t\t\t);",
                    "14949": "\t\t\t\t\t\t\t}",
                    "14950": "\t\t\t\t\t\t}",
                    "14951": "\t\t\t\t\t}",
                    "14952": "\t\t\t\t};",
                    "14954": "\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used",
                    "14955": "\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for",
                    "14956": "\t\t\t\t// accessibility, but neither are frames.",
                    "14957": "\t\t\t\tvar activeEl;",
                    "14959": "\t\t\t\ttry {",
                    "14960": "\t\t\t\t\t// Because this approach is destroying and recreating the paging",
                    "14961": "\t\t\t\t\t// elements, focus is lost on the select button which is bad for",
                    "14962": "\t\t\t\t\t// accessibility. So we want to restore focus once the draw has",
                    "14963": "\t\t\t\t\t// completed",
                    "14964": "\t\t\t\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');",
                    "14965": "\t\t\t\t}",
                    "14966": "\t\t\t\tcatch (e) {}",
                    "14968": "\t\t\t\tattach( $(host).empty(), buttons );",
                    "14970": "\t\t\t\tif ( activeEl !== undefined ) {",
                    "14971": "\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');",
                    "14972": "\t\t\t\t}",
                    "14974": "\t\t}",
                    "14975": "\t} );",
                    "14976": "",
                    "14979": "\t// Built in type detection. See model.ext.aTypes for information about",
                    "14980": "\t// what is required from this methods.",
                    "14981": "\t$.extend( DataTable.ext.type.detect, [",
                    "14982": "\t\t// Plain numbers - first since V8 detects some plain numbers as dates",
                    "14983": "\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).",
                    "14984": "\t\tfunction ( d, settings )",
                    "14985": "\t\t{",
                    "14986": "\t\t\tvar decimal = settings.oLanguage.sDecimal;",
                    "14987": "\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;",
                    "14990": "\t\t// Dates (only those recognised by the browser's Date.parse)",
                    "14991": "\t\tfunction ( d, settings )",
                    "15003": "\t\t// Formatted numbers",
                    "15004": "\t\tfunction ( d, settings )",
                    "15007": "\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;",
                    "15010": "\t\t// HTML numeric",
                    "15011": "\t\tfunction ( d, settings )",
                    "15014": "\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;",
                    "15017": "\t\t// HTML numeric, formatted",
                    "15018": "\t\tfunction ( d, settings )",
                    "15021": "\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;",
                    "15023": "",
                    "15024": "\t\t// HTML (this is strict checking - there must be html)",
                    "15025": "\t\tfunction ( d, settings )",
                    "15026": "\t\t{",
                    "15027": "\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?",
                    "15028": "\t\t\t\t'html' : null;",
                    "15030": "\t] );",
                    "15031": "",
                    "15032": "",
                    "15033": "",
                    "15034": "\t// Filter formatting functions. See model.ext.ofnSearch for information about",
                    "15035": "\t// what is required from these methods.",
                    "15036": "\t//",
                    "15037": "\t// Note that additional search methods are added for the html numbers and",
                    "15038": "\t// html formatted numbers by `_addNumericSort()` when we know what the decimal",
                    "15039": "\t// place is",
                    "15042": "\t$.extend( DataTable.ext.type.search, {",
                    "15043": "\t\thtml: function ( data ) {",
                    "15044": "\t\t\treturn _empty(data) ?",
                    "15045": "\t\t\t\tdata :",
                    "15046": "\t\t\t\ttypeof data === 'string' ?",
                    "15047": "\t\t\t\t\tdata",
                    "15048": "\t\t\t\t\t\t.replace( _re_new_lines, \" \" )",
                    "15049": "\t\t\t\t\t\t.replace( _re_html, \"\" ) :",
                    "15050": "\t\t\t\t\t'';",
                    "15052": "",
                    "15053": "\t\tstring: function ( data ) {",
                    "15054": "\t\t\treturn _empty(data) ?",
                    "15055": "\t\t\t\tdata :",
                    "15056": "\t\t\t\ttypeof data === 'string' ?",
                    "15057": "\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :",
                    "15058": "\t\t\t\t\tdata;",
                    "15060": "\t} );",
                    "15090": "\t\t}",
                    "15091": "",
                    "15092": "\t\treturn d * 1;",
                    "15093": "\t};",
                    "15094": "",
                    "15095": "",
                    "15096": "\t// Add the numeric 'deformatting' functions for sorting and search. This is done",
                    "15097": "\t// in a function to provide an easy ability for the language options to add",
                    "15098": "\t// additional methods if a non-period decimal place is used.",
                    "15099": "\tfunction _addNumericSort ( decimalPlace ) {",
                    "15100": "\t\t$.each(",
                    "15101": "\t\t\t{",
                    "15102": "\t\t\t\t// Plain numbers",
                    "15103": "\t\t\t\t\"num\": function ( d ) {",
                    "15104": "\t\t\t\t\treturn __numericReplace( d, decimalPlace );",
                    "15105": "\t\t\t\t},",
                    "15106": "",
                    "15107": "\t\t\t\t// Formatted numbers",
                    "15108": "\t\t\t\t\"num-fmt\": function ( d ) {",
                    "15109": "\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );",
                    "15110": "\t\t\t\t},",
                    "15111": "",
                    "15112": "\t\t\t\t// HTML numeric",
                    "15113": "\t\t\t\t\"html-num\": function ( d ) {",
                    "15114": "\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );",
                    "15115": "\t\t\t\t},",
                    "15116": "",
                    "15117": "\t\t\t\t// HTML numeric, formatted",
                    "15118": "\t\t\t\t\"html-num-fmt\": function ( d ) {",
                    "15119": "\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );",
                    "15120": "\t\t\t\t}",
                    "15121": "\t\t\t},",
                    "15122": "\t\t\tfunction ( key, fn ) {",
                    "15123": "\t\t\t\t// Add the ordering method",
                    "15124": "\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;",
                    "15125": "",
                    "15126": "\t\t\t\t// For HTML types add a search formatter that will strip the HTML",
                    "15127": "\t\t\t\tif ( key.match(/^html\\-/) ) {",
                    "15128": "\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;",
                    "15129": "\t\t\t\t}",
                    "15130": "\t\t\t}",
                    "15131": "\t\t);",
                    "15132": "\t}",
                    "15133": "",
                    "15134": "",
                    "15135": "\t// Default sort methods",
                    "15136": "\t$.extend( _ext.type.order, {",
                    "15137": "\t\t// Dates",
                    "15138": "\t\t\"date-pre\": function ( d ) {",
                    "15139": "\t\t\tvar ts = Date.parse( d );",
                    "15140": "\t\t\treturn isNaN(ts) ? -Infinity : ts;",
                    "15141": "\t\t},",
                    "15143": "\t\t// html",
                    "15144": "\t\t\"html-pre\": function ( a ) {",
                    "15145": "\t\t\treturn _empty(a) ?",
                    "15146": "\t\t\t\t'' :",
                    "15147": "\t\t\t\ta.replace ?",
                    "15148": "\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :",
                    "15149": "\t\t\t\t\ta+'';",
                    "15150": "\t\t},",
                    "15152": "\t\t// string",
                    "15153": "\t\t\"string-pre\": function ( a ) {",
                    "15154": "\t\t\t// This is a little complex, but faster than always calling toString,",
                    "15155": "\t\t\t// http://jsperf.com/tostring-v-check",
                    "15156": "\t\t\treturn _empty(a) ?",
                    "15157": "\t\t\t\t'' :",
                    "15158": "\t\t\t\ttypeof a === 'string' ?",
                    "15159": "\t\t\t\t\ta.toLowerCase() :",
                    "15160": "\t\t\t\t\t! a.toString ?",
                    "15161": "\t\t\t\t\t\t'' :",
                    "15162": "\t\t\t\t\t\ta.toString();",
                    "15163": "\t\t},",
                    "15165": "\t\t// string-asc and -desc are retained only for compatibility with the old",
                    "15166": "\t\t// sort methods",
                    "15167": "\t\t\"string-asc\": function ( x, y ) {",
                    "15168": "\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));",
                    "15171": "\t\t\"string-desc\": function ( x, y ) {",
                    "15172": "\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));",
                    "15173": "\t\t}",
                    "15174": "\t} );",
                    "15177": "\t// Numeric sorting types - order doesn't matter here",
                    "15178": "\t_addNumericSort( '' );",
                    "15181": "\t$.extend( true, DataTable.ext.renderer, {",
                    "15182": "\t\theader: {",
                    "15183": "\t\t\t_: function ( settings, cell, column, classes ) {",
                    "15189": "\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {",
                    "15194": "\t\t\t\t\tvar colIdx = column.idx;",
                    "15198": "\t\t\t\t\t\t\tclasses.sSortAsc +' '+",
                    "15199": "\t\t\t\t\t\t\tclasses.sSortDesc",
                    "15201": "\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?",
                    "15202": "\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?",
                    "15203": "\t\t\t\t\t\t\t\tclasses.sSortDesc :",
                    "15204": "\t\t\t\t\t\t\t\tcolumn.sSortingClass",
                    "15206": "\t\t\t\t} );",
                    "15207": "\t\t\t},",
                    "15209": "\t\t\tjqueryui: function ( settings, cell, column, classes ) {",
                    "15210": "\t\t\t\t$('<div/>')",
                    "15211": "\t\t\t\t\t.addClass( classes.sSortJUIWrapper )",
                    "15212": "\t\t\t\t\t.append( cell.contents() )",
                    "15213": "\t\t\t\t\t.append( $('<span/>')",
                    "15214": "\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )",
                    "15215": "\t\t\t\t\t)",
                    "15216": "\t\t\t\t\t.appendTo( cell );",
                    "15218": "\t\t\t\t// Attach a sort listener to update on sort",
                    "15219": "\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {",
                    "15220": "\t\t\t\t\tif ( settings !== ctx ) {",
                    "15221": "\t\t\t\t\t\treturn;",
                    "15224": "\t\t\t\t\tvar colIdx = column.idx;",
                    "15226": "\t\t\t\t\tcell",
                    "15227": "\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )",
                    "15228": "\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?",
                    "15229": "\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?",
                    "15230": "\t\t\t\t\t\t\t\tclasses.sSortDesc :",
                    "15231": "\t\t\t\t\t\t\t\tcolumn.sSortingClass",
                    "15232": "\t\t\t\t\t\t);",
                    "15234": "\t\t\t\t\tcell",
                    "15235": "\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )",
                    "15236": "\t\t\t\t\t\t.removeClass(",
                    "15237": "\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+",
                    "15238": "\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+",
                    "15239": "\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+",
                    "15240": "\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+",
                    "15241": "\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed",
                    "15242": "\t\t\t\t\t\t)",
                    "15243": "\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?",
                    "15244": "\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?",
                    "15245": "\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :",
                    "15246": "\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI",
                    "15247": "\t\t\t\t\t\t);",
                    "15253": "\t/*",
                    "15254": "\t * Public helper functions. These aren't used internally by DataTables, or",
                    "15255": "\t * called by any of the options passed into DataTables, but they can be used",
                    "15256": "\t * externally by developers working with DataTables. They are helper functions",
                    "15257": "\t * to make working with DataTables a little bit easier.",
                    "15258": "\t */",
                    "15260": "\tvar __htmlEscapeEntities = function ( d ) {",
                    "15261": "\t\tif (Array.isArray(d)) {",
                    "15262": "\t\t\td = d.join(',');",
                    "15263": "\t\t}",
                    "15265": "\t\treturn typeof d === 'string' ?",
                    "15266": "\t\t\td",
                    "15267": "\t\t\t\t.replace(/&/g, '&amp;')",
                    "15268": "\t\t\t\t.replace(/</g, '&lt;')",
                    "15269": "\t\t\t\t.replace(/>/g, '&gt;')",
                    "15270": "\t\t\t\t.replace(/\"/g, '&quot;') :",
                    "15271": "\t\t\td;",
                    "15274": "\t// Common logic for moment, luxon or a date action",
                    "15275": "\tfunction __mld( dt, momentFn, luxonFn, dateFn, arg1 ) {",
                    "15276": "\t\tif (window.moment) {",
                    "15277": "\t\t\treturn dt[momentFn]( arg1 );",
                    "15279": "\t\telse if (window.luxon) {",
                    "15280": "\t\t\treturn dt[luxonFn]( arg1 );",
                    "15282": "",
                    "15283": "\t\treturn dateFn ? dt[dateFn]( arg1 ) : dt;",
                    "15284": "\t}",
                    "15287": "\tvar __mlWarning = false;",
                    "15288": "\tfunction __mldObj (d, format, locale) {",
                    "15289": "\t\tvar dt;",
                    "15291": "\t\tif (window.moment) {",
                    "15292": "\t\t\tdt = window.moment.utc( d, format, locale, true );",
                    "15294": "\t\t\tif (! dt.isValid()) {",
                    "15295": "\t\t\t\treturn null;",
                    "15296": "\t\t\t}",
                    "15298": "\t\telse if (window.luxon) {",
                    "15299": "\t\t\tdt = format && typeof d === 'string'",
                    "15300": "\t\t\t\t? window.luxon.DateTime.fromFormat( d, format )",
                    "15301": "\t\t\t\t: window.luxon.DateTime.fromISO( d );",
                    "15303": "\t\t\tif (! dt.isValid) {",
                    "15304": "\t\t\t\treturn null;",
                    "15305": "\t\t\t}",
                    "15307": "\t\t\tdt.setLocale(locale);",
                    "15309": "\t\telse if (! format) {",
                    "15310": "\t\t\t// No format given, must be ISO",
                    "15311": "\t\t\tdt = new Date(d);",
                    "15313": "\t\telse {",
                    "15314": "\t\t\tif (! __mlWarning) {",
                    "15315": "\t\t\t\talert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');",
                    "15316": "\t\t\t}",
                    "15318": "\t\t\t__mlWarning = true;",
                    "15321": "\t\treturn dt;",
                    "15322": "\t}",
                    "15324": "\t// Wrapper for date, datetime and time which all operate the same way with the exception of",
                    "15325": "\t// the output string for auto locale support",
                    "15326": "\tfunction __mlHelper (localeString) {",
                    "15327": "\t\treturn function ( from, to, locale, def ) {",
                    "15328": "\t\t\t// Luxon and Moment support",
                    "15329": "\t\t\t// Argument shifting",
                    "15330": "\t\t\tif ( arguments.length === 0 ) {",
                    "15331": "\t\t\t\tlocale = 'en';",
                    "15332": "\t\t\t\tto = null; // means toLocaleString",
                    "15333": "\t\t\t\tfrom = null; // means iso8601",
                    "15335": "\t\t\telse if ( arguments.length === 1 ) {",
                    "15336": "\t\t\t\tlocale = 'en';",
                    "15337": "\t\t\t\tto = from;",
                    "15338": "\t\t\t\tfrom = null;",
                    "15340": "\t\t\telse if ( arguments.length === 2 ) {",
                    "15341": "\t\t\t\tlocale = to;",
                    "15342": "\t\t\t\tto = from;",
                    "15343": "\t\t\t\tfrom = null;",
                    "15346": "\t\t\tvar typeName = 'datetime-' + to;",
                    "15348": "\t\t\t// Add type detection and sorting specific to this date format - we need to be able to identify",
                    "15349": "\t\t\t// date type columns as such, rather than as numbers in extensions. Hence the need for this.",
                    "15350": "\t\t\tif (! DataTable.ext.type.order[typeName]) {",
                    "15351": "\t\t\t\t// The renderer will give the value to type detect as the type!",
                    "15352": "\t\t\t\tDataTable.ext.type.detect.unshift(function (d) {",
                    "15353": "\t\t\t\t\treturn d === typeName ? typeName : false;",
                    "15354": "\t\t\t\t});",
                    "15356": "\t\t\t\t// The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a",
                    "15357": "\t\t\t\t// `valueOf` which gives milliseconds epoch",
                    "15358": "\t\t\t\tDataTable.ext.type.order[typeName + '-asc'] = function (a, b) {",
                    "15359": "\t\t\t\t\tvar x = a.valueOf();",
                    "15360": "\t\t\t\t\tvar y = b.valueOf();",
                    "15362": "\t\t\t\t\treturn x === y",
                    "15363": "\t\t\t\t\t\t? 0",
                    "15364": "\t\t\t\t\t\t: x < y",
                    "15365": "\t\t\t\t\t\t\t? -1",
                    "15366": "\t\t\t\t\t\t\t: 1;",
                    "15367": "\t\t\t\t}",
                    "15369": "\t\t\t\tDataTable.ext.type.order[typeName + '-desc'] = function (a, b) {",
                    "15370": "\t\t\t\t\tvar x = a.valueOf();",
                    "15371": "\t\t\t\t\tvar y = b.valueOf();",
                    "15373": "\t\t\t\t\treturn x === y",
                    "15374": "\t\t\t\t\t\t? 0",
                    "15375": "\t\t\t\t\t\t: x > y",
                    "15376": "\t\t\t\t\t\t\t? -1",
                    "15377": "\t\t\t\t\t\t\t: 1;",
                    "15378": "\t\t\t\t}",
                    "15379": "\t\t\t}",
                    "15380": "",
                    "15381": "\t\t\treturn function ( d, type ) {",
                    "15382": "\t\t\t\t// Allow for a default value",
                    "15383": "\t\t\t\tif (d === null || d === undefined) {",
                    "15384": "\t\t\t\t\tif (def === '--now') {",
                    "15385": "\t\t\t\t\t\t// We treat everything as UTC further down, so no changes are",
                    "15386": "\t\t\t\t\t\t// made, as such need to get the local date / time as if it were",
                    "15387": "\t\t\t\t\t\t// UTC",
                    "15388": "\t\t\t\t\t\tvar local = new Date();",
                    "15389": "\t\t\t\t\t\td = new Date( Date.UTC(",
                    "15390": "\t\t\t\t\t\t\tlocal.getFullYear(), local.getMonth(), local.getDate(),",
                    "15391": "\t\t\t\t\t\t\tlocal.getHours(), local.getMinutes(), local.getSeconds()",
                    "15392": "\t\t\t\t\t\t) );",
                    "15393": "\t\t\t\t\t}",
                    "15394": "\t\t\t\t\telse {",
                    "15395": "\t\t\t\t\t\td = '';",
                    "15396": "\t\t\t\t\t}",
                    "15397": "\t\t\t\t}",
                    "15399": "\t\t\t\tif (type === 'type') {",
                    "15400": "\t\t\t\t\t// Typing uses the type name for fast matching",
                    "15401": "\t\t\t\t\treturn typeName;",
                    "15402": "\t\t\t\t}",
                    "15404": "\t\t\t\tif (d === '') {",
                    "15405": "\t\t\t\t\treturn type !== 'sort'",
                    "15406": "\t\t\t\t\t\t? ''",
                    "15407": "\t\t\t\t\t\t: __mldObj('0000-01-01 00:00:00', null, locale);",
                    "15408": "\t\t\t\t}",
                    "15410": "\t\t\t\t// Shortcut. If `from` and `to` are the same, we are using the renderer to",
                    "15411": "\t\t\t\t// format for ordering, not display - its already in the display format.",
                    "15412": "\t\t\t\tif ( to !== null && from === to && type !== 'sort' && type !== 'type' && ! (d instanceof Date) ) {",
                    "15413": "\t\t\t\t\treturn d;",
                    "15414": "\t\t\t\t}",
                    "15416": "\t\t\t\tvar dt = __mldObj(d, from, locale);",
                    "15418": "\t\t\t\tif (dt === null) {",
                    "15419": "\t\t\t\t\treturn d;",
                    "15422": "\t\t\t\tif (type === 'sort') {",
                    "15423": "\t\t\t\t\treturn dt;",
                    "15424": "\t\t\t\t}",
                    "15425": "",
                    "15426": "\t\t\t\tvar formatted = to === null",
                    "15427": "\t\t\t\t\t? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()",
                    "15428": "\t\t\t\t\t: __mld(dt, 'format', 'toFormat', 'toISOString', to);",
                    "15430": "\t\t\t\t// XSS protection",
                    "15431": "\t\t\t\treturn type === 'display' ?",
                    "15432": "\t\t\t\t\t__htmlEscapeEntities( formatted ) :",
                    "15433": "\t\t\t\t\tformatted;",
                    "15434": "\t\t\t};",
                    "15438": "\t// Based on locale, determine standard number formatting",
                    "15439": "\t// Fallback for legacy browsers is US English",
                    "15440": "\tvar __thousands = ',';",
                    "15441": "\tvar __decimal = '.';",
                    "15443": "\tif (window.Intl !== undefined) {",
                    "15444": "\t\ttry {",
                    "15445": "\t\t\tvar num = new Intl.NumberFormat().formatToParts(100000.1);",
                    "15446": "",
                    "15447": "\t\t\tfor (var i=0 ; i<num.length ; i++) {",
                    "15448": "\t\t\t\tif (num[i].type === 'group') {",
                    "15449": "\t\t\t\t\t__thousands = num[i].value;",
                    "15451": "\t\t\t\telse if (num[i].type === 'decimal') {",
                    "15452": "\t\t\t\t\t__decimal = num[i].value;",
                    "15454": "\t\t\t}",
                    "15455": "\t\t}",
                    "15456": "\t\tcatch (e) {",
                    "15457": "\t\t\t// noop",
                    "15458": "\t\t}",
                    "15459": "\t}",
                    "15461": "\t// Formatted date time detection - use by declaring the formats you are going to use",
                    "15462": "\tDataTable.datetime = function ( format, locale ) {",
                    "15463": "\t\tvar typeName = 'datetime-detect-' + format;",
                    "15465": "\t\tif (! locale) {",
                    "15466": "\t\t\tlocale = 'en';",
                    "15467": "\t\t}",
                    "15469": "\t\tif (! DataTable.ext.type.order[typeName]) {",
                    "15470": "\t\t\tDataTable.ext.type.detect.unshift(function (d) {",
                    "15471": "\t\t\t\tvar dt = __mldObj(d, format, locale);",
                    "15472": "\t\t\t\treturn d === '' || dt ? typeName : false;",
                    "15473": "\t\t\t});",
                    "15475": "\t\t\tDataTable.ext.type.order[typeName + '-pre'] = function (d) {",
                    "15476": "\t\t\t\treturn __mldObj(d, format, locale) || 0;",
                    "15477": "\t\t\t}",
                    "15482": "\t * Helpers for `columns.render`.",
                    "15484": "\t * The options defined here can be used with the `columns.render` initialisation",
                    "15485": "\t * option to provide a display renderer. The following functions are defined:",
                    "15486": "\t *",
                    "15487": "\t * * `number` - Will format numeric data (defined by `columns.data`) for",
                    "15488": "\t *   display, retaining the original unformatted data for sorting and filtering.",
                    "15489": "\t *   It takes 5 parameters:",
                    "15490": "\t *   * `string` - Thousands grouping separator",
                    "15491": "\t *   * `string` - Decimal point indicator",
                    "15492": "\t *   * `integer` - Number of decimal points to show",
                    "15493": "\t *   * `string` (optional) - Prefix.",
                    "15494": "\t *   * `string` (optional) - Postfix (/suffix).",
                    "15495": "\t * * `text` - Escape HTML to help prevent XSS attacks. It has no optional",
                    "15496": "\t *   parameters.",
                    "15497": "\t *",
                    "15498": "\t * @example",
                    "15499": "\t *   // Column definition using the number renderer",
                    "15500": "\t *   {",
                    "15501": "\t *     data: \"salary\",",
                    "15502": "\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )",
                    "15503": "\t *   }",
                    "15504": "\t *",
                    "15505": "\t * @namespace",
                    "15507": "\tDataTable.render = {",
                    "15508": "\t\tdate: __mlHelper('toLocaleDateString'),",
                    "15509": "\t\tdatetime: __mlHelper('toLocaleString'),",
                    "15510": "\t\ttime: __mlHelper('toLocaleTimeString'),",
                    "15511": "\t\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {",
                    "15512": "\t\t\t// Auto locale detection",
                    "15513": "\t\t\tif (thousands === null || thousands === undefined) {",
                    "15514": "\t\t\t\tthousands = __thousands;",
                    "15515": "\t\t\t}",
                    "15517": "\t\t\tif (decimal === null || decimal === undefined) {",
                    "15518": "\t\t\t\tdecimal = __decimal;",
                    "15521": "\t\t\treturn {",
                    "15522": "\t\t\t\tdisplay: function ( d ) {",
                    "15523": "\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {",
                    "15524": "\t\t\t\t\t\treturn d;",
                    "15525": "\t\t\t\t\t}",
                    "15526": "",
                    "15527": "\t\t\t\t\tif (d === '' || d === null) {",
                    "15528": "\t\t\t\t\t\treturn d;",
                    "15529": "\t\t\t\t\t}",
                    "15531": "\t\t\t\t\tvar negative = d < 0 ? '-' : '';",
                    "15532": "\t\t\t\t\tvar flo = parseFloat( d );",
                    "15534": "\t\t\t\t\t// If NaN then there isn't much formatting that we can do - just",
                    "15535": "\t\t\t\t\t// return immediately, escaping any HTML (this was supposed to",
                    "15536": "\t\t\t\t\t// be a number after all)",
                    "15537": "\t\t\t\t\tif ( isNaN( flo ) ) {",
                    "15538": "\t\t\t\t\t\treturn __htmlEscapeEntities( d );",
                    "15539": "\t\t\t\t\t}",
                    "15541": "\t\t\t\t\tflo = flo.toFixed( precision );",
                    "15542": "\t\t\t\t\td = Math.abs( flo );",
                    "15544": "\t\t\t\t\tvar intPart = parseInt( d, 10 );",
                    "15545": "\t\t\t\t\tvar floatPart = precision ?",
                    "15546": "\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):",
                    "15547": "\t\t\t\t\t\t'';",
                    "15549": "\t\t\t\t\t// If zero, then can't have a negative prefix",
                    "15550": "\t\t\t\t\tif (intPart === 0 && parseFloat(floatPart) === 0) {",
                    "15551": "\t\t\t\t\t\tnegative = '';",
                    "15552": "\t\t\t\t\t}",
                    "15554": "\t\t\t\t\treturn negative + (prefix||'') +",
                    "15555": "\t\t\t\t\t\tintPart.toString().replace(",
                    "15556": "\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands",
                    "15557": "\t\t\t\t\t\t) +",
                    "15558": "\t\t\t\t\t\tfloatPart +",
                    "15559": "\t\t\t\t\t\t(postfix||'');",
                    "15561": "\t\t\t};",
                    "15562": "\t\t},",
                    "15564": "\t\ttext: function () {",
                    "15565": "\t\t\treturn {",
                    "15566": "\t\t\t\tdisplay: __htmlEscapeEntities,",
                    "15567": "\t\t\t\tfilter: __htmlEscapeEntities",
                    "15568": "\t\t\t};",
                    "15570": "\t};",
                    "15573": "\t/*",
                    "15574": "\t * This is really a good bit rubbish this method of exposing the internal methods",
                    "15575": "\t * publicly... - To be fixed in 2.0 using methods on the prototype",
                    "15576": "\t */",
                    "15579": "\t/**",
                    "15580": "\t * Create a wrapper function for exporting an internal functions to an external API.",
                    "15581": "\t *  @param {string} fn API function name",
                    "15582": "\t *  @returns {function} wrapped function",
                    "15583": "\t *  @memberof DataTable#internal",
                    "15584": "\t */",
                    "15585": "\tfunction _fnExternApiFunc (fn)",
                    "15586": "\t{",
                    "15587": "\t\treturn function() {",
                    "15588": "\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(",
                    "15589": "\t\t\t\tArray.prototype.slice.call(arguments)",
                    "15591": "\t\t\treturn DataTable.ext.internal[fn].apply( this, args );",
                    "15592": "\t\t};",
                    "15593": "\t}",
                    "15596": "\t/**",
                    "15597": "\t * Reference to internal functions for use by plug-in developers. Note that",
                    "15598": "\t * these methods are references to internal functions and are considered to be",
                    "15599": "\t * private. If you use these methods, be aware that they are liable to change",
                    "15600": "\t * between versions.",
                    "15601": "\t *  @namespace",
                    "15602": "\t */",
                    "15603": "\t$.extend( DataTable.ext.internal, {",
                    "15604": "\t\t_fnExternApiFunc: _fnExternApiFunc,",
                    "15605": "\t\t_fnBuildAjax: _fnBuildAjax,",
                    "15606": "\t\t_fnAjaxUpdate: _fnAjaxUpdate,",
                    "15607": "\t\t_fnAjaxParameters: _fnAjaxParameters,",
                    "15608": "\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,",
                    "15609": "\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,",
                    "15610": "\t\t_fnAddColumn: _fnAddColumn,",
                    "15611": "\t\t_fnColumnOptions: _fnColumnOptions,",
                    "15612": "\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,",
                    "15613": "\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,",
                    "15614": "\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,",
                    "15615": "\t\t_fnVisbleColumns: _fnVisbleColumns,",
                    "15616": "\t\t_fnGetColumns: _fnGetColumns,",
                    "15617": "\t\t_fnColumnTypes: _fnColumnTypes,",
                    "15618": "\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,",
                    "15619": "\t\t_fnHungarianMap: _fnHungarianMap,",
                    "15620": "\t\t_fnCamelToHungarian: _fnCamelToHungarian,",
                    "15621": "\t\t_fnLanguageCompat: _fnLanguageCompat,",
                    "15622": "\t\t_fnBrowserDetect: _fnBrowserDetect,",
                    "15623": "\t\t_fnAddData: _fnAddData,",
                    "15624": "\t\t_fnAddTr: _fnAddTr,",
                    "15625": "\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,",
                    "15626": "\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,",
                    "15627": "\t\t_fnGetCellData: _fnGetCellData,",
                    "15628": "\t\t_fnSetCellData: _fnSetCellData,",
                    "15629": "\t\t_fnSplitObjNotation: _fnSplitObjNotation,",
                    "15630": "\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,",
                    "15631": "\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,",
                    "15632": "\t\t_fnGetDataMaster: _fnGetDataMaster,",
                    "15633": "\t\t_fnClearTable: _fnClearTable,",
                    "15634": "\t\t_fnDeleteIndex: _fnDeleteIndex,",
                    "15635": "\t\t_fnInvalidate: _fnInvalidate,",
                    "15636": "\t\t_fnGetRowElements: _fnGetRowElements,",
                    "15637": "\t\t_fnCreateTr: _fnCreateTr,",
                    "15638": "\t\t_fnBuildHead: _fnBuildHead,",
                    "15639": "\t\t_fnDrawHead: _fnDrawHead,",
                    "15640": "\t\t_fnDraw: _fnDraw,",
                    "15641": "\t\t_fnReDraw: _fnReDraw,",
                    "15642": "\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,",
                    "15643": "\t\t_fnDetectHeader: _fnDetectHeader,",
                    "15644": "\t\t_fnGetUniqueThs: _fnGetUniqueThs,",
                    "15645": "\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,",
                    "15646": "\t\t_fnFilterComplete: _fnFilterComplete,",
                    "15647": "\t\t_fnFilterCustom: _fnFilterCustom,",
                    "15648": "\t\t_fnFilterColumn: _fnFilterColumn,",
                    "15649": "\t\t_fnFilter: _fnFilter,",
                    "15650": "\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,",
                    "15651": "\t\t_fnEscapeRegex: _fnEscapeRegex,",
                    "15652": "\t\t_fnFilterData: _fnFilterData,",
                    "15653": "\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,",
                    "15654": "\t\t_fnUpdateInfo: _fnUpdateInfo,",
                    "15655": "\t\t_fnInfoMacros: _fnInfoMacros,",
                    "15656": "\t\t_fnInitialise: _fnInitialise,",
                    "15657": "\t\t_fnInitComplete: _fnInitComplete,",
                    "15658": "\t\t_fnLengthChange: _fnLengthChange,",
                    "15659": "\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,",
                    "15660": "\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,",
                    "15661": "\t\t_fnPageChange: _fnPageChange,",
                    "15662": "\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,",
                    "15663": "\t\t_fnProcessingDisplay: _fnProcessingDisplay,",
                    "15664": "\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,",
                    "15665": "\t\t_fnScrollDraw: _fnScrollDraw,",
                    "15666": "\t\t_fnApplyToChildren: _fnApplyToChildren,",
                    "15667": "\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,",
                    "15668": "\t\t_fnThrottle: _fnThrottle,",
                    "15669": "\t\t_fnConvertToWidth: _fnConvertToWidth,",
                    "15670": "\t\t_fnGetWidestNode: _fnGetWidestNode,",
                    "15671": "\t\t_fnGetMaxLenString: _fnGetMaxLenString,",
                    "15672": "\t\t_fnStringToCss: _fnStringToCss,",
                    "15673": "\t\t_fnSortFlatten: _fnSortFlatten,",
                    "15674": "\t\t_fnSort: _fnSort,",
                    "15675": "\t\t_fnSortAria: _fnSortAria,",
                    "15676": "\t\t_fnSortListener: _fnSortListener,",
                    "15677": "\t\t_fnSortAttachListener: _fnSortAttachListener,",
                    "15678": "\t\t_fnSortingClasses: _fnSortingClasses,",
                    "15679": "\t\t_fnSortData: _fnSortData,",
                    "15680": "\t\t_fnSaveState: _fnSaveState,",
                    "15681": "\t\t_fnLoadState: _fnLoadState,",
                    "15682": "\t\t_fnImplementState: _fnImplementState,",
                    "15683": "\t\t_fnSettingsFromNode: _fnSettingsFromNode,",
                    "15684": "\t\t_fnLog: _fnLog,",
                    "15685": "\t\t_fnMap: _fnMap,",
                    "15686": "\t\t_fnBindAction: _fnBindAction,",
                    "15687": "\t\t_fnCallbackReg: _fnCallbackReg,",
                    "15688": "\t\t_fnCallbackFire: _fnCallbackFire,",
                    "15689": "\t\t_fnLengthOverflow: _fnLengthOverflow,",
                    "15690": "\t\t_fnRenderer: _fnRenderer,",
                    "15691": "\t\t_fnDataSource: _fnDataSource,",
                    "15692": "\t\t_fnRowAttributes: _fnRowAttributes,",
                    "15693": "\t\t_fnExtend: _fnExtend,",
                    "15694": "\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant",
                    "15695": "\t\t                                // in 1.10, so this dead-end function is",
                    "15696": "\t\t                                // added to prevent errors",
                    "15697": "\t} );",
                    "15771": "}(function( $, window, document, undefined ) {",
                    "15779": " * DataTables 1.10 or newer.",
                    "15782": " * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap",
                    "15788": "\tdom:",
                    "15789": "\t\t\"<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>\" +",
                    "15790": "\t\t\"<'row dt-row'<'col-sm-12'tr>>\" +",
                    "15791": "\t\t\"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>\",",
                    "15797": "$.extend( DataTable.ext.classes, {",
                    "15798": "\tsWrapper:      \"dataTables_wrapper dt-bootstrap5\",",
                    "15799": "\tsFilterInput:  \"form-control form-control-sm\",",
                    "15800": "\tsLengthSelect: \"form-select form-select-sm\",",
                    "15801": "\tsProcessing:   \"dataTables_processing card\",",
                    "15802": "\tsPageButton:   \"paginate_button page-item\"",
                    "15807": "DataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {",
                    "15808": "\tvar api     = new DataTable.Api( settings );",
                    "15809": "\tvar classes = settings.oClasses;",
                    "15810": "\tvar lang    = settings.oLanguage.oPaginate;",
                    "15811": "\tvar aria = settings.oLanguage.oAria.paginate || {};",
                    "15812": "\tvar btnDisplay, btnClass;",
                    "15813": "",
                    "15814": "\tvar attach = function( container, buttons ) {",
                    "15815": "\t\tvar i, ien, node, button;",
                    "15816": "\t\tvar clickHandler = function ( e ) {",
                    "15817": "\t\t\te.preventDefault();",
                    "15818": "\t\t\tif ( !$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action ) {",
                    "15819": "\t\t\t\tapi.page( e.data.action ).draw( 'page' );",
                    "15820": "\t\t\t}",
                    "15821": "\t\t};",
                    "15822": "",
                    "15823": "\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {",
                    "15824": "\t\t\tbutton = buttons[i];",
                    "15825": "",
                    "15826": "\t\t\tif ( Array.isArray( button ) ) {",
                    "15827": "\t\t\t\tattach( container, button );",
                    "15828": "\t\t\t}",
                    "15829": "\t\t\telse {",
                    "15830": "\t\t\t\tbtnDisplay = '';",
                    "15831": "\t\t\t\tbtnClass = '';",
                    "15832": "",
                    "15833": "\t\t\t\tswitch ( button ) {",
                    "15834": "\t\t\t\t\tcase 'ellipsis':",
                    "15835": "\t\t\t\t\t\tbtnDisplay = '&#x2026;';",
                    "15836": "\t\t\t\t\t\tbtnClass = 'disabled';",
                    "15837": "\t\t\t\t\t\tbreak;",
                    "15838": "",
                    "15839": "\t\t\t\t\tcase 'first':",
                    "15840": "\t\t\t\t\t\tbtnDisplay = lang.sFirst;",
                    "15841": "\t\t\t\t\t\tbtnClass = button + (page > 0 ?",
                    "15842": "\t\t\t\t\t\t\t'' : ' disabled');",
                    "15843": "\t\t\t\t\t\tbreak;",
                    "15844": "",
                    "15845": "\t\t\t\t\tcase 'previous':",
                    "15846": "\t\t\t\t\t\tbtnDisplay = lang.sPrevious;",
                    "15847": "\t\t\t\t\t\tbtnClass = button + (page > 0 ?",
                    "15848": "\t\t\t\t\t\t\t'' : ' disabled');",
                    "15849": "\t\t\t\t\t\tbreak;",
                    "15851": "\t\t\t\t\tcase 'next':",
                    "15852": "\t\t\t\t\t\tbtnDisplay = lang.sNext;",
                    "15853": "\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?",
                    "15854": "\t\t\t\t\t\t\t'' : ' disabled');",
                    "15855": "\t\t\t\t\t\tbreak;",
                    "15856": "",
                    "15857": "\t\t\t\t\tcase 'last':",
                    "15858": "\t\t\t\t\t\tbtnDisplay = lang.sLast;",
                    "15859": "\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?",
                    "15860": "\t\t\t\t\t\t\t'' : ' disabled');",
                    "15861": "\t\t\t\t\t\tbreak;",
                    "15862": "",
                    "15863": "\t\t\t\t\tdefault:",
                    "15864": "\t\t\t\t\t\tbtnDisplay = button + 1;",
                    "15865": "\t\t\t\t\t\tbtnClass = page === button ?",
                    "15866": "\t\t\t\t\t\t\t'active' : '';",
                    "15867": "\t\t\t\t\t\tbreak;",
                    "15868": "\t\t\t\t}",
                    "15870": "\t\t\t\tif ( btnDisplay ) {",
                    "15871": "\t\t\t\t\tvar disabled = btnClass.indexOf('disabled') !== -1;",
                    "15873": "\t\t\t\t\tnode = $('<li>', {",
                    "15874": "\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,",
                    "15875": "\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?",
                    "15876": "\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :",
                    "15877": "\t\t\t\t\t\t\t\tnull",
                    "15878": "\t\t\t\t\t\t} )",
                    "15879": "\t\t\t\t\t\t.append( $('<a>', {",
                    "15880": "\t\t\t\t\t\t\t\t'href': disabled ? null : '#',",
                    "15881": "\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,",
                    "15882": "\t\t\t\t\t\t\t\t'aria-disabled': disabled ? 'true' : null,",
                    "15883": "\t\t\t\t\t\t\t\t'aria-label': aria[ button ],",
                    "15884": "\t\t\t\t\t\t\t\t'role': 'link',",
                    "15885": "\t\t\t\t\t\t\t\t'aria-current': btnClass === 'active' ? 'page' : null,",
                    "15886": "\t\t\t\t\t\t\t\t'data-dt-idx': button,",
                    "15887": "\t\t\t\t\t\t\t\t'tabindex': disabled ? -1 : settings.iTabIndex,",
                    "15888": "\t\t\t\t\t\t\t\t'class': 'page-link'",
                    "15889": "\t\t\t\t\t\t\t} )",
                    "15890": "\t\t\t\t\t\t\t.html( btnDisplay )",
                    "15891": "\t\t\t\t\t\t)",
                    "15892": "\t\t\t\t\t\t.appendTo( container );",
                    "15894": "\t\t\t\t\tsettings.oApi._fnBindAction(",
                    "15895": "\t\t\t\t\t\tnode, {action: button}, clickHandler",
                    "15896": "\t\t\t\t\t);",
                    "15897": "\t\t\t\t}",
                    "15898": "\t\t\t}",
                    "15899": "\t\t}",
                    "15902": "\tvar hostEl = $(host);",
                    "15903": "\t// IE9 throws an 'unknown error' if document.activeElement is used",
                    "15904": "\t// inside an iframe or frame.",
                    "15905": "\tvar activeEl;",
                    "15906": "",
                    "15907": "\ttry {",
                    "15908": "\t\t// Because this approach is destroying and recreating the paging",
                    "15909": "\t\t// elements, focus is lost on the select button which is bad for",
                    "15910": "\t\t// accessibility. So we want to restore focus once the draw has",
                    "15911": "\t\t// completed",
                    "15912": "\t\tactiveEl = hostEl.find(document.activeElement).data('dt-idx');",
                    "15913": "\t}",
                    "15914": "\tcatch (e) {}",
                    "15916": "\tvar paginationEl = hostEl.children('ul.pagination');",
                    "15918": "\tif (paginationEl.length) {",
                    "15919": "\t\tpaginationEl.empty();",
                    "15920": "\t}",
                    "15921": "\telse {",
                    "15922": "\t\tpaginationEl = hostEl.html('<ul/>').children('ul').addClass('pagination');",
                    "15923": "\t}",
                    "15925": "\tattach(",
                    "15926": "\t\tpaginationEl,",
                    "15927": "\t\tbuttons",
                    "15928": "\t);",
                    "15930": "\tif ( activeEl !== undefined ) {",
                    "15931": "\t\thostEl.find('[data-dt-idx='+activeEl+']').trigger('focus');",
                    "15932": "\t}"
                }
            }
        },
        {
            "commit": "f05398a6b36891e6e979a39937f8f8eaa6360d52",
            "timestamp": "2024-05-25T15:39:36+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "7": " *   https://datatables.net/download/#bs5/dt-2.0.7",
                    "10": " *   DataTables 2.0.7",
                    "13": "/*! DataTables 2.0.7",
                    "20": " * @version     2.0.7",
                    "332": "\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'i18n', [oSettings], true);",
                    "566": "\t\tbuilder: \"bs5/dt-2.0.7\",",
                    "1111": "\tvar _re_html = /<([^>]*>)/g;",
                    "1112": "\tvar _max_str_len = Math.pow(2, 28);",
                    "1300": "\tvar _stripHtml = function (input) {",
                    "1301": "\t\t// Irrelevant check to workaround CodeQL's false positive on the regex",
                    "1302": "\t\tif (input.length > _max_str_len) {",
                    "1303": "\t\t\tthrow new Error('Exceeded max str len');",
                    "1304": "\t\t}",
                    "1305": "",
                    "1306": "\t\tvar previous;",
                    "1307": "",
                    "1308": "\t\tinput = input.replace(_re_html, ''); // Complete tags",
                    "1309": "",
                    "1310": "\t\t// Safety for incomplete script tag - use do / while to ensure that",
                    "1311": "\t\t// we get all instances",
                    "1312": "\t\tdo {",
                    "1313": "\t\t\tprevious = input;",
                    "1314": "\t\t\tinput = input.replace(/<script/i, '');",
                    "1315": "\t\t} while (input !== previous);",
                    "1316": "",
                    "1317": "\t\treturn previous;",
                    "2032": "\t\t\tcolEl: $('<col>').attr('data-dt-column', iCol)",
                    "2385": "\t\t\tif (row[colIdx] && row[colIdx].unique) {",
                    "2459": "\t\t\t\t\t\t\tif (target === '_all') {",
                    "2460": "\t\t\t\t\t\t\t\t// Apply to all columns",
                    "2461": "\t\t\t\t\t\t\t\tfn( k, def );",
                    "2462": "\t\t\t\t\t\t\t}",
                    "2463": "\t\t\t\t\t\t\telse if (target.indexOf(':name') !== -1) {",
                    "2464": "\t\t\t\t\t\t\t\t// Column selector",
                    "2470": "\t\t\t\t\t\t\t\t// Cell selector",
                    "2472": "\t\t\t\t\t\t\t\t\tif (row[k]) {",
                    "2473": "\t\t\t\t\t\t\t\t\t\tvar cell = $(row[k].cell);",
                    "2474": "",
                    "2475": "\t\t\t\t\t\t\t\t\t\t// Legacy support. Note that it means that we don't support",
                    "2476": "\t\t\t\t\t\t\t\t\t\t// an element name selector only, since they are treated as",
                    "2477": "\t\t\t\t\t\t\t\t\t\t// class names for 1.x compat.",
                    "2478": "\t\t\t\t\t\t\t\t\t\tif (target.match(/^[a-z][\\w-]*$/i)) {",
                    "2479": "\t\t\t\t\t\t\t\t\t\t\ttarget = '.' + target;",
                    "2480": "\t\t\t\t\t\t\t\t\t\t}",
                    "2481": "",
                    "2482": "\t\t\t\t\t\t\t\t\t\tif (cell.is( target )) {",
                    "2483": "\t\t\t\t\t\t\t\t\t\t\tfn( k, def );",
                    "2484": "\t\t\t\t\t\t\t\t\t\t}",
                    "2660": "\t\tvar row = settings.aoData[rowIdx];",
                    "2661": "",
                    "2662": "\t\tif (! row) {",
                    "2663": "\t\t\treturn undefined;",
                    "2664": "\t\t}",
                    "2665": "",
                    "2668": "\t\tvar rowData        = row._aData;",
                    "3074": "\t\t\t\tcreate = nTrIn && anTds[i] ? false : true;",
                    "3103": "\t\t\t\tif ( oCol.bVisible && create )",
                    "3107": "\t\t\t\telse if ( ! oCol.bVisible && ! create )",
                    "3191": "\t\tif (side === 'header' || _pluck(settings.aoColumns, titleProp).join('')) {",
                    "3192": "\t\t\trow = $('tr', target);",
                    "3193": "",
                    "3194": "\t\t\t// Add a row if needed",
                    "3195": "\t\t\tif (! row.length) {",
                    "3196": "\t\t\t\trow = $('<tr/>').appendTo(target)",
                    "3197": "\t\t\t}",
                    "3198": "",
                    "3199": "\t\t\t// Add the number of cells needed to make up to the number of columns",
                    "3200": "\t\t\tif (row.length === 1) {",
                    "3201": "\t\t\t\tvar cells = $('td, th', row);",
                    "3203": "\t\t\t\tfor ( i=cells.length, ien=columns.length ; i<ien ; i++ ) {",
                    "3204": "\t\t\t\t\t$('<th/>')",
                    "3205": "\t\t\t\t\t\t.html( columns[i][titleProp] || '' )",
                    "3206": "\t\t\t\t\t\t.appendTo( row );",
                    "3207": "\t\t\t\t}",
                    "3304": "\t\t\t\t\tvar titleSpan = $('span.dt-column-title', cell);",
                    "3305": "",
                    "3310": "\t\t\t\t\t\ttitle: titleSpan.length",
                    "3311": "\t\t\t\t\t\t\t? titleSpan.html()",
                    "3312": "\t\t\t\t\t\t\t: $(cell).html()",
                    "3453": "\t\t// replaceChildren is faster, but only became widespread in 2020,",
                    "3454": "\t\t// so a fall back in jQuery is provided for older browsers.",
                    "3455": "\t\tif (body[0].replaceChildren) {",
                    "3456": "\t\t\tbody[0].replaceChildren.apply(body[0], anRows);",
                    "3457": "\t\t}",
                    "3458": "\t\telse {",
                    "3459": "\t\t\tbody.children().detach();",
                    "3460": "\t\t\tbody.append( $(anRows) );",
                    "3461": "\t\t}",
                    "3526": "\t\tif (",
                    "3527": "\t\t\t(settings.iDraw < 1 && dataSrc === 'ssp') ||",
                    "3528": "\t\t\t(settings.iDraw <= 1 && dataSrc === 'ajax')",
                    "3529": "\t\t) {",
                    "3575": "\t\t\tvar groupRun = function (contents, innerVal) {",
                    "3576": "\t\t\t\t// If it is an object, then there can be multiple features contained in it",
                    "3577": "\t\t\t\tif ( $.isPlainObject( innerVal ) ) {",
                    "3578": "\t\t\t\t\tObject.keys(innerVal).map(function (key) {",
                    "3579": "\t\t\t\t\t\tcontents.push( {",
                    "3580": "\t\t\t\t\t\t\tfeature: key,",
                    "3581": "\t\t\t\t\t\t\topts: innerVal[key]",
                    "3582": "\t\t\t\t\t\t});",
                    "3583": "\t\t\t\t\t});",
                    "3586": "\t\t\t\t\tcontents.push(innerVal);",
                    "3587": "\t\t\t\t}",
                    "3588": "\t\t\t}",
                    "3589": "",
                    "3590": "\t\t\t// Transform to an object with a contents property",
                    "3591": "\t\t\tif (! group[align] || ! group[align].contents) {",
                    "3592": "\t\t\t\tgroup[align] = { contents: [] };",
                    "3593": "\t\t\t}",
                    "3594": "",
                    "3595": "\t\t\t// Allow for an array or just a single object",
                    "3596": "\t\t\tif ( Array.isArray(val)) {",
                    "3597": "\t\t\t\tfor (var i=0 ; i<val.length ; i++) {",
                    "3598": "\t\t\t\t\tgroupRun(group[align].contents, val[i]);",
                    "3602": "\t\t\t\tgroupRun(group[ align ].contents, val);",
                    "3734": "\t\t\tvar top = _layoutArray( settings, settings.layout, 'top' );",
                    "3735": "\t\t\tvar bottom = _layoutArray( settings, settings.layout, 'bottom' );",
                    "3736": "\t\t\tvar renderer = _fnRenderer( settings, 'layout' );",
                    "3737": "",
                    "3923": "\t\t\t\t\t\t\t\t\tcolumnDef.sTitle = _stripHtml(cell.innerHTML);",
                    "4104": "\t\t\t// No url, so don't load any data. Just apply an empty data array",
                    "4105": "\t\t\t// to the object for the callback.",
                    "4106": "\t\t\tvar empty = {};",
                    "4107": "",
                    "4108": "\t\t\tDataTable.util.set(ajax.dataSrc)(empty, []);",
                    "4109": "\t\t\tcallback(empty);",
                    "4437": "\t\tvar matched = [];",
                    "4449": "\t\tfor (i=0 ; i<searchRows.length ; i++) {",
                    "4455": "\t\t\tif ( (searchFunc && searchFunc(data, row._aData, searchRows[i], column)) || (rpSearch && rpSearch.test(data)) ) {",
                    "4456": "\t\t\t\tmatched.push(searchRows[i]);",
                    "4458": "\t\t}",
                    "4460": "\t\t// Mutate the searchRows array",
                    "4461": "\t\tsearchRows.length = matched.length;",
                    "4462": "",
                    "4463": "\t\tfor (i=0 ; i<matched.length ; i++) {",
                    "4464": "\t\t\tsearchRows[i] = matched[i];",
                    "4493": "\t\t// Remove diacritics if normalize is set up to do so",
                    "4494": "\t\tsearch = _normalize(search);",
                    "4495": "",
                    "4549": "\t\t\t\treturn word.replace(/\"/g, '');",
                    "4832": "\t\tvar scrolling = settings.oScroll.sX !== '' || settings.oScroll.sY !== '';",
                    "4841": "\t\t\t\t.append('<div><div></div><div></div><div></div><div></div></div>');",
                    "4842": "",
                    "4843": "\t\t\t// Different positioning depending on if scrolling is enabled or not",
                    "4844": "\t\t\tif (scrolling) {",
                    "4845": "\t\t\t\tn.prependTo( $('div.dt-scroll', settings.nTableWrapper) );",
                    "4846": "\t\t\t}",
                    "4847": "\t\t\telse {",
                    "4848": "\t\t\t\tn.insertBefore( table );",
                    "4849": "\t\t\t}",
                    "4850": "",
                    "5089": "\t\t// Note the use of translating into a column index to get the `col` element. This",
                    "5090": "\t\t// is because of Responsive which might remove `col` elements, knocking the alignment",
                    "5091": "\t\t// of the indexes out.",
                    "5094": "\t\t\tvar colSizes = table.children('tbody').eq(0).children('tr').eq(0).children('th, td').map(function (vis) {",
                    "5095": "\t\t\t\treturn {",
                    "5096": "\t\t\t\t\tidx: _fnVisibleToColumnIndex(settings, vis),",
                    "5097": "\t\t\t\t\twidth: $(this).outerWidth()",
                    "5098": "\t\t\t\t}",
                    "5102": "\t\t\tfor (var i=0 ; i<colSizes.length ; i++) {",
                    "5103": "\t\t\t\tvar colEl = settings.aoColumns[ colSizes[i].idx ].colEl[0];",
                    "5104": "\t\t\t\tvar colWidth = colEl.style.width.replace('px', '');",
                    "5106": "\t\t\t\tif (colWidth !== colSizes[i].width) {",
                    "5107": "\t\t\t\t\tcolEl.style.width = colSizes[i].width + 'px';",
                    "5109": "\t\t\t}",
                    "5131": "\t\t\t$(this.childNodes).wrapAll('<div class=\"dt-scroll-sizing\">');",
                    "5136": "\t\t\t\t$(this.childNodes).wrapAll('<div class=\"dt-scroll-sizing\">');",
                    "5491": "\t\t\tvar run = false;",
                    "5497": "\t\t\t\tfor ( var i=0, ien=columns.length ; i<ien ; i++ ) {",
                    "5498": "\t\t\t\t\tvar ret = _fnSortAdd( settings, columns[i], i, e.shiftKey );",
                    "5500": "\t\t\t\t\tif (ret !== false) {",
                    "5501": "\t\t\t\t\t\trun = true;",
                    "5502": "\t\t\t\t\t}",
                    "5503": "",
                    "5504": "\t\t\t\t\t// If the first entry is no sort, then subsequent",
                    "5505": "\t\t\t\t\t// sort columns are ignored",
                    "5506": "\t\t\t\t\tif (settings.aaSorting.length === 1 && settings.aaSorting[0][1] === '') {",
                    "5507": "\t\t\t\t\t\tbreak;",
                    "5509": "\t\t\t\t}",
                    "5511": "\t\t\t\tif (run) {",
                    "5512": "\t\t\t\t\t_fnProcessingDisplay( settings, true );",
                    "5514": "\t\t\t\t\t// Allow the processing display to show",
                    "5515": "\t\t\t\t\tsetTimeout( function () {",
                    "5516": "\t\t\t\t\t\t_fnSort( settings );",
                    "5517": "\t\t\t\t\t\t_fnSortDisplay( settings, settings.aiDisplay );",
                    "5518": "",
                    "5519": "\t\t\t\t\t\t// Sort processing done - redraw has its own processing display",
                    "5520": "\t\t\t\t\t\t_fnProcessingDisplay( settings, false );",
                    "5521": "",
                    "5522": "\t\t\t\t\t\t_fnReDraw( settings, false, false );",
                    "5523": "",
                    "5524": "\t\t\t\t\t\tif (callback) {",
                    "5525": "\t\t\t\t\t\t\tcallback();",
                    "5526": "\t\t\t\t\t\t}",
                    "5527": "\t\t\t\t\t}, 0);",
                    "5528": "\t\t\t\t}",
                    "5537": "\tfunction _fnSortDisplay(settings, display) {",
                    "5538": "\t\tif (display.length < 2) {",
                    "5539": "\t\t\treturn;",
                    "5540": "\t\t}",
                    "5541": "",
                    "5543": "\t\tvar masterMap = {};",
                    "5544": "\t\tvar map = {};",
                    "5545": "\t\tvar i;",
                    "5546": "",
                    "5547": "\t\t// Rather than needing an `indexOf` on master array, we can create a map",
                    "5548": "\t\tfor (i=0 ; i<master.length ; i++) {",
                    "5549": "\t\t\tmasterMap[master[i]] = i;",
                    "5550": "\t\t}",
                    "5551": "",
                    "5552": "\t\t// And then cache what would be the indexOf fom the display",
                    "5553": "\t\tfor (i=0 ; i<display.length ; i++) {",
                    "5554": "\t\t\tmap[display[i]] = masterMap[display[i]];",
                    "5555": "\t\t}",
                    "5557": "\t\tdisplay.sort(function(a, b){",
                    "5558": "\t\t\t// Short version of this function is simply `master.indexOf(a) - master.indexOf(b);`",
                    "5559": "\t\t\treturn map[a] - map[b];",
                    "5810": "\t *  @param {int} addIndex Counter",
                    "5811": "\t *  @param {boolean} [shift=false] Shift click add",
                    "5815": "\tfunction _fnSortAdd ( settings, colIdx, addIndex, shift )",
                    "5835": "\t\t\treturn false;",
                    "5844": "\t\tif ( (shift || addIndex) && settings.oFeatures.bSortMulti ) {",
                    "5864": "\t\t\telse if (shift) {",
                    "5865": "\t\t\t\t// No sort on this column yet, being added by shift click",
                    "5866": "\t\t\t\t// add it as itself",
                    "5870": "\t\t\telse {",
                    "5871": "\t\t\t\t// No sort on this column yet, being added from a colspan",
                    "5872": "\t\t\t\t// so add with same direction as first column",
                    "5873": "\t\t\t\tsorting.push( [ colIdx, sorting[0][1], 0 ] );",
                    "5874": "\t\t\t\tsorting[sorting.length-1]._idx = 0;",
                    "5875": "\t\t\t}",
                    "6909": "\t\t\tif (struct.name === '__proto__') {",
                    "6910": "\t\t\t\tcontinue;",
                    "6911": "\t\t\t}",
                    "6912": "",
                    "7575": "\t\tif ( page == 'current' ) {",
                    "7757": "\t\t\t_fnSortDisplay(settings, matched);",
                    "7933": "\t\tif (ctx.length && this.length && this[0].length) {",
                    "7934": "\t\t\tvar row = ctx[0].aoData[ this[0] ];",
                    "7935": "",
                    "7936": "\t\t\tif (row && row.nTr) {",
                    "7937": "\t\t\t\treturn row.nTr;",
                    "7938": "\t\t\t}",
                    "7939": "\t\t}",
                    "7940": "",
                    "7941": "\t\treturn null;",
                    "7999": "\t\t\t\t.rows( state.childRows.map(function (id) {",
                    "8000": "\t\t\t\t\t// Escape any `:` characters from the row id. Accounts for",
                    "8001": "\t\t\t\t\t// already escaped characters.",
                    "8002": "\t\t\t\t\treturn id.replace(/([^:\\\\]*(?:\\\\.[^:\\\\]*)*):/g, \"$1\\\\:\");",
                    "8154": "\t\t\t\t\tif ( row && row._details ) {",
                    "8173": "\t\t\t\t\tif ( data[i] && data[i]._details ) {",
                    "8195": "\t\t\treturn ctx.length && this.length && ctx[0].aoData[ this[0] ]",
                    "8196": "\t\t\t\t? ctx[0].aoData[ this[0] ]._details",
                    "8197": "\t\t\t\t: undefined;",
                    "8283": "\tvar __column_header = function ( settings, column, row ) {",
                    "8284": "\t\tvar header = settings.aoHeader;",
                    "8285": "\t\tvar target = row !== undefined",
                    "8286": "\t\t\t? row",
                    "8287": "\t\t\t: settings.bSortCellsTop // legacy support",
                    "8288": "\t\t\t\t? 0",
                    "8289": "\t\t\t\t: header.length - 1;",
                    "8290": "",
                    "8291": "\t\treturn header[target][column].cell;",
                    "8292": "\t};",
                    "8293": "",
                    "8326": "\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),",
                    "8327": "\t\t\t\t\t\t\t__column_header( settings, idx )",
                    "8472": "\t\treturn this.iterator( 'column', function (settings, column) {",
                    "8473": "\t\t\treturn __column_header(settings, column, row);",
                    "9525": "\t\t\tsettings.colgroup.remove();",
                    "9526": "",
                    "9626": "\tDataTable.version = \"2.0.7\";",
                    "10481": "\t\t\t\t * Label and character for first page button (\u00ab)",
                    "10483": "\t\t\t\t\"sFirst\": \"\\u00AB\",",
                    "10486": "\t\t\t\t * Last page button (\u00bb)",
                    "10488": "\t\t\t\t\"sLast\": \"\\u00BB\",",
                    "10491": "\t\t\t\t * Next page button (\u203a)",
                    "10493": "\t\t\t\t\"sNext\": \"\\u203A\",",
                    "10496": "\t\t\t\t * Previous page button (\u2039)",
                    "10498": "\t\t\t\t\"sPrevious\": \"\\u2039\",",
                    "11727": "\tvar extPagination = DataTable.ext.pager;",
                    "11729": "\t// Paging buttons configuration",
                    "11730": "\t$.extend( extPagination, {",
                    "11731": "\t\tsimple: function () {",
                    "11732": "\t\t\treturn [ 'previous', 'next' ];",
                    "11733": "\t\t},",
                    "11735": "\t\tfull: function () {",
                    "11736": "\t\t\treturn [  'first', 'previous', 'next', 'last' ];",
                    "11737": "\t\t},",
                    "11739": "\t\tnumbers: function () {",
                    "11740": "\t\t\treturn [ 'numbers' ];",
                    "11741": "\t\t},",
                    "11743": "\t\tsimple_numbers: function () {",
                    "11744": "\t\t\treturn [ 'previous', 'numbers', 'next' ];",
                    "11745": "\t\t},",
                    "11747": "\t\tfull_numbers: function () {",
                    "11748": "\t\t\treturn [ 'first', 'previous', 'numbers', 'next', 'last' ];",
                    "11749": "\t\t},",
                    "11750": "",
                    "11751": "\t\tfirst_last: function () {",
                    "11752": "\t\t\treturn ['first', 'last'];",
                    "11753": "\t\t},",
                    "11754": "",
                    "11755": "\t\tfirst_last_numbers: function () {",
                    "11756": "\t\t\treturn ['first', 'numbers', 'last'];",
                    "11757": "\t\t},",
                    "11759": "\t\t// For testing and plug-ins to use",
                    "11760": "\t\t_numbers: _pagingNumbers,",
                    "11762": "\t\t// Number of number buttons - legacy, use `numbers` option for paging feature",
                    "11763": "\t\tnumbers_length: 7",
                    "11764": "\t} );",
                    "11767": "\t$.extend( true, DataTable.ext.renderer, {",
                    "11768": "\t\tpagingButton: {",
                    "11769": "\t\t\t_: function (settings, buttonType, content, active, disabled) {",
                    "11770": "\t\t\t\tvar classes = settings.oClasses.paging;",
                    "11771": "\t\t\t\tvar btnClasses = [classes.button];",
                    "11772": "\t\t\t\tvar btn;",
                    "11774": "\t\t\t\tif (active) {",
                    "11775": "\t\t\t\t\tbtnClasses.push(classes.active);",
                    "11776": "\t\t\t\t}",
                    "11809": "\tvar _filterString = function (stripHtml, normalize) {",
                    "11821": "\t\t\tif (normalize) {",
                    "11822": "\t\t\t\tstr = _normalize(str, false);",
                    "12200": "\t\tif (val === undefined) {",
                    "12466": "\t\t\t\t\tvar orderedColumns = ',' + sorting.map( function (val) {",
                    "12468": "\t\t\t\t\t} ).join(',') + ',';",
                    "12479": "\t\t\t\t\tvar sortIdx = orderedColumns.indexOf( ',' + indexes.toArray().join(',') + ',' );",
                    "12494": "\t\t\t\t\tif ( sortIdx === 0 ) {",
                    "12590": "\t\tif (! settings._infoEl) {",
                    "12599": "",
                    "12600": "\t\t\tsettings._infoEl = n;",
                    "12758": "\t// - buttons - number of buttons to show - must be odd",
                    "12766": "\t\t\tbuttons: DataTable.ext.pager.numbers_length,",
                    "12767": "\t\t\ttype: settings.sPaginationType,",
                    "12768": "\t\t\tboundaryNumbers: true",
                    "12769": "\t\t}, opts);",
                    "12770": "",
                    "12771": "\t\t// To be removed in 2.1",
                    "12772": "\t\tif (opts.numbers) {",
                    "12773": "\t\t\topts.buttons = opts.numbers;",
                    "12774": "\t\t}",
                    "12806": "\t\t\t\t\t\t? _pagingNumbers(page, pages, opts.buttons, opts.boundaryNumbers)",
                    "12867": "\t\t\t$(host).height() >= ($(buttonEls[0]).outerHeight() * 2) - 10",
                    "12948": "\t * @param {boolean} addFirstLast Indicate if page 1 and end should be included",
                    "12951": "\tfunction _pagingNumbers ( page, pages, buttons, addFirstLast ) {",
                    "12954": "\t\t\thalf = Math.floor(buttons / 2),",
                    "12955": "\t\t\tbefore = addFirstLast ? 2 : 1,",
                    "12956": "\t\t\tafter = addFirstLast ? 1 : 0;",
                    "12979": "\t\t\tnumbers = _range(0, buttons-before);",
                    "12980": "\t\t\tnumbers.push('ellipsis');",
                    "12981": "",
                    "12982": "\t\t\tif (addFirstLast) {",
                    "12983": "\t\t\t\tnumbers.push(pages-1);",
                    "12984": "\t\t\t}",
                    "12987": "\t\t\tnumbers = _range(pages-(buttons-before), pages);",
                    "12988": "\t\t\tnumbers.unshift('ellipsis');",
                    "12989": "",
                    "12990": "\t\t\tif (addFirstLast) {",
                    "12991": "\t\t\t\tnumbers.unshift(0);",
                    "12992": "\t\t\t}",
                    "12995": "\t\t\tnumbers = _range(page-half+before, page+half-after);",
                    "12996": "\t\t\tnumbers.push('ellipsis');",
                    "12997": "\t\t\tnumbers.unshift('ellipsis');",
                    "12998": "",
                    "12999": "\t\t\tif (addFirstLast) {",
                    "13000": "\t\t\t\tnumbers.push(pages-1);",
                    "13001": "\t\t\t\tnumbers.unshift(0);",
                    "13002": "\t\t\t}",
                    "13170": " * \u00a9 SpryMedia Ltd - datatables.net/license",
                    "13221": " * DataTables integration for Bootstrap 5."
                },
                "deleted": {
                    "7": " *   https://datatables.net/download/#bs5/dt-2.0.0",
                    "10": " *   DataTables 2.0.0",
                    "13": "/*! DataTables 2.0.0",
                    "20": " * @version     2.0.0",
                    "332": "\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);",
                    "566": "\t\tbuild:\"bs5/dt-2.0.0\",",
                    "1111": "\tvar _re_html = /<.*?>/g;",
                    "1299": "\tvar _stripHtml = function ( d ) {",
                    "1300": "\t\treturn d",
                    "1301": "\t\t\t.replace( _re_html, '' ) // Complete tags",
                    "1302": "\t\t\t.replace(/<script/i, ''); // Safety for incomplete script tag",
                    "2017": "\t\t\tcolEl: $('<col>')",
                    "2370": "\t\t\tif (row[colIdx].unique) {",
                    "2444": "\t\t\t\t\t\t\tif (target.indexOf(':name') !== -1) {",
                    "2451": "\t\t\t\t\t\t\t\t\tvar cell = $(row[k].cell);",
                    "2452": "",
                    "2453": "\t\t\t\t\t\t\t\t\t// Legacy support. Note that it means that we don't support",
                    "2454": "\t\t\t\t\t\t\t\t\t// an element name selector only, since they are treated as",
                    "2455": "\t\t\t\t\t\t\t\t\t// class names for 1.x compat.",
                    "2456": "\t\t\t\t\t\t\t\t\tif (target.match(/^[a-z][\\w-]*$/i)) {",
                    "2457": "\t\t\t\t\t\t\t\t\t\ttarget = '.' + target;",
                    "2458": "\t\t\t\t\t\t\t\t\t}",
                    "2459": "",
                    "2460": "\t\t\t\t\t\t\t\t\tif (target === '_all' || cell.is( target )) {",
                    "2461": "\t\t\t\t\t\t\t\t\t\tfn( k, def );",
                    "2639": "\t\tvar rowData        = settings.aoData[rowIdx]._aData;",
                    "3045": "\t\t\t\tcreate = nTrIn ? false : true;",
                    "3074": "\t\t\t\tif ( oCol.bVisible && ! nTrIn )",
                    "3078": "\t\t\t\telse if ( ! oCol.bVisible && nTrIn )",
                    "3162": "\t\tif ( $('th, td', target).length === 0 && (side === 'header' || _pluck(settings.aoColumns, titleProp).join('')) ) {",
                    "3163": "\t\t\trow = $('<tr/>')",
                    "3164": "\t\t\t\t.appendTo( target );",
                    "3166": "\t\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {",
                    "3167": "\t\t\t\t$('<th/>')",
                    "3168": "\t\t\t\t\t.html( columns[i][titleProp] || '' )",
                    "3169": "\t\t\t\t\t.appendTo( row );",
                    "3270": "\t\t\t\t\t\ttitle: $('span.dt-column-title', cell).html()",
                    "3411": "\t\tbody.children().detach();",
                    "3412": "\t\tbody.append( $(anRows) );",
                    "3477": "\t\tif ( settings.iDraw <= 1 && (dataSrc === 'ajax' || dataSrc === 'ssp') )",
                    "3478": "\t\t{",
                    "3524": "",
                    "3525": "\t\t\t// Transform to an object with a contents property",
                    "3526": "\t\t\tif ( $.isPlainObject( val ) ) {",
                    "3527": "\t\t\t\t// Already a group from a previous pass",
                    "3528": "\t\t\t\tif (val.contents) {",
                    "3529": "\t\t\t\t\tgroup[ align ] = val;",
                    "3532": "\t\t\t\t\t// For objects, each property becomes an entry in the contents",
                    "3533": "\t\t\t\t\t// array for this insert position",
                    "3534": "\t\t\t\t\tgroup[ align ] = {",
                    "3535": "\t\t\t\t\t\tcontents: Object.keys(val).map(function (key) {",
                    "3536": "\t\t\t\t\t\t\treturn {",
                    "3537": "\t\t\t\t\t\t\t\tfeature: key,",
                    "3538": "\t\t\t\t\t\t\t\topts: val[key]",
                    "3539": "\t\t\t\t\t\t\t};",
                    "3540": "\t\t\t\t\t\t})",
                    "3541": "\t\t\t\t\t};",
                    "3545": "\t\t\t\tgroup[ align ] = {",
                    "3546": "\t\t\t\t\tcontents: val",
                    "3547": "\t\t\t\t};",
                    "3674": "\t\tvar top = _layoutArray( settings, settings.layout, 'top' );",
                    "3675": "\t\tvar bottom = _layoutArray( settings, settings.layout, 'bottom' );",
                    "3676": "\t\tvar renderer = _fnRenderer( settings, 'layout' );",
                    "3677": "",
                    "3868": "\t\t\t\t\t\t\t\t\tcolumnDef.sTitle = cell.innerHTML.replace( /<.*?>/g, \"\" );",
                    "4049": "\t\t\tcallback({});",
                    "4388": "\t\twhile (i < searchRows.length) {",
                    "4394": "\t\t\tif ( (searchFunc && ! searchFunc(data, row._aData, searchRows[i], column)) || (rpSearch && ! rpSearch.test(data)) ) {",
                    "4395": "\t\t\t\tsearchRows.splice(i, 1);",
                    "4396": "\t\t\t\ti--;",
                    "4399": "\t\t\ti++;",
                    "4481": "\t\t\t\treturn word.replace('\"', '');",
                    "4772": "\t\t\t\t.append('<div><div></div><div></div><div></div><div></div></div>')",
                    "4773": "\t\t\t\t.insertBefore( table );",
                    "4774": "",
                    "5015": "\t\t\tvar colSizes = table.find('tbody tr').eq(0).find('th, td').map(function () {",
                    "5016": "\t\t\t\treturn $(this).outerWidth();",
                    "5020": "\t\t\t$('col', settings.colgroup).each(function (i) {",
                    "5021": "\t\t\t\tvar colWidth = this.style.width.replace('px', '');",
                    "5023": "\t\t\t\tif (colWidth !== colSizes[i]) {",
                    "5024": "\t\t\t\t\tthis.style.width = colSizes[i] + 'px';",
                    "5026": "\t\t\t});",
                    "5048": "\t\t\t$(this).children().wrapAll('<div class=\"dt-scroll-sizing\">');",
                    "5053": "\t\t\t\t$(this).children().wrapAll('<div class=\"dt-scroll-sizing\">');",
                    "5413": "\t\t\t\t_fnProcessingDisplay( settings, true );",
                    "5415": "\t\t\t\t// Allow the processing display to show",
                    "5416": "\t\t\t\tsetTimeout( function () {",
                    "5417": "\t\t\t\t\tfor ( var i=0, ien=columns.length ; i<ien ; i++ ) {",
                    "5418": "\t\t\t\t\t\tvar append = e.shiftKey || i > 0;",
                    "5419": "",
                    "5420": "\t\t\t\t\t\t_fnSortAdd( settings, columns[i], append );",
                    "5423": "\t\t\t\t\t_fnSort( settings );",
                    "5424": "\t\t\t\t\t_fnSortDisplay( settings );",
                    "5425": "\t\t\t\t\t_fnReDraw( settings, false, false );",
                    "5426": "\t\t\t\t\t_fnProcessingDisplay( settings, false );",
                    "5428": "\t\t\t\t\tif (callback) {",
                    "5429": "\t\t\t\t\t\tcallback();",
                    "5430": "\t\t\t\t\t}",
                    "5431": "\t\t\t\t}, 0);",
                    "5440": "\tfunction _fnSortDisplay(settings) {",
                    "5441": "\t\tvar display = settings.aiDisplay;",
                    "5444": "\t\tdisplay.sort(function(a, b){",
                    "5445": "\t\t\treturn master.indexOf(a) - master.indexOf(b);",
                    "5696": "\t *  @param {boolean} [append=false] Append the requested sort to the existing",
                    "5697": "\t *    sort if true (i.e. multi-column sort)",
                    "5701": "\tfunction _fnSortAdd ( settings, colIdx, append )",
                    "5721": "\t\t\treturn;",
                    "5730": "\t\tif ( append && settings.oFeatures.bSortMulti ) {",
                    "5750": "\t\t\telse {",
                    "5751": "\t\t\t\t// No sort on this column yet",
                    "7450": "\t\tif ( _fnDataSource( settings ) == 'ssp' ) {",
                    "7451": "\t\t\t// In server-side processing mode, most options are irrelevant since",
                    "7452": "\t\t\t// rows not shown don't exist and the index order is the applied order",
                    "7453": "\t\t\t// Removed is a special case - for consistency just return an empty",
                    "7454": "\t\t\t// array",
                    "7455": "\t\t\treturn search === 'removed' ?",
                    "7456": "\t\t\t\t[] :",
                    "7457": "\t\t\t\t_range( 0, displayMaster.length );",
                    "7458": "\t\t}",
                    "7459": "\t\telse if ( page == 'current' ) {",
                    "7641": "\t\t\tvar master = settings.aiDisplayMaster;",
                    "7642": "",
                    "7643": "\t\t\tmatched.sort(function(a, b) {",
                    "7644": "\t\t\t\treturn master.indexOf(a) - master.indexOf(b);",
                    "7645": "\t\t\t});",
                    "7732": "\t\t\tidx = settings.aiDisplay.indexOf(row);",
                    "7733": "\t\t\tif (idx !== -1) {",
                    "7734": "\t\t\t\tsettings.aiDisplay.splice(idx, 1);",
                    "7735": "\t\t\t}",
                    "7736": "",
                    "7826": "\t\treturn ctx.length && this.length && this[0].length ?",
                    "7827": "\t\t\tctx[0].aoData[ this[0] ].nTr || null :",
                    "7828": "\t\t\tnull;",
                    "7886": "\t\t\t\t.rows( state.childRows.map(function (id){",
                    "7887": "\t\t\t\t\treturn id.replace(/:/g, '\\\\:')",
                    "8039": "\t\t\t\t\tif ( row._details ) {",
                    "8058": "\t\t\t\t\tif ( data[i]._details ) {",
                    "8080": "\t\t\treturn ctx.length && this.length ?",
                    "8081": "\t\t\t\tctx[0].aoData[ this[0] ]._details :",
                    "8082": "\t\t\t\tundefined;",
                    "8200": "\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows )",
                    "8345": "\t\treturn this.iterator( 'column', function ( settings, column ) {",
                    "8346": "\t\t\tvar header = settings.aoHeader;",
                    "8347": "\t\t\tvar target = row !== undefined",
                    "8348": "\t\t\t\t? row",
                    "8349": "\t\t\t\t: settings.bSortCellsTop // legacy support",
                    "8350": "\t\t\t\t\t? 0",
                    "8351": "\t\t\t\t\t: header.length - 1;",
                    "8352": "",
                    "8353": "\t\t\treturn header[target][column].cell;",
                    "9504": "\tDataTable.version = \"2.0.0\";",
                    "10359": "\t\t\t\t * Label and character for first page button",
                    "10361": "\t\t\t\t\"sFirst\": \"\u00ab\",",
                    "10364": "\t\t\t\t * Last page button",
                    "10366": "\t\t\t\t\"sLast\": \"\u00bb\",",
                    "10369": "\t\t\t\t * Next page button",
                    "10371": "\t\t\t\t\"sNext\": \"\u203a\",",
                    "10374": "\t\t\t\t * Previous page button",
                    "10376": "\t\t\t\t\"sPrevious\": \"\u2039\",",
                    "11605": "\t/**",
                    "11606": "\t * DataTables extensions",
                    "11607": "\t *",
                    "11608": "\t * This namespace acts as a collection area for plug-ins that can be used to",
                    "11609": "\t * extend DataTables capabilities. Indeed many of the build in methods",
                    "11610": "\t * use this method to provide their own capabilities (sorting methods for",
                    "11611": "\t * example).",
                    "11612": "\t *",
                    "11613": "\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy",
                    "11614": "\t * reasons",
                    "11615": "\t *",
                    "11616": "\t *  @namespace",
                    "11617": "\t */",
                    "11618": "\tDataTable.ext = _ext = {",
                    "11619": "\t\t/**",
                    "11620": "\t\t * Buttons. For use with the Buttons extension for DataTables. This is",
                    "11621": "\t\t * defined here so other extensions can define buttons regardless of load",
                    "11622": "\t\t * order. It is _not_ used by DataTables core.",
                    "11623": "\t\t *",
                    "11624": "\t\t *  @type object",
                    "11625": "\t\t *  @default {}",
                    "11626": "\t\t */",
                    "11627": "\t\tbuttons: {},",
                    "11630": "\t\t/**",
                    "11631": "\t\t * Element class names",
                    "11632": "\t\t *",
                    "11633": "\t\t *  @type object",
                    "11634": "\t\t *  @default {}",
                    "11635": "\t\t */",
                    "11636": "\t\tclasses: {},",
                    "11639": "\t\t/**",
                    "11640": "\t\t * DataTables build type (expanded by the download builder)",
                    "11641": "\t\t *",
                    "11642": "\t\t *  @type string",
                    "11643": "\t\t */",
                    "11644": "\t\tbuild:\"bs5/dt-2.0.0\",",
                    "11647": "\t\t/**",
                    "11648": "\t\t * Error reporting.",
                    "11649": "\t\t *",
                    "11650": "\t\t * How should DataTables report an error. Can take the value 'alert',",
                    "11651": "\t\t * 'throw', 'none' or a function.",
                    "11652": "\t\t *",
                    "11653": "\t\t *  @type string|function",
                    "11654": "\t\t *  @default alert",
                    "11655": "\t\t */",
                    "11656": "\t\terrMode: \"alert\",",
                    "11659": "\t\t/**",
                    "11660": "\t\t * Legacy so v1 plug-ins don't throw js errors on load",
                    "11661": "\t\t */",
                    "11662": "\t\tfeature: [],",
                    "11664": "\t\t/**",
                    "11665": "\t\t * Feature plug-ins.",
                    "11666": "\t\t *",
                    "11667": "\t\t * This is an object of callbacks which provide the features for DataTables",
                    "11668": "\t\t * to be initialised via the `layout` option.",
                    "11669": "\t\t */",
                    "11670": "\t\tfeatures: {},",
                    "11672": "",
                    "11673": "\t\t/**",
                    "11674": "\t\t * Row searching.",
                    "11675": "\t\t *",
                    "11676": "\t\t * This method of searching is complimentary to the default type based",
                    "11677": "\t\t * searching, and a lot more comprehensive as it allows you complete control",
                    "11678": "\t\t * over the searching logic. Each element in this array is a function",
                    "11679": "\t\t * (parameters described below) that is called for every row in the table,",
                    "11680": "\t\t * and your logic decides if it should be included in the searching data set",
                    "11681": "\t\t * or not.",
                    "11682": "\t\t *",
                    "11683": "\t\t * Searching functions have the following input parameters:",
                    "11684": "\t\t *",
                    "11685": "\t\t * 1. `{object}` DataTables settings object: see",
                    "11686": "\t\t *    {@link DataTable.models.oSettings}",
                    "11687": "\t\t * 2. `{array|object}` Data for the row to be processed (same as the",
                    "11688": "\t\t *    original format that was passed in as the data source, or an array",
                    "11689": "\t\t *    from a DOM data source",
                    "11690": "\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which",
                    "11691": "\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.",
                    "11692": "\t\t *",
                    "11693": "\t\t * And the following return is expected:",
                    "11694": "\t\t *",
                    "11695": "\t\t * * {boolean} Include the row in the searched result set (true) or not",
                    "11696": "\t\t *   (false)",
                    "11697": "\t\t *",
                    "11698": "\t\t * Note that as with the main search ability in DataTables, technically this",
                    "11699": "\t\t * is \"filtering\", since it is subtractive. However, for consistency in",
                    "11700": "\t\t * naming we call it searching here.",
                    "11701": "\t\t *",
                    "11702": "\t\t *  @type array",
                    "11703": "\t\t *  @default []",
                    "11704": "\t\t *",
                    "11705": "\t\t *  @example",
                    "11706": "\t\t *    // The following example shows custom search being applied to the",
                    "11707": "\t\t *    // fourth column (i.e. the data[3] index) based on two input values",
                    "11708": "\t\t *    // from the end-user, matching the data in a certain range.",
                    "11709": "\t\t *    $.fn.dataTable.ext.search.push(",
                    "11710": "\t\t *      function( settings, data, dataIndex ) {",
                    "11711": "\t\t *        var min = document.getElementById('min').value * 1;",
                    "11712": "\t\t *        var max = document.getElementById('max').value * 1;",
                    "11713": "\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;",
                    "11714": "\t\t *",
                    "11715": "\t\t *        if ( min == \"\" && max == \"\" ) {",
                    "11716": "\t\t *          return true;",
                    "11717": "\t\t *        }",
                    "11718": "\t\t *        else if ( min == \"\" && version < max ) {",
                    "11719": "\t\t *          return true;",
                    "11720": "\t\t *        }",
                    "11721": "\t\t *        else if ( min < version && \"\" == max ) {",
                    "11722": "\t\t *          return true;",
                    "11723": "\t\t *        }",
                    "11724": "\t\t *        else if ( min < version && version < max ) {",
                    "11725": "\t\t *          return true;",
                    "11726": "\t\t *        }",
                    "11727": "\t\t *        return false;",
                    "11728": "\t\t *      }",
                    "11729": "\t\t *    );",
                    "11730": "\t\t */",
                    "11731": "\t\tsearch: [],",
                    "11732": "",
                    "11733": "",
                    "11734": "\t\t/**",
                    "11735": "\t\t * Selector extensions",
                    "11736": "\t\t *",
                    "11737": "\t\t * The `selector` option can be used to extend the options available for the",
                    "11738": "\t\t * selector modifier options (`selector-modifier` object data type) that",
                    "11739": "\t\t * each of the three built in selector types offer (row, column and cell +",
                    "11740": "\t\t * their plural counterparts). For example the Select extension uses this",
                    "11741": "\t\t * mechanism to provide an option to select only rows, columns and cells",
                    "11742": "\t\t * that have been marked as selected by the end user (`{selected: true}`),",
                    "11743": "\t\t * which can be used in conjunction with the existing built in selector",
                    "11744": "\t\t * options.",
                    "11745": "\t\t *",
                    "11746": "\t\t * Each property is an array to which functions can be pushed. The functions",
                    "11747": "\t\t * take three attributes:",
                    "11748": "\t\t *",
                    "11749": "\t\t * * Settings object for the host table",
                    "11750": "\t\t * * Options object (`selector-modifier` object type)",
                    "11751": "\t\t * * Array of selected item indexes",
                    "11752": "\t\t *",
                    "11753": "\t\t * The return is an array of the resulting item indexes after the custom",
                    "11754": "\t\t * selector has been applied.",
                    "11755": "\t\t *",
                    "11756": "\t\t *  @type object",
                    "11757": "\t\t */",
                    "11758": "\t\tselector: {",
                    "11759": "\t\t\tcell: [],",
                    "11760": "\t\t\tcolumn: [],",
                    "11761": "\t\t\trow: []",
                    "11762": "\t\t},",
                    "11763": "",
                    "11764": "",
                    "11765": "\t\t/**",
                    "11766": "\t\t * Legacy configuration options. Enable and disable legacy options that",
                    "11767": "\t\t * are available in DataTables.",
                    "11768": "\t\t *",
                    "11769": "\t\t *  @type object",
                    "11770": "\t\t */",
                    "11771": "\t\tlegacy: {",
                    "11772": "\t\t\t/**",
                    "11773": "\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing",
                    "11774": "\t\t\t * requests",
                    "11775": "\t\t\t *",
                    "11776": "\t\t\t *  @type boolean",
                    "11777": "\t\t\t *  @default null",
                    "11778": "\t\t\t */",
                    "11779": "\t\t\tajax: null",
                    "11780": "\t\t},",
                    "11781": "",
                    "11782": "",
                    "11783": "\t\t/**",
                    "11784": "\t\t * Pagination plug-in methods.",
                    "11785": "\t\t *",
                    "11786": "\t\t * Each entry in this object is a function and defines which buttons should",
                    "11787": "\t\t * be shown by the pagination rendering method that is used for the table:",
                    "11788": "\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the",
                    "11789": "\t\t * buttons are displayed in the document, while the functions here tell it",
                    "11790": "\t\t * what buttons to display. This is done by returning an array of button",
                    "11791": "\t\t * descriptions (what each button will do).",
                    "11792": "\t\t *",
                    "11793": "\t\t * Pagination types (the four built in options and any additional plug-in",
                    "11794": "\t\t * options defined here) can be used through the `paginationType`",
                    "11795": "\t\t * initialisation parameter.",
                    "11796": "\t\t *",
                    "11797": "\t\t * The functions defined take two parameters:",
                    "11798": "\t\t *",
                    "11799": "\t\t * 1. `{int} page` The current page index",
                    "11800": "\t\t * 2. `{int} pages` The number of pages in the table",
                    "11801": "\t\t *",
                    "11802": "\t\t * Each function is expected to return an array where each element of the",
                    "11803": "\t\t * array can be one of:",
                    "11804": "\t\t *",
                    "11805": "\t\t * * `first` - Jump to first page when activated",
                    "11806": "\t\t * * `last` - Jump to last page when activated",
                    "11807": "\t\t * * `previous` - Show previous page when activated",
                    "11808": "\t\t * * `next` - Show next page when activated",
                    "11809": "\t\t * * `{int}` - Show page of the index given",
                    "11810": "\t\t * * `{array}` - A nested array containing the above elements to add a",
                    "11811": "\t\t *   containing 'DIV' element (might be useful for styling).",
                    "11812": "\t\t *",
                    "11813": "\t\t * Note that DataTables v1.9- used this object slightly differently whereby",
                    "11814": "\t\t * an object with two functions would be defined for each plug-in. That",
                    "11815": "\t\t * ability is still supported by DataTables 1.10+ to provide backwards",
                    "11816": "\t\t * compatibility, but this option of use is now decremented and no longer",
                    "11817": "\t\t * documented in DataTables 1.10+.",
                    "11818": "\t\t *",
                    "11819": "\t\t *  @type object",
                    "11820": "\t\t *  @default {}",
                    "11821": "\t\t *",
                    "11822": "\t\t *  @example",
                    "11823": "\t\t *    // Show previous, next and current page buttons only",
                    "11824": "\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {",
                    "11825": "\t\t *      return [ 'previous', page, 'next' ];",
                    "11826": "\t\t *    };",
                    "11827": "\t\t */",
                    "11828": "\t\tpager: {},",
                    "11829": "",
                    "11830": "",
                    "11831": "\t\trenderer: {",
                    "11832": "\t\t\tpageButton: {},",
                    "11833": "\t\t\theader: {}",
                    "11834": "\t\t},",
                    "11835": "",
                    "11836": "",
                    "11837": "\t\t/**",
                    "11838": "\t\t * Ordering plug-ins - custom data source",
                    "11839": "\t\t *",
                    "11840": "\t\t * The extension options for ordering of data available here is complimentary",
                    "11841": "\t\t * to the default type based ordering that DataTables typically uses. It",
                    "11842": "\t\t * allows much greater control over the the data that is being used to",
                    "11843": "\t\t * order a column, but is necessarily therefore more complex.",
                    "11844": "\t\t *",
                    "11845": "\t\t * This type of ordering is useful if you want to do ordering based on data",
                    "11846": "\t\t * live from the DOM (for example the contents of an 'input' element) rather",
                    "11847": "\t\t * than just the static string that DataTables knows of.",
                    "11848": "\t\t *",
                    "11849": "\t\t * The way these plug-ins work is that you create an array of the values you",
                    "11850": "\t\t * wish to be ordering for the column in question and then return that",
                    "11851": "\t\t * array. The data in the array much be in the index order of the rows in",
                    "11852": "\t\t * the table (not the currently ordering order!). Which order data gathering",
                    "11853": "\t\t * function is run here depends on the `dt-init columns.orderDataType`",
                    "11854": "\t\t * parameter that is used for the column (if any).",
                    "11855": "\t\t *",
                    "11856": "\t\t * The functions defined take two parameters:",
                    "11857": "\t\t *",
                    "11858": "\t\t * 1. `{object}` DataTables settings object: see",
                    "11859": "\t\t *    {@link DataTable.models.oSettings}",
                    "11860": "\t\t * 2. `{int}` Target column index",
                    "11861": "\t\t *",
                    "11862": "\t\t * Each function is expected to return an array:",
                    "11863": "\t\t *",
                    "11864": "\t\t * * `{array}` Data for the column to be ordering upon",
                    "11865": "\t\t *",
                    "11866": "\t\t *  @type array",
                    "11867": "\t\t *",
                    "11868": "\t\t *  @example",
                    "11869": "\t\t *    // Ordering using `input` node values",
                    "11870": "\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )",
                    "11871": "\t\t *    {",
                    "11872": "\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {",
                    "11873": "\t\t *        return $('input', td).val();",
                    "11874": "\t\t *      } );",
                    "11875": "\t\t *    }",
                    "11876": "\t\t */",
                    "11877": "\t\torder: {},",
                    "11878": "",
                    "11879": "",
                    "11880": "\t\t/**",
                    "11881": "\t\t * Type based plug-ins.",
                    "11882": "\t\t *",
                    "11883": "\t\t * Each column in DataTables has a type assigned to it, either by automatic",
                    "11884": "\t\t * detection or by direct assignment using the `type` option for the column.",
                    "11885": "\t\t * The type of a column will effect how it is ordering and search (plug-ins",
                    "11886": "\t\t * can also make use of the column type if required).",
                    "11887": "\t\t *",
                    "11888": "\t\t * @namespace",
                    "11889": "\t\t */",
                    "11890": "\t\ttype: {",
                    "11891": "\t\t\t/**",
                    "11892": "\t\t\t * Automatic column class assignment",
                    "11893": "\t\t\t */",
                    "11894": "\t\t\tclassName: {},",
                    "11895": "",
                    "11896": "\t\t\t/**",
                    "11897": "\t\t\t * Type detection functions.",
                    "11898": "\t\t\t *",
                    "11899": "\t\t\t * The functions defined in this object are used to automatically detect",
                    "11900": "\t\t\t * a column's type, making initialisation of DataTables super easy, even",
                    "11901": "\t\t\t * when complex data is in the table.",
                    "11902": "\t\t\t *",
                    "11903": "\t\t\t * The functions defined take two parameters:",
                    "11904": "\t\t\t *",
                    "11905": "\t\t     *  1. `{*}` Data from the column cell to be analysed",
                    "11906": "\t\t     *  2. `{settings}` DataTables settings object. This can be used to",
                    "11907": "\t\t     *     perform context specific type detection - for example detection",
                    "11908": "\t\t     *     based on language settings such as using a comma for a decimal",
                    "11909": "\t\t     *     place. Generally speaking the options from the settings will not",
                    "11910": "\t\t     *     be required",
                    "11911": "\t\t\t *",
                    "11912": "\t\t\t * Each function is expected to return:",
                    "11913": "\t\t\t *",
                    "11914": "\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus",
                    "11915": "\t\t\t *   pass it on to the other type detection functions.",
                    "11916": "\t\t\t *",
                    "11917": "\t\t\t *  @type array",
                    "11918": "\t\t\t *",
                    "11919": "\t\t\t *  @example",
                    "11920": "\t\t\t *    // Currency type detection plug-in:",
                    "11921": "\t\t\t *    $.fn.dataTable.ext.type.detect.push(",
                    "11922": "\t\t\t *      function ( data, settings ) {",
                    "11923": "\t\t\t *        // Check the numeric part",
                    "11924": "\t\t\t *        if ( ! data.substring(1).match(/[0-9]/) ) {",
                    "11925": "\t\t\t *          return null;",
                    "11926": "\t\t\t *        }",
                    "11927": "\t\t\t *",
                    "11928": "\t\t\t *        // Check prefixed by currency",
                    "11929": "\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {",
                    "11930": "\t\t\t *          return 'currency';",
                    "11931": "\t\t\t *        }",
                    "11932": "\t\t\t *        return null;",
                    "11933": "\t\t\t *      }",
                    "11934": "\t\t\t *    );",
                    "11935": "\t\t\t */",
                    "11936": "\t\t\tdetect: [],",
                    "11937": "",
                    "11938": "\t\t\t/**",
                    "11939": "\t\t\t * Automatic renderer assignment",
                    "11940": "\t\t\t */",
                    "11941": "\t\t\trender: {},",
                    "11942": "",
                    "11943": "",
                    "11944": "\t\t\t/**",
                    "11945": "\t\t\t * Type based search formatting.",
                    "11946": "\t\t\t *",
                    "11947": "\t\t\t * The type based searching functions can be used to pre-format the",
                    "11948": "\t\t\t * data to be search on. For example, it can be used to strip HTML",
                    "11949": "\t\t\t * tags or to de-format telephone numbers for numeric only searching.",
                    "11950": "\t\t\t *",
                    "11951": "\t\t\t * Note that is a search is not defined for a column of a given type,",
                    "11952": "\t\t\t * no search formatting will be performed.",
                    "11953": "\t\t\t *",
                    "11954": "\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType",
                    "11955": "\t\t\t * for a column (or have it automatically detected for you by DataTables",
                    "11956": "\t\t\t * or a type detection plug-in), you will typically be using this for",
                    "11957": "\t\t\t * custom sorting, but it can also be used to provide custom searching",
                    "11958": "\t\t\t * by allowing you to pre-processing the data and returning the data in",
                    "11959": "\t\t\t * the format that should be searched upon. This is done by adding",
                    "11960": "\t\t\t * functions this object with a parameter name which matches the sType",
                    "11961": "\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>",
                    "11962": "\t\t\t * for searching data.",
                    "11963": "\t\t\t *",
                    "11964": "\t\t\t * The functions defined take a single parameter:",
                    "11965": "\t\t\t *",
                    "11966": "\t\t     *  1. `{*}` Data from the column cell to be prepared for searching",
                    "11967": "\t\t\t *",
                    "11968": "\t\t\t * Each function is expected to return:",
                    "11969": "\t\t\t *",
                    "11970": "\t\t\t * * `{string|null}` Formatted string that will be used for the searching.",
                    "11971": "\t\t\t *",
                    "11972": "\t\t\t *  @type object",
                    "11973": "\t\t\t *  @default {}",
                    "11974": "\t\t\t *",
                    "11975": "\t\t\t *  @example",
                    "11976": "\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {",
                    "11977": "\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );",
                    "11978": "\t\t\t *    }",
                    "11979": "\t\t\t */",
                    "11980": "\t\t\tsearch: {},",
                    "11981": "",
                    "11982": "",
                    "11983": "\t\t\t/**",
                    "11984": "\t\t\t * Type based ordering.",
                    "11985": "\t\t\t *",
                    "11986": "\t\t\t * The column type tells DataTables what ordering to apply to the table",
                    "11987": "\t\t\t * when a column is sorted upon. The order for each type that is defined,",
                    "11988": "\t\t\t * is defined by the functions available in this object.",
                    "11989": "\t\t\t *",
                    "11990": "\t\t\t * Each ordering option can be described by three properties added to",
                    "11991": "\t\t\t * this object:",
                    "11992": "\t\t\t *",
                    "11993": "\t\t\t * * `{type}-pre` - Pre-formatting function",
                    "11994": "\t\t\t * * `{type}-asc` - Ascending order function",
                    "11995": "\t\t\t * * `{type}-desc` - Descending order function",
                    "11996": "\t\t\t *",
                    "11997": "\t\t\t * All three can be used together, only `{type}-pre` or only",
                    "11998": "\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended",
                    "11999": "\t\t\t * that only `{type}-pre` is used, as this provides the optimal",
                    "12000": "\t\t\t * implementation in terms of speed, although the others are provided",
                    "12001": "\t\t\t * for compatibility with existing Javascript sort functions.",
                    "12002": "\t\t\t *",
                    "12003": "\t\t\t * `{type}-pre`: Functions defined take a single parameter:",
                    "12004": "\t\t\t *",
                    "12005": "\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering",
                    "12006": "\t\t\t *",
                    "12007": "\t\t\t * And return:",
                    "12008": "\t\t\t *",
                    "12009": "\t\t\t * * `{*}` Data to be sorted upon",
                    "12010": "\t\t\t *",
                    "12011": "\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort",
                    "12012": "\t\t\t * functions, taking two parameters:",
                    "12013": "\t\t\t *",
                    "12014": "\t\t     *  1. `{*}` Data to compare to the second parameter",
                    "12015": "\t\t     *  2. `{*}` Data to compare to the first parameter",
                    "12016": "\t\t\t *",
                    "12017": "\t\t\t * And returning:",
                    "12018": "\t\t\t *",
                    "12019": "\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower",
                    "12020": "\t\t\t *   than the second parameter, ===0 if the two parameters are equal and",
                    "12021": "\t\t\t *   >0 if the first parameter should be sorted height than the second",
                    "12022": "\t\t\t *   parameter.",
                    "12023": "\t\t\t *",
                    "12024": "\t\t\t *  @type object",
                    "12025": "\t\t\t *  @default {}",
                    "12026": "\t\t\t *",
                    "12027": "\t\t\t *  @example",
                    "12028": "\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter",
                    "12029": "\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {",
                    "12030": "\t\t\t *      \"string-pre\": function(x) {",
                    "12031": "\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );",
                    "12032": "\t\t\t *        return parseFloat( a );",
                    "12033": "\t\t\t *      }",
                    "12034": "\t\t\t *    } );",
                    "12035": "\t\t\t *",
                    "12036": "\t\t\t *  @example",
                    "12037": "\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method",
                    "12038": "\t\t\t *    $.extend( $.fn.dataTable.ext.order, {",
                    "12039": "\t\t\t *      \"string-case-asc\": function(x,y) {",
                    "12040": "\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));",
                    "12041": "\t\t\t *      },",
                    "12042": "\t\t\t *      \"string-case-desc\": function(x,y) {",
                    "12043": "\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));",
                    "12044": "\t\t\t *      }",
                    "12045": "\t\t\t *    } );",
                    "12046": "\t\t\t */",
                    "12047": "\t\t\torder: {}",
                    "12048": "\t\t},",
                    "12049": "",
                    "12050": "\t\t/**",
                    "12051": "\t\t * Unique DataTables instance counter",
                    "12052": "\t\t *",
                    "12053": "\t\t * @type int",
                    "12054": "\t\t * @private",
                    "12055": "\t\t */",
                    "12056": "\t\t_unique: 0,",
                    "12057": "",
                    "12058": "",
                    "12059": "\t\t//",
                    "12060": "\t\t// Depreciated",
                    "12061": "\t\t// The following properties are retained for backwards compatibility only.",
                    "12062": "\t\t// The should not be used in new projects and will be removed in a future",
                    "12063": "\t\t// version",
                    "12064": "\t\t//",
                    "12065": "",
                    "12066": "\t\t/**",
                    "12067": "\t\t * Version check function.",
                    "12068": "\t\t *  @type function",
                    "12069": "\t\t *  @depreciated Since 1.10",
                    "12070": "\t\t */",
                    "12071": "\t\tfnVersionCheck: DataTable.fnVersionCheck,",
                    "12072": "",
                    "12073": "",
                    "12074": "\t\t/**",
                    "12075": "\t\t * Index for what 'this' index API functions should use",
                    "12076": "\t\t *  @type int",
                    "12077": "\t\t *  @deprecated Since v1.10",
                    "12078": "\t\t */",
                    "12079": "\t\tiApiIndex: 0,",
                    "12080": "",
                    "12081": "",
                    "12082": "\t\t/**",
                    "12083": "\t\t * Software version",
                    "12084": "\t\t *  @type string",
                    "12085": "\t\t *  @deprecated Since v1.10",
                    "12086": "\t\t */",
                    "12087": "\t\tsVersion: DataTable.version",
                    "12088": "\t};",
                    "12089": "",
                    "12090": "",
                    "12091": "\t//",
                    "12092": "\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts",
                    "12093": "\t//",
                    "12094": "\t$.extend( _ext, {",
                    "12095": "\t\tafnFiltering: _ext.search,",
                    "12096": "\t\taTypes:       _ext.type.detect,",
                    "12097": "\t\tofnSearch:    _ext.type.search,",
                    "12098": "\t\toSort:        _ext.type.order,",
                    "12099": "\t\tafnSortData:  _ext.order,",
                    "12100": "\t\taoFeatures:   _ext.feature,",
                    "12101": "\t\toStdClasses:  _ext.classes,",
                    "12102": "\t\toPagination:  _ext.pager",
                    "12103": "\t} );",
                    "12104": "",
                    "12105": "",
                    "12106": "\t$.extend( DataTable.ext.classes, {",
                    "12107": "\t\tcontainer: 'dt-container',",
                    "12108": "\t\tempty: {",
                    "12109": "\t\t\trow: 'dt-empty'",
                    "12110": "\t\t},",
                    "12111": "\t\tinfo: {",
                    "12112": "\t\t\tcontainer: 'dt-info'",
                    "12113": "\t\t},",
                    "12114": "\t\tlength: {",
                    "12115": "\t\t\tcontainer: 'dt-length',",
                    "12116": "\t\t\tselect: 'dt-input'",
                    "12117": "\t\t},",
                    "12118": "\t\torder: {",
                    "12119": "\t\t\tcanAsc: 'dt-orderable-asc',",
                    "12120": "\t\t\tcanDesc: 'dt-orderable-desc',",
                    "12121": "\t\t\tisAsc: 'dt-ordering-asc',",
                    "12122": "\t\t\tisDesc: 'dt-ordering-desc',",
                    "12123": "\t\t\tnone: 'dt-orderable-none',",
                    "12124": "\t\t\tposition: 'sorting_'",
                    "12125": "\t\t},",
                    "12126": "\t\tprocessing: {",
                    "12127": "\t\t\tcontainer: 'dt-processing'",
                    "12128": "\t\t},",
                    "12129": "\t\tscrolling: {",
                    "12130": "\t\t\tbody: 'dt-scroll-body',",
                    "12131": "\t\t\tcontainer: 'dt-scroll',",
                    "12132": "\t\t\tfooter: {",
                    "12133": "\t\t\t\tself: 'dt-scroll-foot',",
                    "12134": "\t\t\t\tinner: 'dt-scroll-footInner'",
                    "12135": "\t\t\t},",
                    "12136": "\t\t\theader: {",
                    "12137": "\t\t\t\tself: 'dt-scroll-head',",
                    "12138": "\t\t\t\tinner: 'dt-scroll-headInner'",
                    "12139": "\t\t\t}",
                    "12140": "\t\t},",
                    "12141": "\t\tsearch: {",
                    "12142": "\t\t\tcontainer: 'dt-search',",
                    "12143": "\t\t\tinput: 'dt-input'",
                    "12144": "\t\t},",
                    "12145": "\t\ttable: 'dataTable',",
                    "12146": "\t\ttbody: {",
                    "12147": "\t\t\tcell: '',",
                    "12148": "\t\t\trow: ''",
                    "12149": "\t\t},",
                    "12150": "\t\tthead: {",
                    "12151": "\t\t\tcell: '',",
                    "12152": "\t\t\trow: ''",
                    "12153": "\t\t},",
                    "12154": "\t\ttfoot: {",
                    "12155": "\t\t\tcell: '',",
                    "12156": "\t\t\trow: ''",
                    "12157": "\t\t},",
                    "12158": "\t\tpaging: {",
                    "12159": "\t\t\tactive: 'current',",
                    "12160": "\t\t\tbutton: 'dt-paging-button',",
                    "12161": "\t\t\tcontainer: 'dt-paging',",
                    "12162": "\t\t\tdisabled: 'disabled'",
                    "12163": "\t\t}",
                    "12164": "\t} );",
                    "12165": "",
                    "12166": "",
                    "12167": "\tvar extPagination = DataTable.ext.pager;",
                    "12168": "",
                    "12169": "\t// Paging buttons configuration",
                    "12170": "\t$.extend( extPagination, {",
                    "12171": "\t\tsimple: function () {",
                    "12172": "\t\t\treturn [ 'previous', 'next' ];",
                    "12173": "\t\t},",
                    "12174": "",
                    "12175": "\t\tfull: function () {",
                    "12176": "\t\t\treturn [  'first', 'previous', 'next', 'last' ];",
                    "12177": "\t\t},",
                    "12178": "",
                    "12179": "\t\tnumbers: function () {",
                    "12180": "\t\t\treturn [ 'numbers' ];",
                    "12181": "\t\t},",
                    "12182": "",
                    "12183": "\t\tsimple_numbers: function () {",
                    "12184": "\t\t\treturn [ 'previous', 'numbers', 'next' ];",
                    "12185": "\t\t},",
                    "12186": "",
                    "12187": "\t\tfull_numbers: function () {",
                    "12188": "\t\t\treturn [ 'first', 'previous', 'numbers', 'next', 'last' ];",
                    "12189": "\t\t},",
                    "12190": "",
                    "12191": "\t\tfirst_last: function () {",
                    "12192": "\t\t\treturn ['first', 'last'];",
                    "12193": "\t\t},",
                    "12194": "",
                    "12195": "\t\tfirst_last_numbers: function () {",
                    "12196": "\t\t\treturn ['first', 'numbers', 'last'];",
                    "12197": "\t\t},",
                    "12198": "",
                    "12199": "\t\t// For testing and plug-ins to use",
                    "12200": "\t\t_numbers: _pagingNumbers,",
                    "12201": "",
                    "12202": "\t\t// Number of number buttons - legacy, use `numbers` option for paging feature",
                    "12203": "\t\tnumbers_length: 7",
                    "12204": "\t} );",
                    "12205": "",
                    "12206": "",
                    "12207": "\t$.extend( true, DataTable.ext.renderer, {",
                    "12208": "\t\tpagingButton: {",
                    "12209": "\t\t\t_: function (settings, buttonType, content, active, disabled) {",
                    "12210": "\t\t\t\tvar classes = settings.oClasses.paging;",
                    "12211": "\t\t\t\tvar btnClasses = [classes.button];",
                    "12212": "\t\t\t\tvar btn;",
                    "12213": "",
                    "12214": "\t\t\t\tif (active) {",
                    "12215": "\t\t\t\t\tbtnClasses.push(classes.active);",
                    "12216": "\t\t\t\t}",
                    "12249": "\tvar _filterString = function (stripHtml, diacritics) {",
                    "12261": "\t\t\tif (diacritics) {",
                    "12262": "\t\t\t\tstr = _normalize(str, true);",
                    "12640": "\t\tif (! val) {",
                    "12906": "\t\t\t\t\tvar orderedColumns = sorting.map( function (val) {",
                    "12908": "\t\t\t\t\t} ).join(',');",
                    "12919": "\t\t\t\t\tvar sortIdx = orderedColumns.indexOf( indexes.toArray().join(',') );",
                    "12934": "\t\t\t\t\tif ( sortIdx === 0 && orderedColumns.length === indexes.count() ) {",
                    "13030": "\t\tif (! $('#' + tid+'_info', settings.nWrapper).length) {",
                    "13196": "\t// - numbers - number of buttons to show - must be odd",
                    "13204": "\t\t\tnumbers: DataTable.ext.pager.numbers_length,",
                    "13205": "\t\t\ttype: settings.sPaginationType",
                    "13206": "\t\t}, opts)",
                    "13238": "\t\t\t\t\t\t? _pagingNumbers(page, pages, opts.numbers)",
                    "13299": "\t\t\t$(host).outerHeight() >= ($(buttonEls[0]).outerHeight() * 2) - 10",
                    "13382": "\tfunction _pagingNumbers ( page, pages, buttons ) {",
                    "13385": "\t\t\thalf = Math.floor(buttons / 2);",
                    "13408": "\t\t\tnumbers = _range(0, buttons-2);",
                    "13409": "\t\t\tnumbers.push('ellipsis', pages-1);",
                    "13412": "\t\t\tnumbers = _range(pages-(buttons-2), pages);",
                    "13413": "\t\t\tnumbers.unshift(0, 'ellipsis');",
                    "13416": "\t\t\tnumbers = _range(page-half+2, page+half-1);",
                    "13417": "\t\t\tnumbers.push('ellipsis', pages-1);",
                    "13418": "\t\t\tnumbers.unshift(0, 'ellipsis');",
                    "13586": " * 2020 SpryMedia Ltd - datatables.net/license",
                    "13637": " * DataTables integration for Bootstrap 5. This requires Bootstrap 5 and",
                    "13638": " * DataTables 2 or newer."
                }
            }
        },
        {
            "commit": "54bfcb8bc3aa1d15cf20821dc5f3747892011272",
            "timestamp": "2024-07-12T22:59:48+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "7": " *   https://datatables.net/download/#bs5/dt-2.0.8",
                    "10": " *   DataTables 2.0.8",
                    "13": "/*! DataTables 2.0.8",
                    "20": " * @version     2.0.8",
                    "566": "\t\tbuilder: \"bs5/dt-2.0.8\",",
                    "7575": "\t\tif ( _fnDataSource( settings ) == 'ssp' ) {",
                    "7576": "\t\t\t// In server-side processing mode, most options are irrelevant since",
                    "7577": "\t\t\t// rows not shown don't exist and the index order is the applied order",
                    "7578": "\t\t\t// Removed is a special case - for consistency just return an empty",
                    "7579": "\t\t\t// array",
                    "7580": "\t\t\treturn search === 'removed' ?",
                    "7581": "\t\t\t\t[] :",
                    "7582": "\t\t\t\t_range( 0, displayMaster.length );",
                    "7583": "\t\t}",
                    "7584": "",
                    "8256": "\t\tif ( ctx.length && this.length && ctx[0].aoData[ this[0] ] ) {",
                    "8279": "\tvar __re_column_selector = /^([^:]+)?:(name|title|visIdx|visible)$/;",
                    "8351": "\t\t\t\t\t\tif (match[1]) {",
                    "8352": "\t\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );",
                    "8353": "\t\t\t\t\t\t\t// Visible index given, convert to column index",
                    "8354": "\t\t\t\t\t\t\tif ( idx < 0 ) {",
                    "8355": "\t\t\t\t\t\t\t\t// Counting from the right",
                    "8356": "\t\t\t\t\t\t\t\tvar visColumns = columns.map( function (col,i) {",
                    "8357": "\t\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;",
                    "8358": "\t\t\t\t\t\t\t\t} );",
                    "8359": "\t\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];",
                    "8360": "\t\t\t\t\t\t\t}",
                    "8361": "\t\t\t\t\t\t\t// Counting from the left",
                    "8362": "\t\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];",
                    "8364": "",
                    "8365": "\t\t\t\t\t\t// `:visible` on its own",
                    "8366": "\t\t\t\t\t\treturn columns.map( function (col, i) {",
                    "8367": "\t\t\t\t\t\t\treturn col.bVisible ? i : null;",
                    "8368": "\t\t\t\t\t\t} );",
                    "9643": "\tDataTable.version = \"2.0.8\";"
                },
                "deleted": {
                    "7": " *   https://datatables.net/download/#bs5/dt-2.0.7",
                    "10": " *   DataTables 2.0.7",
                    "13": "/*! DataTables 2.0.7",
                    "20": " * @version     2.0.7",
                    "566": "\t\tbuilder: \"bs5/dt-2.0.7\",",
                    "8246": "\t\tif ( ctx.length && this.length ) {",
                    "8269": "\tvar __re_column_selector = /^([^:]+):(name|title|visIdx|visible)$/;",
                    "8341": "\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );",
                    "8342": "\t\t\t\t\t\t// Visible index given, convert to column index",
                    "8343": "\t\t\t\t\t\tif ( idx < 0 ) {",
                    "8344": "\t\t\t\t\t\t\t// Counting from the right",
                    "8345": "\t\t\t\t\t\t\tvar visColumns = columns.map( function (col,i) {",
                    "8346": "\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;",
                    "8347": "\t\t\t\t\t\t\t} );",
                    "8348": "\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];",
                    "8350": "\t\t\t\t\t\t// Counting from the left",
                    "8351": "\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];",
                    "9626": "\tDataTable.version = \"2.0.7\";"
                }
            }
        }
    ],
    "global_domains.py": [
        {
            "commit": "d6b97090fab5eba429a79c35735a0760b2fa9ee2",
            "timestamp": "2024-02-25T23:26:46+01:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "13": "if not 2 <= len(sys.argv) <= 3:",
                    "14": "    print(f\"usage: {sys.argv[0]} <OUTPUT-FILE> [GIT-REF]\")",
                    "21": "GIT_REF = 'main' if len(sys.argv) == 2 else sys.argv[2]",
                    "23": "BASE_URL = f'https://github.com/bitwarden/server/raw/{GIT_REF}'",
                    "24": "ENUMS_URL = f'{BASE_URL}/src/Core/Enums/GlobalEquivalentDomainsType.cs'",
                    "25": "DOMAIN_LISTS_URL = f'{BASE_URL}/src/Core/Utilities/StaticStore.cs'",
                    "80": "with open(file=OUTPUT_FILE, mode='w', encoding='utf-8') as f:"
                },
                "deleted": {
                    "13": "if not (2 <= len(sys.argv) <= 3):",
                    "14": "    print(\"usage: %s <OUTPUT-FILE> [GIT-REF]\" % sys.argv[0])",
                    "21": "GIT_REF = 'master' if len(sys.argv) == 2 else sys.argv[2]",
                    "23": "BASE_URL = 'https://github.com/bitwarden/server/raw/%s' % GIT_REF",
                    "24": "ENUMS_URL = '%s/src/Core/Enums/GlobalEquivalentDomainsType.cs' % BASE_URL",
                    "25": "DOMAIN_LISTS_URL = '%s/src/Core/Utilities/StaticStore.cs' % BASE_URL",
                    "80": "with open(OUTPUT_FILE, 'w') as f:"
                }
            }
        },
        {
            "commit": "a2bf8def2a34d0c362115c5964846d0ee2ef311f",
            "timestamp": "2024-06-23T21:31:02+02:00",
            "author": "Daniel Garc\u00eda",
            "diff": {
                "added": {
                    "74": "    entry[\"type\"] = enums[name]",
                    "75": "    entry[\"domains\"] = domain_list",
                    "76": "    entry[\"excluded\"] = False"
                },
                "deleted": {
                    "74": "    entry[\"Type\"] = enums[name]",
                    "75": "    entry[\"Domains\"] = domain_list",
                    "76": "    entry[\"Excluded\"] = False"
                }
            }
        }
    ],
    "admin.js": [
        {
            "commit": "54bfcb8bc3aa1d15cf20821dc5f3747892011272",
            "timestamp": "2024-07-12T22:59:48+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "101": "    const svgOfActiveBtn = btnToActive.querySelector(\"span use\").textContent;",
                    "110": "    activeThemeIcon.textContent = svgOfActiveBtn;"
                },
                "deleted": {
                    "101": "    const svgOfActiveBtn = btnToActive.querySelector(\"span use\").innerText;",
                    "110": "    activeThemeIcon.innerText = svgOfActiveBtn;"
                }
            }
        },
        {
            "commit": "669b9db7583327f506a94da03c3cbb6838c0062e",
            "timestamp": "2024-08-18T21:04:22+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "52": "            if (respJson.errorModel && respJson.errorModel.message) {",
                    "53": "                return respJson.errorModel.message;"
                },
                "deleted": {
                    "52": "            if (respJson.ErrorModel && respJson.ErrorModel.Message) {",
                    "53": "                return respJson.ErrorModel.Message;"
                }
            }
        }
    ],
    "admin_settings.js": [
        {
            "commit": "54bfcb8bc3aa1d15cf20821dc5f3747892011272",
            "timestamp": "2024-07-12T22:59:48+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "125": "        if (el.textContent.toLowerCase().includes(\"risks\") ) {"
                },
                "deleted": {
                    "125": "        if (el.innerText.toLowerCase().includes(\"risks\") ) {"
                }
            }
        }
    ],
    "admin_users.js": [
        {
            "commit": "54bfcb8bc3aa1d15cf20821dc5f3747892011272",
            "timestamp": "2024-07-12T22:59:48+02:00",
            "author": "Mathijs van Veluw",
            "diff": {
                "added": {
                    "201": "    document.getElementById(\"userOrgTypeDialogOrgName\").textContent = orgName;",
                    "202": "    document.getElementById(\"userOrgTypeDialogUserEmail\").textContent = userEmail;",
                    "210": "    document.getElementById(\"userOrgTypeDialogOrgName\").textContent = \"\";",
                    "211": "    document.getElementById(\"userOrgTypeDialogUserEmail\").textContent = \"\";"
                },
                "deleted": {
                    "201": "    document.getElementById(\"userOrgTypeDialogTitle\").innerHTML = `<b>Update User Type:</b><br><b>Organization:</b> ${orgName}<br><b>User:</b> ${userEmail}`;",
                    "209": "    document.getElementById(\"userOrgTypeDialogTitle\").innerHTML = \"\";"
                }
            }
        }
    ]
}