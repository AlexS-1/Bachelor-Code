{
  "Repository" : "Bachelor-Code/.git",
  "Revision" : "HEAD",
  "ObjectId" : "2bfdaaeca6f4bc1b69403beb494198e8364ba925",
  "CommitTime" : "2024-11-19T17:23:46Z",
  "Files" : {
    "build/XESConversion.py" : {
      "ObjectId" : "b060dedde034c8e8cf02b7e67d7d447d41056c69",
      "LastModified" : "2024-11-19T17:23:46Z",
      "FileType" : "PYTHON",
      "0" : {
        "Text" : "# Traverse through the commits in the repository\n# Only save commits, that contain at least one file of the format {language_file_extension}",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Analyze each file modified in the commit",
        "Line" : 20,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# only store file data for Rust files",
        "Line" : 22,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# For added diff ispect lines filter out comments",
        "Line" : 40,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# For deleted diff ispect lines filter out comments",
        "Line" : 51,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "# Generate keywords based on the commit message and type of changes\n# file_data[\"keywords\"] = extract_keywords(commit.msg, modified_file)\n# Extract type of commit from commit message\n# file_data[\"activity\"] = extract_activity(commit.msg)",
        "Line" : 68,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "# Determine basic keywords based on the commit message",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Use commit message keywords to determine activity type",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Set current line for each analysis",
        "Line" : 112,
        "CharPositionInLine" : 16
      },
      "9" : {
        "Text" : "# In case of a starting multiline comment start adding future lines without comment symbol ",
        "Line" : 116,
        "CharPositionInLine" : 20
      },
      "10" : {
        "Text" : "# In case of comment add them to existing dict if they directly follow",
        "Line" : 119,
        "CharPositionInLine" : 20
      },
      "11" : {
        "Text" : "# or create new one",
        "Line" : 131,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# In case of no comment add lines to existing dict if line number directly follows",
        "Line" : 136,
        "CharPositionInLine" : 20
      },
      "13" : {
        "Text" : "# Or create new one",
        "Line" : 143,
        "CharPositionInLine" : 20
      },
      "14" : {
        "Text" : "# Disable multiline comments when symbol found",
        "Line" : 148,
        "CharPositionInLine" : 20
      },
      "15" : {
        "Text" : "# Store last modified timestamps for each line",
        "Line" : 158,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# print(\"Starting to analyse commit: \", commit[\"commit\"])",
        "Line" : 161,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Track modified lines",
        "Line" : 163,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Compare with comments",
        "Line" : 168,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Save the processed commit data to a JSON file",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Create a new EventLog object",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Iterate over each commit entry in the data",
        "Line" : 195,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Create a trace for the file",
        "Line" : 197,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# Extract event attributes",
        "Line" : 202,
        "CharPositionInLine" : 12
      },
      "24" : {
        "Text" : "# Add the event to the trace",
        "Line" : 216,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# Add the trace to the log",
        "Line" : 219,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Export the log to an XES file",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# Create the XES log from the commit data",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Save the XES log to a file",
        "Line" : 232,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Example repository URL",
        "Line" : 237,
        "CharPositionInLine" : 59
      },
      "30" : {
        "Text" : "# commits_data = analyze_commits(repo_url, \"py\", datetime(2015,2,1), datetime.today(), \"#\")\n# save_to_json(commits_data, \"Data/commits_data.json\")\n# save_to_xes(commits_data, \"Data/commits_data.xes\")",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Test case",
        "Line" : 248,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 32
    }
  },
  "FileTypes" : {
    "PYTHON" : 1
  },
  "ElapsedTime" : 956
}