{
    "test.py": [
        {
            "commit": "202468fb39d473251ab81eb3037227cf7af47344",
            "timestamp": "2024-12-04T00:35:22+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "1": "from pydriller import Repository",
                    "2": "import json",
                    "3": "from build.utils import save_to_json, list_to_dict",
                    "4": "from datetime import datetime",
                    "5": "",
                    "6": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):",
                    "7": "    \"\"\"",
                    "8": "    Extracts the source code of a specific commit tagged in the repository.",
                    "9": "",
                    "10": "    :param repo_path: Path to the local Git repository.",
                    "11": "    :param tag_name: The name of the tag to fetch.",
                    "12": "    :return: A dictionary containing file paths and their contents at the given commit.",
                    "13": "    \"\"\"",
                    "14": "    source_code = []",
                    "15": "",
                    "16": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                    "17": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                    "18": "        for modified_file in commit.modified_files:",
                    "19": "            # Save the file path and its source code",
                    "20": "            if modified_file.source_code:",
                    "21": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                    "22": "                    comit = {",
                    "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                    "24": "                    }",
                    "25": "                    source_code.append(comit)",
                    "26": "",
                    "27": "    return source_code",
                    "28": "",
                    "29": "# Example usage",
                    "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "31": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                    "32": "dt1 = datetime(2024,11,21)",
                    "33": "dt2 = datetime(2024,11,22)",
                    "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                    "35": "save_to_json(source_code, \"Tests/exports.json\")"
                },
                "deleted": {}
            },
            "source_code": {
                "1": "from pydriller import Repository",
                "2": "import json",
                "3": "from build.utils import save_to_json, list_to_dict",
                "4": "from datetime import datetime",
                "5": "",
                "6": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):",
                "7": "    \"\"\"",
                "8": "    Extracts the source code of a specific commit tagged in the repository.",
                "9": "",
                "10": "    :param repo_path: Path to the local Git repository.",
                "11": "    :param tag_name: The name of the tag to fetch.",
                "12": "    :return: A dictionary containing file paths and their contents at the given commit.",
                "13": "    \"\"\"",
                "14": "    source_code = []",
                "15": "",
                "16": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                "17": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                "18": "        for modified_file in commit.modified_files:",
                "19": "            # Save the file path and its source code",
                "20": "            if modified_file.source_code:",
                "21": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                "22": "                    comit = {",
                "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                "24": "                    }",
                "25": "                    source_code.append(comit)",
                "26": "",
                "27": "    return source_code",
                "28": "",
                "29": "# Example usage",
                "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                "31": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                "32": "dt1 = datetime(2024,11,21)",
                "33": "dt2 = datetime(2024,11,22)",
                "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                "35": "save_to_json(source_code, \"Tests/exports.json\")",
                "36": ""
            }
        },
        {
            "commit": "c92ae279606c2cdf0e62136cd793b188fda08371",
            "timestamp": "2024-12-04T14:36:49+01:00",
            "author": "alexander.schranner",
            "diff": {
                "added": {
                    "3": "from build.pydriller import get_commits_data",
                    "4": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                    "5": "from build.utils import save_to_json",
                    "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                    "7": "from build.xes_conversion import convert_json_to_xes",
                    "8": "from datetime import datetime, timezone",
                    "9": "import os",
                    "10": "import subprocess",
                    "11": "import shutil",
                    "15": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                    "20": "    END DOCSTRING",
                    "27": "            # NORMAL Save the file path and its source code",
                    "29": "                # BLOCK: Multiple lines",
                    "30": "                # of comment",
                    "33": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data",
                    "36": "                    # print(commit) #COMMENTED-OUT",
                    "41": "repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "43": "start_time = datetime(2024,12,3)",
                    "44": "end_time = datetime(2024,12,4)",
                    "45": "repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                    "46": "temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                    "47": "clone_path = os.path.join(temp_dir, repo_name)",
                    "48": "",
                    "49": "subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                    "50": "",
                    "51": "# # Paths",
                    "52": "repo_path = clone_path",
                    "53": "jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                    "54": "file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                    "55": "",
                    "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                    "57": "save_to_json(commits_data, \"Toy-Example/commits_data.json\")",
                    "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                    "59": "        commits_data = json.load(json_file)",
                    "60": "",
                    "61": "for file, commits in commits_data.items():",
                    "62": "    for commit in commits:",
                    "63": "        tag = \"-target=\" + commit[\"commit\"]",
                    "64": "        output = run_comment_lister(repo_path, jar_path, tag)",
                    "65": "        # Parse output as JSON",
                    "66": "        try:",
                    "67": "            comment_data = json.loads(output)",
                    "68": "        except json.JSONDecodeError as e:",
                    "69": "            print(f\"Failed to parse CommentLister output: {e}\")",
                    "70": "            break",
                    "71": "        # Filter comments by time",
                    "72": "        commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                    "73": "        if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                    "74": "            commit[\"comments\"] = filtered_comments[file]",
                    "75": "        else:",
                    "76": "            print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                    "77": "            print(\"file could have been deleted\")",
                    "78": "            commit[\"comments\"] = {}",
                    "79": "# Save filtered comments on your system",
                    "80": "save_to_json(commits_data, \"Toy-Example/filtered_commits_data.json\")",
                    "81": "shutil.rmtree(clone_path)",
                    "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                    "83": "    data = json.load(json_file)",
                    "84": "# analyse_diff_comments(data)",
                    "85": "blockify_comments(data)",
                    "86": "save_to_json(data, \"Toy-Example/blockified_comments_data.json\")",
                    "87": "with open(\"Toy-Example/blockified_comments_data.json\", \"r\") as json_file:",
                    "88": "    data = json.load(json_file)",
                    "89": "blockify_comments2(data)",
                    "90": "save_to_json(data, \"Toy-Example/blockified_comments2_data.json\")",
                    "91": "with open(\"Toy-Example/blockified_comments2_data.json\", \"r\") as json_file:",
                    "92": "    data = json.load(json_file)",
                    "93": "d = extract_later_modified_comments(data)",
                    "94": "save_to_json(d, \"Toy-Example/analysis_results.json\")",
                    "95": "with open(\"Toy-Example/analysis_results.json\", \"r\") as json_file:",
                    "96": "    data = json.load(json_file)",
                    "97": "d = clean(data)",
                    "98": "save_to_json(d, \"Toy-Example/clean_analysis_results.json\")",
                    "99": "with open(\"Toy-Example/clean_analysis_results.json\", \"r\") as json_file:",
                    "100": "    data = json.load(json_file)",
                    "101": "d = classify_comments(data)",
                    "102": "save_to_json(d, \"Toy-Example/clean_analysis_results2.json\")",
                    "103": "print(\"Average duration:\", average_comment_update_time(d))",
                    "104": "convert_json_to_xes(d, 'Toy-Example/output.xes')"
                },
                "deleted": {
                    "3": "from build.utils import save_to_json, list_to_dict",
                    "4": "from datetime import datetime",
                    "8": "    Extracts the source code of a specific commit tagged in the repository.",
                    "19": "            # Save the file path and its source code",
                    "23": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\"))",
                    "30": "repo_path = \"https://github.com/AlexS-1/Bachelor-Code\"",
                    "32": "dt1 = datetime(2024,11,21)",
                    "33": "dt2 = datetime(2024,11,22)",
                    "34": "source_code = get_source_code_from_tag(repo_path, tag_name, dt1, dt2)",
                    "35": "save_to_json(source_code, \"Tests/exports.json\")"
                }
            },
            "source_code": {
                "1": "from pydriller import Repository",
                "2": "import json",
                "3": "from build.pydriller import get_commits_data",
                "4": "from build.comment_lister import run_comment_lister, filter_comments_by_time",
                "5": "from build.utils import save_to_json",
                "6": "from build.analysis import analyse_diff_comments, blockify_comments, blockify_comments2, extract_later_modified_comments, clean, average_comment_update_time, classify_comments",
                "7": "from build.xes_conversion import convert_json_to_xes",
                "8": "from datetime import datetime, timezone",
                "9": "import os",
                "10": "import subprocess",
                "11": "import shutil",
                "12": "",
                "13": "def get_source_code_from_tag(repo_path, tag_name, dt1, dt2):",
                "14": "    \"\"\"",
                "15": "    DOCSTRIING: Extracts the source code of a specific commit tagged in the repository.",
                "16": "",
                "17": "    :param repo_path: Path to the local Git repository.",
                "18": "    :param tag_name: The name of the tag to fetch.",
                "19": "    :return: A dictionary containing file paths and their contents at the given commit.",
                "20": "    END DOCSTRING",
                "21": "    \"\"\"",
                "22": "    source_code = []",
                "23": "",
                "24": "    for commit in Repository(repo_path, since=dt1, to=dt2).traverse_commits():",
                "25": "        print(f\"Processing commit: {commit.hash} tagged as {tag_name}\")",
                "26": "        for modified_file in commit.modified_files:",
                "27": "            # NORMAL Save the file path and its source code",
                "28": "            if modified_file.source_code:",
                "29": "                # BLOCK: Multiple lines",
                "30": "                # of comment",
                "31": "                if modified_file.filename.find(\".py\") != -1 and modified_file.filename.find(\".pyc\") == -1:",
                "32": "                    comit = {",
                "33": "                        commit.hash + \"---\" + modified_file.filename: list_to_dict(modified_file.source_code.split(\"\\n\")) #INLINE: identify each block of data",
                "34": "                    }",
                "35": "                    source_code.append(comit)",
                "36": "                    # print(commit) #COMMENTED-OUT",
                "37": "",
                "38": "    return source_code",
                "39": "",
                "40": "# Example usage",
                "41": "repo_url = \"https://github.com/AlexS-1/Bachelor-Code\"",
                "42": "tag_name = \"a1ad5c2cb35d621f2b187166af65a2b2ee3ea45e\"",
                "43": "start_time = datetime(2024,12,3)",
                "44": "end_time = datetime(2024,12,4)",
                "45": "repo_name = os.path.basename(repo_url).replace(\".git\", \"\")",
                "46": "temp_dir = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/tmp\"",
                "47": "clone_path = os.path.join(temp_dir, repo_name)",
                "48": "",
                "49": "subprocess.run(['git', 'clone', repo_url, clone_path], check=True)",
                "50": "",
                "51": "# # Paths",
                "52": "repo_path = clone_path",
                "53": "jar_path = \"/Users/as/Library/Mobile Documents/com~apple~CloudDocs/Dokumente/Studium/Bachelor-Thesis/CommentLister/target/CommentLister.jar\"",
                "54": "file_types = [\".c\", \".c\", \".cc\", \".cp\", \".cpp\", \".cx\", \".cxx\", \".c+\", \".c++\", \".h\", \".hh\", \".hxx\", \".h+\", \".h++\", \".hp\", \".hpp\", \".java\", \".js\", \".cs\", \".py\", \".php\", \".rb\"]",
                "55": "",
                "56": "commits_data = get_commits_data(repo_path, start_time, end_time, file_types)",
                "57": "save_to_json(commits_data, \"Toy-Example/commits_data.json\")",
                "58": "with open (\"Toy-Example/commits_data.json\", \"r\") as json_file:",
                "59": "        commits_data = json.load(json_file)",
                "60": "",
                "61": "for file, commits in commits_data.items():",
                "62": "    for commit in commits:",
                "63": "        tag = \"-target=\" + commit[\"commit\"]",
                "64": "        output = run_comment_lister(repo_path, jar_path, tag)",
                "65": "        # Parse output as JSON",
                "66": "        try:",
                "67": "            comment_data = json.loads(output)",
                "68": "        except json.JSONDecodeError as e:",
                "69": "            print(f\"Failed to parse CommentLister output: {e}\")",
                "70": "            break",
                "71": "        # Filter comments by time",
                "72": "        commit_hash, filtered_comments = filter_comments_by_time(comment_data, start_time, end_time)",
                "73": "        if commit[\"commit\"] == commit_hash and file in filtered_comments.keys():",
                "74": "            commit[\"comments\"] = filtered_comments[file]",
                "75": "        else:",
                "76": "            print(\"mismatch in commit and comment data or no comments in this commit for investigatet file\")",
                "77": "            print(\"file could have been deleted\")",
                "78": "            commit[\"comments\"] = {}",
                "79": "# Save filtered comments on your system",
                "80": "save_to_json(commits_data, \"Toy-Example/filtered_commits_data.json\")",
                "81": "shutil.rmtree(clone_path)",
                "82": "with open(\"Data/filtered_commits_data.json\", \"r\") as json_file:",
                "83": "    data = json.load(json_file)",
                "84": "# analyse_diff_comments(data)",
                "85": "blockify_comments(data)",
                "86": "save_to_json(data, \"Toy-Example/blockified_comments_data.json\")",
                "87": "with open(\"Toy-Example/blockified_comments_data.json\", \"r\") as json_file:",
                "88": "    data = json.load(json_file)",
                "89": "blockify_comments2(data)",
                "90": "save_to_json(data, \"Toy-Example/blockified_comments2_data.json\")",
                "91": "with open(\"Toy-Example/blockified_comments2_data.json\", \"r\") as json_file:",
                "92": "    data = json.load(json_file)",
                "93": "d = extract_later_modified_comments(data)",
                "94": "save_to_json(d, \"Toy-Example/analysis_results.json\")",
                "95": "with open(\"Toy-Example/analysis_results.json\", \"r\") as json_file:",
                "96": "    data = json.load(json_file)",
                "97": "d = clean(data)",
                "98": "save_to_json(d, \"Toy-Example/clean_analysis_results.json\")",
                "99": "with open(\"Toy-Example/clean_analysis_results.json\", \"r\") as json_file:",
                "100": "    data = json.load(json_file)",
                "101": "d = classify_comments(data)",
                "102": "save_to_json(d, \"Toy-Example/clean_analysis_results2.json\")",
                "103": "print(\"Average duration:\", average_comment_update_time(d))",
                "104": "convert_json_to_xes(d, 'Toy-Example/output.xes')"
            }
        }
    ]
}